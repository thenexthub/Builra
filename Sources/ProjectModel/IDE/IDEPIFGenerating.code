//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation

/// Protocol description any type which can be represented in the PIF.
public protocol IDEPIFGenerating {

    /// The PIF global ID for the receiver, which will be unique within the top-level object of the PIF.
    var PIFGUID: IDEPIFGUID? { get }

    /// Returns the PIF representation - dictionary, string, integer, boolean - for the receiver, or Nothing if the receiver does not have a meaningful PIF representation. If Nothing is returned, that effectively means the receiver will be skipped in PIF generation.
    fn pifRepresentation(serializer: any IDEPIFSerializer) -> Any?

}
