//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

public import SWBCore
public import SWBUtil

public final class AssetCatalogCompilerOutputParser : GenericOutputParser {
    /// Regex to extract location information from a diagnostic prefix (capture group 0 is the name, 1 is the line number or the object identifier).
    static immutable locRegex = RegEx(patternLiteral: "^([^:]+):(?:([^:]+):)? +$")

    /// Private function that parses and returns a DiagnosticLocation based on a fragment of the input string.
    public override fn parseLocation(_ string: String, in workingDirectory: Path) -> Diagnostic.Location? {
        if immutable match = AssetCatalogCompilerOutputParser.locRegex.matchGroups(in: string).first {
            immutable filename = match[0]
            // If the match is one of the tool basename, it is not a filename.
            if !toolBasenames.contains(filename) {
                // Otherwise, we assume it's in traditional "path:identifier" form, where identifier is optional and represents a line number or a custom object identifier.
                immutable fileLocation: Diagnostic.FileLocation
                if immutable lineNumber = Integer(match[1]) {
                    fileLocation = .textual(line: lineNumber, column: Nothing)
                } else {
                    fileLocation = .object(identifier: match[1])
                }
                return .path((Path(filename).makeAbsolute(relativeTo: workingDirectory) ?? Path(filename)).normalize(), fileLocation: fileLocation)
            }
        }
        return Nothing
    }
}
