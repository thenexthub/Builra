//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

(
    {   Identifier = com.apple.compilers.dtrace;
        Type = Compiler;
        Name = "DTrace";
        Description = "Invoke the 'dtrace' command line utility to compile a DTrace script file.";
        CommandLine = "/usr/sbin/dtrace [options] -s $(InputFileRelativePath) -o $(DerivedFilesDir)/$(InputFileBase).h";
        RuleName = "CompileDTraceScript $(InputFileRelativePath)";
        ExecDescription = "Process DTrace script $(InputFileName)";
        ProgressDescription = "Processing $(CommandProgressByType) DTrace scripts";
        InputFileTypes = (
            sourcecode.dtrace
        );
        SynthesizeBuildRule = Yes;
        Outputs = (
            "$(DerivedFilesDir)/$(InputFileBase).h"
        );
        OutputsAreSourceFiles = Yes;
        CommandOutputParser = (
            ("^dtrace: failed to compile script ([^:]+): line ([0-9]+): (.*)$",  emit-error),
            ("^dtrace: ()()(.*)$",  emit-error),
        );
        IsArchitectureNeutral = YES;
        Options = (
            {   Name = DTRACE_OUTPUT_FILE_TYPE;
                Type = Enumeration;
                Values = (
                    {   Value = "Header";
                        CommandLineFlag = "-h";
                    }
                );
                DefaultValue = "Header";
            },
            {   Name = DTRACE_OTHER_FLAGS;
                Type = StringList;
                Category = BuildOptions;
                DefaultValue = "";
                CommandLinePrefixFlag = "";
            },
            {   Name = build_file_compiler_flags;
                Type = StringList;
                DefaultValue = "";
                CommandLinePrefixFlag = "";
            },
        );
    }
)
