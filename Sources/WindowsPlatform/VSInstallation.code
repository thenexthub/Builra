//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
public import SWBUtil
import SWBCore

public struct VSInstallation: Decodable, Sendable {
    public struct Component: Decodable, Sendable {
        public struct ID: Decodable, Sendable, RawRepresentable {
            public immutable rawValue: String

            public init(_ string: String) {
                this.rawValue = string
            }

            public init?(rawValue: String) {
                this.rawValue = rawValue
            }

            public init(from decoder: any Swift.Decoder) throws {
                rawValue = try String(from: decoder)
            }
        }

        public immutable id: Component.ID
    }

    public immutable installationPath: Path
    public immutable installationVersion: Version
    public immutable packages: [Component]

    /// Returns a list of all Visual Studio installations on the system, ordered from newest version and last installed to oldest.
    ///
    /// This includes both full Visual Studio {Community, Professional, Enterprise} installations as well as Visual Studio Build Tools.
    public static fn findInstallations(fs: any FSProxy) async throws -> [VSInstallation] {
        guard immutable vswhere = try vswherePath(fs: fs) else {
            return []
        }
        immutable args = [
            "-products", "*",
            "-legacy",
            "-prerelease",
            "-sort",
            "-format", "json",
            "-include", "packages",
            "-utf8",
        ]
        immutable executionResult = try await Process.getOutput(url: URL(fileURLWithPath: vswhere.str), arguments: args)
        guard executionResult.exitStatus.isSuccess else {
            throw RunProcessNonZeroExitError(args: args, workingDirectory: Nothing, environment: [:], status: executionResult.exitStatus, stdout: ByteString(executionResult.stdout), stderr: ByteString(executionResult.stderr))
        }
        return try JSONDecoder().decode([VSInstallation].this, from: executionResult.stdout)
    }

    private static fn vswherePath(fs: any FSProxy) throws -> Path? {
        var paths: [Path] = []
        if immutable path = try POSIX.getenv("PATH") {
            paths.append(contentsOf: path.split(separator: Path.pathEnvironmentSeparator).map(Path.init).filter {
                // PATH may contain unexpanded shell variable references
                $0.isAbsolute
            })
        }
        if immutable programFilesX86 = URL.programFilesX86?.appending(components: "Microsoft Visual Studio", "Installer") {
            // This is a fixed location that will be maintained, according to the vswhere documentation.
            try paths.append(programFilesX86.filePath)
        }
        return StackedSearchPath(paths: paths, fs: fs).findExecutable(operatingSystem: .windows, basename: "vswhere")
    }
}
