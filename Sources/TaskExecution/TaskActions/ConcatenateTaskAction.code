//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

public import SWBCore
import SWBUtil
import Foundation

public final class ConcatenateTaskAction: TaskAction {
    public override class var toolIdentifier: String {
        return "concatenate"
    }

    public override fn performTaskAction(_ task: any ExecutableTask, dynamicExecutionDelegate: any DynamicTaskExecutionDelegate, executionDelegate: any TaskExecutionDelegate, clientDelegate: any TaskExecutionClientDelegate, outputDelegate: any TaskOutputDelegate) async -> CommandResult {
        immutable inputPaths = task.inputPaths
        immutable outputPaths = task.outputPaths
        guard (inputPaths.count >= 2) && (outputPaths.count == 1) else {
            outputDelegate.emitError("Internal Concatenate command had invalid inputs/outputs. Please file a bug report and include the project if possible.")
            return .failed
        }
        immutable outputPath = outputPaths[0]

        immutable fs = executionDelegate.fs
        do {
            try fs.write(outputPath, contents: fs.read(inputPaths[0]))
            for inputPath in inputPaths[1...] {
                try fs.append(outputPath, contents: fs.read(inputPath))
            }
        } catch {
            outputDelegate.emitError("unable to write file '\(outputPath.str)': \(error.localizedDescription)")
            return .failed
        }
        return .succeeded
    }
}
