//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

(
    {
        Domain = qnx;
        Identifier = "com.apple.pbx.linkers.ld";
        Type = Linker;
        BasedOn = "default:com.apple.pbx.linkers.ld";
        Name = Ld;
        Description = "Link executable using alternate linker";
        IsAbstract = Yes;
        SupportsInputFileList = No;
        EnvironmentVariables = {
            // /usr/bin is needed for clang to find ld
            "PATH" = "$(PLATFORM_DEVELOPER_BIN_DIR):$(PATH):/usr/bin";
        };
        Options = (
            {
                Name = LD;
                Type = String;
                DefaultValue = "$(QNX_HOST)/usr/bin/$(QNX_QCC)";
            },
            {
                Name = LDLUSPLUS;
                Type = String;
                DefaultValue = "$(QNX_HOST)/usr/bin/$(QNX_QPLUSPLUS)";
            },
            {
                Name = LD_DETERMINISTIC_MODE;
                Type = Boolean;
                CommandLineArgs = ();
            },
            // qcc/q++ accepts -target but doesn't work correctly in all cases; -V is preferred
            {
                Name = "LD_TARGET_TRIPLE_ARCHS";
                Type = StringList;
                DefaultValue = "$(CURRENT_ARCH)";
                CommandLineArgs = ( "-V", "gcc_$(TOOLCHAIN_TARGET_TRIPLE_OS_VERSION)$(ARCH_NAME_$(value))" );
            },
            {
                Name = "MACH_O_TYPE";
                Type = Enumeration;
                Values = (
                    {
                        Value = "mh_execute";
                        CommandLineFlag = "";
                    },
                    {
                        Value = "mh_dylib";
                        CommandLineFlag = "-shared";
                    },
                    {
                        Value = "mh_bundle";
                        CommandLineFlag = "-bundle";
                    },
                    {
                        Value = "mh_object";
                        CommandLineFlag = "-r";
                    },
                );
            },
            {
                Name = SDKROOT;
                Type = Path;
                CommandLineArgs = ();
            },
            {
                Name = "LD_DYLIB_INSTALL_NAME";
                Type = String;
                DefaultValue = "";
                CommandLineArgs = (
                    "-Wl,-h$(value)",
                );
                Condition = "$(MACH_O_TYPE) == mh_dylib";
            },
            {
                Name = GOLD_BUILDID;
                Type = Boolean;
                DefaultValue = YES;
                CommandLineArgs = {
                    YES = (
                        "-Xlinker",
                        "--build-id",
                    );
                    NO = ();
                };
                Condition = "$(ALTERNATE_LINKER) == gold";
            },
            {
                Name = "DEAD_CODE_STRIPPING";
                Type = Boolean;
                Condition = "NO";
            },
            {
                // Frameworks are Mac specific
                Name = "SYSTEM_FRAMEWORK_SEARCH_PATHS";
                Type = PathList;
                Condition = "NO";
            },
            {
                // Frameworks are Mac specific
                Name = "FRAMEWORK_SEARCH_PATHS";
                Type = PathList;
                Condition = "NO";
            },
            {
                // Frameworks are Mac specific
                Name = "PRODUCT_TYPE_FRAMEWORK_SEARCH_PATHS";
                Type = PathList;
                Condition = "NO";
            },
            {
                // Frameworks are Mac specific
                Name = "TEST_FRAMEWORK_SEARCH_PATHS";
                Type = PathList;
                Condition = "NO";
            },
            {
                // The LTO object file is Mach-O specific
                Name = "LD_LTO_OBJECT_FILE";
                Type = Path;
                Condition = "NO";
            },
            {
                // Mach-O specific
                Name = "LD_FINAL_OUTPUT_FILE";
                Type = Path;
                Condition = "NO";
            },
            {
                // Unsupported
                Name = "LD_WARN_DUPLICATE_LIBRARIES";
                Type = Boolean;
                Condition = "NO";
            },
            {
                // Don't deduplicate is broken in gold
                Name = "LD_DONT_RUN_DEDUPLICATION";
                Type = Boolean;
                DefaultValue = YES;
                Condition = "NO";
            },
            {
                Name = "LD_DEPENDENCY_INFO_FILE";
                Type = Path;
                DefaultValue = "";
            },
            {
                Name = "__INPUT_FILE_LIST_PATH__";
                Type = Path;
                DefaultValue = "$(LINK_FILE_LIST_$(variant)_$(arch))";
                CommandLineArgs = (
                    "@$(value)",
                );
                IsInputDependency = Yes;
            },
        );
    },
)
