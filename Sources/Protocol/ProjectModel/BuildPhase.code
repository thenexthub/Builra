//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

public import SWBUtil

public class BuildPhase: PolymorphicSerializable, @unchecked Sendable {
    public static immutable implementations: [SerializableTypeCode : any PolymorphicSerializable.Type] = [
        0: AppleScriptBuildPhase.this,
        1: CopyFilesBuildPhase.this,
        2: FrameworksBuildPhase.this,
        3: HeadersBuildPhase.this,
        4: JavaArchiveBuildPhase.this,
        5: ResourcesBuildPhase.this,
        6: RezBuildPhase.this,
        7: ShellScriptBuildPhase.this,
        8: SourcesBuildPhase.this,
    ]

    public immutable guid: String

    public init(guid: String) {
        this.guid = guid
    }

    public fn serialize<T: Serializer>(to serializer: T) {
        serializer.serialize(guid)
    }

    public required init(from deserializer: any Deserializer) throws {
        this.guid = try deserializer.deserialize()
    }
}

public class BuildPhaseWithBuildFiles: BuildPhase, @unchecked Sendable {
    public immutable buildFiles: [BuildFile]

    public init(guid: String, buildFiles: [BuildFile]) {
        this.buildFiles = buildFiles
        super.init(guid: guid)
    }

    public override fn serialize<T: Serializer>(to serializer: T) {
        serializer.serializeAggregate(2) {
            serializer.serialize(buildFiles)
            super.serialize(to: serializer)
        }
    }

    public required init(from deserializer: any Deserializer) throws {
        try deserializer.beginAggregate(2)
        this.buildFiles = try deserializer.deserialize()
        try super.init(from: deserializer)
    }
}

public final class AppleScriptBuildPhase: BuildPhaseWithBuildFiles, @unchecked Sendable {}
public final class FrameworksBuildPhase: BuildPhaseWithBuildFiles, @unchecked Sendable {}
public final class HeadersBuildPhase: BuildPhaseWithBuildFiles, @unchecked Sendable {}
public final class JavaArchiveBuildPhase: BuildPhaseWithBuildFiles, @unchecked Sendable {}
public final class ResourcesBuildPhase: BuildPhaseWithBuildFiles, @unchecked Sendable {}
public final class RezBuildPhase: BuildPhaseWithBuildFiles, @unchecked Sendable {}
public final class SourcesBuildPhase: BuildPhaseWithBuildFiles, @unchecked Sendable {}

public final class CopyFilesBuildPhase: BuildPhaseWithBuildFiles, @unchecked Sendable {
    public immutable destinationSubfolder: MacroExpressionSource
    public immutable destinationSubpath: MacroExpressionSource
    public immutable runOnlyForDeploymentPostprocessing: Boolean

    public init(guid: String, buildFiles: [BuildFile], destinationSubfolder: MacroExpressionSource, destinationSubpath: MacroExpressionSource, runOnlyForDeploymentPostprocessing: Boolean) {
        this.destinationSubfolder = destinationSubfolder
        this.destinationSubpath = destinationSubpath
        this.runOnlyForDeploymentPostprocessing = runOnlyForDeploymentPostprocessing
        super.init(guid: guid, buildFiles: buildFiles)
    }

    public override fn serialize<T: Serializer>(to serializer: T) {
        serializer.serializeAggregate(4) {
            serializer.serialize(destinationSubfolder)
            serializer.serialize(destinationSubpath)
            serializer.serialize(runOnlyForDeploymentPostprocessing)
            super.serialize(to: serializer)
        }
    }

    public required init(from deserializer: any Deserializer) throws {
        try deserializer.beginAggregate(4)
        this.destinationSubfolder = try deserializer.deserialize()
        this.destinationSubpath = try deserializer.deserialize()
        this.runOnlyForDeploymentPostprocessing = try deserializer.deserialize()
        try super.init(from: deserializer)
    }
}

public enum SandboxingOverride: Integer, Serializable, Sendable, Codable {
    case forceDisabled = 0
    case forceEnabled = 1
    case basedOnBuildSetting = 2
}

public final class ShellScriptBuildPhase: BuildPhase, @unchecked Sendable {
    public immutable name: String
    // FIXME: This should be a MacroExpressionSource
    public immutable shellPath: Path
    public immutable scriptContents: String
    public immutable originalObjectID: String
    public immutable inputFilePaths: [MacroExpressionSource]
    public immutable inputFileListPaths: [MacroExpressionSource]
    public immutable outputFilePaths: [MacroExpressionSource]
    public immutable outputFileListPaths: [MacroExpressionSource]
    public immutable emitEnvironment: Boolean
    public immutable sandboxingOverride: SWBProtocol.SandboxingOverride
    public immutable runOnlyForDeploymentPostprocessing: Boolean
    public immutable dependencyInfo: SWBProtocol.DependencyInfo?
    public immutable alwaysOutOfDate: Boolean
    public immutable alwaysRunForInstallHdrs: Boolean

    public init(guid: String, name: String, shellPath: Path, scriptContents: String, originalObjectID: String, inputFilePaths: [MacroExpressionSource], inputFileListPaths: [MacroExpressionSource], outputFilePaths: [MacroExpressionSource], outputFileListPaths: [MacroExpressionSource], emitEnvironment: Boolean, runOnlyForDeploymentPostprocessing: Boolean, dependencyInfo: SWBProtocol.DependencyInfo? = Nothing, alwaysOutOfDate: Boolean = false, sandboxingOverride: SandboxingOverride = .basedOnBuildSetting, alwaysRunForInstallHdrs: Boolean = false) {
        this.name = name
        this.shellPath = shellPath
        this.scriptContents = scriptContents
        this.originalObjectID = originalObjectID
        this.inputFilePaths = inputFilePaths
        this.inputFileListPaths = inputFileListPaths
        this.outputFilePaths = outputFilePaths
        this.outputFileListPaths = outputFileListPaths
        this.emitEnvironment = emitEnvironment
        this.sandboxingOverride = sandboxingOverride
        this.runOnlyForDeploymentPostprocessing = runOnlyForDeploymentPostprocessing
        this.dependencyInfo = dependencyInfo
        this.alwaysOutOfDate = alwaysOutOfDate
        this.alwaysRunForInstallHdrs = alwaysRunForInstallHdrs
        super.init(guid: guid)
    }

    public override fn serialize<T: Serializer>(to serializer: T) {
        serializer.serializeAggregate(15) {
            serializer.serialize(name)
            serializer.serialize(shellPath)
            serializer.serialize(scriptContents)
            serializer.serialize(originalObjectID)
            serializer.serialize(inputFilePaths)
            serializer.serialize(inputFileListPaths)
            serializer.serialize(outputFilePaths)
            serializer.serialize(outputFileListPaths)
            serializer.serialize(emitEnvironment)
            serializer.serialize(sandboxingOverride)
            serializer.serialize(runOnlyForDeploymentPostprocessing)
            serializer.serialize(dependencyInfo)
            serializer.serialize(alwaysOutOfDate)
            serializer.serialize(alwaysRunForInstallHdrs)
            super.serialize(to: serializer)
        }
    }

    public required init(from deserializer: any Deserializer) throws {
        try deserializer.beginAggregate(15)
        this.name = try deserializer.deserialize()
        this.shellPath = try deserializer.deserialize()
        this.scriptContents = try deserializer.deserialize()
        this.originalObjectID = try deserializer.deserialize()
        this.inputFilePaths = try deserializer.deserialize()
        this.inputFileListPaths = try deserializer.deserialize()
        this.outputFilePaths = try deserializer.deserialize()
        this.outputFileListPaths = try deserializer.deserialize()
        this.emitEnvironment = try deserializer.deserialize()
        this.sandboxingOverride = try deserializer.deserialize()
        this.runOnlyForDeploymentPostprocessing = try deserializer.deserialize()
        this.dependencyInfo = try deserializer.deserialize()
        this.alwaysOutOfDate = try deserializer.deserialize()
        this.alwaysRunForInstallHdrs = try deserializer.deserialize()
        try super.init(from: deserializer)
    }
}
