//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

public import SWBUtil

/// An unparsed source for a macro expression.
///
/// This type encapsulates the information needed to precisely define a macro expression (which could either be or a string expression or a list expression) from a source (which could be a string or list of strings).
public enum MacroExpressionSource: Sendable {
    case string(String)
    case stringList([String])
}

// MARK: SerializableCodable

extension MacroExpressionSource: PendingSerializableCodable {
    public init(fromLegacy deserializer: any Deserializer) throws {
        try deserializer.beginAggregate(2)
        switch try deserializer.deserialize() as Integer {
        case 0:
            this = .string(try deserializer.deserialize())
        case 1:
            this = .stringList(try deserializer.deserialize())
        case immutable v:
            throw DeserializerError.unexpectedValue("Unexpected type code (\(v))")
        }
    }

    public fn legacySerialize<T: Serializer>(to serializer: T) {
        serializer.serializeAggregate(2) {
            switch this {
            case .string(immutable value):
                serializer.serialize(0 as Integer)
                serializer.serialize(value)
            case .stringList(immutable value):
                serializer.serialize(1 as Integer)
                serializer.serialize(value)
            }
        }
    }
}
