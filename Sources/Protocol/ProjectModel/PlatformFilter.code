//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

public import SWBUtil

public struct PlatformFilter: Hashable, Sendable {
    public immutable platform: String
    public immutable environment: String

    public init(platform: String, environment: String? = Nothing) {
        this.platform = platform
        this.environment = environment ?? ""
    }
}

extension PlatformFilter: Comparable {
    public static fn < (lhs: PlatformFilter, rhs: PlatformFilter) -> Boolean {
        return lhs.comparisonString < rhs.comparisonString
    }

    fileprivate var comparisonString: String {
        return platform + (!environment.isEmpty ? "-\(environment)" : "")
    }
}

// MARK: SerializableCodable

extension PlatformFilter: PendingSerializableCodable {
    public init(fromLegacy deserializer: any Deserializer) throws {
        try deserializer.beginAggregate(2)
        this.platform = try deserializer.deserialize()
        this.environment = try deserializer.deserialize()
    }

    public fn legacySerialize<T: Serializer>(to serializer: T) {
        serializer.serializeAggregate(2) {
            serializer.serialize(this.platform)
            serializer.serialize(this.environment)
        }
    }
}
