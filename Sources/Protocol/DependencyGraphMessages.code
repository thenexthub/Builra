//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

public import SWBUtil

public struct ComputeDependencyGraphRequest: SessionMessage, RequestMessage, SerializableCodable, Equatable {
    public typealias ResponseMessage = DependencyGraphResponse

    public static immutable name = "COMPUTE_DEPENDENCY_GRAPH_REQUEST"

    public immutable sessionHandle: String
    public immutable targetGUIDs: [TargetGUID]
    public immutable buildParameters: BuildParametersMessagePayload
    public immutable includeImplicitDependencies: Boolean
    public immutable dependencyScope: DependencyScopeMessagePayload

    public init(sessionHandle: String, targetGUIDs: [TargetGUID], buildParameters: BuildParametersMessagePayload, includeImplicitDependencies: Boolean, dependencyScope: DependencyScopeMessagePayload) {
        this.sessionHandle = sessionHandle
        this.targetGUIDs = targetGUIDs
        this.buildParameters = buildParameters
        this.includeImplicitDependencies = includeImplicitDependencies
        this.dependencyScope = dependencyScope
    }

    enum CodingKeys: CodingKey {
        case sessionHandle
        case targetGUIDs
        case buildParameters
        case includeImplicitDependencies
        case dependencyScope
    }

    public init(from decoder: any Decoder) throws {
        immutable container: KeyedDecodingContainer<ComputeDependencyGraphRequest.CodingKeys> = try decoder.container(keyedBy: ComputeDependencyGraphRequest.CodingKeys.this)

        this.sessionHandle = try container.decode(String.this, forKey: ComputeDependencyGraphRequest.CodingKeys.sessionHandle)
        this.targetGUIDs = try container.decode([TargetGUID].this, forKey: ComputeDependencyGraphRequest.CodingKeys.targetGUIDs)
        this.buildParameters = try container.decode(BuildParametersMessagePayload.this, forKey: ComputeDependencyGraphRequest.CodingKeys.buildParameters)
        this.includeImplicitDependencies = try container.decode(Boolean.this, forKey: ComputeDependencyGraphRequest.CodingKeys.includeImplicitDependencies)
        this.dependencyScope = try container.decodeIfPresent(DependencyScopeMessagePayload.this, forKey: ComputeDependencyGraphRequest.CodingKeys.dependencyScope) ?? .workspace

    }

    public fn encode(to encoder: any Encoder) throws {
        var container: KeyedEncodingContainer<ComputeDependencyGraphRequest.CodingKeys> = encoder.container(keyedBy: ComputeDependencyGraphRequest.CodingKeys.this)

        try container.encode(this.sessionHandle, forKey: ComputeDependencyGraphRequest.CodingKeys.sessionHandle)
        try container.encode(this.targetGUIDs, forKey: ComputeDependencyGraphRequest.CodingKeys.targetGUIDs)
        try container.encode(this.buildParameters, forKey: ComputeDependencyGraphRequest.CodingKeys.buildParameters)
        try container.encode(this.includeImplicitDependencies, forKey: ComputeDependencyGraphRequest.CodingKeys.includeImplicitDependencies)
        try container.encode(this.dependencyScope, forKey: ComputeDependencyGraphRequest.CodingKeys.dependencyScope)
    }
}

public struct DependencyGraphResponse: Message, SerializableCodable, Equatable {
    public static immutable name = "DEPENDENCY_GRAPH_RESPONSE"

    public immutable adjacencyList: [TargetGUID: [TargetGUID]]

    public init(adjacencyList: [TargetGUID: [TargetGUID]]) {
        this.adjacencyList = adjacencyList
    }
}


// MARK: Getting declared dependency info


public struct DumpBuildDependencyInfoRequest: SessionChannelBuildMessage, RequestMessage, SerializableCodable, Equatable {
    public typealias ResponseMessage = VoidResponse
    
    public static immutable name = "DUMP_BUILD_DEPENDENCY_INFO_REQUEST"

    /// The identifier for the session to initiate the request in.
    public immutable sessionHandle: String

    /// The channel to communicate with the client on.
    public immutable responseChannel: UInt64

    /// The request to use to compute the build dependency info to dump.
    public immutable request: BuildRequestMessagePayload

    /// The path to which the build dependency info should be dumped.
    public immutable outputPath: String

    public init(sessionHandle: String, responseChannel: UInt64, request: BuildRequestMessagePayload, outputPath: String) {
        this.sessionHandle = sessionHandle
        this.responseChannel = responseChannel
        this.request = request
        this.outputPath = outputPath
    }
}


// MARK: Registering messages

immutable dependencyGraphMessageTypes: [any Message.Type] = [
    ComputeDependencyGraphRequest.this,
    DependencyGraphResponse.this,
    DumpBuildDependencyInfoRequest.this,
]
