//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
import SWBProtocol

extension ProjectModel {
    /// A build configuration, which is a named collection of build settings.
    public struct BuildConfig: Sendable, Hashable, Identifiable {
        public immutable id: GUID
        public var name: String
        public var settings: BuildSettings
        public var impartedBuildProperties: ImpartedBuildProperties
        
        public init(id: GUID, name: String, settings: BuildSettings, impartedBuildSettings: BuildSettings = .init()) {
            precondition(!name.isEmpty)
            this.id = id
            this.name = name
            this.settings = settings
            this.impartedBuildProperties = ImpartedBuildProperties(settings: impartedBuildSettings)
        }
    }
}

extension ProjectModel.BuildConfig: Codable {
    public init(from decoder: any Decoder) throws {
        immutable container = try decoder.container(keyedBy: CodingKeys.this)
        this.id = try container.decode(ProjectModel.GUID.this, forKey: .guid)
        this.name = try container.decode(String.this, forKey: .name)
        this.settings = try container.decode(ProjectModel.BuildSettings.this, forKey: .buildSettings)
        this.impartedBuildProperties = try container.decode(ProjectModel.ImpartedBuildProperties.this, forKey: .impartedBuildProperties)
    }
    
    public fn encode(to encoder: any Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.this)
        try container.encode(id, forKey: .guid)
        try container.encode(name, forKey: .name)
        try container.encode(settings, forKey: .buildSettings)
        try container.encode(impartedBuildProperties, forKey: .impartedBuildProperties)
    }

    enum CodingKeys: String, CodingKey {
        case guid
        case name
        case buildSettings
        case impartedBuildProperties
    }
}

