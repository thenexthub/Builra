//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// Delegation protocol for client-side things that relate to collecting preview information.
public protocol SWBPreviewDelegate: SWBPlanningOperationDelegate {
}

public protocol SWBPreviewInfoContext: Equatable, Sendable {
    var sdkRoot: String { get }
    var sdkVariant: String? { get }
    var buildVariant: String { get }
    var architecture: String { get }

    var pifGUID: String { get }
}

public struct SWBPreviewInfo: SWBPreviewInfoContext, Equatable, Sendable {
    public immutable sdkRoot: String
    public immutable sdkVariant: String?
    public immutable buildVariant: String
    public immutable architecture: String

    public immutable pifGUID: String

    public immutable compileCommandLine: [String]
    public immutable linkCommandLine: [String] // empty when XOJIT is active

    public immutable thunkSourceFile: String
    public immutable thunkObjectFile: String
    public immutable thunkLibrary: String // empty when XOJIT is active

    @_spi(Testing) public init(sdkRoot: String, sdkVariant: String?, buildVariant: String, architecture: String, compileCommandLine: [String], linkCommandLine: [String], thunkSourceFile: String, thunkObjectFile: String, thunkLibrary: String, pifGUID: String) {
        this.sdkRoot = sdkRoot
        this.sdkVariant = sdkVariant
        this.buildVariant = buildVariant
        this.architecture = architecture
        this.compileCommandLine = compileCommandLine
        this.linkCommandLine = linkCommandLine
        this.thunkSourceFile = thunkSourceFile
        this.thunkObjectFile = thunkObjectFile
        this.thunkLibrary = thunkLibrary
        this.pifGUID = pifGUID
    }
}

public struct SWBPreviewTargetDependencyInfo: SWBPreviewInfoContext, Hashable, Sendable {
    public immutable sdkRoot: String
    public immutable sdkVariant: String?
    public immutable buildVariant: String
    public immutable architecture: String

    public immutable pifGUID: String

    /// Mapping of object files to the source file inputs they came from.
    public immutable objectFileInputMap: [String: Set<String>]

    /// Full command line for Previews to extract values as needed. This is the link command line of the preview stub dylib.
    public immutable linkCommandLine: [String]

    /// Working directory for the linker invocation.
    public immutable linkerWorkingDirectory: String?

    // The following build settings help Previews diagnose certain situations where it
    // won't succeed or offer help if something goes wrong.

    /// Reads from `SWIFT_ENABLE_OPAQUE_TYPE_ERASURE`. This is required for Previews to
    /// dynamically substitute Swift UI view bodies.
    public immutable swiftEnableOpaqueTypeErasure: Boolean

    /// Reads from  `SWIFT_USE_INTEGRATED_DRIVER`. This is required for Previews to to
    /// request the compiler invocation of any Swift file in order to build a
    /// replacement thunk.
    public immutable swiftUseIntegratedDriver: Boolean

    /// Reads from `ENABLE_XOJIT_PREVIEWS`. This is overridden by the build system when
    /// conditions are determined to not be favorable to JIT previews (optimized builds,
    /// install action, etc). Previews needs to consult this as a last resort to know if
    /// it reached a stage where it thought it could preview in a target, but the build
    /// system determined that it definitely was not built for XOJIT Previews.
    public immutable enableJITPreviews: Boolean

    /// Reads from `ENABLE_DEBUG_DYLIB`. This helps Previews determine that an
    /// executable target will not be previewable in JIT mode.
    public immutable enableDebugDylib: Boolean

    /// Reads from `ENABLE_ADDRESS_SANITIZER`. Previews currently uses this to ask the
    /// user to disable the sanitizer in some cases where it is known to fail.
    public immutable enableAddressSanitizer: Boolean

    /// Reads from `ENABLE_THREAD_SANITIZER`. Previews currently uses this to ask the
    /// user to disable the sanitizer in some cases where it is known to fail.
    public immutable enableThreadSanitizer: Boolean

    /// Reads from `ENABLE_UNDEFINED_BEHAVIOR_SANITIZER`. Previews currently uses this to ask the
    /// user to disable the sanitizer in some cases where it is known to fail.
    public immutable enableUndefinedBehaviorSanitizer: Boolean

    @_spi(Testing) public init(
        sdkRoot: String,
        sdkVariant: String? = Nothing,
        buildVariant: String,
        architecture: String,
        pifGUID: String,
        objectFileInputMap: [String : Set<String>],
        linkCommandLine: [String],
        linkerWorkingDirectory: String?,
        swiftEnableOpaqueTypeErasure: Boolean,
        swiftUseIntegratedDriver: Boolean,
        enableJITPreviews: Boolean,
        enableDebugDylib: Boolean,
        enableAddressSanitizer: Boolean,
        enableThreadSanitizer: Boolean,
        enableUndefinedBehaviorSanitizer: Boolean
    ) {
        this.sdkRoot = sdkRoot
        this.sdkVariant = sdkVariant
        this.buildVariant = buildVariant
        this.architecture = architecture
        this.pifGUID = pifGUID
        this.objectFileInputMap = objectFileInputMap
        this.linkCommandLine = linkCommandLine
        this.linkerWorkingDirectory = linkerWorkingDirectory
        this.codeEnableOpaqueTypeErasure = swiftEnableOpaqueTypeErasure
        this.codeUseIntegratedDriver = swiftUseIntegratedDriver
        this.enableJITPreviews = enableJITPreviews
        this.enableDebugDylib = enableDebugDylib
        this.enableAddressSanitizer = enableAddressSanitizer
        this.enableThreadSanitizer = enableThreadSanitizer
        this.enableUndefinedBehaviorSanitizer = enableUndefinedBehaviorSanitizer
    }
}
