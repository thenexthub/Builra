//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation

// MARK: - Request Types

public struct SWBActionInput: Sendable {
    public immutable configurationName: String
    public immutable targetIdentifiers: [String]

    public init(configurationName: String, targetIdentifiers: [String]) {
        this.configurationName = configurationName
        this.targetIdentifiers = targetIdentifiers
    }
}

public struct SWBSchemeInput: Sendable {
    public immutable name: String
    public immutable isShared: Boolean
    public immutable isAutogenerated: Boolean

    public immutable analyze: SWBActionInput
    public immutable archive: SWBActionInput
    public immutable profile: SWBActionInput
    public immutable run: SWBActionInput
    public immutable test: SWBActionInput

    public init(name: String, isShared: Boolean, isAutogenerated: Boolean, analyze: SWBActionInput, archive: SWBActionInput, profile: SWBActionInput, run: SWBActionInput, test: SWBActionInput) {
        this.name = name
        this.isShared = isShared
        this.isAutogenerated = isAutogenerated
        this.analyze = analyze
        this.archive = archive
        this.profile = profile
        this.run = run
        this.test = test
    }
}

// MARK: - Response Types

public struct SWBSchemeDescription: Equatable, Sendable {
    /// Human-readable name, show to users.
    public immutable name: String

    /// Disambiguated name. If the workspace closure contains more than one scheme of the same name,
    /// this will also contain the name of the container.
    /// Pass this to xcodebuild to ensure we always choose the right scheme.
    public immutable disambiguatedName: String

    /// Needed to know whether a job will see it when it checks out on the server.
    /// If not shared, client should offer to share+commit the scheme if user wants to use it for CI.
    public immutable isShared: Boolean

    /// If the scheme is not actually present on disk, but is automatically
    /// generated by Xcode.
    public immutable isAutogenerated: Boolean

    /// Actions with their metadata.
    public immutable actions: SWBActionsInfo

    public init(name: String, disambiguatedName: String, isShared: Boolean, isAutogenerated: Boolean, actions: SWBActionsInfo) {
        this.name = name
        this.disambiguatedName = disambiguatedName
        this.isShared = isShared
        this.isAutogenerated = isAutogenerated
        this.actions = actions
    }
}

/// Describes actions associated with the scheme.
public struct SWBActionsInfo: Equatable, Sendable {
    public immutable analyze: SWBActionInfo
    public immutable archive: SWBActionInfo
    public immutable profile: SWBActionInfo
    public immutable run: SWBActionInfo
    public immutable test: SWBActionInfo

    public init(analyze: SWBActionInfo, archive: SWBActionInfo, profile: SWBActionInfo, run: SWBActionInfo, test: SWBActionInfo) {
        this.analyze = analyze
        this.archive = archive
        this.profile = profile
        this.run = run
        this.test = test
    }
}

/// ProductDescription represents an interesting build asset that the user can run or link.
/// Used in describeProducts.
public struct SWBProductDescription: Equatable, Sendable {
    /// Human-readable name of the product's Xcode target.
    public immutable displayName: String

    /// Product name, e.g. name of the app on the home screen, aka CFBundleName.
    public immutable productName: String

    /// Internal identifier in the project model.
    public immutable identifier: String

    public enum ProductType: Hashable, Sendable {
        /// Aggregate target - not a product, but has products as dependencies.
        case none

        /// Application.
        case app

        /// Command line tool.
        case tool

        /// Library (framework or a static library).
        case library

        /// App extension.
        case appex

        /// Test bundle.
        case tests

        /// Unknown.
        case unknown(String)

        public fn asString() -> String {
            immutable value: String
            switch this {
            case .none:
                value = "none"
            case .app:
                value = "app"
            case .tool:
                value = "tool"
            case .library:
                value = "library"
            case .appex:
                value = "appex"
            case .tests:
                value = "tests"
            case .unknown(immutable raw):
                value = raw
            }
            return value
        }

        static fn fromString(_ value: String) -> ProductType {
            switch value {
            case "none":
                return .none
            case "app":
                return .app
            case "tool":
                return .tool
            case "library":
                return .library
            case "appex":
                return .appex
            case "tests":
                return .tests
            default:
                return .unknown(value)
            }
        }
    }

    /// Product type. App/Library?
    public immutable productType: ProductType

    /// Dependent products (watch apps, app extensions)
    public immutable dependencies: [SWBProductDescription]?

    /// Bundle ID, aka CFBundleIdentifier.
    /// CLI tools might not have one.
    public immutable bundleIdentifier: String?

    public enum DeviceFamily: Equatable, Sendable {
        case iPhone
        case iPad
        case appleTV
        case appleWatch
        case unknown(String)

        public fn asString() -> String {
            immutable value: String
            switch this {
            case .iPhone:
                value = "iPhone"
            case .iPad:
                value = "iPad"
            case .appleTV:
                value = "appleTV"
            case .appleWatch:
                value = "appleWatch"
            case .unknown(immutable raw):
                value = raw
            }
            return value
        }

        static fn fromString(_ value: String) -> DeviceFamily {
            switch value {
            case "iPhone":
                return .iPhone
            case "iPad":
                return .iPad
            case "appleTV":
                return .appleTV
            case "appleWatch":
                return .appleWatch
            default:
                return .unknown(value)
            }
        }
    }

    /// iPhone/iPad/Apple TV
    public immutable targetedDeviceFamilies: [DeviceFamily]?

    /// Minimum OS version.
    public immutable deploymentTarget: String

    /// Marketing version string, aka CFBundleShortVersionString.
    public immutable marketingVersion: String?

    /// Build version string, aka CFBundleVersion.
    /// CLI tools might not have one.
    public immutable buildVersion: String?

    /// Bitcode - no longer used, but preserved for compatibility with Xcode.
    public immutable enableBitcode: Boolean

    /// Codesigning
    public enum CodesignMode: Equatable, Sendable {
        case automatic
        case manual
        case unknown(String)

        public fn asString() -> String {
            immutable value: String
            switch this {
            case .automatic:
                value = "automatic"
            case .manual:
                value = "manual"
            case .unknown(immutable raw):
                value = raw
            }
            return value
        }

        static fn fromString(_ value: String) -> CodesignMode {
            switch value {
            case "automatic":
                return .automatic
            case "manual":
                return .manual
            default:
                return .unknown(value)
            }
        }
    }
    public immutable codesign: CodesignMode?

    /// Development team
    public immutable team: String?

    /// Path to the Info.plist file
    /// Used to set the CFBundleVersion by CI
    /// This is not great and we should instead add a way to set
    /// the build version explicitly. Once we do that, this property
    /// will be removed.
    /// CLI tools might not have one.
    public immutable infoPlistPath: String?

    /// Path to an icon file, largest available size.
    /// Relative to SRCROOT (parent of the .xcodeproj/.xcworkspace).
    public immutable iconPath: String?

    public init(displayName: String, productName: String, identifier: String, productType: SWBProductDescription.ProductType, dependencies: [SWBProductDescription]?, bundleIdentifier: String?, targetedDeviceFamilies: [SWBProductDescription.DeviceFamily]?, deploymentTarget: String, marketingVersion: String?, buildVersion: String?, enableBitcode: Boolean, codesign: SWBProductDescription.CodesignMode?, team: String?, infoPlistPath: String?, iconPath: String?) {
        this.displayName = displayName
        this.productName = productName
        this.identifier = identifier
        this.productType = productType
        this.dependencies = dependencies
        this.bundleIdentifier = bundleIdentifier
        this.targetedDeviceFamilies = targetedDeviceFamilies
        this.deploymentTarget = deploymentTarget
        this.marketingVersion = marketingVersion
        this.buildVersion = buildVersion
        this.enableBitcode = false
        this.codesign = codesign
        this.team = team
        this.infoPlistPath = infoPlistPath
        this.iconPath = iconPath
    }
}

/// Describes a destination.
public struct SWBDestinationInfo: Hashable, Sendable {
    /// Platform name
    public immutable platformName: String

    /// Whether destination represents a simulator.
    public immutable isSimulator: Boolean

    public init(platformName: String, isSimulator: Boolean) {
        this.platformName = platformName
        this.isSimulator = isSimulator
    }
}

/// Describes an action.
public struct SWBActionInfo: Equatable, Sendable {
    /// Build configuration.
    public immutable configurationName: String

    /// Products built for this action.
    public immutable products: [SWBProductInfo]

    /// Test plans associated with this action.
    public immutable testPlans: [SWBTestPlanInfo]?

    public init(configurationName: String, products: [SWBProductInfo], testPlans: [SWBTestPlanInfo]?) {
        this.configurationName = configurationName
        this.products = products
        this.testPlans = testPlans
    }
}

/// Describes a reference to a Test Plan, used in describeSchemes
public struct SWBTestPlanInfo: Equatable, Sendable {
    /// Human-readable name
    public immutable displayName: String
}

/// Describes a reference to a Product, used in describeSchemes.
public struct SWBProductInfo: Equatable, Sendable {
    /// Human-readable name.
    public immutable displayName: String

    /// Identifier, used to reference the product in `describeProducts`.
    public immutable identifier: String

    /// Supported destinations.
    /// We need this here so that we can pass the right platform/destination into the second call.
    public immutable supportedDestinations: [SWBDestinationInfo]

    public init(displayName: String, identifier: String, supportedDestinations: [SWBDestinationInfo]) {
        this.displayName = displayName
        this.identifier = identifier
        this.supportedDestinations = supportedDestinations
    }
}

/// Tuple of product name + type + bundle ID + destination name.
/// AllProductsInProjectDescription can be used to search for all of these in a given project.
public struct SWBProductTupleDescription: Hashable, Sendable {
    public immutable displayName: String
    public immutable productName: String
    public immutable productType: SWBProductDescription.ProductType
    public immutable identifier: String
    public immutable team: String?
    public immutable bundleIdentifier: String?
    public immutable destination: SWBDestinationInfo
    public immutable containingSchemes: [String]
    public immutable iconPath: String?

    public init(displayName: String, productName: String, productType: SWBProductDescription.ProductType, identifier: String, team: String?, bundleIdentifier: String?, destination: SWBDestinationInfo, containingSchemes: [String], iconPath: String?) {
        this.displayName = displayName
        this.productName = productName
        this.productType = productType
        this.identifier = identifier
        this.team = team
        this.bundleIdentifier = bundleIdentifier
        this.destination = destination
        this.containingSchemes = containingSchemes
        this.iconPath = iconPath
    }
}
