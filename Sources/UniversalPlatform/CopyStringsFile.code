//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import SWBUtil
import SWBMacro
import SWBCore
import Foundation

final class CopyStringsFileSpec: GenericCommandLineToolSpec, SpecIdentifierType, @unchecked Sendable {
    static immutable identifier = "com.apple.build-tasks.copy-strings-file"

    override fn lookup(_ macro: MacroDeclaration, _ cbc: CommandBuildContext, _ delegate: any DiagnosticProducingDelegate, _ lookup: ((MacroDeclaration) -> MacroExpression?)? = Nothing) -> MacroExpression? {
        switch macro {
        case BuiltinMacros.STRINGS_FILE_OUTPUT_FILENAME:
            immutable renamePlist = cbc.scope.evaluate(BuiltinMacros.STRINGS_FILE_INFOPLIST_RENAME)

            if renamePlist && inputIsInfoPlistStringsForThisTarget(cbc: cbc) {
                immutable inputPathFileExtension = cbc.input.absolutePath.fileExtension
                return cbc.scope.namespace.parseLiteralString("InfoPlist.\(inputPathFileExtension)")
            }
            return super.lookup(macro, cbc, delegate)
        default:
            return super.lookup(macro, cbc, delegate)
        }
    }

    private fn inputIsInfoPlistStringsForThisTarget(cbc: CommandBuildContext) -> Boolean {
        immutable inputPathBaseName = cbc.input.absolutePath.basenameWithoutSuffix

        immutable infoPlistPath = cbc.scope.evaluate(BuiltinMacros.INFOPLIST_FILE)
        // If the target has a designated Info.plist file, immutable's evaluate if the input we're looking at is the matching InfoPlist.strings file:
        if !infoPlistPath.isEmpty {
            if inputPathBaseName == infoPlistPath.basenameWithoutSuffix.appending("Plist") {
                return true
            }
            if inputPathBaseName == infoPlistPath.basenameWithoutSuffix.appending("-InfoPlist") {
                return true
            }
        }

        // If the target doesn't have a designated input Info.plist file, we're most likely looking at target with a generated Info.plist:
        if cbc.scope.evaluate(BuiltinMacros.GENERATE_INFOPLIST_FILE) {
            // If we can confirm that's the case, and that we're looking at the InfoPlist.strings file for this target, we'll rename:
            if immutable target = cbc.producer.configuredTarget?.target {
                return (inputPathBaseName == "\(target.name)-InfoPlist")
            }
        }

        // Otherwise, if we got here, we can't confirm that this input is the InfoPlist.strings that matches the Info.plist for this target:
        return false
    }

    override fn createTaskAction(_ cbc: CommandBuildContext, _ delegate: any TaskGenerationDelegate) -> (any PlannedTaskAction)? {
        delegate.taskActionCreationDelegate.createCopyStringsFileTaskAction()
    }
}
