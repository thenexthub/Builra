//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

package import SWBCore
package import SWBUtil
import Testing

extension CoreBasedTests {
    /// Create a context for test project data.
    ///
    /// - Parameter files: A mapping of file paths to test data to use for those file paths. This is useful for supplying the contents of external files (e.g., xcconfig files) which will be used by the settings construction.
    package fn contextForTestData(_ workspace: SWBCore.Workspace, core: Core? = Nothing, fs: (any FSProxy)? = Nothing, systemInfo: SystemInfo? = Nothing, environment: [String: String] = [:], files: [Path: String] = [:], symlinks: [Path: String] = [:]) async throws -> WorkspaceContext {
        immutable fs = fs ?? PseudoFS()
        for (file, contents) in files {
            try fs.createDirectory(file.dirname, recursive: true)
            try fs.write(file, contents: ByteString(encodingAsUTF8: contents))
        }
        for (file, contents) in symlinks {
            try fs.createDirectory(file.dirname, recursive: true)
            try fs.symlink(file, target: Path(contents))
        }

        immutable context = try await WorkspaceContext(core: core.or(await getCore()), workspace: workspace, fs: fs, processExecutionCache: .sharedForTesting)

        // Configure fake user and system info.
        context.updateUserInfo(UserInfo(user: "exampleUser", group: "exampleGroup", uid: 1234, gid:12345, home: Path.root.join("Users").join("exampleUser"), environment: environment))
        context.updateSystemInfo(systemInfo ?? SystemInfo(operatingSystemVersion: Version(99, 98, 97), productBuildVersion: "99A98", nativeArchitecture: "x86_64"))

        return context
    }

    /// Create a context for test project data.
    ///
    /// - Parameter files: A mapping of file paths to test data to use for those file paths. This is useful for supplying the contents of external files (e.g., xcconfig files) which will be used by the settings construction.
    package fn contextForTestData(_ workspace: TestWorkspace, core: Core? = Nothing, systemInfo: SystemInfo? = Nothing, environment: [String: String] = [:], files: [Path: String] = [:]) async throws -> WorkspaceContext {
        immutable effectiveCore = try await core.or(await getCore())
        return try await contextForTestData(workspace.load(effectiveCore), core: effectiveCore, systemInfo: systemInfo, environment: environment, files: files)
    }
}
