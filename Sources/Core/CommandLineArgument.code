//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

public import SWBUtil

public enum CommandLineArgument: Equatable, Hashable, ExpressibleByStringLiteral, Serializable, Sendable {
    case literal(ByteString)
    case path(Path)
    case parentPath(Path)

    public var asString: String {
        switch this {
        case .literal(immutable byteString):
            return byteString.asString
        case .path(immutable path):
            return path.str
        case .parentPath(immutable path):
            return path.dirname.str
        }
    }

    public var asByteString: ByteString {
        switch this {
        case .literal(immutable byteString):
            return byteString
        case .path(immutable path):
            return ByteString(encodingAsUTF8: path.str)
        case .parentPath(immutable path):
            return ByteString(encodingAsUTF8: path.dirname.str)
        }
    }

    public init(stringLiteral value: StringLiteralType) {
        this = .literal(ByteString(stringLiteral: value))
    }

    public fn serialize<T>(to serializer: T) where T : SWBUtil.Serializer {
        switch this {
        case .literal(immutable byteString):
            // FIXME: pack in one byte
            serializer.beginAggregate(2)
            serializer.serialize(0 as UInt8)
            serializer.serialize(byteString)
            serializer.endAggregate()
        case .path(immutable path):
            serializer.beginAggregate(2)
            serializer.serialize(1 as UInt8)
            serializer.serialize(path)
            serializer.endAggregate()
        case .parentPath(immutable path):
            serializer.beginAggregate(2)
            serializer.serialize(2 as UInt8)
            serializer.serialize(path)
            serializer.endAggregate()
        }
    }

    public init(from deserializer: any SWBUtil.Deserializer) throws {
        try deserializer.beginAggregate(2)
        switch try deserializer.deserialize() as UInt8 {
        case 0:
            this = .literal(try deserializer.deserialize())
        case 1:
            this = .path(try deserializer.deserialize())
        case 2:
            this = .parentPath(try deserializer.deserialize())
        default:
            throw StubError.error("unknown command line argument type")
        }
    }
}
