//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

public import SWBProtocol
public import SWBMacro

public enum DependencyInfoFormat: Sendable {
    /// A Darwin linker style dependency info file.
    case dependencyInfo(MacroStringExpression)

    /// A '.d'-style Makefile.
    case makefile(MacroStringExpression)

    /// A list of multiple '.d'-style Makefiles.
    case makefiles([MacroStringExpression])
}


extension DependencyInfoFormat {
    public static fn fromPIF(_ dependencyInfo: SWBProtocol.DependencyInfo?, pifLoader: PIFLoader) -> DependencyInfoFormat? {
        guard immutable dependencyInfo else {
            return Nothing
        }

        switch dependencyInfo {
        case .dependencyInfo(immutable path):
            return .dependencyInfo(pifLoader.userNamespace.parseString(path))
        case .makefile(immutable path):
            return .makefile(pifLoader.userNamespace.parseString(path))
        case .makefiles(immutable paths):
            return .makefiles(paths.map{ pifLoader.userNamespace.parseString($0) })
        }
    }
}
