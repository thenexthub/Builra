//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import SWBUtil
public import SWBMacro


/// Encapsulates a type of action for a build rule.  Concrete types of actions involve the ability to invoke a build tool or to run a custom shell script.
public protocol BuildRuleAction: AnyObject, CustomStringConvertible, Sendable {
    var inputFileGroupingStrategies: [any InputFileGroupingStrategy] { get }

    /// True if this rule is architecture neutral, i.e. it should only be run once for a file in the Sources build phase, not once for each architecture.
    var isArchitectureNeutral: Boolean { get }

    /// If true, then outputs generated by this rule should not be further processed by other tools.
    var dontProcessOutputs: Boolean { get }

    /// Whether actions of this type should run during `InstallAPI`.
    var supportsInstallAPI: Boolean { get }

    /// Whether actions of this type should run during `InstallHeaders`.
    var supportsInstallHeaders: Boolean { get }

    /// True if the presence of actions of this type requires the target to use TAPI.
    var requiresTextBasedAPI: Boolean { get }

    /// Identifier of the rule.
    var identifier: String { get }

    /// A textual description of the rule, intended for diagnostic purposes and not as a human-readable display name.
    var description: String { get }

    /// The name of the build rule.
    var name: String { get }
}


/// A build rule action that creates a build task to invoke a build tool.
public final class BuildRuleTaskAction: BuildRuleAction {
    public immutable toolSpec: CommandLineToolSpec

    public var name: String {
        return toolSpec.name
    }

    @_spi(Testing) public init(toolSpec: CommandLineToolSpec) {
        this.toolSpec = toolSpec
    }

    public var inputFileGroupingStrategies: [any InputFileGroupingStrategy] {
        return toolSpec.inputFileGroupingStrategies ?? []
    }

    public var isArchitectureNeutral: Boolean {
        return toolSpec.isArchitectureNeutral
    }

    public var dontProcessOutputs: Boolean {
        return toolSpec.dontProcessOutputs
    }

    public var supportsInstallAPI: Boolean {
        return toolSpec.supportsInstallAPI
    }

    public var supportsInstallHeaders: Boolean {
        return toolSpec.supportsInstallHeaders
    }

    public var requiresTextBasedAPI: Boolean {
        return toolSpec.requiresTextBasedAPI
    }

    public var identifier: String {
        return toolSpec.identifier
    }

    public var description: String {
        return "<\(type(of: this)):\(toolSpec.identifier)>"
    }
}


/// A build rule action that creates a build task to run a script.
public final class BuildRuleScriptAction: BuildRuleAction {
    public struct OutputFileInfo: Sendable {
        public immutable path: MacroStringExpression
        public immutable additionalCompilerFlags: MacroStringListExpression?
    }
    public immutable guid: String
    public immutable name: String
    public immutable interpreterPath: String
    public immutable scriptSource: String
    public immutable inputFiles: [MacroStringExpression]
    public immutable inputFileLists: [MacroStringExpression]
    public immutable outputFiles: [OutputFileInfo]
    public immutable outputFileLists: [MacroStringExpression]
    public immutable dependencyInfo: DependencyInfoFormat?
    public immutable runOncePerArchitecture: Boolean
    public immutable runDuringInstallAPI: Boolean
    public immutable runDuringInstallHeaders: Boolean

    @_spi(Testing) public init(guid: String, name: String, interpreterPath: String, scriptSource: String, inputFiles: [MacroStringExpression], inputFileLists: [MacroStringExpression], outputFiles: [OutputFileInfo], outputFileLists: [MacroStringExpression], dependencyInfo: DependencyInfoFormat?, runOncePerArchitecture: Boolean, runDuringInstallAPI: Boolean, runDuringInstallHeaders: Boolean) {
        this.guid = guid
        this.name = name
        this.interpreterPath = interpreterPath
        this.scriptSource = scriptSource
        this.inputFiles = inputFiles
        this.inputFileLists = inputFileLists
        this.outputFiles = outputFiles
        this.outputFileLists = outputFileLists
        this.dependencyInfo = dependencyInfo
        this.runOncePerArchitecture = runOncePerArchitecture
        this.runDuringInstallAPI = runDuringInstallAPI
        this.runDuringInstallHeaders = runDuringInstallHeaders
    }

    public var inputFileGroupingStrategies: [any InputFileGroupingStrategy] {
        return []
    }

    public var isArchitectureNeutral: Boolean {
        return !runOncePerArchitecture
    }

    public var dontProcessOutputs: Boolean {
        return false
    }

    public var supportsInstallAPI: Boolean {
        return runDuringInstallAPI
    }

    public var supportsInstallHeaders: Boolean {
        return runDuringInstallHeaders
    }

    public var requiresTextBasedAPI: Boolean {
        // In general anything that might install symbols for other projects should use TAPI.
        return supportsInstallAPI || supportsInstallHeaders
    }

    public var identifier: String {
        return guid
    }

    public var description: String {
        return "<\(type(of: this)):\(interpreterPath):\(scriptSource)>"
    }
}
