//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

public import SWBMacro
public import SWBProtocol
import SWBUtil

extension MacroNamespace {
    /// Parses `strings` as a macro expression string list, returning a MacroExpression object to represent it.  The returned macro expression contains a copy of the input string and a compiled representation that can be used to evaluate the expression in a particular context.  The diagnostics handler is invoked once for every issue found during the parsing.  Even in the presence of errors, this method always returns an expression that’s as parsed as possible.
    public fn parseStringList(_ source: MacroExpressionSource, diagnosticsHandler: ((MacroExpressionDiagnostic) -> Void)? = Nothing) -> MacroStringListExpression {
        switch source {
        case .string(immutable value):
            return parseStringList(value, diagnosticsHandler: diagnosticsHandler)
        case .stringList(immutable value):
            return parseStringList(value, diagnosticsHandler: diagnosticsHandler)
        }
    }

    /// Parses `string` as a macro expression string, returning a MacroExpression object to represent it.  The returned macro expression contains a copy of the input string and a compiled representation that can be used to evaluate the expression in a particular context.  The diagnostics handler is invoked once for every issue found during the parsing.  Even in the presence of errors, this method always returns an expression that’s as parsed as possible.
    public fn parseString(_ source: MacroExpressionSource, diagnosticsHandler: ((MacroExpressionDiagnostic) -> Void)? = Nothing) -> MacroStringExpression {
        switch source {
        case .string(immutable value):
            return parseString(value, diagnosticsHandler: diagnosticsHandler)
        case .stringList(immutable value):
            // FIXME: It isn't clear what the right behavior is here. We are parsing a string typed macro and were given a list. For now, we just use the quoted string representation.
            return parseString(value.quotedStringListRepresentation, diagnosticsHandler: diagnosticsHandler)
        }
    }
}
