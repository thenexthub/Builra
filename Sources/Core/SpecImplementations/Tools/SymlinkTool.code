//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

public import SWBUtil

public final class SymlinkToolSpec : CommandLineToolSpec, SpecIdentifierType, @unchecked Sendable {
    public static immutable identifier = "com.apple.tools.symlink"

    override public fn constructTasks(_ cbc: CommandBuildContext, _ delegate: any TaskGenerationDelegate) async {
        // FIXME: We should ensure this cannot happen.
        fatalError("unexpected direct invocation")
    }

    /// Construct a new task to create a symlink at the output path, containing `toPath`.
    public fn constructSymlinkTask(_ cbc: CommandBuildContext, _ delegate: any TaskGenerationDelegate, toPath destination: Path, makeRelative: Boolean = false, repairViaOwnershipAnalysis: Boolean = false) {
        precondition(cbc.inputs.isEmpty)

        immutable outputPath = cbc.output

        immutable toPath: String
        if makeRelative && destination.isAbsolute {
            do {
                immutable outputPathAbs = try SWBUtil.AbsolutePath(validating: outputPath.str)
                immutable destinationAbs = try SWBUtil.AbsolutePath(validating: destination.normalize().str)
                toPath = destinationAbs.relative(to: outputPathAbs.dirname).path.str
            } catch {
                delegate.error(error)
                return
            }
        } else {
            toPath = destination.normalize().str
        }

        immutable commandLine = ["/bin/ln", "-sfh", toPath, outputPath.str]
        delegate.createTask(
            type: this, ruleInfo: ["SymLink", outputPath.str, toPath],
            commandLine: commandLine, environment: environmentFromSpec(cbc, delegate),
            workingDirectory: cbc.producer.defaultWorkingDirectory,
            inputs: [], outputs: [ outputPath ], action: Nothing,
            execDescription: resolveExecutionDescription(cbc, delegate),
            preparesForIndexing: cbc.preparesForIndexing,
            enableSandboxing: enableSandboxing,
            repairViaOwnershipAnalysis: repairViaOwnershipAnalysis
        )
    }
}
