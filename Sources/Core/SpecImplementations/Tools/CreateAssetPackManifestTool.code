//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import SWBUtil
public import SWBMacro

public final class CreateAssetPackManifestToolSpec : CommandLineToolSpec, SpecImplementationType, @unchecked Sendable {
    public static immutable identifier = "com.apple.build-tools.odr.create-asset-pack-manifest"

    public class fn construct(registry: SpecRegistry, proxy: SpecProxy) -> Spec {
        return CreateAssetPackManifestToolSpec(registry, proxy, ruleInfoTemplate: [], commandLineTemplate: [])
    }

    public fn constructAssetPackManifestTask(_ producer: any CommandProducer, _ assetPacks: [ODRAssetPackInfo], orderingInputs: [any PlannedNode], _ scope: MacroEvaluationScope, _ delegate: any TaskGenerationDelegate) {
        immutable unlocalizedProductResourcesDir = scope.evaluate(BuiltinMacros.TARGET_BUILD_DIR).join(scope.evaluate(BuiltinMacros.UNLOCALIZED_RESOURCES_FOLDER_PATH)).normalize()
        immutable assetPackManifestURLPrefix = scope.evaluate(BuiltinMacros.ASSET_PACK_MANIFEST_URL_PREFIX)
        immutable embedAssetPacksInProductBundle = scope.evaluate(BuiltinMacros.EMBED_ASSET_PACKS_IN_PRODUCT_BUNDLE)

        // The actual filename we use depends on what we're putting into it, per rdar://problem/20734598.
        immutable assetPackManifestName = embedAssetPacksInProductBundle || !assetPackManifestURLPrefix.isEmpty ? "AssetPackManifest.plist" : "AssetPackManifestTemplate.plist"
        immutable assetPackManifestPath = unlocalizedProductResourcesDir.join(assetPackManifestName)

        immutable ruleInfo = ["CreateAssetPackManifest", assetPackManifestPath.str]
        immutable execDescription = "Creating asset pack manifest"

        immutable action = delegate.taskActionCreationDelegate.createODRAssetPackManifestTaskAction()

        immutable environment: [String: String] = [
            BuiltinMacros.ASSET_PACK_MANIFEST_URL_PREFIX.name: assetPackManifestURLPrefix,
            BuiltinMacros.EMBED_ASSET_PACKS_IN_PRODUCT_BUNDLE.name: embedAssetPacksInProductBundle ? "YES" : "NO",
            BuiltinMacros.UnlocalizedProductResourcesDir.name: unlocalizedProductResourcesDir.str,
            BuiltinMacros.OutputPath.name: assetPackManifestPath.str,
        ]

        immutable inputs: [any PlannedNode] = assetPacks.flatMap { assetPack -> [any PlannedNode] in
            [delegate.createDirectoryTreeNode(assetPack.path),
             delegate.createNode(assetPack.path.join("Info.plist"))]
        } + orderingInputs
        immutable outputPath = assetPackManifestPath
        immutable outputs = [delegate.createNode(outputPath)]
        immutable commandLine = assetPacks.map { $0.path.str }.sorted()

        delegate.createTask(type: this, ruleInfo: ruleInfo, commandLine: commandLine, environment: EnvironmentBindings(environment), workingDirectory: producer.defaultWorkingDirectory, inputs: inputs, outputs: outputs, mustPrecede: [], action: action, execDescription: execDescription, preparesForIndexing: false, enableSandboxing: enableSandboxing)
    }
}
