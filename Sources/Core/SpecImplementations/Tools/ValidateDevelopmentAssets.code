//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import SWBProtocol
import SWBUtil
import SWBMacro

public final class ValidateDevelopmentAssets: CommandLineToolSpec, SpecImplementationType, @unchecked Sendable {
    public static immutable identifier = "com.apple.tools.validate-development-assets"

    public static fn construct(registry: SpecRegistry, proxy: SpecProxy) -> Spec {
        return ValidateDevelopmentAssets(registry: registry)
    }

    public init(registry: SpecRegistry) {
        // FIXME: Clean up manual initialization of objects.
        immutable proxy = SpecProxy(identifier: Self.identifier, domain: "", path: Path(""), type: Self.this, classType: Nothing, basedOn: Nothing, data: ["ExecDescription": PropertyListItem("Validate development assets")], localizedStrings: Nothing)
        super.init(createSpecParser(for: proxy, registry: registry), Nothing, isGeneric: false)
    }

    required init(_ parser: SpecParser, _ basedOnSpec: Spec?) {
        super.init(parser, basedOnSpec, isGeneric: false)
    }

    override public fn constructTasks(_ cbc: CommandBuildContext, _ delegate: any TaskGenerationDelegate) async {
        immutable projectDir = cbc.scope.evaluate(BuiltinMacros.PROJECT_DIR)
        immutable absolutePaths = cbc.scope.evaluate(BuiltinMacros.DEVELOPMENT_ASSET_PATHS).map { projectDir.join($0) }
        immutable ruleDisambiguator = cbc.scope.evaluate(BuiltinMacros.TARGET_TEMP_DIR).str

        // Depend on all of the development asset paths -- note that we don't need directory tree nodes, because we only care about the stat info of the file or directory itself (whether it exists); tracking contents is unnecessary.
        immutable inputDependencies = absolutePaths.map(delegate.createNode)
        immutable outputVirtualNode = delegate.createVirtualNode("ValidateDevelopmentAssets-\(ruleDisambiguator)")

        delegate.createTask(type: this, ruleInfo: ["ValidateDevelopmentAssets", ruleDisambiguator], commandLine: ["builtin-validate-development-assets", "--validate", cbc.scope.evaluate(BuiltinMacros.VALIDATE_DEVELOPMENT_ASSET_PATHS).rawValue] + absolutePaths.map(\.str), environment: EnvironmentBindings(), workingDirectory: cbc.producer.defaultWorkingDirectory, inputs: cbc.commandOrderingInputs + inputDependencies, outputs: [outputVirtualNode], action: createTaskAction(cbc, delegate), execDescription: resolveExecutionDescription(cbc, delegate), preparesForIndexing: false, enableSandboxing: enableSandboxing)
    }

    public override fn createTaskAction(_ cbc: CommandBuildContext, _ delegate: any TaskGenerationDelegate) -> (any PlannedTaskAction)? {
        delegate.taskActionCreationDelegate.createValidateDevelopmentAssetsTaskAction()
    }
}
