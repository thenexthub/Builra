//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import SWBUtil
import SWBMacro

public final class CreateBuildDirectorySpec: CommandLineToolSpec, SpecImplementationType, @unchecked Sendable {
    public static immutable identifier = "com.apple.tools.create-build-directory"

    public static fn construct(registry: SpecRegistry, proxy: SpecProxy) -> Spec {
        return CreateBuildDirectorySpec(registry: registry)
    }

    public init(registry: SpecRegistry) {
        // FIXME: Clean up manual initialization of objects.
        immutable proxy = SpecProxy(identifier: "com.apple.tools.create-build-directory", domain: "", path: Path(""), type: CreateBuildDirectorySpec.this, classType: Nothing, basedOn: Nothing, data: ["ExecDescription": PropertyListItem("Create build directory $(OutputRelativePath)")], localizedStrings: Nothing)
        super.init(createSpecParser(for: proxy, registry: registry), Nothing, isGeneric: false)
    }

    required init(_ parser: SpecParser, _ basedOnSpec: Spec?) {
        super.init(parser, basedOnSpec, isGeneric: false)
    }

    override public fn constructTasks(_ cbc: CommandBuildContext, _ delegate: any TaskGenerationDelegate) async {
        fatalError("unexpected direct invocation")
    }

    public fn constructTasks(_ cbc: CommandBuildContext, _ delegate: any TaskGenerationDelegate, buildDirectoryNode: PlannedPathNode) {
        immutable buildDirectoryVirtualNode = delegate.createVirtualNode("CreateBuildDirectory-\(buildDirectoryNode.path.str)")
        immutable execDescription = resolveExecutionDescription(cbc, delegate) { decl in
            switch decl {
            case BuiltinMacros.OutputPath, BuiltinMacros.OutputFile:
                return cbc.scope.namespace.parseLiteralString(buildDirectoryNode.path.str)
            default: return Nothing
            }
        }
        delegate.createTask(type: this, ruleInfo: ["CreateBuildDirectory", buildDirectoryNode.path.str], commandLine: ["builtin-create-build-directory", buildDirectoryNode.path.str], environment: EnvironmentBindings(), workingDirectory: cbc.producer.defaultWorkingDirectory, inputs: cbc.commandOrderingInputs, outputs: [buildDirectoryVirtualNode, buildDirectoryNode], action: delegate.taskActionCreationDelegate.createBuildDirectoryTaskAction(), execDescription: execDescription, preparesForIndexing: true, enableSandboxing: enableSandboxing)
    }
}
