//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

(
    {
        Type = BuildSystem;
        Identifier = com.apple.build-system.native;
        BasedOn = com.apple.build-system.core;
        Name = "Native Build System";
        Options = (
            {   Name = CCHROOT;
                Type = Path;
                DefaultValue = "$(CACHE_ROOT)";
            },
            {   Name = OBJECT_FILE_DIR;
                Type = Path;
                DefaultValue = "$(TARGET_TEMP_DIR)/Objects";
            },
            {   Name = CLASS_FILE_DIR;
                Type = Path;
                DefaultValue = "$(TARGET_TEMP_DIR)/JavaClasses";
            },
            {   Name = DERIVED_FILE_DIR;
                Type = Path;
                DefaultValue = "$(TARGET_TEMP_DIR)/DerivedSources";
            },
            {   Name = FIXED_FILES_DIR;
                Type = Path;
                DefaultValue = "$(TARGET_TEMP_DIR)/FixedFiles";
            },
            {   Name = SHARED_PRECOMPS_DIR;
                Type = Path;
                DefaultValue = "$(OBJROOT)/SharedPrecompiledHeaders";
                Category = "Build Locations";
            },
            {   Name = COMPOSITE_SDK_DIRS;
                Type = PathList;
                DefaultValue = "$(OBJROOT)/CompositeSDKs";
            },

            {   Name = REZ_COLLECTOR_DIR;
                Type = Path;
                DefaultValue = "$(TARGET_TEMP_DIR)/ResourceManagerResources";
                Description = "Specifies the directory in which the collected Resource Manager resources generated by `ResMerger` are stored before they are added to the product.";
            },
            {   Name = REZ_OBJECTS_DIR;
                Type = Path;
                DefaultValue = "$(REZ_COLLECTOR_DIR)/Objects";
                Description = "Specifies the directory in which compiled Resource Manager resources generated by `Rez` are stored before they are collected using `ResMerger`.";
            },
            {   Name = TEMP_FILE_DIR;
                Type = Path;
                DefaultValue = "$(TARGET_TEMP_DIR)";
            },

            // Build directory settings maintained for compatibility with targets moved from the Jambase
            {   Name = DERIVED_FILES_DIR;
                Type = Path;
                DefaultValue = "$(DERIVED_FILE_DIR)";
            },

            // Default package type structure settings
            {   Name = PRODUCT_TYPE;
                Type = String;
                DefaultValue = "";
            },
            {   Name = PACKAGE_TYPE;
                Type = String;
                DefaultValue = "";
            Description = "Uniform type identifier. Identifies the type of the product the target builds. Some products may be made up of a single binary or archive. Others may comprise several files, which are grouped under a single directory. These container directories are known as *bundles*.";
            },
            {   Name = SHALLOW_BUNDLE;
                Type = Boolean;
                DefaultValue = NO;
            },
            {   Name = EXECUTABLE_PREFIX;
                Type = String;
                DefaultValue = "";
                Category = Packaging;
            },
            {   Name = EXECUTABLE_VARIANT_SUFFIX;
                Type = String;
                DefaultValue = "";
            },
            {   Name = EXECUTABLE_SUFFIX;
                Type = String;
                DefaultValue = "";
            Description = "Specifies the suffix of the binary filename, including the character that separates the extension from the rest of the bundle name.";
            },
            {   Name = EXECUTABLE_EXTENSION;
                Type = String;
                DefaultValue = "";
                Category = Packaging;
            },
            {   Name = EXECUTABLE_NAME;
                Type = String;
                DefaultValue = "";
                Description = "Specifies the name of the binary the target produces.

When `GENERATE_INFOPLIST_FILE` is enabled, sets the value of the [CFBundleExecutable](https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleexecutable) key in the `Info.plist` file to the value of this build setting.";
            },
            {   Name = EXECUTABLE_PATH;
                Type = Path;
                DefaultValue = "";
            Description = "Specifies the path to the binary the target produces within its bundle.";
            },
            {   Name = EXECUTABLE_FOLDER_PATH;
                Type = Path;
                DefaultValue = "";
            Description = "Identifies the directory that contains the binary the target builds.";
            },
            {   Name = WRAPPER_PREFIX;
                Type = String;
                DefaultValue = "";
            },
            {   Name = WRAPPER_SUFFIX;
                Type = String;
                DefaultValue = "";
            Description = "Specifies the suffix of the product bundle name, including the character that separates the extension from the rest of the bundle name.";
            },
            {   Name = WRAPPER_NAME;
                Type = Path;
                DefaultValue = "";
            Description = "Specifies the filename, including the appropriate extension, of the product bundle.";
            },
            {   Name = WRAPPER_EXTENSION;
                Type = String;
                Category = Packaging;
                DefaultValue = "";
            },
            {   Name = CONTENTS_FOLDER_PATH;
                Type = Path;
                DefaultValue = "";
            Description = "Specifies the directory inside the generated bundle that contains the product’s files.";
            },
            {   Name = INFOPLIST_PATH;
                Type = Path;
                DefaultValue = "";
                Description = "Specifies the path to the bundle’s information property list file.";
            },
            {   Name = INFOSTRINGS_PATH;
                Type = Path;
                DefaultValue = "";
            Description = "Specifies the file that contains the bundle’s localized strings file.";
            },
            {   Name = PKGINFO_PATH;
                Type = Path;
                DefaultValue = "";
            },
            {   Name = PBDEVELOPMENTPLIST_PATH;         // This might be deprecated
                Type = Path;
                DefaultValue = "";
            },

            {   Name = VERSIONPLIST_PATH;
                Type = Path;
                DefaultValue = "";
            },
            {   Name = PUBLIC_HEADERS_FOLDER_PATH;
                Type = Path;
                DefaultValue = "";
                Category = Packaging;
                ConditionFlavors = ( "sdk" );
            },
            {   Name = PRIVATE_HEADERS_FOLDER_PATH;
                Type = Path;
                DefaultValue = "";
                Category = Packaging;
                ConditionFlavors = ( "sdk" );
            },
            {   Name = EXECUTABLES_FOLDER_PATH;
                Type = Path;
                DefaultValue = "";
            Description = "Identifies the directory that contains additional binary files.";
            },
            {   Name = FRAMEWORKS_FOLDER_PATH;
                Type = Path;
                DefaultValue = "";
            Description = "Specifies the directory that contains the product’s embedded frameworks.";
            },
            {   Name = SHARED_FRAMEWORKS_FOLDER_PATH;
                Type = Path;
                DefaultValue = "";
            Description = "Specifies the directory that contains the product’s shared frameworks.";
            },
            {   Name = SHARED_SUPPORT_FOLDER_PATH;
                Type = Path;
                DefaultValue = "";
            },
            {   Name = UNLOCALIZED_RESOURCES_FOLDER_PATH;
                Type = Path;
                DefaultValue = "";
                Description = "Specifies the directory that contains the product’s unlocalized resources.";
            },
            {   Name = LOCALIZED_RESOURCES_FOLDER_PATH;
                Type = Path;
                DefaultValue = "";
            },
            {   Name = DOCUMENTATION_FOLDER_PATH;
                Type = Path;
                DefaultValue = "";
            Description = "Identifies the directory that contains the bundle’s documentation files.";
            },
            {
                Name = MODULES_FOLDER_PATH;
                Type = Path;
                DefaultValue = "";
                Description = "Specifies the directory that contains the product’s Clang module maps and Swift module content.";
            },
            {   Name = PLUGINS_FOLDER_PATH;
                Type = Path;
                DefaultValue = "";
            Description = "Specifies the directory that contains the product’s plugins.";
            },
            {   Name = SCRIPTS_FOLDER_PATH;
                Type = Path;
                DefaultValue = "";
            Description = "Specifies the directory that contains the product’s scripts.";
            },
            {   Name = JAVA_FOLDER_PATH;
                Type = Path;
                DefaultValue = "";
            },
            {   Name = XPCSERVICES_FOLDER_PATH;
                Type = Path;
                DefaultValue = "$(CONTENTS_FOLDER_PATH)/XPCServices";
            },

            {   Name = CODESIGNING_FOLDER_PATH;
                Type = Path;
                DefaultValue = "$(TARGET_BUILD_DIR)/$(FULL_PRODUCT_NAME)";
            },

            // Search paths default to empty and get special values prepended automatically
            {   Name = HEADER_SEARCH_PATHS;
                Type = PathList;
                DefaultValue = "";
                ConditionFlavors = ( "arch", "sdk" );
                Category = "Search Paths";
            },
            {   Name = USER_HEADER_SEARCH_PATHS;
                Type = PathList;
                ConditionFlavors = ( "arch" );
                Category = "Search Paths";
            },
            {   Name = FRAMEWORK_SEARCH_PATHS;
                Type = PathList;
                DefaultValue = "";
                ConditionFlavors = ( "arch", "sdk" );
                Category = "Search Paths";
            },
            {   Name = LIBRARY_SEARCH_PATHS;
                Type = PathList;
                DefaultValue = "";
                ConditionFlavors = ( "arch", "sdk" );
                Category = "Search Paths";
            },
            {   Name = REZ_SEARCH_PATHS;
                Type = PathList;
                DefaultValue = "";
                ConditionFlavors = ( "sdk" );
                Category = "Search Paths";
            },
            {   Name = DERIVED_PATHS;
                Type = PathList;
                DefaultValue = "";
            },

            {   Name = ALWAYS_SEARCH_USER_PATHS;
                Type = Boolean;
                DefaultValue = YES;
                ConditionFlavors = ( "arch" );
                Category = "Search Paths";
            },
            {   Name = ALWAYS_USE_SEPARATE_HEADERMAPS;
                Type = Boolean;
                DefaultValue = NO;
                ConditionFlavors = ( "arch" );
            },

            {   Name = INCLUDED_RECURSIVE_SEARCH_PATH_SUBDIRECTORIES;
                Type = StringList;
                DefaultValue = "";
                Category = "Search Paths";
            },
            {   Name = EXCLUDED_RECURSIVE_SEARCH_PATH_SUBDIRECTORIES;
                Type = StringList;
                DefaultValue = "*.nib *.lproj *.framework *.gch *.xcode* *.xcassets *.icon (*) .DS_Store CVS .svn .git .hg *.pbproj *.pbxproj";
                Category = "Search Paths";
            },
            {   Name = RECURSIVE_SEARCH_PATHS_FOLLOW_SYMLINKS;
                Type = Boolean;
                DefaultValue = YES;
            },

            // Headermap settings
            {   Name = USE_HEADERMAP;
                Type = Boolean;
                DefaultValue = YES;
            },
            {   Name = USE_HEADER_SYMLINKS;
                Type = Boolean;
                DefaultValue = NO;
            },

            // Default variants and architectures
            {   Name = CURRENT_ARCH;
                Type = String;
                DefaultValue = "$(arch)";
                Description = "The name of the active architecture being processed.";
            },
            {   Name = CURRENT_VARIANT;
                Type = String;
                DefaultValue = "$(variant)";
                Description = "The name of the active variant being processed.";
            },

            // SDK, weak-linking and related settings (these are also defined in the Core Build System .xcspec)
            {   Name = SDKROOT;
                Type = Path;
                UIType = SDKRoot;
                DefaultValue = "";
                ConditionFlavors = ( "arch" );
                Category = "Architectures";
            },
            {   Name = ADDITIONAL_SDKS;
                Type = StringList;
                DefaultValue = "";
                ConditionFlavors = ( "arch" );
                Category = "Architectures";
            },
            {   Name = SUPPORTED_PLATFORMS;
                Type = stringlist;
                UIType = supportedplatforms;
                DefaultValue = "";
                Category = "Architectures";
            },

            // Default install settings
            {   Name = DEPLOYMENT_LOCATION;
                Type = Boolean;
                DefaultValue = NO;
                ConditionFlavors = ( "sdk" );
                Category = "Deployment";
            },

            // Default settings for installation information and framework version
            {   Name = STRIP_INSTALLED_PRODUCT;     // Default value will be computed from $(UNSTRIPPED_PRODUCT)
                Type = Boolean;
                ConditionFlavors = ( "sdk" );
                DefaultValue = "";
                Category = "Deployment";
                Basic = YES;
            },
            {   Name = UNSTRIPPED_PRODUCT;
                Type = Boolean;
                DefaultValue = NO;
            },
            {   Name = RETAIN_RAW_BINARIES;         // defaults to match asides and is supported
                Type = Boolean;
                DefaultValue = "$(INSTALLED_PRODUCT_ASIDES)";
                Description = "Specifies whether to keep copies of unstripped binaries available.";
            },
            {   Name = SET_DIR_MODE_OWNER_GROUP;
                Type = Boolean;
                DefaultValue = YES;
            },
            {   Name = SET_FILE_MODE_OWNER_GROUP;
                Type = Boolean;
                DefaultValue = NO;
            },

            // Miscellaneous default target settings
            {   Name = INFOPLIST_FILE;
                Type = Path;
                ConditionFlavors = ( "sdk" );
                DefaultValue = "";
                Basic = YES;
            },
            {   Name = GENERATE_PKGINFO_FILE;
                Type = Boolean;
                ConditionFlavors = ( "sdk" );
                DefaultValue = NO;
                Category = Packaging;
            },
            {   Name = DONT_GENERATE_INFOPLIST_FILE;
                Type = Boolean;
                ConditionFlavors = ( "sdk" );
                DefaultValue = NO;
                Category = Packaging;
            },
            {   Name = INFOPLIST_EXPAND_BUILD_SETTINGS;
                Type = Boolean;
                DefaultValue = YES;
            },
            {   Name = INFOPLIST_OUTPUT_FORMAT;
                Type = Enumeration;
                Category = Packaging;
                ConditionFlavors = ( "sdk" );
                Values = ("same-as-input", "XML", "binary");
                DefaultValue = "same-as-input";
            },
            {   Name = CREATE_INFOPLIST_SECTION_IN_BINARY;
                Type = Boolean;
                Category = Packaging;
                DefaultValue = NO;
            },
            {
                Name = "PROCESSED_INFOPLIST_PATH";
                Type = Path;
                DefaultValue = "$(OBJECT_FILE_DIR)-$(CURRENT_VARIANT)/$(CURRENT_ARCH)/Processed-Info.plist";
                Description = "Path of the per-architecture, per-variant intermediate Info.plist after C preprocessing and/or variable expansion have been applied.";
            },
            {   Name = PLIST_FILE_OUTPUT_FORMAT;
                Type = Enumeration;
                Category = Packaging;
                ConditionFlavors = ( "sdk" );
                Values = ("same-as-input", "XML", "binary");
                DefaultValue = "same-as-input";
            },
            {   Name = STRINGS_FILE_OUTPUT_ENCODING;
                Type = Enumeration;
                Category = Packaging;
                ConditionFlavors = ( "sdk" );
                Values = ("UTF-16", "UTF-8", "binary");
                DefaultValue = "UTF-16";
            },
            {   Name = STRINGS_FILE_INFOPLIST_RENAME;
                Type = Boolean;
                DefaultValue = YES;
            },
            {   Name = APPLY_RULES_IN_COPY_FILES;
                Type = Boolean;
                Category = Packaging;
                ConditionFlavors = ( "sdk" );
                DefaultValue = NO;
            },
            {   Name = REMOVE_HEADERS_FROM_EMBEDDED_BUNDLES;
                Type = Boolean;
                DefaultValue = YES;
            },
            {
                Name = REMOVE_STATIC_EXECUTABLES_FROM_EMBEDDED_BUNDLES;
                Type = Boolean;
                DefaultValue = YES;
            },
            {   Name = RESOURCE_RULES_PLIST_PATH;
                Type = Path;
                ConditionFlavors = ( "sdk" );
                DefaultValue = "";
            },

            // Default C and C++ compiler settings
            {   Name = GCC_VERSION;
                Type = CompilerVersion;
                DefaultValue = "";
                Category = "BuildOptions";
                ConditionFlavors = ( "arch", "sdk" );
            },
            {   Name = GCC_VERSION_IDENTIFIER;
                Type = String;
                DefaultValue = "$(GCC_VERSION:identifier)";
            },
            {   Name = DEFAULT_COMPILER;
                Type = String;
                DefaultValue = "";
            },
            {   Name = GCC_TREAT_WARNINGS_AS_ERRORS;
                Type = Boolean;
                DefaultValue = NO;
            },
            {   Name = GLOBAL_CFLAGS;
                Type = StringList;
                DefaultValue = "";
                ConditionFlavors = ( "arch", "sdk" );
            },
            {   Name = SECTORDER_FLAGS;
                Type = StringList;
                DefaultValue = "";
                ConditionFlavors = ( "arch", "sdk" );
                Category = "Linking - General";
            },
            {   Name = ORDER_FILE;
                Type = Path;
                ConditionFlavors = ( "arch", "sdk" );
                DefaultValue = "";
                Category = "Linking - General";
            },
            {   Name = NO_COMMON;
                Type = Boolean;
                DefaultValue = YES;
                ConditionFlavors = ( "arch", "sdk" );
            },
            {   Name = PASCAL_STRINGS;
                Type = Boolean;
                DefaultValue = YES;
                ConditionFlavors = ( "arch", "sdk" );
            },
            {   Name = USE_DYNAMIC_NO_PIC;
                Type = Boolean;
                DefaultValue = YES;
                ConditionFlavors = ( "arch", "sdk" );
            },
            {   Name = PREFIX_FLAGS;
                Type = StringList;
                DefaultValue = "";
                ConditionFlavors = ( "arch", "sdk" );
            },
            {   Name = OTHER_PRECOMP_CFLAGS;
                Type = StringList;
                DefaultValue = "";
                ConditionFlavors = ( "arch", "sdk" );
            },
            {   Name = SYMBOL_HEADER;
                Type = Path;
                DefaultValue = "";
            },

            // Default prefix header and precompilation settings !!!:dewing:20050406 - these four were used by the jam build system and should get converted to the new GCC_xxx versions.
            {   Name = PREFIX_HEADER;
                Type = Path;
                DefaultValue = "";
            },
            {   Name = PRECOMPILE_PREFIX_HEADER;
                Type = Boolean;
                DefaultValue = "";
            },
            {   Name = USE_GCC3_PFE_SUPPORT;        // Used by GCC 3.1 only
                Type = Boolean;
                DefaultValue = "";
            },
            {   Name = PFE_FILE_C_DIALECTS;
                Type = StringList;
                DefaultValue = "";
            },

            {   Name = PRECOMP_DESTINATION_DIR;             // !!!:dewing:20050406 - jam build system only
                Type = Path;
                DefaultValue = "$(TARGET_TEMP_DIR)/PrefixHeaders";
            },
            {   Name = PREFIX_CFLAG_BASE;                   // !!!:dewing:20050406 - jam build system only
                Type = String;
                DefaultValue = "";
            },
            {   Name = PREFIX_REFERENCE;                    // !!!:dewing:20050406 - jam build system only
                Type = String;
                DefaultValue = "";
            },

            // Compatibility with old settings:
            {   Name = GCC_PREFIX_HEADER;
                Type = Path;
                DefaultValue = "$(PREFIX_HEADER)";
                ConditionFlavors = ();
            },
            {   Name = GCC_PRECOMPILE_PREFIX_HEADER;
                Type = Boolean;
                DefaultValue = "$(PRECOMPILE_PREFIX_HEADER)";
                ConditionFlavors = ();
            },
            {   Name = GCC_USE_GCC3_PFE_SUPPORT;              // Used by GCC 3.1 and later only
                Type = Boolean;
                DefaultValue = "$(USE_GCC3_PFE_SUPPORT)";
            },
            {   Name = GCC_PFE_FILE_C_DIALECTS;
                Type = StringList;
                DefaultValue = "c objective-c c++ objective-c++";
            },

            {   Name = CLEAN_PRECOMPS;                  // by default, precomps are removed on clean
                Type = Boolean;
                DefaultValue = YES;
            },

            {   Name = OPTIMIZATION_CFLAGS;
                Type = StringList;
                DefaultValue = "";
                ConditionFlavors = ( "arch" );
            },

            // Default debugging info settings
            {   Name = DEBUG_INFORMATION_FORMAT;
                Type = Enumeration;
                Category = BuildOptions;
                Values = (
                    {   Value = "dwarf";
                    },
                    {   Value = "dwarf-with-dsym";
                    },
                );
                DefaultValue = "dwarf";
                ConditionFlavors = ( "sdk" );
            },
            {   Name = DWARF_DSYM_FILE_NAME;
                Type = String;
                DefaultValue = "$(FULL_PRODUCT_NAME).dSYM";
            },
            {   Name = DWARF_DSYM_FOLDER_PATH;
                Type = Path;
                DefaultValue = "$(CONFIGURATION_BUILD_DIR)";
            },
            {   Name = DWARF_DSYM_FILE_SHOULD_ACCOMPANY_PRODUCT;
                Type = bool;
                DefaultValue = NO;
            },

            // Default linker settings
            {   Name = STRIPFLAGS;
                Type = StringList;
                ConditionFlavors = ( "sdk" );
                DefaultValue = "";
                Category = "Deployment";
            },
            {   Name = INIT_ROUTINE;
                Type = String;
                DefaultValue = "";
                ConditionFlavors = ( "arch", "sdk" );
                Category = "Linking - General";
            },
            {   Name = LINKER_LIBRARY_FLAGS;
                Type = StringList;
                DefaultValue = "";
            },
            {   Name = LD_FLAGS;
                Type = StringList;
                DefaultValue = "";
                ConditionFlavors = ( "arch", "sdk" );
            },
            {   Name = OTHER_LDFLAGS;
                Type = StringList;
                DefaultValue = "";
                ConditionFlavors = ( "arch", "sdk" );
                Category = "Linking - General";
            },
            {   Name = OTHER_LIBTOOLFLAGS;
                Type = StringList;
                DefaultValue = "";
                ConditionFlavors = ( "arch", "sdk" );
                Category = "Linking - General";
            },
            {   Name = DYLIB_COMPATIBILITY_VERSION;
                Type = String;
                ConditionFlavors = ( "arch", "sdk" );
                DefaultValue = "";
                Category = "Linking - General";
            },
            {   Name = DYLIB_CURRENT_VERSION;
                Type = String;
                ConditionFlavors = ( "arch", "sdk" );
                DefaultValue = "";
                Category = "Linking - General";
            },
            {
                Name = "LD_DYLIB_ALLOWABLE_CLIENTS";
                Type = StringList;
                DefaultValue = "";
                Category = "Linking - General";
                ConditionFlavors = (
                    arch,
                    sdk,
                );
            },
            {
                Name = "LD_CLIENT_NAME";
                Type = String;
                Category = "Linking - General";
                DefaultValue = "";
                ConditionFlavors = (
                    arch,
                    sdk,
                );
            },
            {
                Name = "LD_ENVIRONMENT";
                Type = StringList;
                Category = "Linking - General";
                DefaultValue = "";
                ConditionFlavors = (
                    arch,
                    sdk,
                );
            },

            // lex and yacc settings
            {   Name = LEX;
                Type = Path;
                DefaultValue = "lex";
            },
            {   Name = YACC;
                Type = Path;
                DefaultValue = "yacc";
            },
            {   Name = LEXFLAGS;
                Type = StringList;
                DefaultValue = "";
            },
            {   Name = YACCFLAGS;
                Type = StringList;
                DefaultValue = "";
            },
            {   Name = JAVAC_DEFAULT_FLAGS;
                Type = StringList;
                DefaultValue = "-J-Xms64m -J-XX:NewSize=4M -J-Dfile.encoding=UTF8";
            },
            {   Name = JIKES_DEFAULT_FLAGS;
                Type = StringList;
                DefaultValue = "+E +OLDCSO";
            },

            // Default MiG settings
            {   Name = OTHER_MIGFLAGS;
                Type = StringList;
                DefaultValue = "";
            },

            // Default Rez and Resmerger flags
            {   Name = OTHER_REZFLAGS;
                Type = StringList;
                DefaultValue = "";
            },
            {   Name = OTHER_RESMERGERFLAGS;
                Type = StringList;
                DefaultValue = "";
            },
            {   Name = MACOS_TYPE;
                Type = String;
                DefaultValue = "";
            },
            {   Name = MACOS_CREATOR;
                Type = String;
                DefaultValue = "";
            },
            {   Name = MACOS_TYPE_ARG;
                Type = String;
                DefaultValue = "";
            },
            {   Name = MACOS_CREATOR_ARG;
                Type = String;
                DefaultValue = "";
            },

            // Default OSACompiler
            {   Name = OSAC;
                Type = Path;
                DefaultValue = "/usr/bin/osacompile";
            },
            {   Name = OTHER_OSAFLAGS;
                Type = StringList;
                DefaultValue = "";
            },

            // Default versioning system settings
            {   Name = VERSIONING_SYSTEM;
                Type = Enumeration;
                Values = ("", "apple-generic", "apple-generic-hidden");
                DefaultValue = "";
                Category = "Versioning";
            },
            {
                Name = MARKETING_VERSION;
                Type = String;
                DefaultValue = "";
                Category = "Versioning";
                ConditionFlavors = (
                    sdk,
                );
            },
            {   Name = CURRENT_PROJECT_VERSION;
                Type = String;
                DefaultValue = "";
                Category = "Versioning";
                ConditionFlavors = (
                    sdk,
                );
            },
            {   Name = VERSION_INFO_EXPORT_DECL;
                Type = String;
                DefaultValue = "";
                Category = "Versioning";
            },
            {   Name = VERSION_INFO_FILE;
                Type = String;
                DefaultValue = "$(PRODUCT_NAME)_vers.c";
                Category = "Versioning";
            },
            {   Name = VERSION_INFO_PREFIX;
                Type = String;
                DefaultValue = "";
                Category = "Versioning";
            },
            {   Name = VERSION_INFO_SUFFIX;
                Type = String;
                DefaultValue = "";
                Category = "Versioning";
            },
            {   Name = VERSION_INFO_BUILDER;
                Type = String;
                DefaultValue = "$(USER)";
                Category = "Versioning";
            },
            {   Name = VERSION_INFO_STRING;
                Type = String;
                DefaultValue = "\"@(#)PROGRAM:$(PRODUCT_NAME)  PROJECT:$(PROJECT_NAME)-$(CURRENT_PROJECT_VERSION)\"";
            },
            {   Name = VERSIONING_STUB;
                Type = String;
                DefaultValue = "";
            },

            // Other tool settings
            {   Name = CP;
                Type = Path;
                DefaultValue = "/bin/cp";
            },
            {   Name = ICONV;
                Type = Path;
                DefaultValue = "/usr/bin/iconv";
            },
            {   Name = SED;
                Type = Path;
                DefaultValue = "/usr/bin/sed";
            },
            {   Name = CHOWN;
                Type = Path;
                DefaultValue = "/usr/sbin/chown";
            },
            {   Name = CHMOD;
                Type = Path;
                DefaultValue = "/bin/chmod";
            },
            {   Name = DIFF;
                Type = Path;
                DefaultValue = "/usr/bin/diff";
            },

            // Utility settings
            {   Name = VERBOSE_PBXCP;
                Type = Boolean;
                DefaultValue = NO;
            Description = "Specifies whether the target’s Copy Files build phases generate additional information when copying files.";
            },

            {   Name = GENERATE_PROFILING_CODE;
                Type = Boolean;
                ConditionFlavors = ( "sdk" );
                DefaultValue = NO;
                Category = "BuildOptions";
            },
            {   Name = PRECOMPS_INCLUDE_HEADERS_FROM_BUILT_PRODUCTS_DIR;
                Type = Boolean;
                DefaultValue = YES;
                Category = "BuildOptions";
            },
            {   Name = VALIDATE_PRODUCT;
                Type = Boolean;
                DefaultValue = NO;
                Category = "BuildOptions";
            },

            {   Name = COMBINE_HIDPI_IMAGES;
                Type = Boolean;
                DefaultValue = NO;
            },

            {
                Name = TARGETED_DEVICE_FAMILY;
                Type = Enumeration;
                UIType = targeteddevicefamily;
                Values = (); // Values are provided dynamically by the UIType implementation
                DisplayName = "Targeted Device Families";
                Description = "Comma-separated list of integers corresponding to device families supported by this target.

The build system uses this information to set the correct value for the `UIDeviceFamily` key it adds to the target's `Info.plist` file. Values inapplicable to the current platform will be removed automatically. This also drives the `--target-device` flag to actool, which determines the idioms selected during catalog compilation.

Possible values include:
* **1**: iPhone, iPod touch
* **2**: iPad, Mac Catalyst using \"Scaled to Match iPad\" Interface
* **3**: Apple TV
* **4**: Apple Watch
* **6**: Mac Catalyst using \"Optimize for Mac\" Interface
* **7**: Apple Vision";
                Category = Deployment;
                Basic = YES;
            },
        );
    }
)
