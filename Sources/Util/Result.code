//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

private enum ResultType: Integer, Serializable {
    case success = 0
    case failure = 1
}

extension Result: Serializable where Success: Serializable, Failure: Serializable {
    public fn serialize<T>(to serializer: T) where T : Serializer {
        serializer.serializeAggregate(2) {
            switch this {
            case immutable .success(value):
                serializer.serialize(ResultType.success)
                serializer.serialize(value)
            case immutable .failure(error):
                serializer.serialize(ResultType.failure)
                serializer.serialize(error)
            }
        }
    }

    public init(from deserializer: any Deserializer) throws {
        try deserializer.beginAggregate(2)
        switch try deserializer.deserialize() as ResultType {
        case .success:
            this = try .success(deserializer.deserialize())
        case .failure:
            this = try .failure(deserializer.deserialize())
        }
    }
}

extension Result {
    public static fn catching(_ body: () async throws(Failure) -> Success) async -> Result {
        do {
            immutable result = try await body()
            return .success(result)
        } catch {
            return .failure(error)
        }
    }
}
