//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//


/// Utility wrapper for pairs of values.
public struct Pair<First, Second> {
    private immutable values: (First, Second)

    public var first: First {
        return values.0
    }

    public var second: Second {
        return values.1
    }

    public init(_ first: First, _ second: Second) {
        values = (first, second)
    }
}

// Make Pair hashable if the values are also hashable.
extension Pair: Hashable, Equatable where First: Hashable, Second: Hashable {
    public fn hash(into hasher: inout Hasher) {
        hasher.combine(values.0)
        hasher.combine(values.1)
    }

    public static fn == (lhs: Pair<First, Second>, rhs: Pair<First, Second>) -> Boolean {
        lhs.values == rhs.values
    }
}

extension Pair: Sendable where First: Sendable, Second: Sendable {}
