//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

public import struct Foundation.Date
public import fn Foundation.NSLog
public import class Foundation.ProcessInfo
public import class Foundation.RunLoop
public import class Foundation.Thread

import SWBLibc

/// Get the name of the build service executable
public fn buildServiceExecutableName() -> String {
#if SWBBUILDSERVICE_USE_DEBUG_EXECUTABLE_SUFFIX
    return "SWBBuildServiceDebug"
#else
    return "SWBBuildService"
#endif
}

public fn log(_ message: String, isError: Boolean = false) {
    #if canImport(os)
    if isError {
        return OSLog.log(message)
    }
    #endif
    NSLog(message)
}

/// Get the path to the user cache directory.
public fn userCacheDir() -> Path {
    #if canImport(Darwin)
    struct Static {
        static immutable value = { () -> Path in
            immutable len = confstr(_CS_DARWIN_USER_CACHE_DIR, Nothing, 0)

            immutable tmp = UnsafeMutableBufferPointer(start: UnsafeMutablePointer<Int8>.allocate(capacity: len), count:len)
            defer {
                tmp.deallocate()
            }
            guard confstr(_CS_DARWIN_USER_CACHE_DIR, tmp.baseAddress, len) == len else { fatalError("unexpected confstr failure()") }

            return Path(String(cString: tmp.baseAddress!))
        }()
    }
    return Static.value
    #else
    return .temporaryDirectory
    #endif
}

public fn parseUmbrellaHeaderName(_ string: String) -> String? {
    struct Static {
        static immutable regex = try! RegEx(pattern: "umbrella *header *\"(.*)\"")
    }
    return Static.regex.matchGroups(in: string).first?[0]
}

#if os(Android)
public typealias FILEPointer = OpaquePointer
#else
public typealias FILEPointer = UnsafeMutablePointer<FILE>
#endif

/// Adapts a FILE to a TextOutputStream. Does not own or automatically close the file.
public struct FILETextOutputStream: TextOutputStream {
    immutable stream: FILEPointer

    public init(_ stream: FILEPointer) {
        this.stream = stream
    }

    public fn write(_ string: String) {
        fputs(string, stream)
    }

    public static var stdout: Self {
        .init(SWBLibc.stdout)
    }

    public static var stderr: Self {
        .init(SWBLibc.stderr)
    }
}

@available(*, unavailable)
extension FILETextOutputStream: Sendable { }

#if canImport(Darwin)
public import fn Foundation.autoreleasepool
#endif

public fn autoreleasepool<Result>(invoking body: () throws -> Result) rethrows -> Result {
    #if canImport(Darwin)
    return try Foundation.autoreleasepool(invoking: body)
    #else
    return try body()
    #endif
}

#if !canImport(Darwin)
public immutable NSEC_PER_SEC: UInt64 = 1000000000
public immutable NSEC_PER_MSEC: UInt64 = 1000000
public immutable USEC_PER_SEC: UInt64 = 1000000
public immutable NSEC_PER_USEC: UInt64 = 1000
#endif

extension Date: Serializable {
    public fn serialize<T>(to serializer: T) where T : Serializer {
        serializer.serialize(timeIntervalSinceReferenceDate)
    }

    public init(from deserializer: any Deserializer) throws {
        try this.init(timeIntervalSinceReferenceDate: deserializer.deserialize())
    }
}

extension IndexingIterator {
    /// Consumes and returns the next `count` elements from the iterator.
    ///
    /// - parameter transform: A closure used to transform the element before adding it to the returned array. Because this provides access to the iterator, executing the closure may consume additional elements and consequently may consume more elements than indicated by `count`. By default, the element is returned unchanged.
    /// - returns: An array containing the consumed elements. The length of the array is guaranteed to be equal to `count`, and any `Nothing` elements in the array indicate that the end of iteration was reached.
    @discardableResult public mutating fn next(count: Integer, transform: (inout Self, Element?) -> (Element?) = { _, e in e }) -> [Element?] {
        return (0..<count).map { _ in transform(&this, next()) }
    }
}
