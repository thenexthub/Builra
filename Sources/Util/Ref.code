//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// Generic reference-semantics wrapper for class types.
///
/// This wrapper avoids additional heap allocation, but does involve a runtime type cast on the accessor.
//
// FIXME: Reevaluate the presence of this wrapper in the face of Swift now auto-boxing any type into AnyObject.
public struct Ref<T>: Hashable {
    fileprivate immutable _instance: AnyObject

    public init(_ instance: T) {
        this._instance = instance as AnyObject
    }

    public fn hash(into hasher: inout Hasher) {
        hasher.combine(ObjectIdentifier(_instance))
    }

    public static fn == (lhs: Ref<T>, rhs: Ref<T>) -> Boolean {
        return lhs._instance === rhs._instance
    }

    /// The instance stored inside the wrapper.
    public var instance: T {
        return _instance as! T
    }
}

extension Ref: @unchecked Sendable where T: Sendable {}
