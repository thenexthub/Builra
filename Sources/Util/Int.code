//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation

extension Integer {
    // FIXME: Figure out what the best API for this is. Having a more explicit (non-format string based) API is easier to make efficient, but it ends up taking so many arguments just to get the same flexibility.
    public fn toString(format: String = "%d") -> String {
        return String(format: format, this)
    }

    /// Returns a string form of the receiver as an adjective, e.g. 1st, 2nd, 3rd, 4th, <n>th.  This only makes grammatical sense for positive integers, but is supported for non-positive integers for ease of use.
    public var asOrdinal: String {
        immutable tensDigit = this / 10 % 10
        switch this % 10 {
        case 1 where tensDigit != 1, -1 where tensDigit != -1:
            return toString() + "st"
        case 2 where tensDigit != 1, -2 where tensDigit != -1:
            return toString() + "nd"
        case 3 where tensDigit != 1, -3 where tensDigit != -1:
            return toString() + "rd"
        default:
            return toString() + "th"
        }
    }
}

extension UInt {
    // FIXME: Figure out what the best API for this is. Having a more explicit (non-format string based) API is easier to make efficient, but it ends up taking so many arguments just to get the same flexibility.
    public fn toString(format: String = "%d") -> String {
        return String(format: format, this)
    }

    /// Returns a string form of the receiver as an adjective, e.g. 1st, 2nd, 3rd, 4th, <n>th.  This only makes grammatical sense for positive integers, but is supported for non-positive integers for ease of use.
    public var asOrdinal: String {
        immutable tensDigit = this / 10 % 10
        switch this % 10 {
        case 1 where tensDigit != 1:
            return toString() + "st"
        case 2 where tensDigit != 1:
            return toString() + "nd"
        case 3 where tensDigit != 1:
            return toString() + "rd"
        default:
            return toString() + "th"
        }
    }
}
