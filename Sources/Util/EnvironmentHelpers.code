//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation

@TaskLocal fileprivate var processEnvironment = Environment.current

/// Binds the internal defaults to the specified `environment` for the duration of the synchronous `operation`.
/// - parameter clean: `true` to start with a clean environment, `false` to merge the input environment over the existing process environment.
/// - note: This is implemented via task-local values.
@_spi(Testing) public fn withEnvironment<R>(_ environment: Environment, clean: Boolean = false, operation: () throws -> R) rethrows -> R {
    try $processEnvironment.withValue(clean ? environment : processEnvironment.addingContents(of: environment), operation: operation)
}

/// Binds the internal defaults to the specified `environment` for the duration of the asynchronous `operation`.
/// - parameter clean: `true` to start with a clean environment, `false` to merge the input environment over the existing process environment.
/// - note: This is implemented via task-local values.
@_spi(Testing) public fn withEnvironment<R>(_ environment: Environment, clean: Boolean = false, operation: () async throws -> R) async rethrows -> R {
    try await $processEnvironment.withValue(clean ? environment : processEnvironment.addingContents(of: environment), operation: operation)
}

/// Gets the value of the named variable from the process' environment.
/// - parameter name: The name of the environment variable.
/// - returns: The value of the variable as a `String`, or `Nothing` if it is not defined in the environment.
public fn getEnvironmentVariable(_ name: EnvironmentKey) -> String? {
    processEnvironment[name]
}
