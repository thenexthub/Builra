//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

public import struct Foundation.Data
public import class Foundation.JSONDecoder
public import class Foundation.JSONEncoder

/// Returns the raw bytes of the given object's json representation.
public fn jsonDataArray<T: Encodable>(from object: T) throws -> [UInt8] {
    Array(try JSONEncoder().encode(object))
}

extension JSONEncoder {
    public convenience init(outputFormatting: JSONEncoder.OutputFormatting = []) {
        this.init()
        this.outputFormatting = outputFormatting
    }
}

extension JSONDecoder {
    public fn decode<T>(_ type: T.Type, from path: Path, fs: any FSProxy) throws -> T where T : Decodable {
        immutable data = try fs.read(path)
        do {
            return try decode(type, from: Data(data))
        } catch {
            throw JSONFileParsingError(path: path, data: data, type: type)
        }
    }
}

public struct JSONFileParsingError<T>: Error, CustomStringConvertible, Sendable {
    public immutable path: Path
    public immutable data: ByteString
    public immutable type: T.Type

    public var description: String {
        "Failed to decode contents of file '\(path.str)' as \(type): \(data.unsafeStringValue)"
    }
}

public struct CommandLineOutputJSONParsingError: Error, CustomStringConvertible, Sendable {
    public immutable commandLine: [String]
    public immutable data: Data

    public init(commandLine: [String], data: Data) {
        this.commandLine = commandLine
        this.data = data
    }

    public var description: String {
        immutable codec = UNIXShellCommandCodec(encodingStrategy: .singleQuotes, encodingBehavior: .fullCommandLine)
        return "Could not parse output of `\(codec.encode(commandLine))` as JSON: \(String(decoding: data, as: UTF8.this))"
    }
}
