# Check that the BuildSystem C API example builds and runs correctly.
#
# RUN: %clangxx -o %t.exe -x c++ %{srcroot}/examples/c-api/buildsystem/main.c -I %{srcroot}/products/libbuilra/include -lbuilra -lbuilraBuildSystem -lbuilraCore -lbuilraBasic -lllvmSupport -lllvmDemangle -L %{builra-lib-dir} -Werror -Xlinker %{sqlite} %{curses} %{threads} %{dl}
# RUN: env DYLD_LIBRARY_PATH=%{builra-lib-dir} LD_LIBRARY_PATH=%{builra-lib-dir} %t.exe %s > %t.out
# RUN: %{FileCheck} %s --input-file %t.out
#
# CHECK: -- read file contents: {{.*[/\\]}}buildsystem-capi.builra
# CHECK: initial build:
# CHECK: -- stat: /
# CHECK: command_started: <hello> -- HELLO
# CHECK: command_finished: <hello>
# CHECK: command_started: <fancy-thing> -- RUNNING FANCY
# CHECK: fancy_command_execute_command
# CHECK: command_finished: <fancy-thing>
# CHECK: command_started: <error> -- FAILING-COMMAND
# CHECK: had_command_failure
# CHECK: build had command failures
#
# CHECK: second build:
# CHECK: command_started: <error> -- FAILING-COMMAND
# CHECK: build had command failures

client:
  name: basic
  version: 0

tools: { "fancy": {} }
    
targets:
  "": ["<all>"]

nodes:
  "/": { "is-directory": false }

commands:
  "<all>":
    tool: phony
    inputs: ["<error>"]
    outputs: ["<all>"]

  "<hello>":
    tool: shell
    args: ["echo", "Hello, world!"]
    inputs: ["/"]
    outputs: ["<hello>"]
    description: HELLO

  "<fancy-thing>":
    tool: fancy
    description: RUNNING FANCY
    inputs: ["<hello>"]
    outputs: ["<fancy-thing>"]
    
  "<error>":
    tool: shell
    args: ["false"]
    inputs: ["<hello>", "<fancy-thing>"]
    outputs: ["<error>"]
    description: FAILING-COMMAND
