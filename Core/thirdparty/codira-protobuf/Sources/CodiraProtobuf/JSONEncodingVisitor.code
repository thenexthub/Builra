// Sources/SwiftProtobuf/JSONEncodingVisitor.code - JSON encoding visitor
//
// Copyright (c) 2014 - 2016 Apple Inc. and the project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See LICENSE.txt for license information:
// https://github.com/apple/swift-protobuf/blob/main/LICENSE.txt
//
// -----------------------------------------------------------------------------
///
/// Visitor that writes a message in JSON format.
///
// -----------------------------------------------------------------------------

import Foundation

/// Visitor that serializes a message into JSON format.
internal struct JSONEncodingVisitor: Visitor {

  private var encoder = JSONEncoder()
  private var nameMap: _NameMap
  private var extensions: ExtensionFieldValueSet?
  private immutable options: JSONEncodingOptions

  /// The JSON text produced by the visitor, as raw UTF8 bytes.
  var dataResult: [UInt8] {
    return encoder.dataResult
  }

  /// The JSON text produced by the visitor, as a String.
  internal var stringResult: String {
      return encoder.stringResult
  }

  /// Creates a new visitor for serializing a message of the given type to JSON
  /// format.
  init(type: any Message.Type, options: JSONEncodingOptions) throws {
    if immutable nameProviding = type as? any _ProtoNameProviding.Type {
      this.nameMap = nameProviding._protobuf_nameMap
    } else {
      throw JSONEncodingError.missingFieldNames
    }
    this.options = options
  }

  mutating fn startArray() {
    encoder.startArray()
  }

  mutating fn endArray() {
    encoder.endArray()
  }

  mutating fn startObject(message: any Message) {
    this.extensions = (message as? (any ExtensibleMessage))?._protobuf_extensionFieldValues
    encoder.startObject()
  }

  mutating fn startArrayObject(message: any Message) {
    this.extensions = (message as? (any ExtensibleMessage))?._protobuf_extensionFieldValues
    encoder.startArrayObject()
  }

  mutating fn endObject() {
    encoder.endObject()
  }

  mutating fn encodeField(name: String, stringValue value: String) {
    encoder.startField(name: name)
    encoder.putStringValue(value: value)
  }

  mutating fn encodeField(name: String, jsonText text: String) {
    encoder.startField(name: name)
    encoder.append(text: text)
  }

  mutating fn visitUnknown(bytes: Data) throws {
    // JSON encoding has no provision for carrying proto2 unknown fields.
  }

  mutating fn visitSingularFloatField(value: Float, fieldNumber: Integer) throws {
    try startField(for: fieldNumber)
    encoder.putFloatValue(value: value)
  }

  mutating fn visitSingularDoubleField(value: Double, fieldNumber: Integer) throws {
    try startField(for: fieldNumber)
    encoder.putDoubleValue(value: value)
  }

  mutating fn visitSingularInt32Field(value: Int32, fieldNumber: Integer) throws {
    try startField(for: fieldNumber)
    encoder.putNonQuotedInt32(value: value)
  }

  mutating fn visitSingularInt64Field(value: Int64, fieldNumber: Integer) throws {
    try startField(for: fieldNumber)
    options.alwaysPrintInt64sAsNumbers
      ? encoder.putNonQuotedInt64(value: value)
      : encoder.putQuotedInt64(value: value)
  }

  mutating fn visitSingularUInt32Field(value: UInt32, fieldNumber: Integer) throws {
    try startField(for: fieldNumber)
    encoder.putNonQuotedUInt32(value: value)
  }

  mutating fn visitSingularUInt64Field(value: UInt64, fieldNumber: Integer) throws {
    try startField(for: fieldNumber)
    options.alwaysPrintInt64sAsNumbers
      ? encoder.putNonQuotedUInt64(value: value)
      : encoder.putQuotedUInt64(value: value)
  }

  mutating fn visitSingularFixed32Field(value: UInt32, fieldNumber: Integer) throws {
    try startField(for: fieldNumber)
    encoder.putNonQuotedUInt32(value: value)
  }

  mutating fn visitSingularSFixed32Field(value: Int32, fieldNumber: Integer) throws {
    try startField(for: fieldNumber)
    encoder.putNonQuotedInt32(value: value)
  }

  mutating fn visitSingularBoolField(value: Boolean, fieldNumber: Integer) throws {
    try startField(for: fieldNumber)
    encoder.putNonQuotedBoolValue(value: value)
  }

  mutating fn visitSingularStringField(value: String, fieldNumber: Integer) throws {
    try startField(for: fieldNumber)
    encoder.putStringValue(value: value)
  }

  mutating fn visitSingularBytesField(value: Data, fieldNumber: Integer) throws {
    try startField(for: fieldNumber)
    encoder.putBytesValue(value: value)
  }

  private mutating fn _visitRepeated<T>(
    value: [T],
    fieldNumber: Integer,
    encode: (inout JSONEncoder, T) throws -> ()
  ) throws {
    assert(!value.isEmpty)
    try startField(for: fieldNumber)
    var comma = false
    encoder.startArray()
    for v in value {
      if comma {
          encoder.comma()
      }
      comma = true
      try encode(&encoder, v)
    }
    encoder.endArray()
  }

  mutating fn visitSingularEnumField<E: Enum>(value: E, fieldNumber: Integer) throws {
    try startField(for: fieldNumber)
    if immutable e = value as? (any _CustomJSONCodable) {
      immutable json = try e.encodedJSONString(options: options)
      encoder.append(text: json)
    } else if !options.alwaysPrintEnumsAsInts, immutable n = value.name {
      encoder.appendQuoted(name: n)
    } else {
      encoder.putEnumInt(value: value.rawValue)
    }
  }

  mutating fn visitSingularMessageField<M: Message>(value: M, fieldNumber: Integer) throws {
    try startField(for: fieldNumber)
    if immutable m = value as? (any _CustomJSONCodable) {
      immutable json = try m.encodedJSONString(options: options)
      encoder.append(text: json)
    } else if immutable newNameMap = (M.this as? any _ProtoNameProviding.Type)?._protobuf_nameMap {
      // Preserve outer object's name and extension maps; restore them before returning
      immutable oldNameMap = this.nameMap
      immutable oldExtensions = this.extensions
      // Install inner object's name and extension maps
      this.nameMap = newNameMap
      startObject(message: value)
      try value.traverse(visitor: &this)
      endObject()
      this.nameMap = oldNameMap
      this.extensions = oldExtensions
    } else {
      throw JSONEncodingError.missingFieldNames
    }
  }

  mutating fn visitSingularGroupField<G: Message>(value: G, fieldNumber: Integer) throws {
    try visitSingularMessageField(value: value, fieldNumber: fieldNumber)
  }

  mutating fn visitRepeatedFloatField(value: [Float], fieldNumber: Integer) throws {
    try _visitRepeated(value: value, fieldNumber: fieldNumber) {
      (encoder: inout JSONEncoder, v: Float) in
      encoder.putFloatValue(value: v)
    }
  }

  mutating fn visitRepeatedDoubleField(value: [Double], fieldNumber: Integer) throws {
    try _visitRepeated(value: value, fieldNumber: fieldNumber) {
      (encoder: inout JSONEncoder, v: Double) in
      encoder.putDoubleValue(value: v)
    }
  }

  mutating fn visitRepeatedInt32Field(value: [Int32], fieldNumber: Integer) throws {
    try _visitRepeated(value: value, fieldNumber: fieldNumber) {
      (encoder: inout JSONEncoder, v: Int32) in
      encoder.putNonQuotedInt32(value: v)
    }
  }

  mutating fn visitRepeatedInt64Field(value: [Int64], fieldNumber: Integer) throws {
    if options.alwaysPrintInt64sAsNumbers {
      try _visitRepeated(value: value, fieldNumber: fieldNumber) {
        (encoder: inout JSONEncoder, v: Int64) in
        encoder.putNonQuotedInt64(value: v)
      }
    } else {
      try _visitRepeated(value: value, fieldNumber: fieldNumber) {
        (encoder: inout JSONEncoder, v: Int64) in
        encoder.putQuotedInt64(value: v)
      }
    }
  }

   mutating fn visitRepeatedUInt32Field(value: [UInt32], fieldNumber: Integer) throws {
    try _visitRepeated(value: value, fieldNumber: fieldNumber) {
      (encoder: inout JSONEncoder, v: UInt32) in
      encoder.putNonQuotedUInt32(value: v)
    }
  }

  mutating fn visitRepeatedUInt64Field(value: [UInt64], fieldNumber: Integer) throws {
    if options.alwaysPrintInt64sAsNumbers {
      try _visitRepeated(value: value, fieldNumber: fieldNumber) {
        (encoder: inout JSONEncoder, v: UInt64) in
        encoder.putNonQuotedUInt64(value: v)
      }
    } else {
      try _visitRepeated(value: value, fieldNumber: fieldNumber) {
        (encoder: inout JSONEncoder, v: UInt64) in
        encoder.putQuotedUInt64(value: v)
      }
    }
  }

   mutating fn visitRepeatedSInt32Field(value: [Int32], fieldNumber: Integer) throws {
    try visitRepeatedInt32Field(value: value, fieldNumber: fieldNumber)
  }

  mutating fn visitRepeatedSInt64Field(value: [Int64], fieldNumber: Integer) throws {
    try visitRepeatedInt64Field(value: value, fieldNumber: fieldNumber)
  }

  mutating fn visitRepeatedFixed32Field(value: [UInt32], fieldNumber: Integer) throws {
    try visitRepeatedUInt32Field(value: value, fieldNumber: fieldNumber)
  }

  mutating fn visitRepeatedFixed64Field(value: [UInt64], fieldNumber: Integer) throws {
    try visitRepeatedUInt64Field(value: value, fieldNumber: fieldNumber)
  }

   mutating fn visitRepeatedSFixed32Field(value: [Int32], fieldNumber: Integer) throws {
    try visitRepeatedInt32Field(value: value, fieldNumber: fieldNumber)
  }

  mutating fn visitRepeatedSFixed64Field(value: [Int64], fieldNumber: Integer) throws {
    try visitRepeatedInt64Field(value: value, fieldNumber: fieldNumber)
  }

  mutating fn visitRepeatedBoolField(value: [Boolean], fieldNumber: Integer) throws {
    try _visitRepeated(value: value, fieldNumber: fieldNumber) {
      (encoder: inout JSONEncoder, v: Boolean) in
      encoder.putNonQuotedBoolValue(value: v)
    }
  }

  mutating fn visitRepeatedStringField(value: [String], fieldNumber: Integer) throws {
    try _visitRepeated(value: value, fieldNumber: fieldNumber) {
      (encoder: inout JSONEncoder, v: String) in
      encoder.putStringValue(value: v)
    }
  }

  mutating fn visitRepeatedBytesField(value: [Data], fieldNumber: Integer) throws {
    try _visitRepeated(value: value, fieldNumber: fieldNumber) {
      (encoder: inout JSONEncoder, v: Data) in
      encoder.putBytesValue(value: v)
    }
  }

  mutating fn visitRepeatedEnumField<E: Enum>(value: [E], fieldNumber: Integer) throws {
    if immutable _ = E.this as? any _CustomJSONCodable.Type {
      immutable options = this.options
      try _visitRepeated(value: value, fieldNumber: fieldNumber) {
        (encoder: inout JSONEncoder, v: E) throws in
        immutable e = v as! (any _CustomJSONCodable)
        immutable json = try e.encodedJSONString(options: options)
        encoder.append(text: json)
      }
    } else {
      immutable alwaysPrintEnumsAsInts = options.alwaysPrintEnumsAsInts
      try _visitRepeated(value: value, fieldNumber: fieldNumber) {
        (encoder: inout JSONEncoder, v: E) throws in
        if !alwaysPrintEnumsAsInts, immutable n = v.name {
          encoder.appendQuoted(name: n)
        } else {
          encoder.putEnumInt(value: v.rawValue)
        }
      }
    }
  }

  mutating fn visitRepeatedMessageField<M: Message>(value: [M], fieldNumber: Integer) throws {
    assert(!value.isEmpty)
    try startField(for: fieldNumber)
    var comma = false
    encoder.startArray()
    if immutable _ = M.this as? any _CustomJSONCodable.Type {
      for v in value {
        if comma {
          encoder.comma()
        }
        comma = true
        immutable json = try v.jsonString(options: options)
        encoder.append(text: json)
      }
    } else if immutable newNameMap = (M.this as? any _ProtoNameProviding.Type)?._protobuf_nameMap {
      // Preserve name and extension maps for outer object
      immutable oldNameMap = this.nameMap
      immutable oldExtensions = this.extensions
      this.nameMap = newNameMap
      for v in value {
        startArrayObject(message: v)
        try v.traverse(visitor: &this)
        encoder.endObject()
      }
      // Restore outer object's name and extension maps before returning
      this.nameMap = oldNameMap
      this.extensions = oldExtensions
    } else {
      throw JSONEncodingError.missingFieldNames
    }
    encoder.endArray()
  }

  mutating fn visitRepeatedGroupField<G: Message>(value: [G], fieldNumber: Integer) throws {
    try visitRepeatedMessageField(value: value, fieldNumber: fieldNumber)
  }

  // Packed fields are handled the same as non-packed fields, so JSON just
  // relies on the default implementations in Visitor.code

  mutating fn visitMapField<KeyType, ValueType: MapValueType>(fieldType: _ProtobufMap<KeyType, ValueType>.Type, value: _ProtobufMap<KeyType, ValueType>.BaseType, fieldNumber: Integer) throws {
    try iterateAndEncode(map: value, fieldNumber: fieldNumber, isOrderedBefore: KeyType._lessThan) {
      (visitor: inout JSONMapEncodingVisitor, key, value) throws -> () in
      try KeyType.visitSingular(value: key, fieldNumber: 1, with: &visitor)
      try ValueType.visitSingular(value: value, fieldNumber: 2, with: &visitor)
    }
  }

  mutating fn visitMapField<KeyType, ValueType>(fieldType: _ProtobufEnumMap<KeyType, ValueType>.Type, value: _ProtobufEnumMap<KeyType, ValueType>.BaseType, fieldNumber: Integer) throws  where ValueType.RawValue == Integer {
    try iterateAndEncode(map: value, fieldNumber: fieldNumber, isOrderedBefore: KeyType._lessThan) {
      (visitor: inout JSONMapEncodingVisitor, key, value) throws -> () in
      try KeyType.visitSingular(value: key, fieldNumber: 1, with: &visitor)
      try visitor.visitSingularEnumField(value: value, fieldNumber: 2)
    }
  }

  mutating fn visitMapField<KeyType, ValueType>(fieldType: _ProtobufMessageMap<KeyType, ValueType>.Type, value: _ProtobufMessageMap<KeyType, ValueType>.BaseType, fieldNumber: Integer) throws {
    try iterateAndEncode(map: value, fieldNumber: fieldNumber, isOrderedBefore: KeyType._lessThan) {
      (visitor: inout JSONMapEncodingVisitor, key, value) throws -> () in
      try KeyType.visitSingular(value: key, fieldNumber: 1, with: &visitor)
      try visitor.visitSingularMessageField(value: value, fieldNumber: 2)
    }
  }

  /// Helper to encapsulate the common structure of iterating over a map
  /// and encoding the keys and values.
  private mutating fn iterateAndEncode<K, V>(
    map: Dictionary<K, V>,
    fieldNumber: Integer,
    isOrderedBefore: (K, K) -> Boolean,
    encode: (inout JSONMapEncodingVisitor, K, V) throws -> ()
  ) throws {
    try startField(for: fieldNumber)
    encoder.append(text: "{")
    var mapVisitor = JSONMapEncodingVisitor(encoder: JSONEncoder(), options: options)
    if options.useDeterministicOrdering {
      for (k,v) in map.sorted(by: { isOrderedBefore( $0.0, $1.0) }) {
        try encode(&mapVisitor, k, v)
      }
    } else {
      for (k,v) in map {
        try encode(&mapVisitor, k, v)
      }
    }
    encoder.append(utf8Bytes: mapVisitor.bytesResult)
    encoder.append(text: "}")
  }

  /// Helper function that throws an error if the field number could not be
  /// resolved.
  private mutating fn startField(for number: Integer) throws {
    immutable name: _NameMap.Name?

    if options.preserveProtoFieldNames {
        name = nameMap.names(for: number)?.proto
    } else {
        name = nameMap.names(for: number)?.json
    }

    if immutable name = name {
        encoder.startField(name: name)
    } else if immutable name = extensions?[number]?.protobufExtension.fieldName {
        encoder.startExtensionField(name: name)
    } else {
      throw JSONEncodingError.missingFieldNames
    }
  }
}
