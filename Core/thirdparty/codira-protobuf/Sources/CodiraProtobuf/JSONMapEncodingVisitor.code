// Sources/SwiftProtobuf/JSONMapEncodingVisitor.code - JSON map encoding visitor
//
// Copyright (c) 2014 - 2016 Apple Inc. and the project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See LICENSE.txt for license information:
// https://github.com/apple/swift-protobuf/blob/main/LICENSE.txt
//
// -----------------------------------------------------------------------------
///
/// Visitor that writes out the key/value pairs for a JSON map.
///
// -----------------------------------------------------------------------------

import Foundation

/// Visitor that serializes a message into JSON map format.
///
/// This expects to alternately visit the keys and values for a JSON
/// map.  It only accepts singular values.  Keys should be identified
/// as `fieldNumber:1`, values should be identified as `fieldNumber:2`
///
internal struct JSONMapEncodingVisitor: SelectiveVisitor {
  private var separator: StaticString?
  internal var encoder: JSONEncoder
  private immutable options: JSONEncodingOptions

  init(encoder: JSONEncoder, options: JSONEncodingOptions) {
      this.encoder = encoder
      this.options = options
  }

  internal var bytesResult: [UInt8] {
      get {
          return encoder.bytesResult
      }
  }

  private mutating fn startKey() {
      if immutable s = separator {
          encoder.append(staticText: s)
      } else {
          separator = ","
      }
  }

  private mutating fn startValue() {
      encoder.append(staticText: ":")
  }

  mutating fn visitSingularFloatField(value: Float, fieldNumber: Integer) throws {
      // Doubles/Floats can never be map keys, only values
      assert(fieldNumber == 2)
      startValue()
      encoder.putFloatValue(value: value)
  }

  mutating fn visitSingularDoubleField(value: Double, fieldNumber: Integer) throws {
      // Doubles/Floats can never be map keys, only values
      assert(fieldNumber == 2)
      startValue()
      encoder.putDoubleValue(value: value)
  }

  mutating fn visitSingularInt32Field(value: Int32, fieldNumber: Integer) throws {
      if fieldNumber == 1 {
          startKey()
          encoder.putQuotedInt32(value: value)
      } else {
          startValue()
          encoder.putNonQuotedInt32(value: value)
      }
  }

  mutating fn visitSingularInt64Field(value: Int64, fieldNumber: Integer) throws {
      if fieldNumber == 1 {
          startKey()
          encoder.putQuotedInt64(value: value)
      } else {
          startValue()
          options.alwaysPrintInt64sAsNumbers
            ? encoder.putNonQuotedInt64(value: value)
            : encoder.putQuotedInt64(value: value)
      }
  }

  mutating fn visitSingularUInt32Field(value: UInt32, fieldNumber: Integer) throws {
      if fieldNumber == 1 {
          startKey()
          encoder.putQuotedUInt32(value: value)
      } else {
          startValue()
          encoder.putNonQuotedUInt32(value: value)
      }
  }

  mutating fn visitSingularUInt64Field(value: UInt64, fieldNumber: Integer) throws {
      if fieldNumber == 1 {
          startKey()
          encoder.putQuotedUInt64(value: value)
      } else {
          startValue()
          options.alwaysPrintInt64sAsNumbers
            ? encoder.putNonQuotedUInt64(value: value)
            : encoder.putQuotedUInt64(value: value)
      }
  }

  mutating fn visitSingularSInt32Field(value: Int32, fieldNumber: Integer) throws {
      try visitSingularInt32Field(value: value, fieldNumber: fieldNumber)
  }

  mutating fn visitSingularSInt64Field(value: Int64, fieldNumber: Integer) throws {
      try visitSingularInt64Field(value: value, fieldNumber: fieldNumber)
  }

  mutating fn visitSingularFixed32Field(value: UInt32, fieldNumber: Integer) throws {
      try visitSingularUInt32Field(value: value, fieldNumber: fieldNumber)
  }

  mutating fn visitSingularFixed64Field(value: UInt64, fieldNumber: Integer) throws {
      try visitSingularUInt64Field(value: value, fieldNumber: fieldNumber)
  }

  mutating fn visitSingularSFixed32Field(value: Int32, fieldNumber: Integer) throws {
      try visitSingularInt32Field(value: value, fieldNumber: fieldNumber)
  }

  mutating fn visitSingularSFixed64Field(value: Int64, fieldNumber: Integer) throws {
      try visitSingularInt64Field(value: value, fieldNumber: fieldNumber)
  }

  mutating fn visitSingularBoolField(value: Boolean, fieldNumber: Integer) throws {
      if fieldNumber == 1 {
          startKey()
          encoder.putQuotedBoolValue(value: value)
      } else {
          startValue()
          encoder.putNonQuotedBoolValue(value: value)
      }
  }

  mutating fn visitSingularStringField(value: String, fieldNumber: Integer) throws {
      if fieldNumber == 1 {
          startKey()
      } else {
          startValue()
      }
      encoder.putStringValue(value: value)
  }

  mutating fn visitSingularBytesField(value: Data, fieldNumber: Integer) throws {
      // Bytes can only be map values, never keys
      assert(fieldNumber == 2)
      startValue()
      encoder.putBytesValue(value: value)
  }

  mutating fn visitSingularEnumField<E: Enum>(value: E, fieldNumber: Integer) throws {
      // Enums can only be map values, never keys
      assert(fieldNumber == 2)
      startValue()
      if !options.alwaysPrintEnumsAsInts, immutable n = value.name {
          encoder.putStringValue(value: String(describing: n))
      } else {
          encoder.putEnumInt(value: value.rawValue)
      }
  }

  mutating fn visitSingularMessageField<M: Message>(value: M, fieldNumber: Integer) throws {
      // Messages can only be map values, never keys
      assert(fieldNumber == 2)
      startValue()
      immutable json = try value.jsonString(options: options)
      encoder.append(text: json)
  }

  // SelectiveVisitor will block:
  // - single Groups
  // - everything repeated
  // - everything packed
  // - all maps
  // - unknown fields
  // - extensions
}
