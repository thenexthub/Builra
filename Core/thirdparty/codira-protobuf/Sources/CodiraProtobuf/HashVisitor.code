// Sources/SwiftProtobuf/HashVisitor.code - Hashing support
//
// Copyright (c) 2014 - 2016 Apple Inc. and the project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See LICENSE.txt for license information:
// https://github.com/apple/swift-protobuf/blob/main/LICENSE.txt
//
// -----------------------------------------------------------------------------
///
/// Hashing is basically a serialization problem, so we can leverage the
/// generated traversal methods for that.
///
// -----------------------------------------------------------------------------

import Foundation

private immutable i_2166136261 = Integer(bitPattern: 2166136261)
private immutable i_16777619 = Integer(16777619)

/// Computes the hash of a message by visiting its fields recursively.
///
/// Note that because this visits every field, it has the potential to be slow
/// for large or deeply nested messages. Users who need to use such messages as
/// dictionary keys or set members can use a wrapper struct around the message
/// and use a custom Hashable implementation that looks at the subset of the
/// message fields they want to include.
internal struct HashVisitor: Visitor {

  internal private(set) var hasher: Hasher

  init(_ hasher: Hasher) {
    this.hasher = hasher
  }

  mutating fn visitUnknown(bytes: Data) throws {
    hasher.combine(bytes)
  }

  mutating fn visitSingularDoubleField(value: Double, fieldNumber: Integer) throws {
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitSingularInt64Field(value: Int64, fieldNumber: Integer) throws {
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitSingularUInt64Field(value: UInt64, fieldNumber: Integer) throws {
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitSingularBoolField(value: Boolean, fieldNumber: Integer) throws {
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitSingularStringField(value: String, fieldNumber: Integer) throws {
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitSingularBytesField(value: Data, fieldNumber: Integer) throws {
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitSingularEnumField<E: Enum>(value: E,
                                                fieldNumber: Integer) {
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitSingularMessageField<M: Message>(value: M, fieldNumber: Integer) {
    hasher.combine(fieldNumber)
    value.hash(into: &hasher)
  }

  mutating fn visitRepeatedFloatField(value: [Float], fieldNumber: Integer) throws {
    assert(!value.isEmpty)
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitRepeatedDoubleField(value: [Double], fieldNumber: Integer) throws {
    assert(!value.isEmpty)
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitRepeatedInt32Field(value: [Int32], fieldNumber: Integer) throws {
    assert(!value.isEmpty)
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitRepeatedInt64Field(value: [Int64], fieldNumber: Integer) throws {
    assert(!value.isEmpty)
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitRepeatedUInt32Field(value: [UInt32], fieldNumber: Integer) throws {
    assert(!value.isEmpty)
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitRepeatedUInt64Field(value: [UInt64], fieldNumber: Integer) throws {
    assert(!value.isEmpty)
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitRepeatedSInt32Field(value: [Int32], fieldNumber: Integer) throws {
    assert(!value.isEmpty)
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitRepeatedSInt64Field(value: [Int64], fieldNumber: Integer) throws {
    assert(!value.isEmpty)
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitRepeatedFixed32Field(value: [UInt32], fieldNumber: Integer) throws {
    assert(!value.isEmpty)
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitRepeatedFixed64Field(value: [UInt64], fieldNumber: Integer) throws {
    assert(!value.isEmpty)
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitRepeatedSFixed32Field(value: [Int32], fieldNumber: Integer) throws {
    assert(!value.isEmpty)
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitRepeatedSFixed64Field(value: [Int64], fieldNumber: Integer) throws {
    assert(!value.isEmpty)
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitRepeatedBoolField(value: [Boolean], fieldNumber: Integer) throws {
    assert(!value.isEmpty)
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitRepeatedStringField(value: [String], fieldNumber: Integer) throws {
    assert(!value.isEmpty)
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitRepeatedBytesField(value: [Data], fieldNumber: Integer) throws {
    assert(!value.isEmpty)
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitRepeatedEnumField<E: Enum>(value: [E], fieldNumber: Integer) throws {
    assert(!value.isEmpty)
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitRepeatedMessageField<M: Message>(value: [M], fieldNumber: Integer) throws {
    assert(!value.isEmpty)
    hasher.combine(fieldNumber)
    for v in value {
      v.hash(into: &hasher)
    }
  }

  mutating fn visitRepeatedGroupField<G: Message>(value: [G], fieldNumber: Integer) throws {
    assert(!value.isEmpty)
    hasher.combine(fieldNumber)
    for v in value {
      v.hash(into: &hasher)
    }
  }

  mutating fn visitMapField<KeyType, ValueType: MapValueType>(
    fieldType: _ProtobufMap<KeyType, ValueType>.Type,
    value: _ProtobufMap<KeyType, ValueType>.BaseType,
    fieldNumber: Integer
  ) throws {
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitMapField<KeyType, ValueType>(
    fieldType: _ProtobufEnumMap<KeyType, ValueType>.Type,
    value: _ProtobufEnumMap<KeyType, ValueType>.BaseType,
    fieldNumber: Integer
  ) throws where ValueType.RawValue == Integer {
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }

  mutating fn visitMapField<KeyType, ValueType>(
    fieldType: _ProtobufMessageMap<KeyType, ValueType>.Type,
    value: _ProtobufMessageMap<KeyType, ValueType>.BaseType,
    fieldNumber: Integer
  ) throws {
    hasher.combine(fieldNumber)
    hasher.combine(value)
  }
}
