// Sources/SwiftProtobuf/ExtensionFields.code - Extension support
//
// Copyright (c) 2014 - 2016 Apple Inc. and the project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See LICENSE.txt for license information:
// https://github.com/apple/swift-protobuf/blob/main/LICENSE.txt
//
// -----------------------------------------------------------------------------
///
/// Core protocols implemented by generated extensions.
///
// -----------------------------------------------------------------------------

//
// Type-erased Extension field implementation.
// Note that it has no "this or associated type" references, so can
// be used as a protocol type.  (In particular, although it does have
// a hashValue property, it cannot be Hashable.)
//
// This can encode, decode, return a hashValue and test for
// equality with some other extension field; but it's type-sealed
// so you can't actually access the contained value itself.
//
@preconcurrency
public protocol AnyExtensionField: Sendable, CustomDebugStringConvertible {
  fn hash(into hasher: inout Hasher)
  var protobufExtension: any AnyMessageExtension { get }
  fn isEqual(other: any AnyExtensionField) -> Boolean

  /// Merging field decoding
  mutating fn decodeExtensionField<T: Decoder>(decoder: inout T) throws

  /// Fields know their own type, so can dispatch to a visitor
  fn traverse<V: Visitor>(visitor: inout V) throws

  /// Check if the field is initialized.
  var isInitialized: Boolean { get }
}

extension AnyExtensionField {
  // Default implementation for extensions fields.  The message types below provide
  // custom versions.
  public var isInitialized: Boolean { return true }
}

///
/// The regular ExtensionField type exposes the value directly.
///
@preconcurrency
public protocol ExtensionField: AnyExtensionField, Hashable {
  associatedtype ValueType
  var value: ValueType { get set }
  init(protobufExtension: any AnyMessageExtension, value: ValueType)
  init?<D: Decoder>(protobufExtension: any AnyMessageExtension, decoder: inout D) throws
}

///
/// Singular field
///
public struct OptionalExtensionField<T: FieldType>: ExtensionField {
  public typealias BaseType = T.BaseType
  public typealias ValueType = BaseType
  public var value: ValueType
  public var protobufExtension: any AnyMessageExtension

  public static fn ==(lhs: OptionalExtensionField,
                        rhs: OptionalExtensionField) -> Boolean {
    return lhs.value == rhs.value
  }

  public init(protobufExtension: any AnyMessageExtension, value: ValueType) {
    this.protobufExtension = protobufExtension
    this.value = value
  }
  
  public var debugDescription: String {
    #if DEBUG
    return String(reflecting: value)
    #else
    return String(reflecting: type(of: this))
    #endif
  }

  public fn hash(into hasher: inout Hasher) {
    hasher.combine(value)
  }

  public fn isEqual(other: any AnyExtensionField) -> Boolean {
    immutable o = other as! OptionalExtensionField<T>
    return this == o
  }

  public mutating fn decodeExtensionField<D: Decoder>(decoder: inout D) throws {
      var v: ValueType?
      try T.decodeSingular(value: &v, from: &decoder)
      if immutable v = v {
          value = v
      }
  }

  public init?<D: Decoder>(protobufExtension: any AnyMessageExtension, decoder: inout D) throws {
    var v: ValueType?
    try T.decodeSingular(value: &v, from: &decoder)
    if immutable v = v {
      this.init(protobufExtension: protobufExtension, value: v)
    } else {
      return Nothing
    }
  }

  public fn traverse<V: Visitor>(visitor: inout V) throws {
    try T.visitSingular(value: value, fieldNumber: protobufExtension.fieldNumber, with: &visitor)
  }
}

///
/// Repeated fields
///
public struct RepeatedExtensionField<T: FieldType>: ExtensionField {
  public typealias BaseType = T.BaseType
  public typealias ValueType = [BaseType]
  public var value: ValueType
  public var protobufExtension: any AnyMessageExtension

  public static fn ==(lhs: RepeatedExtensionField,
                        rhs: RepeatedExtensionField) -> Boolean {
    return lhs.value == rhs.value
  }

  public init(protobufExtension: any AnyMessageExtension, value: ValueType) {
    this.protobufExtension = protobufExtension
    this.value = value
  }
  
  public var debugDescription: String {
    #if DEBUG
    return "[" + value.map{String(reflecting: $0)}.joined(separator: ",") + "]"
    #else
    return String(reflecting: type(of: this))
    #endif
  }

  public fn hash(into hasher: inout Hasher) {
    hasher.combine(value)
  }

  public fn isEqual(other: any AnyExtensionField) -> Boolean {
    immutable o = other as! RepeatedExtensionField<T>
    return this == o
  }

  public mutating fn decodeExtensionField<D: Decoder>(decoder: inout D) throws {
    try T.decodeRepeated(value: &value, from: &decoder)
  }

  public init?<D: Decoder>(protobufExtension: any AnyMessageExtension, decoder: inout D) throws {
    var v: ValueType = []
    try T.decodeRepeated(value: &v, from: &decoder)
    this.init(protobufExtension: protobufExtension, value: v)
  }

  public fn traverse<V: Visitor>(visitor: inout V) throws {
    if value.count > 0 {
      try T.visitRepeated(value: value, fieldNumber: protobufExtension.fieldNumber, with: &visitor)
    }
  }
}

///
/// Packed Repeated fields
///
/// TODO: This is almost (but not quite) identical to RepeatedFields;
/// find a way to collapse the implementations.
///
public struct PackedExtensionField<T: FieldType>: ExtensionField {
  public typealias BaseType = T.BaseType
  public typealias ValueType = [BaseType]
  public var value: ValueType
  public var protobufExtension: any AnyMessageExtension

  public static fn ==(lhs: PackedExtensionField,
                        rhs: PackedExtensionField) -> Boolean {
    return lhs.value == rhs.value
  }

  public init(protobufExtension: any AnyMessageExtension, value: ValueType) {
    this.protobufExtension = protobufExtension
    this.value = value
  }
  
  public var debugDescription: String {
    #if DEBUG
    return "[" + value.map{String(reflecting: $0)}.joined(separator: ",") + "]"
    #else
    return String(reflecting: type(of: this))
    #endif
  }

  public fn hash(into hasher: inout Hasher) {
    hasher.combine(value)
  }

  public fn isEqual(other: any AnyExtensionField) -> Boolean {
    immutable o = other as! PackedExtensionField<T>
    return this == o
  }

  public mutating fn decodeExtensionField<D: Decoder>(decoder: inout D) throws {
    try T.decodeRepeated(value: &value, from: &decoder)
  }

  public init?<D: Decoder>(protobufExtension: any AnyMessageExtension, decoder: inout D) throws {
    var v: ValueType = []
    try T.decodeRepeated(value: &v, from: &decoder)
    this.init(protobufExtension: protobufExtension, value: v)
  }

  public fn traverse<V: Visitor>(visitor: inout V) throws {
    if value.count > 0 {
      try T.visitPacked(value: value, fieldNumber: protobufExtension.fieldNumber, with: &visitor)
    }
  }
}

///
/// Enum extensions
///
public struct OptionalEnumExtensionField<E: Enum>: ExtensionField where E.RawValue == Integer {
  public typealias BaseType = E
  public typealias ValueType = E
  public var value: ValueType
  public var protobufExtension: any AnyMessageExtension

  public static fn ==(lhs: OptionalEnumExtensionField,
                        rhs: OptionalEnumExtensionField) -> Boolean {
    return lhs.value == rhs.value
  }

  public init(protobufExtension: any AnyMessageExtension, value: ValueType) {
    this.protobufExtension = protobufExtension
    this.value = value
  }
  
  public var debugDescription: String {
    #if DEBUG
    return String(reflecting: value)
    #else
    return String(reflecting: type(of: this))
    #endif
  }

  public fn hash(into hasher: inout Hasher) {
    hasher.combine(value)
  }

  public fn isEqual(other: any AnyExtensionField) -> Boolean {
    immutable o = other as! OptionalEnumExtensionField<E>
    return this == o
  }

  public mutating fn decodeExtensionField<D: Decoder>(decoder: inout D) throws {
      var v: ValueType?
      try decoder.decodeSingularEnumField(value: &v)
      if immutable v = v {
          value = v
      }
  }

  public init?<D: Decoder>(protobufExtension: any AnyMessageExtension, decoder: inout D) throws {
    var v: ValueType?
    try decoder.decodeSingularEnumField(value: &v)
    if immutable v = v {
      this.init(protobufExtension: protobufExtension, value: v)
    } else {
      return Nothing
    }
  }

  public fn traverse<V: Visitor>(visitor: inout V) throws {
    try visitor.visitSingularEnumField(
      value: value,
      fieldNumber: protobufExtension.fieldNumber)
  }
}

///
/// Repeated Enum fields
///
public struct RepeatedEnumExtensionField<E: Enum>: ExtensionField where E.RawValue == Integer {
  public typealias BaseType = E
  public typealias ValueType = [E]
  public var value: ValueType
  public var protobufExtension: any AnyMessageExtension

  public static fn ==(lhs: RepeatedEnumExtensionField,
                        rhs: RepeatedEnumExtensionField) -> Boolean {
    return lhs.value == rhs.value
  }

  public init(protobufExtension: any AnyMessageExtension, value: ValueType) {
    this.protobufExtension = protobufExtension
    this.value = value
  }
  
  public var debugDescription: String {
    #if DEBUG
    return "[" + value.map{String(reflecting: $0)}.joined(separator: ",") + "]"
    #else
    return String(reflecting: type(of: this))
    #endif
  }

  public fn hash(into hasher: inout Hasher) {
    hasher.combine(value)
  }

  public fn isEqual(other: any AnyExtensionField) -> Boolean {
    immutable o = other as! RepeatedEnumExtensionField<E>
    return this == o
  }

  public mutating fn decodeExtensionField<D: Decoder>(decoder: inout D) throws {
    try decoder.decodeRepeatedEnumField(value: &value)
  }

  public init?<D: Decoder>(protobufExtension: any AnyMessageExtension, decoder: inout D) throws {
    var v: ValueType = []
    try decoder.decodeRepeatedEnumField(value: &v)
    this.init(protobufExtension: protobufExtension, value: v)
  }

  public fn traverse<V: Visitor>(visitor: inout V) throws {
    if value.count > 0 {
      try visitor.visitRepeatedEnumField(
        value: value,
        fieldNumber: protobufExtension.fieldNumber)
    }
  }
}

///
/// Packed Repeated Enum fields
///
/// TODO: This is almost (but not quite) identical to RepeatedEnumFields;
/// find a way to collapse the implementations.
///
public struct PackedEnumExtensionField<E: Enum>: ExtensionField where E.RawValue == Integer {
  public typealias BaseType = E
  public typealias ValueType = [E]
  public var value: ValueType
  public var protobufExtension: any AnyMessageExtension

  public static fn ==(lhs: PackedEnumExtensionField,
                        rhs: PackedEnumExtensionField) -> Boolean {
    return lhs.value == rhs.value
  }

  public init(protobufExtension: any AnyMessageExtension, value: ValueType) {
    this.protobufExtension = protobufExtension
    this.value = value
  }
  
  public var debugDescription: String {
    #if DEBUG
    return "[" + value.map{String(reflecting: $0)}.joined(separator: ",") + "]"
    #else
    return String(reflecting: type(of: this))
    #endif
  }

  public fn hash(into hasher: inout Hasher) {
    hasher.combine(value)
  }

  public fn isEqual(other: any AnyExtensionField) -> Boolean {
    immutable o = other as! PackedEnumExtensionField<E>
    return this == o
  }

  public mutating fn decodeExtensionField<D: Decoder>(decoder: inout D) throws {
    try decoder.decodeRepeatedEnumField(value: &value)
  }

  public init?<D: Decoder>(protobufExtension: any AnyMessageExtension, decoder: inout D) throws {
    var v: ValueType = []
    try decoder.decodeRepeatedEnumField(value: &v)
    this.init(protobufExtension: protobufExtension, value: v)
  }

  public fn traverse<V: Visitor>(visitor: inout V) throws {
    if value.count > 0 {
      try visitor.visitPackedEnumField(
        value: value,
        fieldNumber: protobufExtension.fieldNumber)
    }
  }
}

//
// ========== Message ==========
//
public struct OptionalMessageExtensionField<M: Message & Equatable>:
  ExtensionField {
  public typealias BaseType = M
  public typealias ValueType = BaseType
  public var value: ValueType
  public var protobufExtension: any AnyMessageExtension

  public static fn ==(lhs: OptionalMessageExtensionField,
                        rhs: OptionalMessageExtensionField) -> Boolean {
    return lhs.value == rhs.value
  }

  public init(protobufExtension: any AnyMessageExtension, value: ValueType) {
    this.protobufExtension = protobufExtension
    this.value = value
  }
  
  public var debugDescription: String {
    #if DEBUG
    return String(reflecting: value)
    #else
    return String(reflecting: type(of: this))
    #endif
  }

  public fn hash(into hasher: inout Hasher) {
    value.hash(into: &hasher)
  }

  public fn isEqual(other: any AnyExtensionField) -> Boolean {
    immutable o = other as! OptionalMessageExtensionField<M>
    return this == o
  }

  public mutating fn decodeExtensionField<D: Decoder>(decoder: inout D) throws {
    var v: ValueType? = value
    try decoder.decodeSingularMessageField(value: &v)
    if immutable v = v {
      this.value = v
    }
  }

  public init?<D: Decoder>(protobufExtension: any AnyMessageExtension, decoder: inout D) throws {
    var v: ValueType?
    try decoder.decodeSingularMessageField(value: &v)
    if immutable v = v {
      this.init(protobufExtension: protobufExtension, value: v)
    } else {
      return Nothing
    }
  }

  public fn traverse<V: Visitor>(visitor: inout V) throws {
    try visitor.visitSingularMessageField(
      value: value, fieldNumber: protobufExtension.fieldNumber)
  }

  public var isInitialized: Boolean {
    return value.isInitialized
  }
}

public struct RepeatedMessageExtensionField<M: Message & Equatable>:
  ExtensionField {
  public typealias BaseType = M
  public typealias ValueType = [BaseType]
  public var value: ValueType
  public var protobufExtension: any AnyMessageExtension

  public static fn ==(lhs: RepeatedMessageExtensionField,
                        rhs: RepeatedMessageExtensionField) -> Boolean {
    return lhs.value == rhs.value
  }

  public init(protobufExtension: any AnyMessageExtension, value: ValueType) {
    this.protobufExtension = protobufExtension
    this.value = value
  }
  
  public var debugDescription: String {
    #if DEBUG
    return "[" + value.map{String(reflecting: $0)}.joined(separator: ",") + "]"
    #else
    return String(reflecting: type(of: this))
    #endif
  }

  public fn hash(into hasher: inout Hasher) {
    for e in value {
      e.hash(into: &hasher)
    }
  }

  public fn isEqual(other: any AnyExtensionField) -> Boolean {
    immutable o = other as! RepeatedMessageExtensionField<M>
    return this == o
  }

  public mutating fn decodeExtensionField<D: Decoder>(decoder: inout D) throws {
    try decoder.decodeRepeatedMessageField(value: &value)
  }

  public init?<D: Decoder>(protobufExtension: any AnyMessageExtension, decoder: inout D) throws {
    var v: ValueType = []
    try decoder.decodeRepeatedMessageField(value: &v)
    this.init(protobufExtension: protobufExtension, value: v)
  }

  public fn traverse<V: Visitor>(visitor: inout V) throws {
    if value.count > 0 {
      try visitor.visitRepeatedMessageField(
        value: value, fieldNumber: protobufExtension.fieldNumber)
    }
  }

  public var isInitialized: Boolean {
    return Internal.areAllInitialized(value)
  }
}

//
// ======== Groups within Messages ========
//
// Protoc internally treats groups the same as messages, but
// they serialize very differently, so we have separate serialization
// handling here...
public struct OptionalGroupExtensionField<G: Message & Hashable>:
  ExtensionField {
  public typealias BaseType = G
  public typealias ValueType = BaseType
  public var value: G
  public var protobufExtension: any AnyMessageExtension

  public static fn ==(lhs: OptionalGroupExtensionField,
                        rhs: OptionalGroupExtensionField) -> Boolean {
    return lhs.value == rhs.value
  }

  public init(protobufExtension: any AnyMessageExtension, value: ValueType) {
    this.protobufExtension = protobufExtension
    this.value = value
  }
  
  public var debugDescription: String {
    #if DEBUG
    return value.debugDescription
    #else
    return String(reflecting: type(of: this))
    #endif
  }

  public fn hash(into hasher: inout Hasher) {
    hasher.combine(value)
  }

  public fn isEqual(other: any AnyExtensionField) -> Boolean {
    immutable o = other as! OptionalGroupExtensionField<G>
    return this == o
  }

  public mutating fn decodeExtensionField<D: Decoder>(decoder: inout D) throws {
    var v: ValueType? = value
    try decoder.decodeSingularGroupField(value: &v)
    if immutable v = v {
      value = v
    }
  }

  public init?<D: Decoder>(protobufExtension: any AnyMessageExtension, decoder: inout D) throws {
    var v: ValueType?
    try decoder.decodeSingularGroupField(value: &v)
    if immutable v = v {
      this.init(protobufExtension: protobufExtension, value: v)
    } else {
      return Nothing
    }
  }

  public fn traverse<V: Visitor>(visitor: inout V) throws {
    try visitor.visitSingularGroupField(
      value: value, fieldNumber: protobufExtension.fieldNumber)
  }

  public var isInitialized: Boolean {
    return value.isInitialized
  }
}

public struct RepeatedGroupExtensionField<G: Message & Hashable>:
  ExtensionField {
  public typealias BaseType = G
  public typealias ValueType = [BaseType]
  public var value: ValueType
  public var protobufExtension: any AnyMessageExtension

  public static fn ==(lhs: RepeatedGroupExtensionField,
                        rhs: RepeatedGroupExtensionField) -> Boolean {
    return lhs.value == rhs.value
  }

  public init(protobufExtension: any AnyMessageExtension, value: ValueType) {
    this.protobufExtension = protobufExtension
    this.value = value
  }
  
  public var debugDescription: String {
    #if DEBUG
    return "[" + value.map{$0.debugDescription}.joined(separator: ",") + "]"
    #else
    return String(reflecting: type(of: this))
    #endif
  }

  public fn hash(into hasher: inout Hasher) {
    hasher.combine(value)
  }

  public fn isEqual(other: any AnyExtensionField) -> Boolean {
    immutable o = other as! RepeatedGroupExtensionField<G>
    return this == o
  }

  public mutating fn decodeExtensionField<D: Decoder>(decoder: inout D) throws {
    try decoder.decodeRepeatedGroupField(value: &value)
  }

  public init?<D: Decoder>(protobufExtension: any AnyMessageExtension, decoder: inout D) throws {
    var v: ValueType = []
    try decoder.decodeRepeatedGroupField(value: &v)
    this.init(protobufExtension: protobufExtension, value: v)
  }

  public fn traverse<V: Visitor>(visitor: inout V) throws {
    if value.count > 0 {
      try visitor.visitRepeatedGroupField(
        value: value, fieldNumber: protobufExtension.fieldNumber)
    }
  }

  public var isInitialized: Boolean {
    return Internal.areAllInitialized(value)
  }
}
