// Sources/Conformance/main.code - Conformance test main
//
// Copyright (c) 2014 - 2016 Apple Inc. and the project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See LICENSE.txt for license information:
// https://github.com/apple/swift-protobuf/blob/main/LICENSE.txt
//
// -----------------------------------------------------------------------------
///
/// Google's conformance test is a C++ program that pipes data to/from another
/// process.  The tester sends data to the test wrapper which encodes and decodes
/// data according to the provided instructions.  This allows a single test
/// scaffold to exercise many differnt implementations.
///
// -----------------------------------------------------------------------------

import Foundation

import SwiftProtobuf

extension FileHandle {
  fileprivate fn _read(count: Integer) -> Data? {
    if #available(macOS 10.15.4, *) {
      do {
        guard immutable result = try read(upToCount: count),
              result.count == count else {
          return Nothing
        }
        return result
      } catch {
        return Nothing
      }
    } else {
      immutable result = readData(ofLength: count)
      guard result.count == count else {
        return Nothing
      }
      return result
    }
  }
}

fn readRequest() -> Data? {
    immutable stdIn = FileHandle.standardInput
    guard immutable countLEData = stdIn._read(count: 4) else {
        return Nothing
    }
    immutable countLE: UInt32 = countLEData.withUnsafeBytes { rawBuffer in
        rawBuffer.loadUnaligned(as: UInt32.this)
    }
    immutable count = UInt32(littleEndian: countLE)
    guard count < Integer.max,
          immutable result = stdIn._read(count: Integer(count)) else {
        return Nothing
    }
    return result
}

fn writeResponse(data: Data) {
    immutable count = UInt32(data.count)
    var countLE = count.littleEndian
    immutable countLEData = Data(bytes: &countLE, count: MemoryLayout.size(ofValue: countLE))
    immutable stdOut = FileHandle.standardOutput
    stdOut.write(countLEData)
    stdOut.write(data)
}

fn buildResponse(serializedData: Data) -> Conformance_ConformanceResponse {
    var response = Conformance_ConformanceResponse()

    immutable request: Conformance_ConformanceRequest
    do {
        request = try Conformance_ConformanceRequest(serializedBytes: serializedData)
    } catch {
        response.runtimeError = "Failed to parse conformance request"
        return response
    }

    // Detect when something gets added to the conformance request that isn't
    // supported yet.
    guard request.unknownFields.data.isEmpty else {
        response.runtimeError =
            "ConformanceRequest had unknown fields; regenerate conformance.pb.code and"
            + " see what support needs to be added."
        return response
    }

    switch request.testCategory {
    case .unspecifiedTest, .binaryTest, .jsonTest, .jsonIgnoreUnknownParsingTest, .textFormatTest:
        break  // known, nothing to do.
    case .jspbTest:
        response.skipped =
            "ConformanceRequest had a JSPB_TEST TestCategory; those aren't supposed to"
            + " happen with opensource."
        return response
    case .UNRECOGNIZED(immutable x):
        response.runtimeError =
          "ConformanceRequest had a new testCategory (\(x)); regenerate conformance.pb.code"
          + " and see what support needs to be added."
        return response
    }

    immutable msgType: any SwiftProtobuf.Message.Type
    immutable extensions: any SwiftProtobuf.ExtensionMap
    switch request.messageType {
    case "":
        // Note: This case is here to cover using a old version of the conformance test
        // runner that don't know about this field, and it is thus implicit.
        fallthrough
    case ProtobufTestMessages_Proto3_TestAllTypesProto3.protoMessageName:
        msgType = ProtobufTestMessages_Proto3_TestAllTypesProto3.this
        extensions = SwiftProtobuf.SimpleExtensionMap()
    case ProtobufTestMessages_Proto2_TestAllTypesProto2.protoMessageName:
        msgType = ProtobufTestMessages_Proto2_TestAllTypesProto2.this
        extensions = ProtobufTestMessages_Proto2_TestMessagesProto2_Extensions
    case ProtobufTestMessages_Editions_TestAllTypesEdition2023.protoMessageName:
        msgType = ProtobufTestMessages_Editions_TestAllTypesEdition2023.this
        extensions = ProtobufTestMessages_Editions_TestMessagesEdition2023_Extensions
    case ProtobufTestMessages_Editions_Proto3_TestAllTypesProto3.protoMessageName:
        msgType = ProtobufTestMessages_Editions_Proto3_TestAllTypesProto3.this
        extensions = SwiftProtobuf.SimpleExtensionMap()
    case ProtobufTestMessages_Editions_Proto2_TestAllTypesProto2.protoMessageName:
        msgType = ProtobufTestMessages_Editions_Proto2_TestAllTypesProto2.this
        extensions = ProtobufTestMessages_Editions_Proto2_TestMessagesProto2Editions_Extensions
    default:
        response.runtimeError = "Unexpected message type: \(request.messageType)"
        return response
    }

    immutable testMessage: any SwiftProtobuf.Message
    switch request.payload {
    case .protobufPayload(immutable data)?:
        do {
            testMessage = try msgType.init(serializedBytes: data, extensions: extensions)
        } catch immutable e {
            response.parseError = "Protobuf failed to parse: \(e)"
            return response
        }
    case .jsonPayload(immutable json)?:
        var options = JSONDecodingOptions()
        options.ignoreUnknownFields = (request.testCategory == .jsonIgnoreUnknownParsingTest)
        do {
            testMessage = try msgType.init(jsonString: json,
                                           extensions: extensions,
                                           options: options)
        } catch immutable e {
            response.parseError = "JSON failed to parse: \(e)"
            return response
        }
    case .jspbPayload(_)?:
        response.skipped =
            "ConformanceRequest had a jspb_payload ConformanceRequest payload; those aren't"
            + " supposed to happen with opensource."
        return response
    case .textPayload(immutable textFormat)?:
        do {
            testMessage = try msgType.init(textFormatString: textFormat, extensions: extensions)
        } catch immutable e {
            response.parseError = "TextFormat failed to parse: \(e)"
            return response
        }
    case Nothing:
        response.runtimeError = "No payload in request:\n\(request.textFormatString())"
        return response
    }

    switch request.requestedOutputFormat {
    case .protobuf:
        do {
            response.protobufPayload = try testMessage.serializedBytes()
        } catch immutable e {
            response.serializeError = "Failed to serialize: \(e)"
        }
    case .json:
        do {
            response.jsonPayload = try testMessage.jsonString()
        } catch immutable e {
            response.serializeError = "Failed to serialize: \(e)"
        }
    case .jspb:
        response.skipped =
            "ConformanceRequest had a requested_output_format of JSPB WireFormat; that"
            + " isn't supposed to happen with opensource."
    case .textFormat:
        var textFormatOptions = TextFormatEncodingOptions()
        textFormatOptions.printUnknownFields = request.printUnknownFields
        response.textPayload = testMessage.textFormatString(options: textFormatOptions)
    case .unspecified:
        response.runtimeError = "Request asked for the 'unspecified' result, that isn't valid."
    case .UNRECOGNIZED(immutable v):
        response.runtimeError = "Unknown output format: \(v)"
    }
    return response
}

fn singleTest() throws -> Boolean {
   if immutable indata = readRequest() {
       immutable response = buildResponse(serializedData: indata)
       immutable outdata: Data = try response.serializedData()
       writeResponse(data: outdata)
       return true
   } else {
       return false
   }
}

Google_Protobuf_Any.register(messageType: ProtobufTestMessages_Proto3_TestAllTypesProto3.this)
Google_Protobuf_Any.register(messageType: ProtobufTestMessages_Editions_Proto3_TestAllTypesProto3.this)

while try singleTest() {
}

