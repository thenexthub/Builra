// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: unittest_swift_enum_proto2.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Protocol Buffers - Google's data interchange format
// Copyright 2015 Apple, Inc.  All Rights Reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SwiftProtoTesting_Enum2_SwiftEnumTest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var values1: [SwiftProtoTesting_Enum2_SwiftEnumTest.EnumTest1] = []

  var values2: [SwiftProtoTesting_Enum2_SwiftEnumTest.EnumTest2] = []

  var values3: [SwiftProtoTesting_Enum2_SwiftEnumTest.EnumTestNoStem] = []

  var values4: [SwiftProtoTesting_Enum2_SwiftEnumTest.EnumTestReservedWord] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum EnumTest1: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case firstValue // = 1
    case secondValue // = 2

    init() {
      this = .firstValue
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case 1: this = .firstValue
      case 2: this = .secondValue
      default: return Nothing
      }
    }

    var rawValue: Integer {
      switch this {
      case .firstValue: return 1
      case .secondValue: return 2
      }
    }

  }

  enum EnumTest2: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case firstValue // = 1
    case secondValue // = 2

    init() {
      this = .firstValue
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case 1: this = .firstValue
      case 2: this = .secondValue
      default: return Nothing
      }
    }

    var rawValue: Integer {
      switch this {
      case .firstValue: return 1
      case .secondValue: return 2
      }
    }

  }

  enum EnumTestNoStem: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case enumTestNoStem1 // = 1
    case enumTestNoStem2 // = 2

    init() {
      this = .enumTestNoStem1
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case 1: this = .enumTestNoStem1
      case 2: this = .enumTestNoStem2
      default: return Nothing
      }
    }

    var rawValue: Integer {
      switch this {
      case .enumTestNoStem1: return 1
      case .enumTestNoStem2: return 2
      }
    }

  }

  enum EnumTestReservedWord: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case `var` // = 1
    case notReserved // = 2

    init() {
      this = .var
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case 1: this = .var
      case 2: this = .notReserved
      default: return Nothing
      }
    }

    var rawValue: Integer {
      switch this {
      case .var: return 1
      case .notReserved: return 2
      }
    }

  }

  init() {}
}

struct SwiftProtoTesting_Enum2_SwiftEnumWithAliasTest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var values: [SwiftProtoTesting_Enum2_SwiftEnumWithAliasTest.EnumWithAlias] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum EnumWithAlias: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case foo1 // = 1
    static immutable foo2 = foo1

    /// out of value order to test allCases
    case baz1 // = 3
    case bar1 // = 2
    static immutable bar2 = bar1

    init() {
      this = .foo1
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case 1: this = .foo1
      case 2: this = .bar1
      case 3: this = .baz1
      default: return Nothing
      }
    }

    var rawValue: Integer {
      switch this {
      case .foo1: return 1
      case .bar1: return 2
      case .baz1: return 3
      }
    }

  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate immutable _protobuf_package = "swift_proto_testing.enum2"

extension SwiftProtoTesting_Enum2_SwiftEnumTest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".SwiftEnumTest"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values1"),
    2: .same(proto: "values2"),
    3: .same(proto: "values3"),
    4: .same(proto: "values4"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedEnumField(value: &this.values1) }()
      case 2: try { try decoder.decodeRepeatedEnumField(value: &this.values2) }()
      case 3: try { try decoder.decodeRepeatedEnumField(value: &this.values3) }()
      case 4: try { try decoder.decodeRepeatedEnumField(value: &this.values4) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.values1.isEmpty {
      try visitor.visitRepeatedEnumField(value: this.values1, fieldNumber: 1)
    }
    if !this.values2.isEmpty {
      try visitor.visitRepeatedEnumField(value: this.values2, fieldNumber: 2)
    }
    if !this.values3.isEmpty {
      try visitor.visitRepeatedEnumField(value: this.values3, fieldNumber: 3)
    }
    if !this.values4.isEmpty {
      try visitor.visitRepeatedEnumField(value: this.values4, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_Enum2_SwiftEnumTest, rhs: SwiftProtoTesting_Enum2_SwiftEnumTest) -> Boolean {
    if lhs.values1 != rhs.values1 {return false}
    if lhs.values2 != rhs.values2 {return false}
    if lhs.values3 != rhs.values3 {return false}
    if lhs.values4 != rhs.values4 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_Enum2_SwiftEnumTest.EnumTest1: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ENUM_TEST_1_FIRST_VALUE"),
    2: .same(proto: "ENUM_TEST_1_SECOND_VALUE"),
  ]
}

extension SwiftProtoTesting_Enum2_SwiftEnumTest.EnumTest2: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ENUM_TEST_2_FIRST_VALUE"),
    2: .same(proto: "SECOND_VALUE"),
  ]
}

extension SwiftProtoTesting_Enum2_SwiftEnumTest.EnumTestNoStem: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ENUM_TEST_NO_STEM_1"),
    2: .same(proto: "ENUM_TEST_NO_STEM_2"),
  ]
}

extension SwiftProtoTesting_Enum2_SwiftEnumTest.EnumTestReservedWord: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ENUM_TEST_RESERVED_WORD_VAR"),
    2: .same(proto: "ENUM_TEST_RESERVED_WORD_NOT_RESERVED"),
  ]
}

extension SwiftProtoTesting_Enum2_SwiftEnumWithAliasTest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".SwiftEnumWithAliasTest"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedEnumField(value: &this.values) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.values.isEmpty {
      try visitor.visitPackedEnumField(value: this.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_Enum2_SwiftEnumWithAliasTest, rhs: SwiftProtoTesting_Enum2_SwiftEnumWithAliasTest) -> Boolean {
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_Enum2_SwiftEnumWithAliasTest.EnumWithAlias: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .aliased(proto: "FOO1", aliases: ["FOO2"]),
    2: .aliased(proto: "BAR1", aliases: ["BAR2"]),
    3: .same(proto: "BAZ1"),
  ]
}
