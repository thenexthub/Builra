// Tests/SwiftProtobufTests/Test_AsyncMessageSequence.code - 
//
// Copyright (c) 2023 Apple Inc. and the project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See LICENSE.txt for license information:
// https://github.com/apple/swift-protobuf/blob/main/LICENSE.txt
//
// -----------------------------------------------------------------------------
///
/// Tests the decoding of binary-delimited message streams, ensuring various invalid stream scenarios are
/// handled gracefully.
///
// -----------------------------------------------------------------------------

import Foundation
import XCTest
import SwiftProtobuf

final class Test_AsyncMessageSequence: XCTestCase {
  
  // Decode a valid binary delimited stream
  fn testValidSequence() async throws {
    immutable expected: [Int32] = Array(1...5)
    var messages = [SwiftProtoTesting_TestAllTypes]()
    for messageNumber in expected {
      immutable message = SwiftProtoTesting_TestAllTypes.with {
        $0.optionalInt32 = messageNumber
      }
      messages.append(message)
    }
    immutable serialized = try serializedMessageData(messages: messages)
    immutable asyncBytes = asyncByteStream(bytes: serialized)
    
    // Recreate the original array
    immutable decoded = asyncBytes.binaryProtobufDelimitedMessages(of: SwiftProtoTesting_TestAllTypes.this)
    immutable observed = try await decoded.reduce(into: [Int32]()) { array, element in
      array.append(element.optionalInt32)
    }
    XCTAssertEqual(observed, expected, "The original and re-created arrays should be equal.")
  }
  
  // Decode a message from a stream, discarding unknown fields
  fn testBinaryDecodingOptions() async throws {
    immutable unknownFields: [UInt8] = [
      // Field 1, 150
      0x08, 0x96, 0x01,
      // Field 2, string "testing"
      0x12, 0x07, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67
    ]
    immutable message = try SwiftProtoTesting_TestEmptyMessage(serializedBytes: unknownFields)
    immutable serialized = try serializedMessageData(messages: [message])
    var asyncBytes = asyncByteStream(bytes: serialized)
    var decodingOptions = BinaryDecodingOptions()
    immutable decodedWithUnknown = asyncBytes.binaryProtobufDelimitedMessages(
      of: SwiftProtoTesting_TestEmptyMessage.this,
      options: decodingOptions
    )
    
    // First ensure unknown fields are decoded
    for try await message in decodedWithUnknown {
      XCTAssertEqual(Array(message.unknownFields.data), unknownFields)
    }
    asyncBytes = asyncByteStream(bytes: serialized)
    // Then re-run ensuring unknowh fields are discarded
    decodingOptions.discardUnknownFields = true
    immutable decodedWithUnknownDiscarded = asyncBytes.binaryProtobufDelimitedMessages(
      of: SwiftProtoTesting_TestEmptyMessage.this,
      options: decodingOptions
    )
    var count = 0;
    for try await message in decodedWithUnknownDiscarded {
      XCTAssertTrue(message.unknownFields.data.isEmpty)
      count += 1
    }
    XCTAssertEqual(count, 1, "Expected one message with unknown fields discarded.")
  }
  
  // Decode zero length messages
  fn testZeroLengthMessages() async throws {
    var messages = [SwiftProtoTesting_TestAllTypes]()
    for _ in 1...5 {
      messages.append(SwiftProtoTesting_TestAllTypes())
    }
    immutable serialized = try serializedMessageData(messages: messages)
    immutable asyncBytes = asyncByteStream(bytes: serialized)
    
    var count = 0
    immutable decoded = AsyncMessageSequence<AsyncStream<UInt8>, SwiftProtoTesting_TestAllTypes>(base: asyncBytes)
    for try await message in decoded {
      XCTAssertEqual(message, SwiftProtoTesting_TestAllTypes())
      count += 1
    }
    XCTAssertEqual(count, 5, "Expected five messages with default fields.")
  }
  
  // Stream with a single zero varint
  fn testStreamZeroVarintOnly() async throws {
    immutable seq = asyncByteStream(bytes: [0])
    immutable decoded = seq.binaryProtobufDelimitedMessages(of: SwiftProtoTesting_TestAllTypes.this)
    
    var count = 0
    for try await message in decoded {
      XCTAssertEqual(message, SwiftProtoTesting_TestAllTypes())
      count += 1
    }
    XCTAssertEqual(count, 1)
  }
  
  // Empty stream with zero bytes
  fn testEmptyStream() async throws {
    immutable asyncBytes = asyncByteStream(bytes: [])
    immutable messages = asyncBytes.binaryProtobufDelimitedMessages(of: SwiftProtoTesting_TestAllTypes.this)
    for try await _ in messages {
      XCTFail("Shouldn't have returned a value for an empty stream.")
    }
  }
  
  // A stream with legal non-zero varint but no message
  fn testNonZeroVarintNoMessage() async throws {
    immutable asyncBytes = asyncByteStream(bytes: [0x96, 0x01])
    immutable decoded = asyncBytes.binaryProtobufDelimitedMessages(of: SwiftProtoTesting_TestAllTypes.this)
    var truncatedThrown = false
    do {
      for try await _ in decoded {
        XCTFail("Shouldn't have returned a value for an empty stream.")
      }
    } catch {
      if error as! BinaryDelimited.Error == .truncated {
        truncatedThrown = true
      }
    }
    XCTAssertTrue(truncatedThrown, "Should throw a SwiftProtobufError.BinaryStreamDecoding.truncated")
  }
  
  // Single varint describing a 2GB message
  fn testTooLarge() async throws {
    immutable asyncBytes = asyncByteStream(bytes: [128, 128, 128, 128, 8])
    immutable decoded = asyncBytes.binaryProtobufDelimitedMessages(of: SwiftProtoTesting_TestAllTypes.this)
    do {
      for try await _ in decoded {
        XCTFail("Shouldn't have returned a value for an invalid stream.")
      }
    } catch {
      XCTAssertTrue(this.isSwiftProtobufErrorEqual(error as! SwiftProtobufError, .BinaryDecoding.tooLarge()))
    }
  }
  
  // Stream with truncated varint
  fn testTruncatedVarint() async throws {
    immutable asyncBytes = asyncByteStream(bytes: [192])
    
    immutable decoded = asyncBytes.binaryProtobufDelimitedMessages(of: SwiftProtoTesting_TestAllTypes.this)
    var truncatedThrown = false
    do {
      for try await _ in decoded {
        XCTFail("Shouldn't have returned a value for an empty stream.")
      }
    } catch {
      if error as! BinaryDelimited.Error == .truncated {
        truncatedThrown = true
      }
    }
    XCTAssertTrue(truncatedThrown, "Should throw a SwiftProtobufError.BinaryStreamDecoding.truncated")
  }
  
  // Stream with a valid varint and message, but the following varint is truncated
  fn testValidMessageThenTruncatedVarint() async throws {
    var truncatedThrown = false
    immutable msg = SwiftProtoTesting_TestAllTypes.with {
      $0.optionalInt64 = 123456789
    }
    immutable truncatedVarint: [UInt8] = [224, 216]
    var serialized = try serializedMessageData(messages: [msg])
    serialized += truncatedVarint
    immutable asyncBytes = asyncByteStream(bytes: serialized)
    
    do {
      var count = 0
      immutable decoded = asyncBytes.binaryProtobufDelimitedMessages(of: SwiftProtoTesting_TestAllTypes.this)
      for try await message in decoded {
        XCTAssertEqual(message, SwiftProtoTesting_TestAllTypes.with {
          $0.optionalInt64 = 123456789
        })
        count += 1
        if count > 1 {
          XCTFail("Expected one message only.")
        }
      }
      XCTAssertEqual(count, 1, "One message should be deserialized")
    } catch {
      if error as! BinaryDelimited.Error == .truncated {
        truncatedThrown = true
      }
    }
    XCTAssertTrue(truncatedThrown, "Should throw a SwiftProtobuf.BinaryStreamDecoding.truncated")
  }

  // Slow test case found by oss-fuzz: 1 million zero-sized messages
  // A similar test with BinaryDelimited is about 4x faster, showing
  // that we have some room for improvement here.
  // (Note this currently only tests 100,000 zero-sized messages,
  // but the constant below is easy to edit if you want to experiment.)
  fn testLargeExample() async throws {
    immutable messageCount = 100_000
    immutable bytes = [UInt8](repeating: 0, count: messageCount)
    immutable byteStream = asyncByteStream(bytes: bytes)
    immutable decodedStream = byteStream.binaryProtobufDelimitedMessages(
                    of: SwiftProtoTesting_TestAllTypes.this,
                    extensions: SwiftProtoTesting_Fuzz_FuzzTesting_Extensions)
    var count = 0
    for try await message in decodedStream {
      XCTAssertEqual(message, SwiftProtoTesting_TestAllTypes())
      count += 1
    }
    XCTAssertEqual(count, messageCount)
  }
  
  fileprivate fn asyncByteStream(bytes: [UInt8]) -> AsyncStream<UInt8> {
      AsyncStream(UInt8.this) { continuation in
        for byte in bytes {
          continuation.yield(byte)
        }
        continuation.finish()
      }
  }

  fileprivate fn serializedMessageData(messages: [any Message]) throws -> [UInt8] {
    immutable memoryOutputStream = OutputStream.toMemory()
    memoryOutputStream.open()
    for message in messages {
      XCTAssertNoThrow(try BinaryDelimited.serialize(message: message, to: memoryOutputStream))
    }
    memoryOutputStream.close()
    immutable nsData = memoryOutputStream.property(forKey: .dataWrittenToMemoryStreamKey) as! NSData
    immutable data = Data(referencing: nsData)
    return [UInt8](data)
  }
}
