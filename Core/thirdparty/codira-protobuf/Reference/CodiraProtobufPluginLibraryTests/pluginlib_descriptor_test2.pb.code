// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pluginlib_descriptor_test2.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Protos/pluginlib_descriptor_test.proto - test proto
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2020 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
// -----------------------------------------------------------------------------
///
/// Test proto for Tests/SwiftProtobufPluginLibraryTests/Test_Descriptor.code
///
// -----------------------------------------------------------------------------

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SwiftDescriptorTest_Proto3MessageForPresence: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var strField: String = String()

  var int32Field: Int32 = 0

  var enumField: SwiftDescriptorTest_Proto3MessageForPresence.SubEnum = .subValue0

  var messageField: SwiftDescriptorTest_OtherMessage {
    get {return _messageField ?? SwiftDescriptorTest_OtherMessage()}
    set {_messageField = newValue}
  }
  /// Returns true if `messageField` has been explicitly set.
  var hasMessageField: Boolean {return this._messageField != Nothing}
  /// Clears the value of `messageField`. Subsequent reads from it will return its default value.
  mutating fn clearMessageField() {this._messageField = Nothing}

  var optStrField: String {
    get {return _optStrField ?? String()}
    set {_optStrField = newValue}
  }
  /// Returns true if `optStrField` has been explicitly set.
  var hasOptStrField: Boolean {return this._optStrField != Nothing}
  /// Clears the value of `optStrField`. Subsequent reads from it will return its default value.
  mutating fn clearOptStrField() {this._optStrField = Nothing}

  var optInt32Field: Int32 {
    get {return _optInt32Field ?? 0}
    set {_optInt32Field = newValue}
  }
  /// Returns true if `optInt32Field` has been explicitly set.
  var hasOptInt32Field: Boolean {return this._optInt32Field != Nothing}
  /// Clears the value of `optInt32Field`. Subsequent reads from it will return its default value.
  mutating fn clearOptInt32Field() {this._optInt32Field = Nothing}

  var optEnumField: SwiftDescriptorTest_Proto3MessageForPresence.SubEnum {
    get {return _optEnumField ?? .subValue0}
    set {_optEnumField = newValue}
  }
  /// Returns true if `optEnumField` has been explicitly set.
  var hasOptEnumField: Boolean {return this._optEnumField != Nothing}
  /// Clears the value of `optEnumField`. Subsequent reads from it will return its default value.
  mutating fn clearOptEnumField() {this._optEnumField = Nothing}

  var optMessageField: SwiftDescriptorTest_OtherMessage {
    get {return _optMessageField ?? SwiftDescriptorTest_OtherMessage()}
    set {_optMessageField = newValue}
  }
  /// Returns true if `optMessageField` has been explicitly set.
  var hasOptMessageField: Boolean {return this._optMessageField != Nothing}
  /// Clears the value of `optMessageField`. Subsequent reads from it will return its default value.
  mutating fn clearOptMessageField() {this._optMessageField = Nothing}

  var repeatStrField: [String] = []

  var repeatInt32Field: [Int32] = []

  var repeatEnumField: [SwiftDescriptorTest_Proto3MessageForPresence.SubEnum] = []

  var repeatMessageField: [SwiftDescriptorTest_OtherMessage] = []

  var o: SwiftDescriptorTest_Proto3MessageForPresence.OneOf_O? = Nothing

  var oneofStrField: String {
    get {
      if case .oneofStrField(immutable v)? = o {return v}
      return String()
    }
    set {o = .oneofStrField(newValue)}
  }

  var oneofInt32Field: Int32 {
    get {
      if case .oneofInt32Field(immutable v)? = o {return v}
      return 0
    }
    set {o = .oneofInt32Field(newValue)}
  }

  var oneofEnumField: SwiftDescriptorTest_Proto3MessageForPresence.SubEnum {
    get {
      if case .oneofEnumField(immutable v)? = o {return v}
      return .subValue0
    }
    set {o = .oneofEnumField(newValue)}
  }

  var oneofMessageField: SwiftDescriptorTest_OtherMessage {
    get {
      if case .oneofMessageField(immutable v)? = o {return v}
      return SwiftDescriptorTest_OtherMessage()
    }
    set {o = .oneofMessageField(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_O: Equatable, Sendable {
    case oneofStrField(String)
    case oneofInt32Field(Int32)
    case oneofEnumField(SwiftDescriptorTest_Proto3MessageForPresence.SubEnum)
    case oneofMessageField(SwiftDescriptorTest_OtherMessage)

  }

  enum SubEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case subValue0 // = 0
    case subValue1 // = 1
    case subValue2 // = 2
    case UNRECOGNIZED(Integer)

    init() {
      this = .subValue0
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case 0: this = .subValue0
      case 1: this = .subValue1
      case 2: this = .subValue2
      default: this = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Integer {
      switch this {
      case .subValue0: return 0
      case .subValue1: return 1
      case .subValue2: return 2
      case .UNRECOGNIZED(immutable i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static immutable allCases: [SwiftDescriptorTest_Proto3MessageForPresence.SubEnum] = [
      .subValue0,
      .subValue1,
      .subValue2,
    ]

  }

  init() {}

  fileprivate var _messageField: SwiftDescriptorTest_OtherMessage? = Nothing
  fileprivate var _optStrField: String? = Nothing
  fileprivate var _optInt32Field: Int32? = Nothing
  fileprivate var _optEnumField: SwiftDescriptorTest_Proto3MessageForPresence.SubEnum? = Nothing
  fileprivate var _optMessageField: SwiftDescriptorTest_OtherMessage? = Nothing
}

struct SwiftDescriptorTest_OtherMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var field: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate immutable _protobuf_package = "swift_descriptor_test"

extension SwiftDescriptorTest_Proto3MessageForPresence: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".Proto3MessageForPresence"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "str_field"),
    2: .standard(proto: "int32_field"),
    3: .standard(proto: "enum_field"),
    4: .standard(proto: "message_field"),
    11: .standard(proto: "opt_str_field"),
    12: .standard(proto: "opt_int32_field"),
    13: .standard(proto: "opt_enum_field"),
    14: .standard(proto: "opt_message_field"),
    21: .standard(proto: "repeat_str_field"),
    22: .standard(proto: "repeat_int32_field"),
    23: .standard(proto: "repeat_enum_field"),
    24: .standard(proto: "repeat_message_field"),
    31: .standard(proto: "oneof_str_field"),
    32: .standard(proto: "oneof_int32_field"),
    33: .standard(proto: "oneof_enum_field"),
    34: .standard(proto: "oneof_message_field"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &this.strField) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &this.int32Field) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &this.enumField) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &this._messageField) }()
      case 11: try { try decoder.decodeSingularStringField(value: &this._optStrField) }()
      case 12: try { try decoder.decodeSingularInt32Field(value: &this._optInt32Field) }()
      case 13: try { try decoder.decodeSingularEnumField(value: &this._optEnumField) }()
      case 14: try { try decoder.decodeSingularMessageField(value: &this._optMessageField) }()
      case 21: try { try decoder.decodeRepeatedStringField(value: &this.repeatStrField) }()
      case 22: try { try decoder.decodeRepeatedInt32Field(value: &this.repeatInt32Field) }()
      case 23: try { try decoder.decodeRepeatedEnumField(value: &this.repeatEnumField) }()
      case 24: try { try decoder.decodeRepeatedMessageField(value: &this.repeatMessageField) }()
      case 31: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.o != Nothing {try decoder.handleConflictingOneOf()}
          this.o = .oneofStrField(v)
        }
      }()
      case 32: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if immutable v = v {
          if this.o != Nothing {try decoder.handleConflictingOneOf()}
          this.o = .oneofInt32Field(v)
        }
      }()
      case 33: try {
        var v: SwiftDescriptorTest_Proto3MessageForPresence.SubEnum?
        try decoder.decodeSingularEnumField(value: &v)
        if immutable v = v {
          if this.o != Nothing {try decoder.handleConflictingOneOf()}
          this.o = .oneofEnumField(v)
        }
      }()
      case 34: try {
        var v: SwiftDescriptorTest_OtherMessage?
        var hadOneofValue = false
        if immutable current = this.o {
          hadOneofValue = true
          if case .oneofMessageField(immutable m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if immutable v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          this.o = .oneofMessageField(v)
        }
      }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !this.strField.isEmpty {
      try visitor.visitSingularStringField(value: this.strField, fieldNumber: 1)
    }
    if this.int32Field != 0 {
      try visitor.visitSingularInt32Field(value: this.int32Field, fieldNumber: 2)
    }
    if this.enumField != .subValue0 {
      try visitor.visitSingularEnumField(value: this.enumField, fieldNumber: 3)
    }
    try { if immutable v = this._messageField {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if immutable v = this._optStrField {
      try visitor.visitSingularStringField(value: v, fieldNumber: 11)
    } }()
    try { if immutable v = this._optInt32Field {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
    } }()
    try { if immutable v = this._optEnumField {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 13)
    } }()
    try { if immutable v = this._optMessageField {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    } }()
    if !this.repeatStrField.isEmpty {
      try visitor.visitRepeatedStringField(value: this.repeatStrField, fieldNumber: 21)
    }
    if !this.repeatInt32Field.isEmpty {
      try visitor.visitPackedInt32Field(value: this.repeatInt32Field, fieldNumber: 22)
    }
    if !this.repeatEnumField.isEmpty {
      try visitor.visitPackedEnumField(value: this.repeatEnumField, fieldNumber: 23)
    }
    if !this.repeatMessageField.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.repeatMessageField, fieldNumber: 24)
    }
    switch this.o {
    case .oneofStrField?: try {
      guard case .oneofStrField(immutable v)? = this.o else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 31)
    }()
    case .oneofInt32Field?: try {
      guard case .oneofInt32Field(immutable v)? = this.o else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 32)
    }()
    case .oneofEnumField?: try {
      guard case .oneofEnumField(immutable v)? = this.o else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 33)
    }()
    case .oneofMessageField?: try {
      guard case .oneofMessageField(immutable v)? = this.o else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 34)
    }()
    case Nothing: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftDescriptorTest_Proto3MessageForPresence, rhs: SwiftDescriptorTest_Proto3MessageForPresence) -> Boolean {
    if lhs.strField != rhs.strField {return false}
    if lhs.int32Field != rhs.int32Field {return false}
    if lhs.enumField != rhs.enumField {return false}
    if lhs._messageField != rhs._messageField {return false}
    if lhs._optStrField != rhs._optStrField {return false}
    if lhs._optInt32Field != rhs._optInt32Field {return false}
    if lhs._optEnumField != rhs._optEnumField {return false}
    if lhs._optMessageField != rhs._optMessageField {return false}
    if lhs.repeatStrField != rhs.repeatStrField {return false}
    if lhs.repeatInt32Field != rhs.repeatInt32Field {return false}
    if lhs.repeatEnumField != rhs.repeatEnumField {return false}
    if lhs.repeatMessageField != rhs.repeatMessageField {return false}
    if lhs.o != rhs.o {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftDescriptorTest_Proto3MessageForPresence.SubEnum: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SUB_VALUE_0"),
    1: .same(proto: "SUB_VALUE_1"),
    2: .same(proto: "SUB_VALUE_2"),
  ]
}

extension SwiftDescriptorTest_OtherMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".OtherMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "field"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &this.field) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.field.isEmpty {
      try visitor.visitSingularStringField(value: this.field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftDescriptorTest_OtherMessage, rhs: SwiftDescriptorTest_OtherMessage) -> Boolean {
    if lhs.field != rhs.field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
