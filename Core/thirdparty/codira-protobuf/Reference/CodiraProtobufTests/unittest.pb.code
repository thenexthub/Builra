// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: unittest.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// A proto file we will use for unit testing.
//
// LINT: ALLOW_GROUPS, LEGACY_NAMES

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum SwiftProtoTesting_ForeignEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Integer
  case foreignFoo // = 4
  case foreignBar // = 5
  case foreignBaz // = 6

  init() {
    this = .foreignFoo
  }

  init?(rawValue: Integer) {
    switch rawValue {
    case 4: this = .foreignFoo
    case 5: this = .foreignBar
    case 6: this = .foreignBaz
    default: return Nothing
    }
  }

  var rawValue: Integer {
    switch this {
    case .foreignFoo: return 4
    case .foreignBar: return 5
    case .foreignBaz: return 6
    }
  }

}

/// Test an enum that has multiple values with the same number.
enum SwiftProtoTesting_TestEnumWithDupValue: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Integer
  case foo1 // = 1
  case bar1 // = 2
  case baz // = 3
  static immutable foo2 = foo1
  static immutable bar2 = bar1

  init() {
    this = .foo1
  }

  init?(rawValue: Integer) {
    switch rawValue {
    case 1: this = .foo1
    case 2: this = .bar1
    case 3: this = .baz
    default: return Nothing
    }
  }

  var rawValue: Integer {
    switch this {
    case .foo1: return 1
    case .bar1: return 2
    case .baz: return 3
    }
  }

}

/// This proto includes every type of field in both singular and repeated
/// forms.
struct SwiftProtoTesting_TestAllTypes: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Singular
  var optionalInt32: Int32 {
    get {return _storage._optionalInt32 ?? 0}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }
  /// Returns true if `optionalInt32` has been explicitly set.
  var hasOptionalInt32: Boolean {return _storage._optionalInt32 != Nothing}
  /// Clears the value of `optionalInt32`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt32() {_uniqueStorage()._optionalInt32 = Nothing}

  var optionalInt64: Int64 {
    get {return _storage._optionalInt64 ?? 0}
    set {_uniqueStorage()._optionalInt64 = newValue}
  }
  /// Returns true if `optionalInt64` has been explicitly set.
  var hasOptionalInt64: Boolean {return _storage._optionalInt64 != Nothing}
  /// Clears the value of `optionalInt64`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt64() {_uniqueStorage()._optionalInt64 = Nothing}

  var optionalUint32: UInt32 {
    get {return _storage._optionalUint32 ?? 0}
    set {_uniqueStorage()._optionalUint32 = newValue}
  }
  /// Returns true if `optionalUint32` has been explicitly set.
  var hasOptionalUint32: Boolean {return _storage._optionalUint32 != Nothing}
  /// Clears the value of `optionalUint32`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUint32() {_uniqueStorage()._optionalUint32 = Nothing}

  var optionalUint64: UInt64 {
    get {return _storage._optionalUint64 ?? 0}
    set {_uniqueStorage()._optionalUint64 = newValue}
  }
  /// Returns true if `optionalUint64` has been explicitly set.
  var hasOptionalUint64: Boolean {return _storage._optionalUint64 != Nothing}
  /// Clears the value of `optionalUint64`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUint64() {_uniqueStorage()._optionalUint64 = Nothing}

  var optionalSint32: Int32 {
    get {return _storage._optionalSint32 ?? 0}
    set {_uniqueStorage()._optionalSint32 = newValue}
  }
  /// Returns true if `optionalSint32` has been explicitly set.
  var hasOptionalSint32: Boolean {return _storage._optionalSint32 != Nothing}
  /// Clears the value of `optionalSint32`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalSint32() {_uniqueStorage()._optionalSint32 = Nothing}

  var optionalSint64: Int64 {
    get {return _storage._optionalSint64 ?? 0}
    set {_uniqueStorage()._optionalSint64 = newValue}
  }
  /// Returns true if `optionalSint64` has been explicitly set.
  var hasOptionalSint64: Boolean {return _storage._optionalSint64 != Nothing}
  /// Clears the value of `optionalSint64`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalSint64() {_uniqueStorage()._optionalSint64 = Nothing}

  var optionalFixed32: UInt32 {
    get {return _storage._optionalFixed32 ?? 0}
    set {_uniqueStorage()._optionalFixed32 = newValue}
  }
  /// Returns true if `optionalFixed32` has been explicitly set.
  var hasOptionalFixed32: Boolean {return _storage._optionalFixed32 != Nothing}
  /// Clears the value of `optionalFixed32`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalFixed32() {_uniqueStorage()._optionalFixed32 = Nothing}

  var optionalFixed64: UInt64 {
    get {return _storage._optionalFixed64 ?? 0}
    set {_uniqueStorage()._optionalFixed64 = newValue}
  }
  /// Returns true if `optionalFixed64` has been explicitly set.
  var hasOptionalFixed64: Boolean {return _storage._optionalFixed64 != Nothing}
  /// Clears the value of `optionalFixed64`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalFixed64() {_uniqueStorage()._optionalFixed64 = Nothing}

  var optionalSfixed32: Int32 {
    get {return _storage._optionalSfixed32 ?? 0}
    set {_uniqueStorage()._optionalSfixed32 = newValue}
  }
  /// Returns true if `optionalSfixed32` has been explicitly set.
  var hasOptionalSfixed32: Boolean {return _storage._optionalSfixed32 != Nothing}
  /// Clears the value of `optionalSfixed32`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalSfixed32() {_uniqueStorage()._optionalSfixed32 = Nothing}

  var optionalSfixed64: Int64 {
    get {return _storage._optionalSfixed64 ?? 0}
    set {_uniqueStorage()._optionalSfixed64 = newValue}
  }
  /// Returns true if `optionalSfixed64` has been explicitly set.
  var hasOptionalSfixed64: Boolean {return _storage._optionalSfixed64 != Nothing}
  /// Clears the value of `optionalSfixed64`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalSfixed64() {_uniqueStorage()._optionalSfixed64 = Nothing}

  var optionalFloat: Float {
    get {return _storage._optionalFloat ?? 0}
    set {_uniqueStorage()._optionalFloat = newValue}
  }
  /// Returns true if `optionalFloat` has been explicitly set.
  var hasOptionalFloat: Boolean {return _storage._optionalFloat != Nothing}
  /// Clears the value of `optionalFloat`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalFloat() {_uniqueStorage()._optionalFloat = Nothing}

  var optionalDouble: Double {
    get {return _storage._optionalDouble ?? 0}
    set {_uniqueStorage()._optionalDouble = newValue}
  }
  /// Returns true if `optionalDouble` has been explicitly set.
  var hasOptionalDouble: Boolean {return _storage._optionalDouble != Nothing}
  /// Clears the value of `optionalDouble`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalDouble() {_uniqueStorage()._optionalDouble = Nothing}

  var optionalBool: Boolean {
    get {return _storage._optionalBool ?? false}
    set {_uniqueStorage()._optionalBool = newValue}
  }
  /// Returns true if `optionalBool` has been explicitly set.
  var hasOptionalBool: Boolean {return _storage._optionalBool != Nothing}
  /// Clears the value of `optionalBool`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalBool() {_uniqueStorage()._optionalBool = Nothing}

  var optionalString: String {
    get {return _storage._optionalString ?? String()}
    set {_uniqueStorage()._optionalString = newValue}
  }
  /// Returns true if `optionalString` has been explicitly set.
  var hasOptionalString: Boolean {return _storage._optionalString != Nothing}
  /// Clears the value of `optionalString`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalString() {_uniqueStorage()._optionalString = Nothing}

  var optionalBytes: Data {
    get {return _storage._optionalBytes ?? Data()}
    set {_uniqueStorage()._optionalBytes = newValue}
  }
  /// Returns true if `optionalBytes` has been explicitly set.
  var hasOptionalBytes: Boolean {return _storage._optionalBytes != Nothing}
  /// Clears the value of `optionalBytes`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalBytes() {_uniqueStorage()._optionalBytes = Nothing}

  var optionalGroup: SwiftProtoTesting_TestAllTypes.OptionalGroup {
    get {return _storage._optionalGroup ?? SwiftProtoTesting_TestAllTypes.OptionalGroup()}
    set {_uniqueStorage()._optionalGroup = newValue}
  }
  /// Returns true if `optionalGroup` has been explicitly set.
  var hasOptionalGroup: Boolean {return _storage._optionalGroup != Nothing}
  /// Clears the value of `optionalGroup`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalGroup() {_uniqueStorage()._optionalGroup = Nothing}

  var optionalNestedMessage: SwiftProtoTesting_TestAllTypes.NestedMessage {
    get {return _storage._optionalNestedMessage ?? SwiftProtoTesting_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalNestedMessage = newValue}
  }
  /// Returns true if `optionalNestedMessage` has been explicitly set.
  var hasOptionalNestedMessage: Boolean {return _storage._optionalNestedMessage != Nothing}
  /// Clears the value of `optionalNestedMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalNestedMessage() {_uniqueStorage()._optionalNestedMessage = Nothing}

  var optionalForeignMessage: SwiftProtoTesting_ForeignMessage {
    get {return _storage._optionalForeignMessage ?? SwiftProtoTesting_ForeignMessage()}
    set {_uniqueStorage()._optionalForeignMessage = newValue}
  }
  /// Returns true if `optionalForeignMessage` has been explicitly set.
  var hasOptionalForeignMessage: Boolean {return _storage._optionalForeignMessage != Nothing}
  /// Clears the value of `optionalForeignMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalForeignMessage() {_uniqueStorage()._optionalForeignMessage = Nothing}

  var optionalImportMessage: SwiftProtoTesting_Import_ImportMessage {
    get {return _storage._optionalImportMessage ?? SwiftProtoTesting_Import_ImportMessage()}
    set {_uniqueStorage()._optionalImportMessage = newValue}
  }
  /// Returns true if `optionalImportMessage` has been explicitly set.
  var hasOptionalImportMessage: Boolean {return _storage._optionalImportMessage != Nothing}
  /// Clears the value of `optionalImportMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalImportMessage() {_uniqueStorage()._optionalImportMessage = Nothing}

  var optionalNestedEnum: SwiftProtoTesting_TestAllTypes.NestedEnum {
    get {return _storage._optionalNestedEnum ?? .foo}
    set {_uniqueStorage()._optionalNestedEnum = newValue}
  }
  /// Returns true if `optionalNestedEnum` has been explicitly set.
  var hasOptionalNestedEnum: Boolean {return _storage._optionalNestedEnum != Nothing}
  /// Clears the value of `optionalNestedEnum`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalNestedEnum() {_uniqueStorage()._optionalNestedEnum = Nothing}

  var optionalForeignEnum: SwiftProtoTesting_ForeignEnum {
    get {return _storage._optionalForeignEnum ?? .foreignFoo}
    set {_uniqueStorage()._optionalForeignEnum = newValue}
  }
  /// Returns true if `optionalForeignEnum` has been explicitly set.
  var hasOptionalForeignEnum: Boolean {return _storage._optionalForeignEnum != Nothing}
  /// Clears the value of `optionalForeignEnum`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalForeignEnum() {_uniqueStorage()._optionalForeignEnum = Nothing}

  var optionalImportEnum: SwiftProtoTesting_Import_ImportEnum {
    get {return _storage._optionalImportEnum ?? .importFoo}
    set {_uniqueStorage()._optionalImportEnum = newValue}
  }
  /// Returns true if `optionalImportEnum` has been explicitly set.
  var hasOptionalImportEnum: Boolean {return _storage._optionalImportEnum != Nothing}
  /// Clears the value of `optionalImportEnum`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalImportEnum() {_uniqueStorage()._optionalImportEnum = Nothing}

  var optionalStringPiece: String {
    get {return _storage._optionalStringPiece ?? String()}
    set {_uniqueStorage()._optionalStringPiece = newValue}
  }
  /// Returns true if `optionalStringPiece` has been explicitly set.
  var hasOptionalStringPiece: Boolean {return _storage._optionalStringPiece != Nothing}
  /// Clears the value of `optionalStringPiece`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalStringPiece() {_uniqueStorage()._optionalStringPiece = Nothing}

  var optionalCord: String {
    get {return _storage._optionalCord ?? String()}
    set {_uniqueStorage()._optionalCord = newValue}
  }
  /// Returns true if `optionalCord` has been explicitly set.
  var hasOptionalCord: Boolean {return _storage._optionalCord != Nothing}
  /// Clears the value of `optionalCord`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalCord() {_uniqueStorage()._optionalCord = Nothing}

  /// Defined in unittest_import_public.proto
  var optionalPublicImportMessage: SwiftProtoTesting_Import_PublicImportMessage {
    get {return _storage._optionalPublicImportMessage ?? SwiftProtoTesting_Import_PublicImportMessage()}
    set {_uniqueStorage()._optionalPublicImportMessage = newValue}
  }
  /// Returns true if `optionalPublicImportMessage` has been explicitly set.
  var hasOptionalPublicImportMessage: Boolean {return _storage._optionalPublicImportMessage != Nothing}
  /// Clears the value of `optionalPublicImportMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalPublicImportMessage() {_uniqueStorage()._optionalPublicImportMessage = Nothing}

  var optionalLazyMessage: SwiftProtoTesting_TestAllTypes.NestedMessage {
    get {return _storage._optionalLazyMessage ?? SwiftProtoTesting_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalLazyMessage = newValue}
  }
  /// Returns true if `optionalLazyMessage` has been explicitly set.
  var hasOptionalLazyMessage: Boolean {return _storage._optionalLazyMessage != Nothing}
  /// Clears the value of `optionalLazyMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalLazyMessage() {_uniqueStorage()._optionalLazyMessage = Nothing}

  var optionalUnverifiedLazyMessage: SwiftProtoTesting_TestAllTypes.NestedMessage {
    get {return _storage._optionalUnverifiedLazyMessage ?? SwiftProtoTesting_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalUnverifiedLazyMessage = newValue}
  }
  /// Returns true if `optionalUnverifiedLazyMessage` has been explicitly set.
  var hasOptionalUnverifiedLazyMessage: Boolean {return _storage._optionalUnverifiedLazyMessage != Nothing}
  /// Clears the value of `optionalUnverifiedLazyMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUnverifiedLazyMessage() {_uniqueStorage()._optionalUnverifiedLazyMessage = Nothing}

  /// Repeated
  var repeatedInt32: [Int32] {
    get {return _storage._repeatedInt32}
    set {_uniqueStorage()._repeatedInt32 = newValue}
  }

  var repeatedInt64: [Int64] {
    get {return _storage._repeatedInt64}
    set {_uniqueStorage()._repeatedInt64 = newValue}
  }

  var repeatedUint32: [UInt32] {
    get {return _storage._repeatedUint32}
    set {_uniqueStorage()._repeatedUint32 = newValue}
  }

  var repeatedUint64: [UInt64] {
    get {return _storage._repeatedUint64}
    set {_uniqueStorage()._repeatedUint64 = newValue}
  }

  var repeatedSint32: [Int32] {
    get {return _storage._repeatedSint32}
    set {_uniqueStorage()._repeatedSint32 = newValue}
  }

  var repeatedSint64: [Int64] {
    get {return _storage._repeatedSint64}
    set {_uniqueStorage()._repeatedSint64 = newValue}
  }

  var repeatedFixed32: [UInt32] {
    get {return _storage._repeatedFixed32}
    set {_uniqueStorage()._repeatedFixed32 = newValue}
  }

  var repeatedFixed64: [UInt64] {
    get {return _storage._repeatedFixed64}
    set {_uniqueStorage()._repeatedFixed64 = newValue}
  }

  var repeatedSfixed32: [Int32] {
    get {return _storage._repeatedSfixed32}
    set {_uniqueStorage()._repeatedSfixed32 = newValue}
  }

  var repeatedSfixed64: [Int64] {
    get {return _storage._repeatedSfixed64}
    set {_uniqueStorage()._repeatedSfixed64 = newValue}
  }

  var repeatedFloat: [Float] {
    get {return _storage._repeatedFloat}
    set {_uniqueStorage()._repeatedFloat = newValue}
  }

  var repeatedDouble: [Double] {
    get {return _storage._repeatedDouble}
    set {_uniqueStorage()._repeatedDouble = newValue}
  }

  var repeatedBool: [Boolean] {
    get {return _storage._repeatedBool}
    set {_uniqueStorage()._repeatedBool = newValue}
  }

  var repeatedString: [String] {
    get {return _storage._repeatedString}
    set {_uniqueStorage()._repeatedString = newValue}
  }

  var repeatedBytes: [Data] {
    get {return _storage._repeatedBytes}
    set {_uniqueStorage()._repeatedBytes = newValue}
  }

  var repeatedGroup: [SwiftProtoTesting_TestAllTypes.RepeatedGroup] {
    get {return _storage._repeatedGroup}
    set {_uniqueStorage()._repeatedGroup = newValue}
  }

  var repeatedNestedMessage: [SwiftProtoTesting_TestAllTypes.NestedMessage] {
    get {return _storage._repeatedNestedMessage}
    set {_uniqueStorage()._repeatedNestedMessage = newValue}
  }

  var repeatedForeignMessage: [SwiftProtoTesting_ForeignMessage] {
    get {return _storage._repeatedForeignMessage}
    set {_uniqueStorage()._repeatedForeignMessage = newValue}
  }

  var repeatedImportMessage: [SwiftProtoTesting_Import_ImportMessage] {
    get {return _storage._repeatedImportMessage}
    set {_uniqueStorage()._repeatedImportMessage = newValue}
  }

  var repeatedNestedEnum: [SwiftProtoTesting_TestAllTypes.NestedEnum] {
    get {return _storage._repeatedNestedEnum}
    set {_uniqueStorage()._repeatedNestedEnum = newValue}
  }

  var repeatedForeignEnum: [SwiftProtoTesting_ForeignEnum] {
    get {return _storage._repeatedForeignEnum}
    set {_uniqueStorage()._repeatedForeignEnum = newValue}
  }

  var repeatedImportEnum: [SwiftProtoTesting_Import_ImportEnum] {
    get {return _storage._repeatedImportEnum}
    set {_uniqueStorage()._repeatedImportEnum = newValue}
  }

  var repeatedStringPiece: [String] {
    get {return _storage._repeatedStringPiece}
    set {_uniqueStorage()._repeatedStringPiece = newValue}
  }

  var repeatedCord: [String] {
    get {return _storage._repeatedCord}
    set {_uniqueStorage()._repeatedCord = newValue}
  }

  var repeatedLazyMessage: [SwiftProtoTesting_TestAllTypes.NestedMessage] {
    get {return _storage._repeatedLazyMessage}
    set {_uniqueStorage()._repeatedLazyMessage = newValue}
  }

  /// Singular with defaults
  var defaultInt32: Int32 {
    get {return _storage._defaultInt32 ?? 41}
    set {_uniqueStorage()._defaultInt32 = newValue}
  }
  /// Returns true if `defaultInt32` has been explicitly set.
  var hasDefaultInt32: Boolean {return _storage._defaultInt32 != Nothing}
  /// Clears the value of `defaultInt32`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultInt32() {_uniqueStorage()._defaultInt32 = Nothing}

  var defaultInt64: Int64 {
    get {return _storage._defaultInt64 ?? 42}
    set {_uniqueStorage()._defaultInt64 = newValue}
  }
  /// Returns true if `defaultInt64` has been explicitly set.
  var hasDefaultInt64: Boolean {return _storage._defaultInt64 != Nothing}
  /// Clears the value of `defaultInt64`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultInt64() {_uniqueStorage()._defaultInt64 = Nothing}

  var defaultUint32: UInt32 {
    get {return _storage._defaultUint32 ?? 43}
    set {_uniqueStorage()._defaultUint32 = newValue}
  }
  /// Returns true if `defaultUint32` has been explicitly set.
  var hasDefaultUint32: Boolean {return _storage._defaultUint32 != Nothing}
  /// Clears the value of `defaultUint32`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultUint32() {_uniqueStorage()._defaultUint32 = Nothing}

  var defaultUint64: UInt64 {
    get {return _storage._defaultUint64 ?? 44}
    set {_uniqueStorage()._defaultUint64 = newValue}
  }
  /// Returns true if `defaultUint64` has been explicitly set.
  var hasDefaultUint64: Boolean {return _storage._defaultUint64 != Nothing}
  /// Clears the value of `defaultUint64`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultUint64() {_uniqueStorage()._defaultUint64 = Nothing}

  var defaultSint32: Int32 {
    get {return _storage._defaultSint32 ?? -45}
    set {_uniqueStorage()._defaultSint32 = newValue}
  }
  /// Returns true if `defaultSint32` has been explicitly set.
  var hasDefaultSint32: Boolean {return _storage._defaultSint32 != Nothing}
  /// Clears the value of `defaultSint32`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultSint32() {_uniqueStorage()._defaultSint32 = Nothing}

  var defaultSint64: Int64 {
    get {return _storage._defaultSint64 ?? 46}
    set {_uniqueStorage()._defaultSint64 = newValue}
  }
  /// Returns true if `defaultSint64` has been explicitly set.
  var hasDefaultSint64: Boolean {return _storage._defaultSint64 != Nothing}
  /// Clears the value of `defaultSint64`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultSint64() {_uniqueStorage()._defaultSint64 = Nothing}

  var defaultFixed32: UInt32 {
    get {return _storage._defaultFixed32 ?? 47}
    set {_uniqueStorage()._defaultFixed32 = newValue}
  }
  /// Returns true if `defaultFixed32` has been explicitly set.
  var hasDefaultFixed32: Boolean {return _storage._defaultFixed32 != Nothing}
  /// Clears the value of `defaultFixed32`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultFixed32() {_uniqueStorage()._defaultFixed32 = Nothing}

  var defaultFixed64: UInt64 {
    get {return _storage._defaultFixed64 ?? 48}
    set {_uniqueStorage()._defaultFixed64 = newValue}
  }
  /// Returns true if `defaultFixed64` has been explicitly set.
  var hasDefaultFixed64: Boolean {return _storage._defaultFixed64 != Nothing}
  /// Clears the value of `defaultFixed64`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultFixed64() {_uniqueStorage()._defaultFixed64 = Nothing}

  var defaultSfixed32: Int32 {
    get {return _storage._defaultSfixed32 ?? 49}
    set {_uniqueStorage()._defaultSfixed32 = newValue}
  }
  /// Returns true if `defaultSfixed32` has been explicitly set.
  var hasDefaultSfixed32: Boolean {return _storage._defaultSfixed32 != Nothing}
  /// Clears the value of `defaultSfixed32`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultSfixed32() {_uniqueStorage()._defaultSfixed32 = Nothing}

  var defaultSfixed64: Int64 {
    get {return _storage._defaultSfixed64 ?? -50}
    set {_uniqueStorage()._defaultSfixed64 = newValue}
  }
  /// Returns true if `defaultSfixed64` has been explicitly set.
  var hasDefaultSfixed64: Boolean {return _storage._defaultSfixed64 != Nothing}
  /// Clears the value of `defaultSfixed64`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultSfixed64() {_uniqueStorage()._defaultSfixed64 = Nothing}

  var defaultFloat: Float {
    get {return _storage._defaultFloat ?? 51.5}
    set {_uniqueStorage()._defaultFloat = newValue}
  }
  /// Returns true if `defaultFloat` has been explicitly set.
  var hasDefaultFloat: Boolean {return _storage._defaultFloat != Nothing}
  /// Clears the value of `defaultFloat`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultFloat() {_uniqueStorage()._defaultFloat = Nothing}

  var defaultDouble: Double {
    get {return _storage._defaultDouble ?? 52000}
    set {_uniqueStorage()._defaultDouble = newValue}
  }
  /// Returns true if `defaultDouble` has been explicitly set.
  var hasDefaultDouble: Boolean {return _storage._defaultDouble != Nothing}
  /// Clears the value of `defaultDouble`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultDouble() {_uniqueStorage()._defaultDouble = Nothing}

  var defaultBool: Boolean {
    get {return _storage._defaultBool ?? true}
    set {_uniqueStorage()._defaultBool = newValue}
  }
  /// Returns true if `defaultBool` has been explicitly set.
  var hasDefaultBool: Boolean {return _storage._defaultBool != Nothing}
  /// Clears the value of `defaultBool`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultBool() {_uniqueStorage()._defaultBool = Nothing}

  var defaultString: String {
    get {return _storage._defaultString ?? "hello"}
    set {_uniqueStorage()._defaultString = newValue}
  }
  /// Returns true if `defaultString` has been explicitly set.
  var hasDefaultString: Boolean {return _storage._defaultString != Nothing}
  /// Clears the value of `defaultString`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultString() {_uniqueStorage()._defaultString = Nothing}

  var defaultBytes: Data {
    get {return _storage._defaultBytes ?? Data([119, 111, 114, 108, 100])}
    set {_uniqueStorage()._defaultBytes = newValue}
  }
  /// Returns true if `defaultBytes` has been explicitly set.
  var hasDefaultBytes: Boolean {return _storage._defaultBytes != Nothing}
  /// Clears the value of `defaultBytes`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultBytes() {_uniqueStorage()._defaultBytes = Nothing}

  var defaultNestedEnum: SwiftProtoTesting_TestAllTypes.NestedEnum {
    get {return _storage._defaultNestedEnum ?? .bar}
    set {_uniqueStorage()._defaultNestedEnum = newValue}
  }
  /// Returns true if `defaultNestedEnum` has been explicitly set.
  var hasDefaultNestedEnum: Boolean {return _storage._defaultNestedEnum != Nothing}
  /// Clears the value of `defaultNestedEnum`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultNestedEnum() {_uniqueStorage()._defaultNestedEnum = Nothing}

  var defaultForeignEnum: SwiftProtoTesting_ForeignEnum {
    get {return _storage._defaultForeignEnum ?? .foreignBar}
    set {_uniqueStorage()._defaultForeignEnum = newValue}
  }
  /// Returns true if `defaultForeignEnum` has been explicitly set.
  var hasDefaultForeignEnum: Boolean {return _storage._defaultForeignEnum != Nothing}
  /// Clears the value of `defaultForeignEnum`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultForeignEnum() {_uniqueStorage()._defaultForeignEnum = Nothing}

  var defaultImportEnum: SwiftProtoTesting_Import_ImportEnum {
    get {return _storage._defaultImportEnum ?? .importBar}
    set {_uniqueStorage()._defaultImportEnum = newValue}
  }
  /// Returns true if `defaultImportEnum` has been explicitly set.
  var hasDefaultImportEnum: Boolean {return _storage._defaultImportEnum != Nothing}
  /// Clears the value of `defaultImportEnum`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultImportEnum() {_uniqueStorage()._defaultImportEnum = Nothing}

  var defaultStringPiece: String {
    get {return _storage._defaultStringPiece ?? "abc"}
    set {_uniqueStorage()._defaultStringPiece = newValue}
  }
  /// Returns true if `defaultStringPiece` has been explicitly set.
  var hasDefaultStringPiece: Boolean {return _storage._defaultStringPiece != Nothing}
  /// Clears the value of `defaultStringPiece`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultStringPiece() {_uniqueStorage()._defaultStringPiece = Nothing}

  var defaultCord: String {
    get {return _storage._defaultCord ?? "123"}
    set {_uniqueStorage()._defaultCord = newValue}
  }
  /// Returns true if `defaultCord` has been explicitly set.
  var hasDefaultCord: Boolean {return _storage._defaultCord != Nothing}
  /// Clears the value of `defaultCord`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultCord() {_uniqueStorage()._defaultCord = Nothing}

  /// For oneof test
  var oneofField: OneOf_OneofField? {
    get {return _storage._oneofField}
    set {_uniqueStorage()._oneofField = newValue}
  }

  var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(immutable v)? = _storage._oneofField {return v}
      return 0
    }
    set {_uniqueStorage()._oneofField = .oneofUint32(newValue)}
  }

  var oneofNestedMessage: SwiftProtoTesting_TestAllTypes.NestedMessage {
    get {
      if case .oneofNestedMessage(immutable v)? = _storage._oneofField {return v}
      return SwiftProtoTesting_TestAllTypes.NestedMessage()
    }
    set {_uniqueStorage()._oneofField = .oneofNestedMessage(newValue)}
  }

  var oneofString: String {
    get {
      if case .oneofString(immutable v)? = _storage._oneofField {return v}
      return String()
    }
    set {_uniqueStorage()._oneofField = .oneofString(newValue)}
  }

  var oneofBytes: Data {
    get {
      if case .oneofBytes(immutable v)? = _storage._oneofField {return v}
      return Data()
    }
    set {_uniqueStorage()._oneofField = .oneofBytes(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// For oneof test
  enum OneOf_OneofField: Equatable, @unchecked Sendable {
    case oneofUint32(UInt32)
    case oneofNestedMessage(SwiftProtoTesting_TestAllTypes.NestedMessage)
    case oneofString(String)
    case oneofBytes(Data)

  }

  enum NestedEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case foo // = 1
    case bar // = 2
    case baz // = 3

    /// Intentionally negative.
    case neg // = -1

    init() {
      this = .foo
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case -1: this = .neg
      case 1: this = .foo
      case 2: this = .bar
      case 3: this = .baz
      default: return Nothing
      }
    }

    var rawValue: Integer {
      switch this {
      case .neg: return -1
      case .foo: return 1
      case .bar: return 2
      case .baz: return 3
      }
    }

  }

  struct NestedMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The field name "b" fails to compile in proto1 because it conflicts with
    /// a local variable named "b" in one of the generated methods.  Doh.
    /// This file needs to compile in proto1 to test backwards-compatibility.
    var bb: Int32 {
      get {return _bb ?? 0}
      set {_bb = newValue}
    }
    /// Returns true if `bb` has been explicitly set.
    var hasBb: Boolean {return this._bb != Nothing}
    /// Clears the value of `bb`. Subsequent reads from it will return its default value.
    mutating fn clearBb() {this._bb = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _bb: Int32? = Nothing
  }

  struct OptionalGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    /// Returns true if `a` has been explicitly set.
    var hasA: Boolean {return this._a != Nothing}
    /// Clears the value of `a`. Subsequent reads from it will return its default value.
    mutating fn clearA() {this._a = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _a: Int32? = Nothing
  }

  struct RepeatedGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    /// Returns true if `a` has been explicitly set.
    var hasA: Boolean {return this._a != Nothing}
    /// Clears the value of `a`. Subsequent reads from it will return its default value.
    mutating fn clearA() {this._a = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _a: Int32? = Nothing
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// This proto includes a recursively nested message.
struct SwiftProtoTesting_NestedTestAllTypes: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var child: SwiftProtoTesting_NestedTestAllTypes {
    get {return _storage._child ?? SwiftProtoTesting_NestedTestAllTypes()}
    set {_uniqueStorage()._child = newValue}
  }
  /// Returns true if `child` has been explicitly set.
  var hasChild: Boolean {return _storage._child != Nothing}
  /// Clears the value of `child`. Subsequent reads from it will return its default value.
  mutating fn clearChild() {_uniqueStorage()._child = Nothing}

  var payload: SwiftProtoTesting_TestAllTypes {
    get {return _storage._payload ?? SwiftProtoTesting_TestAllTypes()}
    set {_uniqueStorage()._payload = newValue}
  }
  /// Returns true if `payload` has been explicitly set.
  var hasPayload: Boolean {return _storage._payload != Nothing}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
  mutating fn clearPayload() {_uniqueStorage()._payload = Nothing}

  var repeatedChild: [SwiftProtoTesting_NestedTestAllTypes] {
    get {return _storage._repeatedChild}
    set {_uniqueStorage()._repeatedChild = newValue}
  }

  var lazyChild: SwiftProtoTesting_NestedTestAllTypes {
    get {return _storage._lazyChild ?? SwiftProtoTesting_NestedTestAllTypes()}
    set {_uniqueStorage()._lazyChild = newValue}
  }
  /// Returns true if `lazyChild` has been explicitly set.
  var hasLazyChild: Boolean {return _storage._lazyChild != Nothing}
  /// Clears the value of `lazyChild`. Subsequent reads from it will return its default value.
  mutating fn clearLazyChild() {_uniqueStorage()._lazyChild = Nothing}

  var eagerChild: SwiftProtoTesting_TestAllTypes {
    get {return _storage._eagerChild ?? SwiftProtoTesting_TestAllTypes()}
    set {_uniqueStorage()._eagerChild = newValue}
  }
  /// Returns true if `eagerChild` has been explicitly set.
  var hasEagerChild: Boolean {return _storage._eagerChild != Nothing}
  /// Clears the value of `eagerChild`. Subsequent reads from it will return its default value.
  mutating fn clearEagerChild() {_uniqueStorage()._eagerChild = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Define these after TestAllTypes to make sure the compiler can handle
/// that.
struct SwiftProtoTesting_ForeignMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var c: Int32 {
    get {return _c ?? 0}
    set {_c = newValue}
  }
  /// Returns true if `c` has been explicitly set.
  var hasC: Boolean {return this._c != Nothing}
  /// Clears the value of `c`. Subsequent reads from it will return its default value.
  mutating fn clearC() {this._c = Nothing}

  var d: Int32 {
    get {return _d ?? 0}
    set {_d = newValue}
  }
  /// Returns true if `d` has been explicitly set.
  var hasD: Boolean {return this._d != Nothing}
  /// Clears the value of `d`. Subsequent reads from it will return its default value.
  mutating fn clearD() {this._d = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _c: Int32? = Nothing
  fileprivate var _d: Int32? = Nothing
}

struct SwiftProtoTesting_TestAllExtensions: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
}

struct SwiftProtoTesting_OptionalGroup_extension: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Boolean {return this._a != Nothing}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating fn clearA() {this._a = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _a: Int32? = Nothing
}

struct SwiftProtoTesting_RepeatedGroup_extension: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Boolean {return this._a != Nothing}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating fn clearA() {this._a = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _a: Int32? = Nothing
}

struct SwiftProtoTesting_TestNestedExtension: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// We have separate messages for testing required fields because it's
/// annoying to have to fill in required fields in TestProto in order to
/// do anything with it.  Note that we don't need to test every type of
/// required filed because the code output is basically identical to
/// optional fields for all types.
struct SwiftProtoTesting_TestRequired: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: Int32 {
    get {return _storage._a ?? 0}
    set {_uniqueStorage()._a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Boolean {return _storage._a != Nothing}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating fn clearA() {_uniqueStorage()._a = Nothing}

  var dummy2: Int32 {
    get {return _storage._dummy2 ?? 0}
    set {_uniqueStorage()._dummy2 = newValue}
  }
  /// Returns true if `dummy2` has been explicitly set.
  var hasDummy2: Boolean {return _storage._dummy2 != Nothing}
  /// Clears the value of `dummy2`. Subsequent reads from it will return its default value.
  mutating fn clearDummy2() {_uniqueStorage()._dummy2 = Nothing}

  var b: Int32 {
    get {return _storage._b ?? 0}
    set {_uniqueStorage()._b = newValue}
  }
  /// Returns true if `b` has been explicitly set.
  var hasB: Boolean {return _storage._b != Nothing}
  /// Clears the value of `b`. Subsequent reads from it will return its default value.
  mutating fn clearB() {_uniqueStorage()._b = Nothing}

  /// Pad the field count to 32 so that we can test that IsInitialized()
  /// properly checks multiple elements of has_bits_.
  var dummy4: Int32 {
    get {return _storage._dummy4 ?? 0}
    set {_uniqueStorage()._dummy4 = newValue}
  }
  /// Returns true if `dummy4` has been explicitly set.
  var hasDummy4: Boolean {return _storage._dummy4 != Nothing}
  /// Clears the value of `dummy4`. Subsequent reads from it will return its default value.
  mutating fn clearDummy4() {_uniqueStorage()._dummy4 = Nothing}

  var dummy5: Int32 {
    get {return _storage._dummy5 ?? 0}
    set {_uniqueStorage()._dummy5 = newValue}
  }
  /// Returns true if `dummy5` has been explicitly set.
  var hasDummy5: Boolean {return _storage._dummy5 != Nothing}
  /// Clears the value of `dummy5`. Subsequent reads from it will return its default value.
  mutating fn clearDummy5() {_uniqueStorage()._dummy5 = Nothing}

  var dummy6: Int32 {
    get {return _storage._dummy6 ?? 0}
    set {_uniqueStorage()._dummy6 = newValue}
  }
  /// Returns true if `dummy6` has been explicitly set.
  var hasDummy6: Boolean {return _storage._dummy6 != Nothing}
  /// Clears the value of `dummy6`. Subsequent reads from it will return its default value.
  mutating fn clearDummy6() {_uniqueStorage()._dummy6 = Nothing}

  var dummy7: Int32 {
    get {return _storage._dummy7 ?? 0}
    set {_uniqueStorage()._dummy7 = newValue}
  }
  /// Returns true if `dummy7` has been explicitly set.
  var hasDummy7: Boolean {return _storage._dummy7 != Nothing}
  /// Clears the value of `dummy7`. Subsequent reads from it will return its default value.
  mutating fn clearDummy7() {_uniqueStorage()._dummy7 = Nothing}

  var dummy8: Int32 {
    get {return _storage._dummy8 ?? 0}
    set {_uniqueStorage()._dummy8 = newValue}
  }
  /// Returns true if `dummy8` has been explicitly set.
  var hasDummy8: Boolean {return _storage._dummy8 != Nothing}
  /// Clears the value of `dummy8`. Subsequent reads from it will return its default value.
  mutating fn clearDummy8() {_uniqueStorage()._dummy8 = Nothing}

  var dummy9: Int32 {
    get {return _storage._dummy9 ?? 0}
    set {_uniqueStorage()._dummy9 = newValue}
  }
  /// Returns true if `dummy9` has been explicitly set.
  var hasDummy9: Boolean {return _storage._dummy9 != Nothing}
  /// Clears the value of `dummy9`. Subsequent reads from it will return its default value.
  mutating fn clearDummy9() {_uniqueStorage()._dummy9 = Nothing}

  var dummy10: Int32 {
    get {return _storage._dummy10 ?? 0}
    set {_uniqueStorage()._dummy10 = newValue}
  }
  /// Returns true if `dummy10` has been explicitly set.
  var hasDummy10: Boolean {return _storage._dummy10 != Nothing}
  /// Clears the value of `dummy10`. Subsequent reads from it will return its default value.
  mutating fn clearDummy10() {_uniqueStorage()._dummy10 = Nothing}

  var dummy11: Int32 {
    get {return _storage._dummy11 ?? 0}
    set {_uniqueStorage()._dummy11 = newValue}
  }
  /// Returns true if `dummy11` has been explicitly set.
  var hasDummy11: Boolean {return _storage._dummy11 != Nothing}
  /// Clears the value of `dummy11`. Subsequent reads from it will return its default value.
  mutating fn clearDummy11() {_uniqueStorage()._dummy11 = Nothing}

  var dummy12: Int32 {
    get {return _storage._dummy12 ?? 0}
    set {_uniqueStorage()._dummy12 = newValue}
  }
  /// Returns true if `dummy12` has been explicitly set.
  var hasDummy12: Boolean {return _storage._dummy12 != Nothing}
  /// Clears the value of `dummy12`. Subsequent reads from it will return its default value.
  mutating fn clearDummy12() {_uniqueStorage()._dummy12 = Nothing}

  var dummy13: Int32 {
    get {return _storage._dummy13 ?? 0}
    set {_uniqueStorage()._dummy13 = newValue}
  }
  /// Returns true if `dummy13` has been explicitly set.
  var hasDummy13: Boolean {return _storage._dummy13 != Nothing}
  /// Clears the value of `dummy13`. Subsequent reads from it will return its default value.
  mutating fn clearDummy13() {_uniqueStorage()._dummy13 = Nothing}

  var dummy14: Int32 {
    get {return _storage._dummy14 ?? 0}
    set {_uniqueStorage()._dummy14 = newValue}
  }
  /// Returns true if `dummy14` has been explicitly set.
  var hasDummy14: Boolean {return _storage._dummy14 != Nothing}
  /// Clears the value of `dummy14`. Subsequent reads from it will return its default value.
  mutating fn clearDummy14() {_uniqueStorage()._dummy14 = Nothing}

  var dummy15: Int32 {
    get {return _storage._dummy15 ?? 0}
    set {_uniqueStorage()._dummy15 = newValue}
  }
  /// Returns true if `dummy15` has been explicitly set.
  var hasDummy15: Boolean {return _storage._dummy15 != Nothing}
  /// Clears the value of `dummy15`. Subsequent reads from it will return its default value.
  mutating fn clearDummy15() {_uniqueStorage()._dummy15 = Nothing}

  var dummy16: Int32 {
    get {return _storage._dummy16 ?? 0}
    set {_uniqueStorage()._dummy16 = newValue}
  }
  /// Returns true if `dummy16` has been explicitly set.
  var hasDummy16: Boolean {return _storage._dummy16 != Nothing}
  /// Clears the value of `dummy16`. Subsequent reads from it will return its default value.
  mutating fn clearDummy16() {_uniqueStorage()._dummy16 = Nothing}

  var dummy17: Int32 {
    get {return _storage._dummy17 ?? 0}
    set {_uniqueStorage()._dummy17 = newValue}
  }
  /// Returns true if `dummy17` has been explicitly set.
  var hasDummy17: Boolean {return _storage._dummy17 != Nothing}
  /// Clears the value of `dummy17`. Subsequent reads from it will return its default value.
  mutating fn clearDummy17() {_uniqueStorage()._dummy17 = Nothing}

  var dummy18: Int32 {
    get {return _storage._dummy18 ?? 0}
    set {_uniqueStorage()._dummy18 = newValue}
  }
  /// Returns true if `dummy18` has been explicitly set.
  var hasDummy18: Boolean {return _storage._dummy18 != Nothing}
  /// Clears the value of `dummy18`. Subsequent reads from it will return its default value.
  mutating fn clearDummy18() {_uniqueStorage()._dummy18 = Nothing}

  var dummy19: Int32 {
    get {return _storage._dummy19 ?? 0}
    set {_uniqueStorage()._dummy19 = newValue}
  }
  /// Returns true if `dummy19` has been explicitly set.
  var hasDummy19: Boolean {return _storage._dummy19 != Nothing}
  /// Clears the value of `dummy19`. Subsequent reads from it will return its default value.
  mutating fn clearDummy19() {_uniqueStorage()._dummy19 = Nothing}

  var dummy20: Int32 {
    get {return _storage._dummy20 ?? 0}
    set {_uniqueStorage()._dummy20 = newValue}
  }
  /// Returns true if `dummy20` has been explicitly set.
  var hasDummy20: Boolean {return _storage._dummy20 != Nothing}
  /// Clears the value of `dummy20`. Subsequent reads from it will return its default value.
  mutating fn clearDummy20() {_uniqueStorage()._dummy20 = Nothing}

  var dummy21: Int32 {
    get {return _storage._dummy21 ?? 0}
    set {_uniqueStorage()._dummy21 = newValue}
  }
  /// Returns true if `dummy21` has been explicitly set.
  var hasDummy21: Boolean {return _storage._dummy21 != Nothing}
  /// Clears the value of `dummy21`. Subsequent reads from it will return its default value.
  mutating fn clearDummy21() {_uniqueStorage()._dummy21 = Nothing}

  var dummy22: Int32 {
    get {return _storage._dummy22 ?? 0}
    set {_uniqueStorage()._dummy22 = newValue}
  }
  /// Returns true if `dummy22` has been explicitly set.
  var hasDummy22: Boolean {return _storage._dummy22 != Nothing}
  /// Clears the value of `dummy22`. Subsequent reads from it will return its default value.
  mutating fn clearDummy22() {_uniqueStorage()._dummy22 = Nothing}

  var dummy23: Int32 {
    get {return _storage._dummy23 ?? 0}
    set {_uniqueStorage()._dummy23 = newValue}
  }
  /// Returns true if `dummy23` has been explicitly set.
  var hasDummy23: Boolean {return _storage._dummy23 != Nothing}
  /// Clears the value of `dummy23`. Subsequent reads from it will return its default value.
  mutating fn clearDummy23() {_uniqueStorage()._dummy23 = Nothing}

  var dummy24: Int32 {
    get {return _storage._dummy24 ?? 0}
    set {_uniqueStorage()._dummy24 = newValue}
  }
  /// Returns true if `dummy24` has been explicitly set.
  var hasDummy24: Boolean {return _storage._dummy24 != Nothing}
  /// Clears the value of `dummy24`. Subsequent reads from it will return its default value.
  mutating fn clearDummy24() {_uniqueStorage()._dummy24 = Nothing}

  var dummy25: Int32 {
    get {return _storage._dummy25 ?? 0}
    set {_uniqueStorage()._dummy25 = newValue}
  }
  /// Returns true if `dummy25` has been explicitly set.
  var hasDummy25: Boolean {return _storage._dummy25 != Nothing}
  /// Clears the value of `dummy25`. Subsequent reads from it will return its default value.
  mutating fn clearDummy25() {_uniqueStorage()._dummy25 = Nothing}

  var dummy26: Int32 {
    get {return _storage._dummy26 ?? 0}
    set {_uniqueStorage()._dummy26 = newValue}
  }
  /// Returns true if `dummy26` has been explicitly set.
  var hasDummy26: Boolean {return _storage._dummy26 != Nothing}
  /// Clears the value of `dummy26`. Subsequent reads from it will return its default value.
  mutating fn clearDummy26() {_uniqueStorage()._dummy26 = Nothing}

  var dummy27: Int32 {
    get {return _storage._dummy27 ?? 0}
    set {_uniqueStorage()._dummy27 = newValue}
  }
  /// Returns true if `dummy27` has been explicitly set.
  var hasDummy27: Boolean {return _storage._dummy27 != Nothing}
  /// Clears the value of `dummy27`. Subsequent reads from it will return its default value.
  mutating fn clearDummy27() {_uniqueStorage()._dummy27 = Nothing}

  var dummy28: Int32 {
    get {return _storage._dummy28 ?? 0}
    set {_uniqueStorage()._dummy28 = newValue}
  }
  /// Returns true if `dummy28` has been explicitly set.
  var hasDummy28: Boolean {return _storage._dummy28 != Nothing}
  /// Clears the value of `dummy28`. Subsequent reads from it will return its default value.
  mutating fn clearDummy28() {_uniqueStorage()._dummy28 = Nothing}

  var dummy29: Int32 {
    get {return _storage._dummy29 ?? 0}
    set {_uniqueStorage()._dummy29 = newValue}
  }
  /// Returns true if `dummy29` has been explicitly set.
  var hasDummy29: Boolean {return _storage._dummy29 != Nothing}
  /// Clears the value of `dummy29`. Subsequent reads from it will return its default value.
  mutating fn clearDummy29() {_uniqueStorage()._dummy29 = Nothing}

  var dummy30: Int32 {
    get {return _storage._dummy30 ?? 0}
    set {_uniqueStorage()._dummy30 = newValue}
  }
  /// Returns true if `dummy30` has been explicitly set.
  var hasDummy30: Boolean {return _storage._dummy30 != Nothing}
  /// Clears the value of `dummy30`. Subsequent reads from it will return its default value.
  mutating fn clearDummy30() {_uniqueStorage()._dummy30 = Nothing}

  var dummy31: Int32 {
    get {return _storage._dummy31 ?? 0}
    set {_uniqueStorage()._dummy31 = newValue}
  }
  /// Returns true if `dummy31` has been explicitly set.
  var hasDummy31: Boolean {return _storage._dummy31 != Nothing}
  /// Clears the value of `dummy31`. Subsequent reads from it will return its default value.
  mutating fn clearDummy31() {_uniqueStorage()._dummy31 = Nothing}

  var dummy32: Int32 {
    get {return _storage._dummy32 ?? 0}
    set {_uniqueStorage()._dummy32 = newValue}
  }
  /// Returns true if `dummy32` has been explicitly set.
  var hasDummy32: Boolean {return _storage._dummy32 != Nothing}
  /// Clears the value of `dummy32`. Subsequent reads from it will return its default value.
  mutating fn clearDummy32() {_uniqueStorage()._dummy32 = Nothing}

  var c: Int32 {
    get {return _storage._c ?? 0}
    set {_uniqueStorage()._c = newValue}
  }
  /// Returns true if `c` has been explicitly set.
  var hasC: Boolean {return _storage._c != Nothing}
  /// Clears the value of `c`. Subsequent reads from it will return its default value.
  mutating fn clearC() {_uniqueStorage()._c = Nothing}

  /// Add an optional child message to make this non-trivial for go/pdlazy.
  var optionalForeign: SwiftProtoTesting_ForeignMessage {
    get {return _storage._optionalForeign ?? SwiftProtoTesting_ForeignMessage()}
    set {_uniqueStorage()._optionalForeign = newValue}
  }
  /// Returns true if `optionalForeign` has been explicitly set.
  var hasOptionalForeign: Boolean {return _storage._optionalForeign != Nothing}
  /// Clears the value of `optionalForeign`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalForeign() {_uniqueStorage()._optionalForeign = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SwiftProtoTesting_TestRequiredForeign: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalMessage: SwiftProtoTesting_TestRequired {
    get {return _optionalMessage ?? SwiftProtoTesting_TestRequired()}
    set {_optionalMessage = newValue}
  }
  /// Returns true if `optionalMessage` has been explicitly set.
  var hasOptionalMessage: Boolean {return this._optionalMessage != Nothing}
  /// Clears the value of `optionalMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalMessage() {this._optionalMessage = Nothing}

  var repeatedMessage: [SwiftProtoTesting_TestRequired] = []

  var dummy: Int32 {
    get {return _dummy ?? 0}
    set {_dummy = newValue}
  }
  /// Returns true if `dummy` has been explicitly set.
  var hasDummy: Boolean {return this._dummy != Nothing}
  /// Clears the value of `dummy`. Subsequent reads from it will return its default value.
  mutating fn clearDummy() {this._dummy = Nothing}

  /// Missing required fields must not affect verification of child messages.
  var optionalLazyMessage: SwiftProtoTesting_NestedTestAllTypes {
    get {return _optionalLazyMessage ?? SwiftProtoTesting_NestedTestAllTypes()}
    set {_optionalLazyMessage = newValue}
  }
  /// Returns true if `optionalLazyMessage` has been explicitly set.
  var hasOptionalLazyMessage: Boolean {return this._optionalLazyMessage != Nothing}
  /// Clears the value of `optionalLazyMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalLazyMessage() {this._optionalLazyMessage = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _optionalMessage: SwiftProtoTesting_TestRequired? = Nothing
  fileprivate var _dummy: Int32? = Nothing
  fileprivate var _optionalLazyMessage: SwiftProtoTesting_NestedTestAllTypes? = Nothing
}

struct SwiftProtoTesting_TestRequiredMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalMessage: SwiftProtoTesting_TestRequired {
    get {return _optionalMessage ?? SwiftProtoTesting_TestRequired()}
    set {_optionalMessage = newValue}
  }
  /// Returns true if `optionalMessage` has been explicitly set.
  var hasOptionalMessage: Boolean {return this._optionalMessage != Nothing}
  /// Clears the value of `optionalMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalMessage() {this._optionalMessage = Nothing}

  var repeatedMessage: [SwiftProtoTesting_TestRequired] = []

  var requiredMessage: SwiftProtoTesting_TestRequired {
    get {return _requiredMessage ?? SwiftProtoTesting_TestRequired()}
    set {_requiredMessage = newValue}
  }
  /// Returns true if `requiredMessage` has been explicitly set.
  var hasRequiredMessage: Boolean {return this._requiredMessage != Nothing}
  /// Clears the value of `requiredMessage`. Subsequent reads from it will return its default value.
  mutating fn clearRequiredMessage() {this._requiredMessage = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _optionalMessage: SwiftProtoTesting_TestRequired? = Nothing
  fileprivate var _requiredMessage: SwiftProtoTesting_TestRequired? = Nothing
}

/// TestEmptyMessage is used to test unknown field support.
struct SwiftProtoTesting_TestEmptyMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Test that really large tag numbers don't break anything.
struct SwiftProtoTesting_TestReallyLargeTagNumber: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The largest possible tag number is 2^28 - 1, since the wire format uses
  /// three bits to communicate wire type.
  var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Boolean {return this._a != Nothing}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating fn clearA() {this._a = Nothing}

  var bb: Int32 {
    get {return _bb ?? 0}
    set {_bb = newValue}
  }
  /// Returns true if `bb` has been explicitly set.
  var hasBb: Boolean {return this._bb != Nothing}
  /// Clears the value of `bb`. Subsequent reads from it will return its default value.
  mutating fn clearBb() {this._bb = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _a: Int32? = Nothing
  fileprivate var _bb: Int32? = Nothing
}

struct SwiftProtoTesting_TestRecursiveMessage: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: SwiftProtoTesting_TestRecursiveMessage {
    get {return _storage._a ?? SwiftProtoTesting_TestRecursiveMessage()}
    set {_uniqueStorage()._a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Boolean {return _storage._a != Nothing}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating fn clearA() {_uniqueStorage()._a = Nothing}

  var i: Int32 {
    get {return _storage._i ?? 0}
    set {_uniqueStorage()._i = newValue}
  }
  /// Returns true if `i` has been explicitly set.
  var hasI: Boolean {return _storage._i != Nothing}
  /// Clears the value of `i`. Subsequent reads from it will return its default value.
  mutating fn clearI() {_uniqueStorage()._i = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// We list fields out of order, to ensure that we're using field number and not
/// field index to determine serialization order.
struct SwiftProtoTesting_TestFieldOrderings: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var myString: String {
    get {return _myString ?? String()}
    set {_myString = newValue}
  }
  /// Returns true if `myString` has been explicitly set.
  var hasMyString: Boolean {return this._myString != Nothing}
  /// Clears the value of `myString`. Subsequent reads from it will return its default value.
  mutating fn clearMyString() {this._myString = Nothing}

  var myInt: Int64 {
    get {return _myInt ?? 0}
    set {_myInt = newValue}
  }
  /// Returns true if `myInt` has been explicitly set.
  var hasMyInt: Boolean {return this._myInt != Nothing}
  /// Clears the value of `myInt`. Subsequent reads from it will return its default value.
  mutating fn clearMyInt() {this._myInt = Nothing}

  var myFloat: Float {
    get {return _myFloat ?? 0}
    set {_myFloat = newValue}
  }
  /// Returns true if `myFloat` has been explicitly set.
  var hasMyFloat: Boolean {return this._myFloat != Nothing}
  /// Clears the value of `myFloat`. Subsequent reads from it will return its default value.
  mutating fn clearMyFloat() {this._myFloat = Nothing}

  var optionalNestedMessage: SwiftProtoTesting_TestFieldOrderings.NestedMessage {
    get {return _optionalNestedMessage ?? SwiftProtoTesting_TestFieldOrderings.NestedMessage()}
    set {_optionalNestedMessage = newValue}
  }
  /// Returns true if `optionalNestedMessage` has been explicitly set.
  var hasOptionalNestedMessage: Boolean {return this._optionalNestedMessage != Nothing}
  /// Clears the value of `optionalNestedMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalNestedMessage() {this._optionalNestedMessage = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct NestedMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var oo: Int64 {
      get {return _oo ?? 0}
      set {_oo = newValue}
    }
    /// Returns true if `oo` has been explicitly set.
    var hasOo: Boolean {return this._oo != Nothing}
    /// Clears the value of `oo`. Subsequent reads from it will return its default value.
    mutating fn clearOo() {this._oo = Nothing}

    /// The field name "b" fails to compile in proto1 because it conflicts with
    /// a local variable named "b" in one of the generated methods.  Doh.
    /// This file needs to compile in proto1 to test backwards-compatibility.
    var bb: Int32 {
      get {return _bb ?? 0}
      set {_bb = newValue}
    }
    /// Returns true if `bb` has been explicitly set.
    var hasBb: Boolean {return this._bb != Nothing}
    /// Clears the value of `bb`. Subsequent reads from it will return its default value.
    mutating fn clearBb() {this._bb = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _oo: Int64? = Nothing
    fileprivate var _bb: Int32? = Nothing
  }

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _myString: String? = Nothing
  fileprivate var _myInt: Int64? = Nothing
  fileprivate var _myFloat: Float? = Nothing
  fileprivate var _optionalNestedMessage: SwiftProtoTesting_TestFieldOrderings.NestedMessage? = Nothing
}

struct SwiftProtoTesting_TestExtremeDefaultValues: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var escapedBytes: Data {
    get {return _storage._escapedBytes ?? Data([0, 1, 7, 8, 12, 10, 13, 9, 11, 92, 39, 34, 254])}
    set {_uniqueStorage()._escapedBytes = newValue}
  }
  /// Returns true if `escapedBytes` has been explicitly set.
  var hasEscapedBytes: Boolean {return _storage._escapedBytes != Nothing}
  /// Clears the value of `escapedBytes`. Subsequent reads from it will return its default value.
  mutating fn clearEscapedBytes() {_uniqueStorage()._escapedBytes = Nothing}

  var largeUint32: UInt32 {
    get {return _storage._largeUint32 ?? 4294967295}
    set {_uniqueStorage()._largeUint32 = newValue}
  }
  /// Returns true if `largeUint32` has been explicitly set.
  var hasLargeUint32: Boolean {return _storage._largeUint32 != Nothing}
  /// Clears the value of `largeUint32`. Subsequent reads from it will return its default value.
  mutating fn clearLargeUint32() {_uniqueStorage()._largeUint32 = Nothing}

  var largeUint64: UInt64 {
    get {return _storage._largeUint64 ?? 18446744073709551615}
    set {_uniqueStorage()._largeUint64 = newValue}
  }
  /// Returns true if `largeUint64` has been explicitly set.
  var hasLargeUint64: Boolean {return _storage._largeUint64 != Nothing}
  /// Clears the value of `largeUint64`. Subsequent reads from it will return its default value.
  mutating fn clearLargeUint64() {_uniqueStorage()._largeUint64 = Nothing}

  var smallInt32: Int32 {
    get {return _storage._smallInt32 ?? -2147483647}
    set {_uniqueStorage()._smallInt32 = newValue}
  }
  /// Returns true if `smallInt32` has been explicitly set.
  var hasSmallInt32: Boolean {return _storage._smallInt32 != Nothing}
  /// Clears the value of `smallInt32`. Subsequent reads from it will return its default value.
  mutating fn clearSmallInt32() {_uniqueStorage()._smallInt32 = Nothing}

  var smallInt64: Int64 {
    get {return _storage._smallInt64 ?? -9223372036854775807}
    set {_uniqueStorage()._smallInt64 = newValue}
  }
  /// Returns true if `smallInt64` has been explicitly set.
  var hasSmallInt64: Boolean {return _storage._smallInt64 != Nothing}
  /// Clears the value of `smallInt64`. Subsequent reads from it will return its default value.
  mutating fn clearSmallInt64() {_uniqueStorage()._smallInt64 = Nothing}

  var reallySmallInt32: Int32 {
    get {return _storage._reallySmallInt32 ?? -2147483648}
    set {_uniqueStorage()._reallySmallInt32 = newValue}
  }
  /// Returns true if `reallySmallInt32` has been explicitly set.
  var hasReallySmallInt32: Boolean {return _storage._reallySmallInt32 != Nothing}
  /// Clears the value of `reallySmallInt32`. Subsequent reads from it will return its default value.
  mutating fn clearReallySmallInt32() {_uniqueStorage()._reallySmallInt32 = Nothing}

  var reallySmallInt64: Int64 {
    get {return _storage._reallySmallInt64 ?? -9223372036854775808}
    set {_uniqueStorage()._reallySmallInt64 = newValue}
  }
  /// Returns true if `reallySmallInt64` has been explicitly set.
  var hasReallySmallInt64: Boolean {return _storage._reallySmallInt64 != Nothing}
  /// Clears the value of `reallySmallInt64`. Subsequent reads from it will return its default value.
  mutating fn clearReallySmallInt64() {_uniqueStorage()._reallySmallInt64 = Nothing}

  /// The default value here is UTF-8 for "\u1234".  (We could also just type
  /// the UTF-8 text directly into this text file rather than escape it, but
  /// lots of people use editors that would be confused by this.)
  var utf8String: String {
    get {return _storage._utf8String ?? "ሴ"}
    set {_uniqueStorage()._utf8String = newValue}
  }
  /// Returns true if `utf8String` has been explicitly set.
  var hasUtf8String: Boolean {return _storage._utf8String != Nothing}
  /// Clears the value of `utf8String`. Subsequent reads from it will return its default value.
  mutating fn clearUtf8String() {_uniqueStorage()._utf8String = Nothing}

  /// Tests for single-precision floating-point values.
  var zeroFloat: Float {
    get {return _storage._zeroFloat ?? 0}
    set {_uniqueStorage()._zeroFloat = newValue}
  }
  /// Returns true if `zeroFloat` has been explicitly set.
  var hasZeroFloat: Boolean {return _storage._zeroFloat != Nothing}
  /// Clears the value of `zeroFloat`. Subsequent reads from it will return its default value.
  mutating fn clearZeroFloat() {_uniqueStorage()._zeroFloat = Nothing}

  var oneFloat: Float {
    get {return _storage._oneFloat ?? 1}
    set {_uniqueStorage()._oneFloat = newValue}
  }
  /// Returns true if `oneFloat` has been explicitly set.
  var hasOneFloat: Boolean {return _storage._oneFloat != Nothing}
  /// Clears the value of `oneFloat`. Subsequent reads from it will return its default value.
  mutating fn clearOneFloat() {_uniqueStorage()._oneFloat = Nothing}

  var smallFloat: Float {
    get {return _storage._smallFloat ?? 1.5}
    set {_uniqueStorage()._smallFloat = newValue}
  }
  /// Returns true if `smallFloat` has been explicitly set.
  var hasSmallFloat: Boolean {return _storage._smallFloat != Nothing}
  /// Clears the value of `smallFloat`. Subsequent reads from it will return its default value.
  mutating fn clearSmallFloat() {_uniqueStorage()._smallFloat = Nothing}

  var negativeOneFloat: Float {
    get {return _storage._negativeOneFloat ?? -1}
    set {_uniqueStorage()._negativeOneFloat = newValue}
  }
  /// Returns true if `negativeOneFloat` has been explicitly set.
  var hasNegativeOneFloat: Boolean {return _storage._negativeOneFloat != Nothing}
  /// Clears the value of `negativeOneFloat`. Subsequent reads from it will return its default value.
  mutating fn clearNegativeOneFloat() {_uniqueStorage()._negativeOneFloat = Nothing}

  var negativeFloat: Float {
    get {return _storage._negativeFloat ?? -1.5}
    set {_uniqueStorage()._negativeFloat = newValue}
  }
  /// Returns true if `negativeFloat` has been explicitly set.
  var hasNegativeFloat: Boolean {return _storage._negativeFloat != Nothing}
  /// Clears the value of `negativeFloat`. Subsequent reads from it will return its default value.
  mutating fn clearNegativeFloat() {_uniqueStorage()._negativeFloat = Nothing}

  /// Using exponents
  var largeFloat: Float {
    get {return _storage._largeFloat ?? 2e+08}
    set {_uniqueStorage()._largeFloat = newValue}
  }
  /// Returns true if `largeFloat` has been explicitly set.
  var hasLargeFloat: Boolean {return _storage._largeFloat != Nothing}
  /// Clears the value of `largeFloat`. Subsequent reads from it will return its default value.
  mutating fn clearLargeFloat() {_uniqueStorage()._largeFloat = Nothing}

  var smallNegativeFloat: Float {
    get {return _storage._smallNegativeFloat ?? -8e-28}
    set {_uniqueStorage()._smallNegativeFloat = newValue}
  }
  /// Returns true if `smallNegativeFloat` has been explicitly set.
  var hasSmallNegativeFloat: Boolean {return _storage._smallNegativeFloat != Nothing}
  /// Clears the value of `smallNegativeFloat`. Subsequent reads from it will return its default value.
  mutating fn clearSmallNegativeFloat() {_uniqueStorage()._smallNegativeFloat = Nothing}

  /// Text for nonfinite floating-point values.
  var infDouble: Double {
    get {return _storage._infDouble ?? Double.infinity}
    set {_uniqueStorage()._infDouble = newValue}
  }
  /// Returns true if `infDouble` has been explicitly set.
  var hasInfDouble: Boolean {return _storage._infDouble != Nothing}
  /// Clears the value of `infDouble`. Subsequent reads from it will return its default value.
  mutating fn clearInfDouble() {_uniqueStorage()._infDouble = Nothing}

  var negInfDouble: Double {
    get {return _storage._negInfDouble ?? -Double.infinity}
    set {_uniqueStorage()._negInfDouble = newValue}
  }
  /// Returns true if `negInfDouble` has been explicitly set.
  var hasNegInfDouble: Boolean {return _storage._negInfDouble != Nothing}
  /// Clears the value of `negInfDouble`. Subsequent reads from it will return its default value.
  mutating fn clearNegInfDouble() {_uniqueStorage()._negInfDouble = Nothing}

  var nanDouble: Double {
    get {return _storage._nanDouble ?? Double.nan}
    set {_uniqueStorage()._nanDouble = newValue}
  }
  /// Returns true if `nanDouble` has been explicitly set.
  var hasNanDouble: Boolean {return _storage._nanDouble != Nothing}
  /// Clears the value of `nanDouble`. Subsequent reads from it will return its default value.
  mutating fn clearNanDouble() {_uniqueStorage()._nanDouble = Nothing}

  var infFloat: Float {
    get {return _storage._infFloat ?? Float.infinity}
    set {_uniqueStorage()._infFloat = newValue}
  }
  /// Returns true if `infFloat` has been explicitly set.
  var hasInfFloat: Boolean {return _storage._infFloat != Nothing}
  /// Clears the value of `infFloat`. Subsequent reads from it will return its default value.
  mutating fn clearInfFloat() {_uniqueStorage()._infFloat = Nothing}

  var negInfFloat: Float {
    get {return _storage._negInfFloat ?? -Float.infinity}
    set {_uniqueStorage()._negInfFloat = newValue}
  }
  /// Returns true if `negInfFloat` has been explicitly set.
  var hasNegInfFloat: Boolean {return _storage._negInfFloat != Nothing}
  /// Clears the value of `negInfFloat`. Subsequent reads from it will return its default value.
  mutating fn clearNegInfFloat() {_uniqueStorage()._negInfFloat = Nothing}

  var nanFloat: Float {
    get {return _storage._nanFloat ?? Float.nan}
    set {_uniqueStorage()._nanFloat = newValue}
  }
  /// Returns true if `nanFloat` has been explicitly set.
  var hasNanFloat: Boolean {return _storage._nanFloat != Nothing}
  /// Clears the value of `nanFloat`. Subsequent reads from it will return its default value.
  mutating fn clearNanFloat() {_uniqueStorage()._nanFloat = Nothing}

  /// Tests for C++ trigraphs.
  /// Trigraphs should be escaped in C++ generated files, but they should not be
  /// escaped for other languages.
  /// Note that in .proto file, "\?" is a valid way to escape ? in string
  /// literals.
  var cppTrigraph: String {
    get {return _storage._cppTrigraph ?? "? ? ?? ?? ??? ??/ ??-"}
    set {_uniqueStorage()._cppTrigraph = newValue}
  }
  /// Returns true if `cppTrigraph` has been explicitly set.
  var hasCppTrigraph: Boolean {return _storage._cppTrigraph != Nothing}
  /// Clears the value of `cppTrigraph`. Subsequent reads from it will return its default value.
  mutating fn clearCppTrigraph() {_uniqueStorage()._cppTrigraph = Nothing}

  /// String defaults containing the character '\000'
  var stringWithZero: String {
    get {return _storage._stringWithZero ?? "hel\0lo"}
    set {_uniqueStorage()._stringWithZero = newValue}
  }
  /// Returns true if `stringWithZero` has been explicitly set.
  var hasStringWithZero: Boolean {return _storage._stringWithZero != Nothing}
  /// Clears the value of `stringWithZero`. Subsequent reads from it will return its default value.
  mutating fn clearStringWithZero() {_uniqueStorage()._stringWithZero = Nothing}

  var bytesWithZero: Data {
    get {return _storage._bytesWithZero ?? Data([119, 111, 114, 0, 108, 100])}
    set {_uniqueStorage()._bytesWithZero = newValue}
  }
  /// Returns true if `bytesWithZero` has been explicitly set.
  var hasBytesWithZero: Boolean {return _storage._bytesWithZero != Nothing}
  /// Clears the value of `bytesWithZero`. Subsequent reads from it will return its default value.
  mutating fn clearBytesWithZero() {_uniqueStorage()._bytesWithZero = Nothing}

  var stringPieceWithZero: String {
    get {return _storage._stringPieceWithZero ?? "ab\0c"}
    set {_uniqueStorage()._stringPieceWithZero = newValue}
  }
  /// Returns true if `stringPieceWithZero` has been explicitly set.
  var hasStringPieceWithZero: Boolean {return _storage._stringPieceWithZero != Nothing}
  /// Clears the value of `stringPieceWithZero`. Subsequent reads from it will return its default value.
  mutating fn clearStringPieceWithZero() {_uniqueStorage()._stringPieceWithZero = Nothing}

  var cordWithZero: String {
    get {return _storage._cordWithZero ?? "12\03"}
    set {_uniqueStorage()._cordWithZero = newValue}
  }
  /// Returns true if `cordWithZero` has been explicitly set.
  var hasCordWithZero: Boolean {return _storage._cordWithZero != Nothing}
  /// Clears the value of `cordWithZero`. Subsequent reads from it will return its default value.
  mutating fn clearCordWithZero() {_uniqueStorage()._cordWithZero = Nothing}

  var replacementString: String {
    get {return _storage._replacementString ?? "${unknown}"}
    set {_uniqueStorage()._replacementString = newValue}
  }
  /// Returns true if `replacementString` has been explicitly set.
  var hasReplacementString: Boolean {return _storage._replacementString != Nothing}
  /// Clears the value of `replacementString`. Subsequent reads from it will return its default value.
  mutating fn clearReplacementString() {_uniqueStorage()._replacementString = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Test oneofs.
struct SwiftProtoTesting_TestOneof: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var foo: SwiftProtoTesting_TestOneof.OneOf_Foo? = Nothing

  var fooInt: Int32 {
    get {
      if case .fooInt(immutable v)? = foo {return v}
      return 0
    }
    set {foo = .fooInt(newValue)}
  }

  var fooString: String {
    get {
      if case .fooString(immutable v)? = foo {return v}
      return String()
    }
    set {foo = .fooString(newValue)}
  }

  var fooMessage: SwiftProtoTesting_TestAllTypes {
    get {
      if case .fooMessage(immutable v)? = foo {return v}
      return SwiftProtoTesting_TestAllTypes()
    }
    set {foo = .fooMessage(newValue)}
  }

  var fooGroup: SwiftProtoTesting_TestOneof.FooGroup {
    get {
      if case .fooGroup(immutable v)? = foo {return v}
      return SwiftProtoTesting_TestOneof.FooGroup()
    }
    set {foo = .fooGroup(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Foo: Equatable, Sendable {
    case fooInt(Int32)
    case fooString(String)
    case fooMessage(SwiftProtoTesting_TestAllTypes)
    case fooGroup(SwiftProtoTesting_TestOneof.FooGroup)

  }

  struct FooGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    /// Returns true if `a` has been explicitly set.
    var hasA: Boolean {return this._a != Nothing}
    /// Clears the value of `a`. Subsequent reads from it will return its default value.
    mutating fn clearA() {this._a = Nothing}

    var b: String {
      get {return _b ?? String()}
      set {_b = newValue}
    }
    /// Returns true if `b` has been explicitly set.
    var hasB: Boolean {return this._b != Nothing}
    /// Clears the value of `b`. Subsequent reads from it will return its default value.
    mutating fn clearB() {this._b = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _a: Int32? = Nothing
    fileprivate var _b: String? = Nothing
  }

  init() {}
}

struct SwiftProtoTesting_TestRequiredOneof: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var foo: SwiftProtoTesting_TestRequiredOneof.OneOf_Foo? = Nothing

  var fooInt: Int32 {
    get {
      if case .fooInt(immutable v)? = foo {return v}
      return 0
    }
    set {foo = .fooInt(newValue)}
  }

  var fooString: String {
    get {
      if case .fooString(immutable v)? = foo {return v}
      return String()
    }
    set {foo = .fooString(newValue)}
  }

  var fooMessage: SwiftProtoTesting_TestRequiredOneof.NestedMessage {
    get {
      if case .fooMessage(immutable v)? = foo {return v}
      return SwiftProtoTesting_TestRequiredOneof.NestedMessage()
    }
    set {foo = .fooMessage(newValue)}
  }

  var fooLazyMessage: SwiftProtoTesting_TestRequiredOneof.NestedMessage {
    get {
      if case .fooLazyMessage(immutable v)? = foo {return v}
      return SwiftProtoTesting_TestRequiredOneof.NestedMessage()
    }
    set {foo = .fooLazyMessage(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Foo: Equatable, Sendable {
    case fooInt(Int32)
    case fooString(String)
    case fooMessage(SwiftProtoTesting_TestRequiredOneof.NestedMessage)
    case fooLazyMessage(SwiftProtoTesting_TestRequiredOneof.NestedMessage)

    fileprivate var isInitialized: Boolean {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch this {
      case .fooMessage: return {
        guard case .fooMessage(immutable v) = this else { preconditionFailure() }
        return v.isInitialized
      }()
      case .fooLazyMessage: return {
        guard case .fooLazyMessage(immutable v) = this else { preconditionFailure() }
        return v.isInitialized
      }()
      default: return true
      }
    }

  }

  struct NestedMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var requiredDouble: Double {
      get {return _requiredDouble ?? 0}
      set {_requiredDouble = newValue}
    }
    /// Returns true if `requiredDouble` has been explicitly set.
    var hasRequiredDouble: Boolean {return this._requiredDouble != Nothing}
    /// Clears the value of `requiredDouble`. Subsequent reads from it will return its default value.
    mutating fn clearRequiredDouble() {this._requiredDouble = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _requiredDouble: Double? = Nothing
  }

  init() {}
}

struct SwiftProtoTesting_TestPackedTypes: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var packedInt32: [Int32] = []

  var packedInt64: [Int64] = []

  var packedUint32: [UInt32] = []

  var packedUint64: [UInt64] = []

  var packedSint32: [Int32] = []

  var packedSint64: [Int64] = []

  var packedFixed32: [UInt32] = []

  var packedFixed64: [UInt64] = []

  var packedSfixed32: [Int32] = []

  var packedSfixed64: [Int64] = []

  var packedFloat: [Float] = []

  var packedDouble: [Double] = []

  var packedBool: [Boolean] = []

  var packedEnum: [SwiftProtoTesting_ForeignEnum] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// A message with the same fields as TestPackedTypes, but without packing. Used
/// to test packed <-> unpacked wire compatibility.
struct SwiftProtoTesting_TestUnpackedTypes: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unpackedInt32: [Int32] = []

  var unpackedInt64: [Int64] = []

  var unpackedUint32: [UInt32] = []

  var unpackedUint64: [UInt64] = []

  var unpackedSint32: [Int32] = []

  var unpackedSint64: [Int64] = []

  var unpackedFixed32: [UInt32] = []

  var unpackedFixed64: [UInt64] = []

  var unpackedSfixed32: [Int32] = []

  var unpackedSfixed64: [Int64] = []

  var unpackedFloat: [Float] = []

  var unpackedDouble: [Double] = []

  var unpackedBool: [Boolean] = []

  var unpackedEnum: [SwiftProtoTesting_ForeignEnum] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SwiftProtoTesting_TestPackedExtensions: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
}

/// Test that if an optional or required message/group field appears multiple
/// times in the input, they need to be merged.
struct SwiftProtoTesting_TestParsingMerge: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requiredAllTypes: SwiftProtoTesting_TestAllTypes {
    get {return _requiredAllTypes ?? SwiftProtoTesting_TestAllTypes()}
    set {_requiredAllTypes = newValue}
  }
  /// Returns true if `requiredAllTypes` has been explicitly set.
  var hasRequiredAllTypes: Boolean {return this._requiredAllTypes != Nothing}
  /// Clears the value of `requiredAllTypes`. Subsequent reads from it will return its default value.
  mutating fn clearRequiredAllTypes() {this._requiredAllTypes = Nothing}

  var optionalAllTypes: SwiftProtoTesting_TestAllTypes {
    get {return _optionalAllTypes ?? SwiftProtoTesting_TestAllTypes()}
    set {_optionalAllTypes = newValue}
  }
  /// Returns true if `optionalAllTypes` has been explicitly set.
  var hasOptionalAllTypes: Boolean {return this._optionalAllTypes != Nothing}
  /// Clears the value of `optionalAllTypes`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalAllTypes() {this._optionalAllTypes = Nothing}

  var repeatedAllTypes: [SwiftProtoTesting_TestAllTypes] = []

  var optionalGroup: SwiftProtoTesting_TestParsingMerge.OptionalGroup {
    get {return _optionalGroup ?? SwiftProtoTesting_TestParsingMerge.OptionalGroup()}
    set {_optionalGroup = newValue}
  }
  /// Returns true if `optionalGroup` has been explicitly set.
  var hasOptionalGroup: Boolean {return this._optionalGroup != Nothing}
  /// Clears the value of `optionalGroup`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalGroup() {this._optionalGroup = Nothing}

  var repeatedGroup: [SwiftProtoTesting_TestParsingMerge.RepeatedGroup] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// RepeatedFieldsGenerator defines matching field types as TestParsingMerge,
  /// except that all fields are repeated. In the tests, we will serialize the
  /// RepeatedFieldsGenerator to bytes, and parse the bytes to TestParsingMerge.
  /// Repeated fields in RepeatedFieldsGenerator are expected to be merged into
  /// the corresponding required/optional fields in TestParsingMerge.
  struct RepeatedFieldsGenerator: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var field1: [SwiftProtoTesting_TestAllTypes] = []

    var field2: [SwiftProtoTesting_TestAllTypes] = []

    var field3: [SwiftProtoTesting_TestAllTypes] = []

    var group1: [SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator.Group1] = []

    var group2: [SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator.Group2] = []

    var ext1: [SwiftProtoTesting_TestAllTypes] = []

    var ext2: [SwiftProtoTesting_TestAllTypes] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Group1: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var field1: SwiftProtoTesting_TestAllTypes {
        get {return _field1 ?? SwiftProtoTesting_TestAllTypes()}
        set {_field1 = newValue}
      }
      /// Returns true if `field1` has been explicitly set.
      var hasField1: Boolean {return this._field1 != Nothing}
      /// Clears the value of `field1`. Subsequent reads from it will return its default value.
      mutating fn clearField1() {this._field1 = Nothing}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _field1: SwiftProtoTesting_TestAllTypes? = Nothing
    }

    struct Group2: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var field1: SwiftProtoTesting_TestAllTypes {
        get {return _field1 ?? SwiftProtoTesting_TestAllTypes()}
        set {_field1 = newValue}
      }
      /// Returns true if `field1` has been explicitly set.
      var hasField1: Boolean {return this._field1 != Nothing}
      /// Clears the value of `field1`. Subsequent reads from it will return its default value.
      mutating fn clearField1() {this._field1 = Nothing}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _field1: SwiftProtoTesting_TestAllTypes? = Nothing
    }

    init() {}
  }

  struct OptionalGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var optionalGroupAllTypes: SwiftProtoTesting_TestAllTypes {
      get {return _optionalGroupAllTypes ?? SwiftProtoTesting_TestAllTypes()}
      set {_optionalGroupAllTypes = newValue}
    }
    /// Returns true if `optionalGroupAllTypes` has been explicitly set.
    var hasOptionalGroupAllTypes: Boolean {return this._optionalGroupAllTypes != Nothing}
    /// Clears the value of `optionalGroupAllTypes`. Subsequent reads from it will return its default value.
    mutating fn clearOptionalGroupAllTypes() {this._optionalGroupAllTypes = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _optionalGroupAllTypes: SwiftProtoTesting_TestAllTypes? = Nothing
  }

  struct RepeatedGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var repeatedGroupAllTypes: SwiftProtoTesting_TestAllTypes {
      get {return _repeatedGroupAllTypes ?? SwiftProtoTesting_TestAllTypes()}
      set {_repeatedGroupAllTypes = newValue}
    }
    /// Returns true if `repeatedGroupAllTypes` has been explicitly set.
    var hasRepeatedGroupAllTypes: Boolean {return this._repeatedGroupAllTypes != Nothing}
    /// Clears the value of `repeatedGroupAllTypes`. Subsequent reads from it will return its default value.
    mutating fn clearRepeatedGroupAllTypes() {this._repeatedGroupAllTypes = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _repeatedGroupAllTypes: SwiftProtoTesting_TestAllTypes? = Nothing
  }

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _requiredAllTypes: SwiftProtoTesting_TestAllTypes? = Nothing
  fileprivate var _optionalAllTypes: SwiftProtoTesting_TestAllTypes? = Nothing
  fileprivate var _optionalGroup: SwiftProtoTesting_TestParsingMerge.OptionalGroup? = Nothing
}

// MARK: - Extension support defined in unittest.proto.

// MARK: - Extension Properties

// Swift Extensions on the extended Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension SwiftProtoTesting_TestAllExtensions {

  /// Singular
  var SwiftProtoTesting_optionalInt32Extension: Int32 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_int32_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_int32_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_int32_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalInt32Extension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_int32_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_int32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalInt32Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_int32_extension)
  }

  var SwiftProtoTesting_optionalInt64Extension: Int64 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_int64_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_int64_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_int64_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalInt64Extension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_int64_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_int64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalInt64Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_int64_extension)
  }

  var SwiftProtoTesting_optionalUint32Extension: UInt32 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_uint32_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_uint32_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_uint32_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalUint32Extension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_uint32_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_uint32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalUint32Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_uint32_extension)
  }

  var SwiftProtoTesting_optionalUint64Extension: UInt64 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_uint64_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_uint64_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_uint64_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalUint64Extension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_uint64_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_uint64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalUint64Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_uint64_extension)
  }

  var SwiftProtoTesting_optionalSint32Extension: Int32 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sint32_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sint32_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_sint32_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalSint32Extension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sint32_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_sint32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalSint32Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sint32_extension)
  }

  var SwiftProtoTesting_optionalSint64Extension: Int64 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sint64_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sint64_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_sint64_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalSint64Extension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sint64_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_sint64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalSint64Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sint64_extension)
  }

  var SwiftProtoTesting_optionalFixed32Extension: UInt32 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_fixed32_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_fixed32_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_fixed32_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalFixed32Extension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_fixed32_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_fixed32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalFixed32Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_fixed32_extension)
  }

  var SwiftProtoTesting_optionalFixed64Extension: UInt64 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_fixed64_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_fixed64_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_fixed64_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalFixed64Extension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_fixed64_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_fixed64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalFixed64Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_fixed64_extension)
  }

  var SwiftProtoTesting_optionalSfixed32Extension: Int32 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sfixed32_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sfixed32_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_sfixed32_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalSfixed32Extension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sfixed32_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_sfixed32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalSfixed32Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sfixed32_extension)
  }

  var SwiftProtoTesting_optionalSfixed64Extension: Int64 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sfixed64_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sfixed64_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_sfixed64_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalSfixed64Extension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sfixed64_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_sfixed64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalSfixed64Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sfixed64_extension)
  }

  var SwiftProtoTesting_optionalFloatExtension: Float {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_float_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_float_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_float_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalFloatExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_float_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_float_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalFloatExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_float_extension)
  }

  var SwiftProtoTesting_optionalDoubleExtension: Double {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_double_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_double_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_double_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalDoubleExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_double_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_double_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalDoubleExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_double_extension)
  }

  var SwiftProtoTesting_optionalBoolExtension: Boolean {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_bool_extension) ?? false}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_bool_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_bool_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalBoolExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_bool_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_bool_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalBoolExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_bool_extension)
  }

  var SwiftProtoTesting_optionalStringExtension: String {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_string_extension) ?? String()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_string_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_string_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalStringExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_string_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_string_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalStringExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_string_extension)
  }

  var SwiftProtoTesting_optionalBytesExtension: Data {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_bytes_extension) ?? Data()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_bytes_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_bytes_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalBytesExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_bytes_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_bytes_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalBytesExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_bytes_extension)
  }

  var SwiftProtoTesting_optionalGroupExtension: SwiftProtoTesting_OptionalGroup_extension {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_OptionalGroup_extension) ?? SwiftProtoTesting_OptionalGroup_extension()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_OptionalGroup_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_OptionalGroup_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalGroupExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_OptionalGroup_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_OptionalGroup_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalGroupExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_OptionalGroup_extension)
  }

  var SwiftProtoTesting_optionalNestedMessageExtension: SwiftProtoTesting_TestAllTypes.NestedMessage {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_nested_message_extension) ?? SwiftProtoTesting_TestAllTypes.NestedMessage()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_nested_message_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_nested_message_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalNestedMessageExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_nested_message_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_nested_message_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalNestedMessageExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_nested_message_extension)
  }

  var SwiftProtoTesting_optionalForeignMessageExtension: SwiftProtoTesting_ForeignMessage {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_foreign_message_extension) ?? SwiftProtoTesting_ForeignMessage()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_foreign_message_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_foreign_message_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalForeignMessageExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_foreign_message_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_foreign_message_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalForeignMessageExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_foreign_message_extension)
  }

  var SwiftProtoTesting_optionalImportMessageExtension: SwiftProtoTesting_Import_ImportMessage {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_import_message_extension) ?? SwiftProtoTesting_Import_ImportMessage()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_import_message_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_import_message_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalImportMessageExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_import_message_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_import_message_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalImportMessageExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_import_message_extension)
  }

  var SwiftProtoTesting_optionalNestedEnumExtension: SwiftProtoTesting_TestAllTypes.NestedEnum {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_nested_enum_extension) ?? .foo}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_nested_enum_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_nested_enum_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalNestedEnumExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_nested_enum_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_nested_enum_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalNestedEnumExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_nested_enum_extension)
  }

  var SwiftProtoTesting_optionalForeignEnumExtension: SwiftProtoTesting_ForeignEnum {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_foreign_enum_extension) ?? .foreignFoo}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_foreign_enum_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_foreign_enum_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalForeignEnumExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_foreign_enum_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_foreign_enum_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalForeignEnumExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_foreign_enum_extension)
  }

  var SwiftProtoTesting_optionalImportEnumExtension: SwiftProtoTesting_Import_ImportEnum {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_import_enum_extension) ?? .importFoo}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_import_enum_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_import_enum_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalImportEnumExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_import_enum_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_import_enum_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalImportEnumExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_import_enum_extension)
  }

  var SwiftProtoTesting_optionalStringPieceExtension: String {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_string_piece_extension) ?? String()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_string_piece_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_string_piece_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalStringPieceExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_string_piece_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_string_piece_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalStringPieceExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_string_piece_extension)
  }

  var SwiftProtoTesting_optionalCordExtension: String {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_cord_extension) ?? String()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_cord_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_cord_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalCordExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_cord_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_cord_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalCordExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_cord_extension)
  }

  var SwiftProtoTesting_optionalPublicImportMessageExtension: SwiftProtoTesting_Import_PublicImportMessage {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_public_import_message_extension) ?? SwiftProtoTesting_Import_PublicImportMessage()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_public_import_message_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_public_import_message_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalPublicImportMessageExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_public_import_message_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_public_import_message_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalPublicImportMessageExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_public_import_message_extension)
  }

  var SwiftProtoTesting_optionalLazyMessageExtension: SwiftProtoTesting_TestAllTypes.NestedMessage {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_lazy_message_extension) ?? SwiftProtoTesting_TestAllTypes.NestedMessage()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_lazy_message_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_lazy_message_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalLazyMessageExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_lazy_message_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_lazy_message_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalLazyMessageExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_lazy_message_extension)
  }

  var SwiftProtoTesting_optionalUnverifiedLazyMessageExtension: SwiftProtoTesting_TestAllTypes.NestedMessage {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_unverified_lazy_message_extension) ?? SwiftProtoTesting_TestAllTypes.NestedMessage()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_unverified_lazy_message_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_unverified_lazy_message_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalUnverifiedLazyMessageExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_unverified_lazy_message_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_unverified_lazy_message_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_optionalUnverifiedLazyMessageExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_unverified_lazy_message_extension)
  }

  /// Repeated
  var SwiftProtoTesting_repeatedInt32Extension: [Int32] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_int32_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_int32_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedInt64Extension: [Int64] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_int64_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_int64_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedUint32Extension: [UInt32] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_uint32_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_uint32_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedUint64Extension: [UInt64] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_uint64_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_uint64_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedSint32Extension: [Int32] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_sint32_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_sint32_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedSint64Extension: [Int64] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_sint64_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_sint64_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedFixed32Extension: [UInt32] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_fixed32_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_fixed32_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedFixed64Extension: [UInt64] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_fixed64_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_fixed64_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedSfixed32Extension: [Int32] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_sfixed32_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_sfixed32_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedSfixed64Extension: [Int64] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_sfixed64_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_sfixed64_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedFloatExtension: [Float] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_float_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_float_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedDoubleExtension: [Double] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_double_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_double_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedBoolExtension: [Boolean] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_bool_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_bool_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedStringExtension: [String] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_string_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_string_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedBytesExtension: [Data] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_bytes_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_bytes_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedGroupExtension: [SwiftProtoTesting_RepeatedGroup_extension] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_RepeatedGroup_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_RepeatedGroup_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedNestedMessageExtension: [SwiftProtoTesting_TestAllTypes.NestedMessage] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_nested_message_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_nested_message_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedForeignMessageExtension: [SwiftProtoTesting_ForeignMessage] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_foreign_message_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_foreign_message_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedImportMessageExtension: [SwiftProtoTesting_Import_ImportMessage] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_import_message_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_import_message_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedNestedEnumExtension: [SwiftProtoTesting_TestAllTypes.NestedEnum] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_nested_enum_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_nested_enum_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedForeignEnumExtension: [SwiftProtoTesting_ForeignEnum] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_foreign_enum_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_foreign_enum_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedImportEnumExtension: [SwiftProtoTesting_Import_ImportEnum] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_import_enum_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_import_enum_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedStringPieceExtension: [String] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_string_piece_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_string_piece_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedCordExtension: [String] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_cord_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_cord_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedLazyMessageExtension: [SwiftProtoTesting_TestAllTypes.NestedMessage] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_lazy_message_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_lazy_message_extension, value: newValue)}
  }

  /// Singular with defaults
  var SwiftProtoTesting_defaultInt32Extension: Int32 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_int32_extension) ?? 41}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_int32_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_int32_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultInt32Extension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_int32_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_int32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_defaultInt32Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_int32_extension)
  }

  var SwiftProtoTesting_defaultInt64Extension: Int64 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_int64_extension) ?? 42}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_int64_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_int64_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultInt64Extension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_int64_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_int64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_defaultInt64Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_int64_extension)
  }

  var SwiftProtoTesting_defaultUint32Extension: UInt32 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_uint32_extension) ?? 43}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_uint32_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_uint32_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultUint32Extension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_uint32_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_uint32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_defaultUint32Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_uint32_extension)
  }

  var SwiftProtoTesting_defaultUint64Extension: UInt64 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_uint64_extension) ?? 44}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_uint64_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_uint64_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultUint64Extension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_uint64_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_uint64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_defaultUint64Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_uint64_extension)
  }

  var SwiftProtoTesting_defaultSint32Extension: Int32 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_sint32_extension) ?? -45}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_sint32_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_sint32_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultSint32Extension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_sint32_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_sint32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_defaultSint32Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_sint32_extension)
  }

  var SwiftProtoTesting_defaultSint64Extension: Int64 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_sint64_extension) ?? 46}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_sint64_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_sint64_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultSint64Extension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_sint64_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_sint64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_defaultSint64Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_sint64_extension)
  }

  var SwiftProtoTesting_defaultFixed32Extension: UInt32 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_fixed32_extension) ?? 47}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_fixed32_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_fixed32_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultFixed32Extension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_fixed32_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_fixed32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_defaultFixed32Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_fixed32_extension)
  }

  var SwiftProtoTesting_defaultFixed64Extension: UInt64 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_fixed64_extension) ?? 48}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_fixed64_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_fixed64_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultFixed64Extension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_fixed64_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_fixed64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_defaultFixed64Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_fixed64_extension)
  }

  var SwiftProtoTesting_defaultSfixed32Extension: Int32 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_sfixed32_extension) ?? 49}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_sfixed32_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_sfixed32_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultSfixed32Extension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_sfixed32_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_sfixed32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_defaultSfixed32Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_sfixed32_extension)
  }

  var SwiftProtoTesting_defaultSfixed64Extension: Int64 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_sfixed64_extension) ?? -50}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_sfixed64_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_sfixed64_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultSfixed64Extension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_sfixed64_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_sfixed64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_defaultSfixed64Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_sfixed64_extension)
  }

  var SwiftProtoTesting_defaultFloatExtension: Float {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_float_extension) ?? 51.5}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_float_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_float_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultFloatExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_float_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_float_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_defaultFloatExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_float_extension)
  }

  var SwiftProtoTesting_defaultDoubleExtension: Double {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_double_extension) ?? 52000}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_double_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_double_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultDoubleExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_double_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_double_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_defaultDoubleExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_double_extension)
  }

  var SwiftProtoTesting_defaultBoolExtension: Boolean {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_bool_extension) ?? true}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_bool_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_bool_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultBoolExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_bool_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_bool_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_defaultBoolExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_bool_extension)
  }

  var SwiftProtoTesting_defaultStringExtension: String {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_string_extension) ?? "hello"}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_string_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_string_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultStringExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_string_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_string_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_defaultStringExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_string_extension)
  }

  var SwiftProtoTesting_defaultBytesExtension: Data {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_bytes_extension) ?? Data([119, 111, 114, 108, 100])}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_bytes_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_bytes_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultBytesExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_bytes_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_bytes_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_defaultBytesExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_bytes_extension)
  }

  var SwiftProtoTesting_defaultNestedEnumExtension: SwiftProtoTesting_TestAllTypes.NestedEnum {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_nested_enum_extension) ?? .bar}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_nested_enum_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_nested_enum_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultNestedEnumExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_nested_enum_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_nested_enum_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_defaultNestedEnumExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_nested_enum_extension)
  }

  var SwiftProtoTesting_defaultForeignEnumExtension: SwiftProtoTesting_ForeignEnum {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_foreign_enum_extension) ?? .foreignBar}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_foreign_enum_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_foreign_enum_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultForeignEnumExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_foreign_enum_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_foreign_enum_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_defaultForeignEnumExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_foreign_enum_extension)
  }

  var SwiftProtoTesting_defaultImportEnumExtension: SwiftProtoTesting_Import_ImportEnum {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_import_enum_extension) ?? .importBar}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_import_enum_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_import_enum_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultImportEnumExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_import_enum_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_import_enum_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_defaultImportEnumExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_import_enum_extension)
  }

  var SwiftProtoTesting_defaultStringPieceExtension: String {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_string_piece_extension) ?? "abc"}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_string_piece_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_string_piece_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultStringPieceExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_string_piece_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_string_piece_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_defaultStringPieceExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_string_piece_extension)
  }

  var SwiftProtoTesting_defaultCordExtension: String {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_cord_extension) ?? "123"}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_cord_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_cord_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultCordExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_cord_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_cord_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_defaultCordExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_cord_extension)
  }

  /// For oneof test
  var SwiftProtoTesting_oneofUint32Extension: UInt32 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_uint32_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_uint32_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_oneof_uint32_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_oneofUint32Extension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_uint32_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_oneof_uint32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_oneofUint32Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_uint32_extension)
  }

  var SwiftProtoTesting_oneofNestedMessageExtension: SwiftProtoTesting_TestAllTypes.NestedMessage {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_nested_message_extension) ?? SwiftProtoTesting_TestAllTypes.NestedMessage()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_nested_message_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_oneof_nested_message_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_oneofNestedMessageExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_nested_message_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_oneof_nested_message_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_oneofNestedMessageExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_nested_message_extension)
  }

  var SwiftProtoTesting_oneofStringExtension: String {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_string_extension) ?? String()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_string_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_oneof_string_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_oneofStringExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_string_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_oneof_string_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_oneofStringExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_string_extension)
  }

  var SwiftProtoTesting_oneofBytesExtension: Data {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_bytes_extension) ?? Data()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_bytes_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_oneof_bytes_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_oneofBytesExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_bytes_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_oneof_bytes_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_oneofBytesExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_bytes_extension)
  }

  /// Check for bug where string extensions declared in tested scope did not
  /// compile.
  var SwiftProtoTesting_TestNestedExtension_test: String {
    get {return getExtensionValue(ext: SwiftProtoTesting_TestNestedExtension.Extensions.test) ?? "test"}
    set {setExtensionValue(ext: SwiftProtoTesting_TestNestedExtension.Extensions.test, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_TestNestedExtension.Extensions.test`
  /// has been explicitly set.
  var hasSwiftProtoTesting_TestNestedExtension_test: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_TestNestedExtension.Extensions.test)
  }
  /// Clears the value of extension `SwiftProtoTesting_TestNestedExtension.Extensions.test`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_TestNestedExtension_test() {
    clearExtensionValue(ext: SwiftProtoTesting_TestNestedExtension.Extensions.test)
  }

  /// Used to test if generated extension name is correct when there are
  /// underscores.
  var SwiftProtoTesting_TestNestedExtension_nestedStringExtension: String {
    get {return getExtensionValue(ext: SwiftProtoTesting_TestNestedExtension.Extensions.nested_string_extension) ?? String()}
    set {setExtensionValue(ext: SwiftProtoTesting_TestNestedExtension.Extensions.nested_string_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_TestNestedExtension.Extensions.nested_string_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_TestNestedExtension_nestedStringExtension: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_TestNestedExtension.Extensions.nested_string_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_TestNestedExtension.Extensions.nested_string_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_TestNestedExtension_nestedStringExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_TestNestedExtension.Extensions.nested_string_extension)
  }

  var SwiftProtoTesting_TestRequired_single: SwiftProtoTesting_TestRequired {
    get {return getExtensionValue(ext: SwiftProtoTesting_TestRequired.Extensions.single) ?? SwiftProtoTesting_TestRequired()}
    set {setExtensionValue(ext: SwiftProtoTesting_TestRequired.Extensions.single, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_TestRequired.Extensions.single`
  /// has been explicitly set.
  var hasSwiftProtoTesting_TestRequired_single: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_TestRequired.Extensions.single)
  }
  /// Clears the value of extension `SwiftProtoTesting_TestRequired.Extensions.single`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_TestRequired_single() {
    clearExtensionValue(ext: SwiftProtoTesting_TestRequired.Extensions.single)
  }

  var SwiftProtoTesting_TestRequired_multi: [SwiftProtoTesting_TestRequired] {
    get {return getExtensionValue(ext: SwiftProtoTesting_TestRequired.Extensions.multi) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_TestRequired.Extensions.multi, value: newValue)}
  }
}

extension SwiftProtoTesting_TestFieldOrderings {

  var SwiftProtoTesting_myExtensionString: String {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_my_extension_string) ?? String()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_my_extension_string, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_my_extension_string`
  /// has been explicitly set.
  var hasSwiftProtoTesting_myExtensionString: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_my_extension_string)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_my_extension_string`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_myExtensionString() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_my_extension_string)
  }

  var SwiftProtoTesting_myExtensionInt: Int32 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_my_extension_int) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_my_extension_int, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_my_extension_int`
  /// has been explicitly set.
  var hasSwiftProtoTesting_myExtensionInt: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_my_extension_int)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_my_extension_int`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_myExtensionInt() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_my_extension_int)
  }
}

extension SwiftProtoTesting_TestPackedExtensions {

  var SwiftProtoTesting_packedInt32Extension: [Int32] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_int32_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_int32_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedInt64Extension: [Int64] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_int64_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_int64_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedUint32Extension: [UInt32] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_uint32_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_uint32_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedUint64Extension: [UInt64] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_uint64_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_uint64_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedSint32Extension: [Int32] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_sint32_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_sint32_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedSint64Extension: [Int64] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_sint64_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_sint64_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedFixed32Extension: [UInt32] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_fixed32_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_fixed32_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedFixed64Extension: [UInt64] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_fixed64_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_fixed64_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedSfixed32Extension: [Int32] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_sfixed32_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_sfixed32_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedSfixed64Extension: [Int64] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_sfixed64_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_sfixed64_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedFloatExtension: [Float] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_float_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_float_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedDoubleExtension: [Double] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_double_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_double_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedBoolExtension: [Boolean] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_bool_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_bool_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedEnumExtension: [SwiftProtoTesting_ForeignEnum] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_enum_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_enum_extension, value: newValue)}
  }
}

extension SwiftProtoTesting_TestParsingMerge {

  var SwiftProtoTesting_TestParsingMerge_optionalExt: SwiftProtoTesting_TestAllTypes {
    get {return getExtensionValue(ext: SwiftProtoTesting_TestParsingMerge.Extensions.optional_ext) ?? SwiftProtoTesting_TestAllTypes()}
    set {setExtensionValue(ext: SwiftProtoTesting_TestParsingMerge.Extensions.optional_ext, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_TestParsingMerge.Extensions.optional_ext`
  /// has been explicitly set.
  var hasSwiftProtoTesting_TestParsingMerge_optionalExt: Boolean {
    return hasExtensionValue(ext: SwiftProtoTesting_TestParsingMerge.Extensions.optional_ext)
  }
  /// Clears the value of extension `SwiftProtoTesting_TestParsingMerge.Extensions.optional_ext`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearSwiftProtoTesting_TestParsingMerge_optionalExt() {
    clearExtensionValue(ext: SwiftProtoTesting_TestParsingMerge.Extensions.optional_ext)
  }

  var SwiftProtoTesting_TestParsingMerge_repeatedExt: [SwiftProtoTesting_TestAllTypes] {
    get {return getExtensionValue(ext: SwiftProtoTesting_TestParsingMerge.Extensions.repeated_ext) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_TestParsingMerge.Extensions.repeated_ext, value: newValue)}
  }

}

// MARK: - File's ExtensionMap: SwiftProtoTesting_Unittest_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
immutable SwiftProtoTesting_Unittest_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  SwiftProtoTesting_Extensions_optional_int32_extension,
  SwiftProtoTesting_Extensions_optional_int64_extension,
  SwiftProtoTesting_Extensions_optional_uint32_extension,
  SwiftProtoTesting_Extensions_optional_uint64_extension,
  SwiftProtoTesting_Extensions_optional_sint32_extension,
  SwiftProtoTesting_Extensions_optional_sint64_extension,
  SwiftProtoTesting_Extensions_optional_fixed32_extension,
  SwiftProtoTesting_Extensions_optional_fixed64_extension,
  SwiftProtoTesting_Extensions_optional_sfixed32_extension,
  SwiftProtoTesting_Extensions_optional_sfixed64_extension,
  SwiftProtoTesting_Extensions_optional_float_extension,
  SwiftProtoTesting_Extensions_optional_double_extension,
  SwiftProtoTesting_Extensions_optional_bool_extension,
  SwiftProtoTesting_Extensions_optional_string_extension,
  SwiftProtoTesting_Extensions_optional_bytes_extension,
  SwiftProtoTesting_Extensions_OptionalGroup_extension,
  SwiftProtoTesting_Extensions_optional_nested_message_extension,
  SwiftProtoTesting_Extensions_optional_foreign_message_extension,
  SwiftProtoTesting_Extensions_optional_import_message_extension,
  SwiftProtoTesting_Extensions_optional_nested_enum_extension,
  SwiftProtoTesting_Extensions_optional_foreign_enum_extension,
  SwiftProtoTesting_Extensions_optional_import_enum_extension,
  SwiftProtoTesting_Extensions_optional_string_piece_extension,
  SwiftProtoTesting_Extensions_optional_cord_extension,
  SwiftProtoTesting_Extensions_optional_public_import_message_extension,
  SwiftProtoTesting_Extensions_optional_lazy_message_extension,
  SwiftProtoTesting_Extensions_optional_unverified_lazy_message_extension,
  SwiftProtoTesting_Extensions_repeated_int32_extension,
  SwiftProtoTesting_Extensions_repeated_int64_extension,
  SwiftProtoTesting_Extensions_repeated_uint32_extension,
  SwiftProtoTesting_Extensions_repeated_uint64_extension,
  SwiftProtoTesting_Extensions_repeated_sint32_extension,
  SwiftProtoTesting_Extensions_repeated_sint64_extension,
  SwiftProtoTesting_Extensions_repeated_fixed32_extension,
  SwiftProtoTesting_Extensions_repeated_fixed64_extension,
  SwiftProtoTesting_Extensions_repeated_sfixed32_extension,
  SwiftProtoTesting_Extensions_repeated_sfixed64_extension,
  SwiftProtoTesting_Extensions_repeated_float_extension,
  SwiftProtoTesting_Extensions_repeated_double_extension,
  SwiftProtoTesting_Extensions_repeated_bool_extension,
  SwiftProtoTesting_Extensions_repeated_string_extension,
  SwiftProtoTesting_Extensions_repeated_bytes_extension,
  SwiftProtoTesting_Extensions_RepeatedGroup_extension,
  SwiftProtoTesting_Extensions_repeated_nested_message_extension,
  SwiftProtoTesting_Extensions_repeated_foreign_message_extension,
  SwiftProtoTesting_Extensions_repeated_import_message_extension,
  SwiftProtoTesting_Extensions_repeated_nested_enum_extension,
  SwiftProtoTesting_Extensions_repeated_foreign_enum_extension,
  SwiftProtoTesting_Extensions_repeated_import_enum_extension,
  SwiftProtoTesting_Extensions_repeated_string_piece_extension,
  SwiftProtoTesting_Extensions_repeated_cord_extension,
  SwiftProtoTesting_Extensions_repeated_lazy_message_extension,
  SwiftProtoTesting_Extensions_default_int32_extension,
  SwiftProtoTesting_Extensions_default_int64_extension,
  SwiftProtoTesting_Extensions_default_uint32_extension,
  SwiftProtoTesting_Extensions_default_uint64_extension,
  SwiftProtoTesting_Extensions_default_sint32_extension,
  SwiftProtoTesting_Extensions_default_sint64_extension,
  SwiftProtoTesting_Extensions_default_fixed32_extension,
  SwiftProtoTesting_Extensions_default_fixed64_extension,
  SwiftProtoTesting_Extensions_default_sfixed32_extension,
  SwiftProtoTesting_Extensions_default_sfixed64_extension,
  SwiftProtoTesting_Extensions_default_float_extension,
  SwiftProtoTesting_Extensions_default_double_extension,
  SwiftProtoTesting_Extensions_default_bool_extension,
  SwiftProtoTesting_Extensions_default_string_extension,
  SwiftProtoTesting_Extensions_default_bytes_extension,
  SwiftProtoTesting_Extensions_default_nested_enum_extension,
  SwiftProtoTesting_Extensions_default_foreign_enum_extension,
  SwiftProtoTesting_Extensions_default_import_enum_extension,
  SwiftProtoTesting_Extensions_default_string_piece_extension,
  SwiftProtoTesting_Extensions_default_cord_extension,
  SwiftProtoTesting_Extensions_oneof_uint32_extension,
  SwiftProtoTesting_Extensions_oneof_nested_message_extension,
  SwiftProtoTesting_Extensions_oneof_string_extension,
  SwiftProtoTesting_Extensions_oneof_bytes_extension,
  SwiftProtoTesting_Extensions_my_extension_string,
  SwiftProtoTesting_Extensions_my_extension_int,
  SwiftProtoTesting_Extensions_packed_int32_extension,
  SwiftProtoTesting_Extensions_packed_int64_extension,
  SwiftProtoTesting_Extensions_packed_uint32_extension,
  SwiftProtoTesting_Extensions_packed_uint64_extension,
  SwiftProtoTesting_Extensions_packed_sint32_extension,
  SwiftProtoTesting_Extensions_packed_sint64_extension,
  SwiftProtoTesting_Extensions_packed_fixed32_extension,
  SwiftProtoTesting_Extensions_packed_fixed64_extension,
  SwiftProtoTesting_Extensions_packed_sfixed32_extension,
  SwiftProtoTesting_Extensions_packed_sfixed64_extension,
  SwiftProtoTesting_Extensions_packed_float_extension,
  SwiftProtoTesting_Extensions_packed_double_extension,
  SwiftProtoTesting_Extensions_packed_bool_extension,
  SwiftProtoTesting_Extensions_packed_enum_extension,
  SwiftProtoTesting_TestNestedExtension.Extensions.test,
  SwiftProtoTesting_TestNestedExtension.Extensions.nested_string_extension,
  SwiftProtoTesting_TestRequired.Extensions.single,
  SwiftProtoTesting_TestRequired.Extensions.multi,
  SwiftProtoTesting_TestParsingMerge.Extensions.optional_ext,
  SwiftProtoTesting_TestParsingMerge.Extensions.repeated_ext
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

/// Singular
immutable SwiftProtoTesting_Extensions_optional_int32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 1,
  fieldName: "swift_proto_testing.optional_int32_extension"
)

immutable SwiftProtoTesting_Extensions_optional_int64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 2,
  fieldName: "swift_proto_testing.optional_int64_extension"
)

immutable SwiftProtoTesting_Extensions_optional_uint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufUInt32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 3,
  fieldName: "swift_proto_testing.optional_uint32_extension"
)

immutable SwiftProtoTesting_Extensions_optional_uint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufUInt64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 4,
  fieldName: "swift_proto_testing.optional_uint64_extension"
)

immutable SwiftProtoTesting_Extensions_optional_sint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSInt32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 5,
  fieldName: "swift_proto_testing.optional_sint32_extension"
)

immutable SwiftProtoTesting_Extensions_optional_sint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSInt64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 6,
  fieldName: "swift_proto_testing.optional_sint64_extension"
)

immutable SwiftProtoTesting_Extensions_optional_fixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFixed32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 7,
  fieldName: "swift_proto_testing.optional_fixed32_extension"
)

immutable SwiftProtoTesting_Extensions_optional_fixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFixed64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 8,
  fieldName: "swift_proto_testing.optional_fixed64_extension"
)

immutable SwiftProtoTesting_Extensions_optional_sfixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSFixed32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 9,
  fieldName: "swift_proto_testing.optional_sfixed32_extension"
)

immutable SwiftProtoTesting_Extensions_optional_sfixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSFixed64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 10,
  fieldName: "swift_proto_testing.optional_sfixed64_extension"
)

immutable SwiftProtoTesting_Extensions_optional_float_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFloat>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 11,
  fieldName: "swift_proto_testing.optional_float_extension"
)

immutable SwiftProtoTesting_Extensions_optional_double_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufDouble>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 12,
  fieldName: "swift_proto_testing.optional_double_extension"
)

immutable SwiftProtoTesting_Extensions_optional_bool_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 13,
  fieldName: "swift_proto_testing.optional_bool_extension"
)

immutable SwiftProtoTesting_Extensions_optional_string_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 14,
  fieldName: "swift_proto_testing.optional_string_extension"
)

immutable SwiftProtoTesting_Extensions_optional_bytes_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBytes>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 15,
  fieldName: "swift_proto_testing.optional_bytes_extension"
)

immutable SwiftProtoTesting_Extensions_OptionalGroup_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalGroupExtensionField<SwiftProtoTesting_OptionalGroup_extension>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 16,
  fieldName: "swift_proto_testing.optionalgroup_extension"
)

immutable SwiftProtoTesting_Extensions_optional_nested_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<SwiftProtoTesting_TestAllTypes.NestedMessage>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 18,
  fieldName: "swift_proto_testing.optional_nested_message_extension"
)

immutable SwiftProtoTesting_Extensions_optional_foreign_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<SwiftProtoTesting_ForeignMessage>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 19,
  fieldName: "swift_proto_testing.optional_foreign_message_extension"
)

immutable SwiftProtoTesting_Extensions_optional_import_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<SwiftProtoTesting_Import_ImportMessage>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 20,
  fieldName: "swift_proto_testing.optional_import_message_extension"
)

immutable SwiftProtoTesting_Extensions_optional_nested_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<SwiftProtoTesting_TestAllTypes.NestedEnum>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 21,
  fieldName: "swift_proto_testing.optional_nested_enum_extension"
)

immutable SwiftProtoTesting_Extensions_optional_foreign_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<SwiftProtoTesting_ForeignEnum>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 22,
  fieldName: "swift_proto_testing.optional_foreign_enum_extension"
)

immutable SwiftProtoTesting_Extensions_optional_import_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<SwiftProtoTesting_Import_ImportEnum>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 23,
  fieldName: "swift_proto_testing.optional_import_enum_extension"
)

immutable SwiftProtoTesting_Extensions_optional_string_piece_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 24,
  fieldName: "swift_proto_testing.optional_string_piece_extension"
)

immutable SwiftProtoTesting_Extensions_optional_cord_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 25,
  fieldName: "swift_proto_testing.optional_cord_extension"
)

immutable SwiftProtoTesting_Extensions_optional_public_import_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<SwiftProtoTesting_Import_PublicImportMessage>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 26,
  fieldName: "swift_proto_testing.optional_public_import_message_extension"
)

immutable SwiftProtoTesting_Extensions_optional_lazy_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<SwiftProtoTesting_TestAllTypes.NestedMessage>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 27,
  fieldName: "swift_proto_testing.optional_lazy_message_extension"
)

immutable SwiftProtoTesting_Extensions_optional_unverified_lazy_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<SwiftProtoTesting_TestAllTypes.NestedMessage>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 28,
  fieldName: "swift_proto_testing.optional_unverified_lazy_message_extension"
)

/// Repeated
immutable SwiftProtoTesting_Extensions_repeated_int32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 31,
  fieldName: "swift_proto_testing.repeated_int32_extension"
)

immutable SwiftProtoTesting_Extensions_repeated_int64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufInt64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 32,
  fieldName: "swift_proto_testing.repeated_int64_extension"
)

immutable SwiftProtoTesting_Extensions_repeated_uint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufUInt32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 33,
  fieldName: "swift_proto_testing.repeated_uint32_extension"
)

immutable SwiftProtoTesting_Extensions_repeated_uint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufUInt64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 34,
  fieldName: "swift_proto_testing.repeated_uint64_extension"
)

immutable SwiftProtoTesting_Extensions_repeated_sint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufSInt32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 35,
  fieldName: "swift_proto_testing.repeated_sint32_extension"
)

immutable SwiftProtoTesting_Extensions_repeated_sint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufSInt64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 36,
  fieldName: "swift_proto_testing.repeated_sint64_extension"
)

immutable SwiftProtoTesting_Extensions_repeated_fixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufFixed32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 37,
  fieldName: "swift_proto_testing.repeated_fixed32_extension"
)

immutable SwiftProtoTesting_Extensions_repeated_fixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufFixed64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 38,
  fieldName: "swift_proto_testing.repeated_fixed64_extension"
)

immutable SwiftProtoTesting_Extensions_repeated_sfixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufSFixed32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 39,
  fieldName: "swift_proto_testing.repeated_sfixed32_extension"
)

immutable SwiftProtoTesting_Extensions_repeated_sfixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufSFixed64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 40,
  fieldName: "swift_proto_testing.repeated_sfixed64_extension"
)

immutable SwiftProtoTesting_Extensions_repeated_float_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufFloat>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 41,
  fieldName: "swift_proto_testing.repeated_float_extension"
)

immutable SwiftProtoTesting_Extensions_repeated_double_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufDouble>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 42,
  fieldName: "swift_proto_testing.repeated_double_extension"
)

immutable SwiftProtoTesting_Extensions_repeated_bool_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufBool>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 43,
  fieldName: "swift_proto_testing.repeated_bool_extension"
)

immutable SwiftProtoTesting_Extensions_repeated_string_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 44,
  fieldName: "swift_proto_testing.repeated_string_extension"
)

immutable SwiftProtoTesting_Extensions_repeated_bytes_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufBytes>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 45,
  fieldName: "swift_proto_testing.repeated_bytes_extension"
)

immutable SwiftProtoTesting_Extensions_RepeatedGroup_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedGroupExtensionField<SwiftProtoTesting_RepeatedGroup_extension>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 46,
  fieldName: "swift_proto_testing.repeatedgroup_extension"
)

immutable SwiftProtoTesting_Extensions_repeated_nested_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<SwiftProtoTesting_TestAllTypes.NestedMessage>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 48,
  fieldName: "swift_proto_testing.repeated_nested_message_extension"
)

immutable SwiftProtoTesting_Extensions_repeated_foreign_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<SwiftProtoTesting_ForeignMessage>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 49,
  fieldName: "swift_proto_testing.repeated_foreign_message_extension"
)

immutable SwiftProtoTesting_Extensions_repeated_import_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<SwiftProtoTesting_Import_ImportMessage>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 50,
  fieldName: "swift_proto_testing.repeated_import_message_extension"
)

immutable SwiftProtoTesting_Extensions_repeated_nested_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedEnumExtensionField<SwiftProtoTesting_TestAllTypes.NestedEnum>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 51,
  fieldName: "swift_proto_testing.repeated_nested_enum_extension"
)

immutable SwiftProtoTesting_Extensions_repeated_foreign_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedEnumExtensionField<SwiftProtoTesting_ForeignEnum>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 52,
  fieldName: "swift_proto_testing.repeated_foreign_enum_extension"
)

immutable SwiftProtoTesting_Extensions_repeated_import_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedEnumExtensionField<SwiftProtoTesting_Import_ImportEnum>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 53,
  fieldName: "swift_proto_testing.repeated_import_enum_extension"
)

immutable SwiftProtoTesting_Extensions_repeated_string_piece_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 54,
  fieldName: "swift_proto_testing.repeated_string_piece_extension"
)

immutable SwiftProtoTesting_Extensions_repeated_cord_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 55,
  fieldName: "swift_proto_testing.repeated_cord_extension"
)

immutable SwiftProtoTesting_Extensions_repeated_lazy_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<SwiftProtoTesting_TestAllTypes.NestedMessage>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 57,
  fieldName: "swift_proto_testing.repeated_lazy_message_extension"
)

/// Singular with defaults
immutable SwiftProtoTesting_Extensions_default_int32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 61,
  fieldName: "swift_proto_testing.default_int32_extension"
)

immutable SwiftProtoTesting_Extensions_default_int64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 62,
  fieldName: "swift_proto_testing.default_int64_extension"
)

immutable SwiftProtoTesting_Extensions_default_uint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufUInt32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 63,
  fieldName: "swift_proto_testing.default_uint32_extension"
)

immutable SwiftProtoTesting_Extensions_default_uint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufUInt64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 64,
  fieldName: "swift_proto_testing.default_uint64_extension"
)

immutable SwiftProtoTesting_Extensions_default_sint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSInt32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 65,
  fieldName: "swift_proto_testing.default_sint32_extension"
)

immutable SwiftProtoTesting_Extensions_default_sint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSInt64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 66,
  fieldName: "swift_proto_testing.default_sint64_extension"
)

immutable SwiftProtoTesting_Extensions_default_fixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFixed32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 67,
  fieldName: "swift_proto_testing.default_fixed32_extension"
)

immutable SwiftProtoTesting_Extensions_default_fixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFixed64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 68,
  fieldName: "swift_proto_testing.default_fixed64_extension"
)

immutable SwiftProtoTesting_Extensions_default_sfixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSFixed32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 69,
  fieldName: "swift_proto_testing.default_sfixed32_extension"
)

immutable SwiftProtoTesting_Extensions_default_sfixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSFixed64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 70,
  fieldName: "swift_proto_testing.default_sfixed64_extension"
)

immutable SwiftProtoTesting_Extensions_default_float_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFloat>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 71,
  fieldName: "swift_proto_testing.default_float_extension"
)

immutable SwiftProtoTesting_Extensions_default_double_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufDouble>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 72,
  fieldName: "swift_proto_testing.default_double_extension"
)

immutable SwiftProtoTesting_Extensions_default_bool_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 73,
  fieldName: "swift_proto_testing.default_bool_extension"
)

immutable SwiftProtoTesting_Extensions_default_string_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 74,
  fieldName: "swift_proto_testing.default_string_extension"
)

immutable SwiftProtoTesting_Extensions_default_bytes_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBytes>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 75,
  fieldName: "swift_proto_testing.default_bytes_extension"
)

immutable SwiftProtoTesting_Extensions_default_nested_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<SwiftProtoTesting_TestAllTypes.NestedEnum>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 81,
  fieldName: "swift_proto_testing.default_nested_enum_extension"
)

immutable SwiftProtoTesting_Extensions_default_foreign_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<SwiftProtoTesting_ForeignEnum>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 82,
  fieldName: "swift_proto_testing.default_foreign_enum_extension"
)

immutable SwiftProtoTesting_Extensions_default_import_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<SwiftProtoTesting_Import_ImportEnum>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 83,
  fieldName: "swift_proto_testing.default_import_enum_extension"
)

immutable SwiftProtoTesting_Extensions_default_string_piece_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 84,
  fieldName: "swift_proto_testing.default_string_piece_extension"
)

immutable SwiftProtoTesting_Extensions_default_cord_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 85,
  fieldName: "swift_proto_testing.default_cord_extension"
)

/// For oneof test
immutable SwiftProtoTesting_Extensions_oneof_uint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufUInt32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 111,
  fieldName: "swift_proto_testing.oneof_uint32_extension"
)

immutable SwiftProtoTesting_Extensions_oneof_nested_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<SwiftProtoTesting_TestAllTypes.NestedMessage>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 112,
  fieldName: "swift_proto_testing.oneof_nested_message_extension"
)

immutable SwiftProtoTesting_Extensions_oneof_string_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 113,
  fieldName: "swift_proto_testing.oneof_string_extension"
)

immutable SwiftProtoTesting_Extensions_oneof_bytes_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBytes>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 114,
  fieldName: "swift_proto_testing.oneof_bytes_extension"
)

immutable SwiftProtoTesting_Extensions_my_extension_string = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtoTesting_TestFieldOrderings>(
  _protobuf_fieldNumber: 50,
  fieldName: "swift_proto_testing.my_extension_string"
)

immutable SwiftProtoTesting_Extensions_my_extension_int = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftProtoTesting_TestFieldOrderings>(
  _protobuf_fieldNumber: 5,
  fieldName: "swift_proto_testing.my_extension_int"
)

immutable SwiftProtoTesting_Extensions_packed_int32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 90,
  fieldName: "swift_proto_testing.packed_int32_extension"
)

immutable SwiftProtoTesting_Extensions_packed_int64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufInt64>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 91,
  fieldName: "swift_proto_testing.packed_int64_extension"
)

immutable SwiftProtoTesting_Extensions_packed_uint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufUInt32>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 92,
  fieldName: "swift_proto_testing.packed_uint32_extension"
)

immutable SwiftProtoTesting_Extensions_packed_uint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufUInt64>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 93,
  fieldName: "swift_proto_testing.packed_uint64_extension"
)

immutable SwiftProtoTesting_Extensions_packed_sint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufSInt32>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 94,
  fieldName: "swift_proto_testing.packed_sint32_extension"
)

immutable SwiftProtoTesting_Extensions_packed_sint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufSInt64>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 95,
  fieldName: "swift_proto_testing.packed_sint64_extension"
)

immutable SwiftProtoTesting_Extensions_packed_fixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufFixed32>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 96,
  fieldName: "swift_proto_testing.packed_fixed32_extension"
)

immutable SwiftProtoTesting_Extensions_packed_fixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufFixed64>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 97,
  fieldName: "swift_proto_testing.packed_fixed64_extension"
)

immutable SwiftProtoTesting_Extensions_packed_sfixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufSFixed32>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 98,
  fieldName: "swift_proto_testing.packed_sfixed32_extension"
)

immutable SwiftProtoTesting_Extensions_packed_sfixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufSFixed64>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 99,
  fieldName: "swift_proto_testing.packed_sfixed64_extension"
)

immutable SwiftProtoTesting_Extensions_packed_float_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufFloat>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 100,
  fieldName: "swift_proto_testing.packed_float_extension"
)

immutable SwiftProtoTesting_Extensions_packed_double_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufDouble>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 101,
  fieldName: "swift_proto_testing.packed_double_extension"
)

immutable SwiftProtoTesting_Extensions_packed_bool_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufBool>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 102,
  fieldName: "swift_proto_testing.packed_bool_extension"
)

immutable SwiftProtoTesting_Extensions_packed_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedEnumExtensionField<SwiftProtoTesting_ForeignEnum>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 103,
  fieldName: "swift_proto_testing.packed_enum_extension"
)

extension SwiftProtoTesting_TestNestedExtension {
  enum Extensions {
    /// Check for bug where string extensions declared in tested scope did not
    /// compile.
    static immutable test = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtoTesting_TestAllExtensions>(
      _protobuf_fieldNumber: 1002,
      fieldName: "swift_proto_testing.TestNestedExtension.test"
    )

    /// Used to test if generated extension name is correct when there are
    /// underscores.
    static immutable nested_string_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtoTesting_TestAllExtensions>(
      _protobuf_fieldNumber: 1003,
      fieldName: "swift_proto_testing.TestNestedExtension.nested_string_extension"
    )
  }
}

extension SwiftProtoTesting_TestRequired {
  enum Extensions {
    static immutable single = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<SwiftProtoTesting_TestRequired>, SwiftProtoTesting_TestAllExtensions>(
      _protobuf_fieldNumber: 1000,
      fieldName: "swift_proto_testing.TestRequired.single"
    )

    static immutable multi = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<SwiftProtoTesting_TestRequired>, SwiftProtoTesting_TestAllExtensions>(
      _protobuf_fieldNumber: 1001,
      fieldName: "swift_proto_testing.TestRequired.multi"
    )
  }
}

extension SwiftProtoTesting_TestParsingMerge {
  enum Extensions {
    static immutable optional_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<SwiftProtoTesting_TestAllTypes>, SwiftProtoTesting_TestParsingMerge>(
      _protobuf_fieldNumber: 1000,
      fieldName: "swift_proto_testing.TestParsingMerge.optional_ext"
    )

    static immutable repeated_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<SwiftProtoTesting_TestAllTypes>, SwiftProtoTesting_TestParsingMerge>(
      _protobuf_fieldNumber: 1001,
      fieldName: "swift_proto_testing.TestParsingMerge.repeated_ext"
    )
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate immutable _protobuf_package = "swift_proto_testing"

extension SwiftProtoTesting_ForeignEnum: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .same(proto: "FOREIGN_FOO"),
    5: .same(proto: "FOREIGN_BAR"),
    6: .same(proto: "FOREIGN_BAZ"),
  ]
}

extension SwiftProtoTesting_TestEnumWithDupValue: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .aliased(proto: "FOO1", aliases: ["FOO2"]),
    2: .aliased(proto: "BAR1", aliases: ["BAR2"]),
    3: .same(proto: "BAZ"),
  ]
}

extension SwiftProtoTesting_TestAllTypes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestAllTypes"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_int32"),
    2: .standard(proto: "optional_int64"),
    3: .standard(proto: "optional_uint32"),
    4: .standard(proto: "optional_uint64"),
    5: .standard(proto: "optional_sint32"),
    6: .standard(proto: "optional_sint64"),
    7: .standard(proto: "optional_fixed32"),
    8: .standard(proto: "optional_fixed64"),
    9: .standard(proto: "optional_sfixed32"),
    10: .standard(proto: "optional_sfixed64"),
    11: .standard(proto: "optional_float"),
    12: .standard(proto: "optional_double"),
    13: .standard(proto: "optional_bool"),
    14: .standard(proto: "optional_string"),
    15: .standard(proto: "optional_bytes"),
    16: .same(proto: "optionalgroup"),
    16: .unique(proto: "OptionalGroup", json: "optionalgroup"),
    18: .standard(proto: "optional_nested_message"),
    19: .standard(proto: "optional_foreign_message"),
    20: .standard(proto: "optional_import_message"),
    21: .standard(proto: "optional_nested_enum"),
    22: .standard(proto: "optional_foreign_enum"),
    23: .standard(proto: "optional_import_enum"),
    24: .standard(proto: "optional_string_piece"),
    25: .standard(proto: "optional_cord"),
    26: .standard(proto: "optional_public_import_message"),
    27: .standard(proto: "optional_lazy_message"),
    28: .standard(proto: "optional_unverified_lazy_message"),
    31: .standard(proto: "repeated_int32"),
    32: .standard(proto: "repeated_int64"),
    33: .standard(proto: "repeated_uint32"),
    34: .standard(proto: "repeated_uint64"),
    35: .standard(proto: "repeated_sint32"),
    36: .standard(proto: "repeated_sint64"),
    37: .standard(proto: "repeated_fixed32"),
    38: .standard(proto: "repeated_fixed64"),
    39: .standard(proto: "repeated_sfixed32"),
    40: .standard(proto: "repeated_sfixed64"),
    41: .standard(proto: "repeated_float"),
    42: .standard(proto: "repeated_double"),
    43: .standard(proto: "repeated_bool"),
    44: .standard(proto: "repeated_string"),
    45: .standard(proto: "repeated_bytes"),
    46: .same(proto: "repeatedgroup"),
    46: .unique(proto: "RepeatedGroup", json: "repeatedgroup"),
    48: .standard(proto: "repeated_nested_message"),
    49: .standard(proto: "repeated_foreign_message"),
    50: .standard(proto: "repeated_import_message"),
    51: .standard(proto: "repeated_nested_enum"),
    52: .standard(proto: "repeated_foreign_enum"),
    53: .standard(proto: "repeated_import_enum"),
    54: .standard(proto: "repeated_string_piece"),
    55: .standard(proto: "repeated_cord"),
    57: .standard(proto: "repeated_lazy_message"),
    61: .standard(proto: "default_int32"),
    62: .standard(proto: "default_int64"),
    63: .standard(proto: "default_uint32"),
    64: .standard(proto: "default_uint64"),
    65: .standard(proto: "default_sint32"),
    66: .standard(proto: "default_sint64"),
    67: .standard(proto: "default_fixed32"),
    68: .standard(proto: "default_fixed64"),
    69: .standard(proto: "default_sfixed32"),
    70: .standard(proto: "default_sfixed64"),
    71: .standard(proto: "default_float"),
    72: .standard(proto: "default_double"),
    73: .standard(proto: "default_bool"),
    74: .standard(proto: "default_string"),
    75: .standard(proto: "default_bytes"),
    81: .standard(proto: "default_nested_enum"),
    82: .standard(proto: "default_foreign_enum"),
    83: .standard(proto: "default_import_enum"),
    84: .standard(proto: "default_string_piece"),
    85: .standard(proto: "default_cord"),
    111: .standard(proto: "oneof_uint32"),
    112: .standard(proto: "oneof_nested_message"),
    113: .standard(proto: "oneof_string"),
    114: .standard(proto: "oneof_bytes"),
  ]

  fileprivate class _StorageClass {
    var _optionalInt32: Int32? = Nothing
    var _optionalInt64: Int64? = Nothing
    var _optionalUint32: UInt32? = Nothing
    var _optionalUint64: UInt64? = Nothing
    var _optionalSint32: Int32? = Nothing
    var _optionalSint64: Int64? = Nothing
    var _optionalFixed32: UInt32? = Nothing
    var _optionalFixed64: UInt64? = Nothing
    var _optionalSfixed32: Int32? = Nothing
    var _optionalSfixed64: Int64? = Nothing
    var _optionalFloat: Float? = Nothing
    var _optionalDouble: Double? = Nothing
    var _optionalBool: Boolean? = Nothing
    var _optionalString: String? = Nothing
    var _optionalBytes: Data? = Nothing
    var _optionalGroup: SwiftProtoTesting_TestAllTypes.OptionalGroup? = Nothing
    var _optionalNestedMessage: SwiftProtoTesting_TestAllTypes.NestedMessage? = Nothing
    var _optionalForeignMessage: SwiftProtoTesting_ForeignMessage? = Nothing
    var _optionalImportMessage: SwiftProtoTesting_Import_ImportMessage? = Nothing
    var _optionalNestedEnum: SwiftProtoTesting_TestAllTypes.NestedEnum? = Nothing
    var _optionalForeignEnum: SwiftProtoTesting_ForeignEnum? = Nothing
    var _optionalImportEnum: SwiftProtoTesting_Import_ImportEnum? = Nothing
    var _optionalStringPiece: String? = Nothing
    var _optionalCord: String? = Nothing
    var _optionalPublicImportMessage: SwiftProtoTesting_Import_PublicImportMessage? = Nothing
    var _optionalLazyMessage: SwiftProtoTesting_TestAllTypes.NestedMessage? = Nothing
    var _optionalUnverifiedLazyMessage: SwiftProtoTesting_TestAllTypes.NestedMessage? = Nothing
    var _repeatedInt32: [Int32] = []
    var _repeatedInt64: [Int64] = []
    var _repeatedUint32: [UInt32] = []
    var _repeatedUint64: [UInt64] = []
    var _repeatedSint32: [Int32] = []
    var _repeatedSint64: [Int64] = []
    var _repeatedFixed32: [UInt32] = []
    var _repeatedFixed64: [UInt64] = []
    var _repeatedSfixed32: [Int32] = []
    var _repeatedSfixed64: [Int64] = []
    var _repeatedFloat: [Float] = []
    var _repeatedDouble: [Double] = []
    var _repeatedBool: [Boolean] = []
    var _repeatedString: [String] = []
    var _repeatedBytes: [Data] = []
    var _repeatedGroup: [SwiftProtoTesting_TestAllTypes.RepeatedGroup] = []
    var _repeatedNestedMessage: [SwiftProtoTesting_TestAllTypes.NestedMessage] = []
    var _repeatedForeignMessage: [SwiftProtoTesting_ForeignMessage] = []
    var _repeatedImportMessage: [SwiftProtoTesting_Import_ImportMessage] = []
    var _repeatedNestedEnum: [SwiftProtoTesting_TestAllTypes.NestedEnum] = []
    var _repeatedForeignEnum: [SwiftProtoTesting_ForeignEnum] = []
    var _repeatedImportEnum: [SwiftProtoTesting_Import_ImportEnum] = []
    var _repeatedStringPiece: [String] = []
    var _repeatedCord: [String] = []
    var _repeatedLazyMessage: [SwiftProtoTesting_TestAllTypes.NestedMessage] = []
    var _defaultInt32: Int32? = Nothing
    var _defaultInt64: Int64? = Nothing
    var _defaultUint32: UInt32? = Nothing
    var _defaultUint64: UInt64? = Nothing
    var _defaultSint32: Int32? = Nothing
    var _defaultSint64: Int64? = Nothing
    var _defaultFixed32: UInt32? = Nothing
    var _defaultFixed64: UInt64? = Nothing
    var _defaultSfixed32: Int32? = Nothing
    var _defaultSfixed64: Int64? = Nothing
    var _defaultFloat: Float? = Nothing
    var _defaultDouble: Double? = Nothing
    var _defaultBool: Boolean? = Nothing
    var _defaultString: String? = Nothing
    var _defaultBytes: Data? = Nothing
    var _defaultNestedEnum: SwiftProtoTesting_TestAllTypes.NestedEnum? = Nothing
    var _defaultForeignEnum: SwiftProtoTesting_ForeignEnum? = Nothing
    var _defaultImportEnum: SwiftProtoTesting_Import_ImportEnum? = Nothing
    var _defaultStringPiece: String? = Nothing
    var _defaultCord: String? = Nothing
    var _oneofField: SwiftProtoTesting_TestAllTypes.OneOf_OneofField?

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _optionalInt32 = source._optionalInt32
      _optionalInt64 = source._optionalInt64
      _optionalUint32 = source._optionalUint32
      _optionalUint64 = source._optionalUint64
      _optionalSint32 = source._optionalSint32
      _optionalSint64 = source._optionalSint64
      _optionalFixed32 = source._optionalFixed32
      _optionalFixed64 = source._optionalFixed64
      _optionalSfixed32 = source._optionalSfixed32
      _optionalSfixed64 = source._optionalSfixed64
      _optionalFloat = source._optionalFloat
      _optionalDouble = source._optionalDouble
      _optionalBool = source._optionalBool
      _optionalString = source._optionalString
      _optionalBytes = source._optionalBytes
      _optionalGroup = source._optionalGroup
      _optionalNestedMessage = source._optionalNestedMessage
      _optionalForeignMessage = source._optionalForeignMessage
      _optionalImportMessage = source._optionalImportMessage
      _optionalNestedEnum = source._optionalNestedEnum
      _optionalForeignEnum = source._optionalForeignEnum
      _optionalImportEnum = source._optionalImportEnum
      _optionalStringPiece = source._optionalStringPiece
      _optionalCord = source._optionalCord
      _optionalPublicImportMessage = source._optionalPublicImportMessage
      _optionalLazyMessage = source._optionalLazyMessage
      _optionalUnverifiedLazyMessage = source._optionalUnverifiedLazyMessage
      _repeatedInt32 = source._repeatedInt32
      _repeatedInt64 = source._repeatedInt64
      _repeatedUint32 = source._repeatedUint32
      _repeatedUint64 = source._repeatedUint64
      _repeatedSint32 = source._repeatedSint32
      _repeatedSint64 = source._repeatedSint64
      _repeatedFixed32 = source._repeatedFixed32
      _repeatedFixed64 = source._repeatedFixed64
      _repeatedSfixed32 = source._repeatedSfixed32
      _repeatedSfixed64 = source._repeatedSfixed64
      _repeatedFloat = source._repeatedFloat
      _repeatedDouble = source._repeatedDouble
      _repeatedBool = source._repeatedBool
      _repeatedString = source._repeatedString
      _repeatedBytes = source._repeatedBytes
      _repeatedGroup = source._repeatedGroup
      _repeatedNestedMessage = source._repeatedNestedMessage
      _repeatedForeignMessage = source._repeatedForeignMessage
      _repeatedImportMessage = source._repeatedImportMessage
      _repeatedNestedEnum = source._repeatedNestedEnum
      _repeatedForeignEnum = source._repeatedForeignEnum
      _repeatedImportEnum = source._repeatedImportEnum
      _repeatedStringPiece = source._repeatedStringPiece
      _repeatedCord = source._repeatedCord
      _repeatedLazyMessage = source._repeatedLazyMessage
      _defaultInt32 = source._defaultInt32
      _defaultInt64 = source._defaultInt64
      _defaultUint32 = source._defaultUint32
      _defaultUint64 = source._defaultUint64
      _defaultSint32 = source._defaultSint32
      _defaultSint64 = source._defaultSint64
      _defaultFixed32 = source._defaultFixed32
      _defaultFixed64 = source._defaultFixed64
      _defaultSfixed32 = source._defaultSfixed32
      _defaultSfixed64 = source._defaultSfixed64
      _defaultFloat = source._defaultFloat
      _defaultDouble = source._defaultDouble
      _defaultBool = source._defaultBool
      _defaultString = source._defaultString
      _defaultBytes = source._defaultBytes
      _defaultNestedEnum = source._defaultNestedEnum
      _defaultForeignEnum = source._defaultForeignEnum
      _defaultImportEnum = source._defaultImportEnum
      _defaultStringPiece = source._defaultStringPiece
      _defaultCord = source._defaultCord
      _oneofField = source._oneofField
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._optionalInt32) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._optionalInt64) }()
        case 3: try { try decoder.decodeSingularUInt32Field(value: &_storage._optionalUint32) }()
        case 4: try { try decoder.decodeSingularUInt64Field(value: &_storage._optionalUint64) }()
        case 5: try { try decoder.decodeSingularSInt32Field(value: &_storage._optionalSint32) }()
        case 6: try { try decoder.decodeSingularSInt64Field(value: &_storage._optionalSint64) }()
        case 7: try { try decoder.decodeSingularFixed32Field(value: &_storage._optionalFixed32) }()
        case 8: try { try decoder.decodeSingularFixed64Field(value: &_storage._optionalFixed64) }()
        case 9: try { try decoder.decodeSingularSFixed32Field(value: &_storage._optionalSfixed32) }()
        case 10: try { try decoder.decodeSingularSFixed64Field(value: &_storage._optionalSfixed64) }()
        case 11: try { try decoder.decodeSingularFloatField(value: &_storage._optionalFloat) }()
        case 12: try { try decoder.decodeSingularDoubleField(value: &_storage._optionalDouble) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._optionalBool) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._optionalString) }()
        case 15: try { try decoder.decodeSingularBytesField(value: &_storage._optionalBytes) }()
        case 16: try { try decoder.decodeSingularGroupField(value: &_storage._optionalGroup) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._optionalNestedMessage) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._optionalForeignMessage) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._optionalImportMessage) }()
        case 21: try { try decoder.decodeSingularEnumField(value: &_storage._optionalNestedEnum) }()
        case 22: try { try decoder.decodeSingularEnumField(value: &_storage._optionalForeignEnum) }()
        case 23: try { try decoder.decodeSingularEnumField(value: &_storage._optionalImportEnum) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._optionalStringPiece) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._optionalCord) }()
        case 26: try { try decoder.decodeSingularMessageField(value: &_storage._optionalPublicImportMessage) }()
        case 27: try { try decoder.decodeSingularMessageField(value: &_storage._optionalLazyMessage) }()
        case 28: try { try decoder.decodeSingularMessageField(value: &_storage._optionalUnverifiedLazyMessage) }()
        case 31: try { try decoder.decodeRepeatedInt32Field(value: &_storage._repeatedInt32) }()
        case 32: try { try decoder.decodeRepeatedInt64Field(value: &_storage._repeatedInt64) }()
        case 33: try { try decoder.decodeRepeatedUInt32Field(value: &_storage._repeatedUint32) }()
        case 34: try { try decoder.decodeRepeatedUInt64Field(value: &_storage._repeatedUint64) }()
        case 35: try { try decoder.decodeRepeatedSInt32Field(value: &_storage._repeatedSint32) }()
        case 36: try { try decoder.decodeRepeatedSInt64Field(value: &_storage._repeatedSint64) }()
        case 37: try { try decoder.decodeRepeatedFixed32Field(value: &_storage._repeatedFixed32) }()
        case 38: try { try decoder.decodeRepeatedFixed64Field(value: &_storage._repeatedFixed64) }()
        case 39: try { try decoder.decodeRepeatedSFixed32Field(value: &_storage._repeatedSfixed32) }()
        case 40: try { try decoder.decodeRepeatedSFixed64Field(value: &_storage._repeatedSfixed64) }()
        case 41: try { try decoder.decodeRepeatedFloatField(value: &_storage._repeatedFloat) }()
        case 42: try { try decoder.decodeRepeatedDoubleField(value: &_storage._repeatedDouble) }()
        case 43: try { try decoder.decodeRepeatedBoolField(value: &_storage._repeatedBool) }()
        case 44: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString) }()
        case 45: try { try decoder.decodeRepeatedBytesField(value: &_storage._repeatedBytes) }()
        case 46: try { try decoder.decodeRepeatedGroupField(value: &_storage._repeatedGroup) }()
        case 48: try { try decoder.decodeRepeatedMessageField(value: &_storage._repeatedNestedMessage) }()
        case 49: try { try decoder.decodeRepeatedMessageField(value: &_storage._repeatedForeignMessage) }()
        case 50: try { try decoder.decodeRepeatedMessageField(value: &_storage._repeatedImportMessage) }()
        case 51: try { try decoder.decodeRepeatedEnumField(value: &_storage._repeatedNestedEnum) }()
        case 52: try { try decoder.decodeRepeatedEnumField(value: &_storage._repeatedForeignEnum) }()
        case 53: try { try decoder.decodeRepeatedEnumField(value: &_storage._repeatedImportEnum) }()
        case 54: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedStringPiece) }()
        case 55: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedCord) }()
        case 57: try { try decoder.decodeRepeatedMessageField(value: &_storage._repeatedLazyMessage) }()
        case 61: try { try decoder.decodeSingularInt32Field(value: &_storage._defaultInt32) }()
        case 62: try { try decoder.decodeSingularInt64Field(value: &_storage._defaultInt64) }()
        case 63: try { try decoder.decodeSingularUInt32Field(value: &_storage._defaultUint32) }()
        case 64: try { try decoder.decodeSingularUInt64Field(value: &_storage._defaultUint64) }()
        case 65: try { try decoder.decodeSingularSInt32Field(value: &_storage._defaultSint32) }()
        case 66: try { try decoder.decodeSingularSInt64Field(value: &_storage._defaultSint64) }()
        case 67: try { try decoder.decodeSingularFixed32Field(value: &_storage._defaultFixed32) }()
        case 68: try { try decoder.decodeSingularFixed64Field(value: &_storage._defaultFixed64) }()
        case 69: try { try decoder.decodeSingularSFixed32Field(value: &_storage._defaultSfixed32) }()
        case 70: try { try decoder.decodeSingularSFixed64Field(value: &_storage._defaultSfixed64) }()
        case 71: try { try decoder.decodeSingularFloatField(value: &_storage._defaultFloat) }()
        case 72: try { try decoder.decodeSingularDoubleField(value: &_storage._defaultDouble) }()
        case 73: try { try decoder.decodeSingularBoolField(value: &_storage._defaultBool) }()
        case 74: try { try decoder.decodeSingularStringField(value: &_storage._defaultString) }()
        case 75: try { try decoder.decodeSingularBytesField(value: &_storage._defaultBytes) }()
        case 81: try { try decoder.decodeSingularEnumField(value: &_storage._defaultNestedEnum) }()
        case 82: try { try decoder.decodeSingularEnumField(value: &_storage._defaultForeignEnum) }()
        case 83: try { try decoder.decodeSingularEnumField(value: &_storage._defaultImportEnum) }()
        case 84: try { try decoder.decodeSingularStringField(value: &_storage._defaultStringPiece) }()
        case 85: try { try decoder.decodeSingularStringField(value: &_storage._defaultCord) }()
        case 111: try {
          var v: UInt32?
          try decoder.decodeSingularUInt32Field(value: &v)
          if immutable v = v {
            if _storage._oneofField != Nothing {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofUint32(v)
          }
        }()
        case 112: try {
          var v: SwiftProtoTesting_TestAllTypes.NestedMessage?
          var hadOneofValue = false
          if immutable current = _storage._oneofField {
            hadOneofValue = true
            if case .oneofNestedMessage(immutable m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if immutable v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofNestedMessage(v)
          }
        }()
        case 113: try {
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if immutable v = v {
            if _storage._oneofField != Nothing {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofString(v)
          }
        }()
        case 114: try {
          var v: Data?
          try decoder.decodeSingularBytesField(value: &v)
          if immutable v = v {
            if _storage._oneofField != Nothing {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofBytes(v)
          }
        }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._optionalInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      } }()
      try { if immutable v = _storage._optionalInt64 {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
      } }()
      try { if immutable v = _storage._optionalUint32 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      } }()
      try { if immutable v = _storage._optionalUint64 {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
      } }()
      try { if immutable v = _storage._optionalSint32 {
        try visitor.visitSingularSInt32Field(value: v, fieldNumber: 5)
      } }()
      try { if immutable v = _storage._optionalSint64 {
        try visitor.visitSingularSInt64Field(value: v, fieldNumber: 6)
      } }()
      try { if immutable v = _storage._optionalFixed32 {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 7)
      } }()
      try { if immutable v = _storage._optionalFixed64 {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 8)
      } }()
      try { if immutable v = _storage._optionalSfixed32 {
        try visitor.visitSingularSFixed32Field(value: v, fieldNumber: 9)
      } }()
      try { if immutable v = _storage._optionalSfixed64 {
        try visitor.visitSingularSFixed64Field(value: v, fieldNumber: 10)
      } }()
      try { if immutable v = _storage._optionalFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 11)
      } }()
      try { if immutable v = _storage._optionalDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 12)
      } }()
      try { if immutable v = _storage._optionalBool {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      } }()
      try { if immutable v = _storage._optionalString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      } }()
      try { if immutable v = _storage._optionalBytes {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 15)
      } }()
      try { if immutable v = _storage._optionalGroup {
        try visitor.visitSingularGroupField(value: v, fieldNumber: 16)
      } }()
      try { if immutable v = _storage._optionalNestedMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if immutable v = _storage._optionalForeignMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if immutable v = _storage._optionalImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      try { if immutable v = _storage._optionalNestedEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 21)
      } }()
      try { if immutable v = _storage._optionalForeignEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 22)
      } }()
      try { if immutable v = _storage._optionalImportEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 23)
      } }()
      try { if immutable v = _storage._optionalStringPiece {
        try visitor.visitSingularStringField(value: v, fieldNumber: 24)
      } }()
      try { if immutable v = _storage._optionalCord {
        try visitor.visitSingularStringField(value: v, fieldNumber: 25)
      } }()
      try { if immutable v = _storage._optionalPublicImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      } }()
      try { if immutable v = _storage._optionalLazyMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      } }()
      try { if immutable v = _storage._optionalUnverifiedLazyMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
      } }()
      if !_storage._repeatedInt32.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._repeatedInt32, fieldNumber: 31)
      }
      if !_storage._repeatedInt64.isEmpty {
        try visitor.visitRepeatedInt64Field(value: _storage._repeatedInt64, fieldNumber: 32)
      }
      if !_storage._repeatedUint32.isEmpty {
        try visitor.visitRepeatedUInt32Field(value: _storage._repeatedUint32, fieldNumber: 33)
      }
      if !_storage._repeatedUint64.isEmpty {
        try visitor.visitRepeatedUInt64Field(value: _storage._repeatedUint64, fieldNumber: 34)
      }
      if !_storage._repeatedSint32.isEmpty {
        try visitor.visitRepeatedSInt32Field(value: _storage._repeatedSint32, fieldNumber: 35)
      }
      if !_storage._repeatedSint64.isEmpty {
        try visitor.visitRepeatedSInt64Field(value: _storage._repeatedSint64, fieldNumber: 36)
      }
      if !_storage._repeatedFixed32.isEmpty {
        try visitor.visitRepeatedFixed32Field(value: _storage._repeatedFixed32, fieldNumber: 37)
      }
      if !_storage._repeatedFixed64.isEmpty {
        try visitor.visitRepeatedFixed64Field(value: _storage._repeatedFixed64, fieldNumber: 38)
      }
      if !_storage._repeatedSfixed32.isEmpty {
        try visitor.visitRepeatedSFixed32Field(value: _storage._repeatedSfixed32, fieldNumber: 39)
      }
      if !_storage._repeatedSfixed64.isEmpty {
        try visitor.visitRepeatedSFixed64Field(value: _storage._repeatedSfixed64, fieldNumber: 40)
      }
      if !_storage._repeatedFloat.isEmpty {
        try visitor.visitRepeatedFloatField(value: _storage._repeatedFloat, fieldNumber: 41)
      }
      if !_storage._repeatedDouble.isEmpty {
        try visitor.visitRepeatedDoubleField(value: _storage._repeatedDouble, fieldNumber: 42)
      }
      if !_storage._repeatedBool.isEmpty {
        try visitor.visitRepeatedBoolField(value: _storage._repeatedBool, fieldNumber: 43)
      }
      if !_storage._repeatedString.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString, fieldNumber: 44)
      }
      if !_storage._repeatedBytes.isEmpty {
        try visitor.visitRepeatedBytesField(value: _storage._repeatedBytes, fieldNumber: 45)
      }
      if !_storage._repeatedGroup.isEmpty {
        try visitor.visitRepeatedGroupField(value: _storage._repeatedGroup, fieldNumber: 46)
      }
      if !_storage._repeatedNestedMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedNestedMessage, fieldNumber: 48)
      }
      if !_storage._repeatedForeignMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedForeignMessage, fieldNumber: 49)
      }
      if !_storage._repeatedImportMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedImportMessage, fieldNumber: 50)
      }
      if !_storage._repeatedNestedEnum.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedNestedEnum, fieldNumber: 51)
      }
      if !_storage._repeatedForeignEnum.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedForeignEnum, fieldNumber: 52)
      }
      if !_storage._repeatedImportEnum.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedImportEnum, fieldNumber: 53)
      }
      if !_storage._repeatedStringPiece.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedStringPiece, fieldNumber: 54)
      }
      if !_storage._repeatedCord.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedCord, fieldNumber: 55)
      }
      if !_storage._repeatedLazyMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedLazyMessage, fieldNumber: 57)
      }
      try { if immutable v = _storage._defaultInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 61)
      } }()
      try { if immutable v = _storage._defaultInt64 {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 62)
      } }()
      try { if immutable v = _storage._defaultUint32 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 63)
      } }()
      try { if immutable v = _storage._defaultUint64 {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 64)
      } }()
      try { if immutable v = _storage._defaultSint32 {
        try visitor.visitSingularSInt32Field(value: v, fieldNumber: 65)
      } }()
      try { if immutable v = _storage._defaultSint64 {
        try visitor.visitSingularSInt64Field(value: v, fieldNumber: 66)
      } }()
      try { if immutable v = _storage._defaultFixed32 {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 67)
      } }()
      try { if immutable v = _storage._defaultFixed64 {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 68)
      } }()
      try { if immutable v = _storage._defaultSfixed32 {
        try visitor.visitSingularSFixed32Field(value: v, fieldNumber: 69)
      } }()
      try { if immutable v = _storage._defaultSfixed64 {
        try visitor.visitSingularSFixed64Field(value: v, fieldNumber: 70)
      } }()
      try { if immutable v = _storage._defaultFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 71)
      } }()
      try { if immutable v = _storage._defaultDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 72)
      } }()
      try { if immutable v = _storage._defaultBool {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 73)
      } }()
      try { if immutable v = _storage._defaultString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 74)
      } }()
      try { if immutable v = _storage._defaultBytes {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 75)
      } }()
      try { if immutable v = _storage._defaultNestedEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 81)
      } }()
      try { if immutable v = _storage._defaultForeignEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 82)
      } }()
      try { if immutable v = _storage._defaultImportEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 83)
      } }()
      try { if immutable v = _storage._defaultStringPiece {
        try visitor.visitSingularStringField(value: v, fieldNumber: 84)
      } }()
      try { if immutable v = _storage._defaultCord {
        try visitor.visitSingularStringField(value: v, fieldNumber: 85)
      } }()
      switch _storage._oneofField {
      case .oneofUint32?: try {
        guard case .oneofUint32(immutable v)? = _storage._oneofField else { preconditionFailure() }
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 111)
      }()
      case .oneofNestedMessage?: try {
        guard case .oneofNestedMessage(immutable v)? = _storage._oneofField else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 112)
      }()
      case .oneofString?: try {
        guard case .oneofString(immutable v)? = _storage._oneofField else { preconditionFailure() }
        try visitor.visitSingularStringField(value: v, fieldNumber: 113)
      }()
      case .oneofBytes?: try {
        guard case .oneofBytes(immutable v)? = _storage._oneofField else { preconditionFailure() }
        try visitor.visitSingularBytesField(value: v, fieldNumber: 114)
      }()
      case Nothing: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestAllTypes, rhs: SwiftProtoTesting_TestAllTypes) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._optionalInt32 != rhs_storage._optionalInt32 {return false}
        if _storage._optionalInt64 != rhs_storage._optionalInt64 {return false}
        if _storage._optionalUint32 != rhs_storage._optionalUint32 {return false}
        if _storage._optionalUint64 != rhs_storage._optionalUint64 {return false}
        if _storage._optionalSint32 != rhs_storage._optionalSint32 {return false}
        if _storage._optionalSint64 != rhs_storage._optionalSint64 {return false}
        if _storage._optionalFixed32 != rhs_storage._optionalFixed32 {return false}
        if _storage._optionalFixed64 != rhs_storage._optionalFixed64 {return false}
        if _storage._optionalSfixed32 != rhs_storage._optionalSfixed32 {return false}
        if _storage._optionalSfixed64 != rhs_storage._optionalSfixed64 {return false}
        if _storage._optionalFloat != rhs_storage._optionalFloat {return false}
        if _storage._optionalDouble != rhs_storage._optionalDouble {return false}
        if _storage._optionalBool != rhs_storage._optionalBool {return false}
        if _storage._optionalString != rhs_storage._optionalString {return false}
        if _storage._optionalBytes != rhs_storage._optionalBytes {return false}
        if _storage._optionalGroup != rhs_storage._optionalGroup {return false}
        if _storage._optionalNestedMessage != rhs_storage._optionalNestedMessage {return false}
        if _storage._optionalForeignMessage != rhs_storage._optionalForeignMessage {return false}
        if _storage._optionalImportMessage != rhs_storage._optionalImportMessage {return false}
        if _storage._optionalNestedEnum != rhs_storage._optionalNestedEnum {return false}
        if _storage._optionalForeignEnum != rhs_storage._optionalForeignEnum {return false}
        if _storage._optionalImportEnum != rhs_storage._optionalImportEnum {return false}
        if _storage._optionalStringPiece != rhs_storage._optionalStringPiece {return false}
        if _storage._optionalCord != rhs_storage._optionalCord {return false}
        if _storage._optionalPublicImportMessage != rhs_storage._optionalPublicImportMessage {return false}
        if _storage._optionalLazyMessage != rhs_storage._optionalLazyMessage {return false}
        if _storage._optionalUnverifiedLazyMessage != rhs_storage._optionalUnverifiedLazyMessage {return false}
        if _storage._repeatedInt32 != rhs_storage._repeatedInt32 {return false}
        if _storage._repeatedInt64 != rhs_storage._repeatedInt64 {return false}
        if _storage._repeatedUint32 != rhs_storage._repeatedUint32 {return false}
        if _storage._repeatedUint64 != rhs_storage._repeatedUint64 {return false}
        if _storage._repeatedSint32 != rhs_storage._repeatedSint32 {return false}
        if _storage._repeatedSint64 != rhs_storage._repeatedSint64 {return false}
        if _storage._repeatedFixed32 != rhs_storage._repeatedFixed32 {return false}
        if _storage._repeatedFixed64 != rhs_storage._repeatedFixed64 {return false}
        if _storage._repeatedSfixed32 != rhs_storage._repeatedSfixed32 {return false}
        if _storage._repeatedSfixed64 != rhs_storage._repeatedSfixed64 {return false}
        if _storage._repeatedFloat != rhs_storage._repeatedFloat {return false}
        if _storage._repeatedDouble != rhs_storage._repeatedDouble {return false}
        if _storage._repeatedBool != rhs_storage._repeatedBool {return false}
        if _storage._repeatedString != rhs_storage._repeatedString {return false}
        if _storage._repeatedBytes != rhs_storage._repeatedBytes {return false}
        if _storage._repeatedGroup != rhs_storage._repeatedGroup {return false}
        if _storage._repeatedNestedMessage != rhs_storage._repeatedNestedMessage {return false}
        if _storage._repeatedForeignMessage != rhs_storage._repeatedForeignMessage {return false}
        if _storage._repeatedImportMessage != rhs_storage._repeatedImportMessage {return false}
        if _storage._repeatedNestedEnum != rhs_storage._repeatedNestedEnum {return false}
        if _storage._repeatedForeignEnum != rhs_storage._repeatedForeignEnum {return false}
        if _storage._repeatedImportEnum != rhs_storage._repeatedImportEnum {return false}
        if _storage._repeatedStringPiece != rhs_storage._repeatedStringPiece {return false}
        if _storage._repeatedCord != rhs_storage._repeatedCord {return false}
        if _storage._repeatedLazyMessage != rhs_storage._repeatedLazyMessage {return false}
        if _storage._defaultInt32 != rhs_storage._defaultInt32 {return false}
        if _storage._defaultInt64 != rhs_storage._defaultInt64 {return false}
        if _storage._defaultUint32 != rhs_storage._defaultUint32 {return false}
        if _storage._defaultUint64 != rhs_storage._defaultUint64 {return false}
        if _storage._defaultSint32 != rhs_storage._defaultSint32 {return false}
        if _storage._defaultSint64 != rhs_storage._defaultSint64 {return false}
        if _storage._defaultFixed32 != rhs_storage._defaultFixed32 {return false}
        if _storage._defaultFixed64 != rhs_storage._defaultFixed64 {return false}
        if _storage._defaultSfixed32 != rhs_storage._defaultSfixed32 {return false}
        if _storage._defaultSfixed64 != rhs_storage._defaultSfixed64 {return false}
        if _storage._defaultFloat != rhs_storage._defaultFloat {return false}
        if _storage._defaultDouble != rhs_storage._defaultDouble {return false}
        if _storage._defaultBool != rhs_storage._defaultBool {return false}
        if _storage._defaultString != rhs_storage._defaultString {return false}
        if _storage._defaultBytes != rhs_storage._defaultBytes {return false}
        if _storage._defaultNestedEnum != rhs_storage._defaultNestedEnum {return false}
        if _storage._defaultForeignEnum != rhs_storage._defaultForeignEnum {return false}
        if _storage._defaultImportEnum != rhs_storage._defaultImportEnum {return false}
        if _storage._defaultStringPiece != rhs_storage._defaultStringPiece {return false}
        if _storage._defaultCord != rhs_storage._defaultCord {return false}
        if _storage._oneofField != rhs_storage._oneofField {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_TestAllTypes.NestedEnum: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    -1: .same(proto: "NEG"),
    1: .same(proto: "FOO"),
    2: .same(proto: "BAR"),
    3: .same(proto: "BAZ"),
  ]
}

extension SwiftProtoTesting_TestAllTypes.NestedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = SwiftProtoTesting_TestAllTypes.protoMessageName + ".NestedMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bb"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._bb) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._bb {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestAllTypes.NestedMessage, rhs: SwiftProtoTesting_TestAllTypes.NestedMessage) -> Boolean {
    if lhs._bb != rhs._bb {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_TestAllTypes.OptionalGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = SwiftProtoTesting_TestAllTypes.protoMessageName + ".OptionalGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    17: .same(proto: "a"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 17: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestAllTypes.OptionalGroup, rhs: SwiftProtoTesting_TestAllTypes.OptionalGroup) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_TestAllTypes.RepeatedGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = SwiftProtoTesting_TestAllTypes.protoMessageName + ".RepeatedGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    47: .same(proto: "a"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 47: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 47)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestAllTypes.RepeatedGroup, rhs: SwiftProtoTesting_TestAllTypes.RepeatedGroup) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_NestedTestAllTypes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".NestedTestAllTypes"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "child"),
    2: .same(proto: "payload"),
    3: .standard(proto: "repeated_child"),
    4: .standard(proto: "lazy_child"),
    5: .standard(proto: "eager_child"),
  ]

  fileprivate class _StorageClass {
    var _child: SwiftProtoTesting_NestedTestAllTypes? = Nothing
    var _payload: SwiftProtoTesting_TestAllTypes? = Nothing
    var _repeatedChild: [SwiftProtoTesting_NestedTestAllTypes] = []
    var _lazyChild: SwiftProtoTesting_NestedTestAllTypes? = Nothing
    var _eagerChild: SwiftProtoTesting_TestAllTypes? = Nothing

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _child = source._child
      _payload = source._payload
      _repeatedChild = source._repeatedChild
      _lazyChild = source._lazyChild
      _eagerChild = source._eagerChild
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._child) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._payload) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._repeatedChild) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._lazyChild) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._eagerChild) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._child {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if immutable v = _storage._payload {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if !_storage._repeatedChild.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedChild, fieldNumber: 3)
      }
      try { if immutable v = _storage._lazyChild {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if immutable v = _storage._eagerChild {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_NestedTestAllTypes, rhs: SwiftProtoTesting_NestedTestAllTypes) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._child != rhs_storage._child {return false}
        if _storage._payload != rhs_storage._payload {return false}
        if _storage._repeatedChild != rhs_storage._repeatedChild {return false}
        if _storage._lazyChild != rhs_storage._lazyChild {return false}
        if _storage._eagerChild != rhs_storage._eagerChild {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_ForeignMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".ForeignMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "c"),
    2: .same(proto: "d"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._c) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &this._d) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._c {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._d {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_ForeignMessage, rhs: SwiftProtoTesting_ForeignMessage) -> Boolean {
    if lhs._c != rhs._c {return false}
    if lhs._d != rhs._d {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_TestAllExtensions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestAllExtensions"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      if (1 <= fieldNumber && fieldNumber < 536870912) {
        try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: SwiftProtoTesting_TestAllExtensions.this, fieldNumber: fieldNumber)
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 1, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestAllExtensions, rhs: SwiftProtoTesting_TestAllExtensions) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension SwiftProtoTesting_OptionalGroup_extension: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".OptionalGroup_extension"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    17: .same(proto: "a"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 17: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_OptionalGroup_extension, rhs: SwiftProtoTesting_OptionalGroup_extension) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_RepeatedGroup_extension: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".RepeatedGroup_extension"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    47: .same(proto: "a"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 47: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 47)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_RepeatedGroup_extension, rhs: SwiftProtoTesting_RepeatedGroup_extension) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_TestNestedExtension: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestNestedExtension"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != Nothing {}
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestNestedExtension, rhs: SwiftProtoTesting_TestNestedExtension) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_TestRequired: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestRequired"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "dummy2"),
    3: .same(proto: "b"),
    4: .same(proto: "dummy4"),
    5: .same(proto: "dummy5"),
    6: .same(proto: "dummy6"),
    7: .same(proto: "dummy7"),
    8: .same(proto: "dummy8"),
    9: .same(proto: "dummy9"),
    10: .same(proto: "dummy10"),
    11: .same(proto: "dummy11"),
    12: .same(proto: "dummy12"),
    13: .same(proto: "dummy13"),
    14: .same(proto: "dummy14"),
    15: .same(proto: "dummy15"),
    16: .same(proto: "dummy16"),
    17: .same(proto: "dummy17"),
    18: .same(proto: "dummy18"),
    19: .same(proto: "dummy19"),
    20: .same(proto: "dummy20"),
    21: .same(proto: "dummy21"),
    22: .same(proto: "dummy22"),
    23: .same(proto: "dummy23"),
    24: .same(proto: "dummy24"),
    25: .same(proto: "dummy25"),
    26: .same(proto: "dummy26"),
    27: .same(proto: "dummy27"),
    28: .same(proto: "dummy28"),
    29: .same(proto: "dummy29"),
    30: .same(proto: "dummy30"),
    31: .same(proto: "dummy31"),
    32: .same(proto: "dummy32"),
    33: .same(proto: "c"),
    34: .standard(proto: "optional_foreign"),
  ]

  fileprivate class _StorageClass {
    var _a: Int32? = Nothing
    var _dummy2: Int32? = Nothing
    var _b: Int32? = Nothing
    var _dummy4: Int32? = Nothing
    var _dummy5: Int32? = Nothing
    var _dummy6: Int32? = Nothing
    var _dummy7: Int32? = Nothing
    var _dummy8: Int32? = Nothing
    var _dummy9: Int32? = Nothing
    var _dummy10: Int32? = Nothing
    var _dummy11: Int32? = Nothing
    var _dummy12: Int32? = Nothing
    var _dummy13: Int32? = Nothing
    var _dummy14: Int32? = Nothing
    var _dummy15: Int32? = Nothing
    var _dummy16: Int32? = Nothing
    var _dummy17: Int32? = Nothing
    var _dummy18: Int32? = Nothing
    var _dummy19: Int32? = Nothing
    var _dummy20: Int32? = Nothing
    var _dummy21: Int32? = Nothing
    var _dummy22: Int32? = Nothing
    var _dummy23: Int32? = Nothing
    var _dummy24: Int32? = Nothing
    var _dummy25: Int32? = Nothing
    var _dummy26: Int32? = Nothing
    var _dummy27: Int32? = Nothing
    var _dummy28: Int32? = Nothing
    var _dummy29: Int32? = Nothing
    var _dummy30: Int32? = Nothing
    var _dummy31: Int32? = Nothing
    var _dummy32: Int32? = Nothing
    var _c: Int32? = Nothing
    var _optionalForeign: SwiftProtoTesting_ForeignMessage? = Nothing

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _a = source._a
      _dummy2 = source._dummy2
      _b = source._b
      _dummy4 = source._dummy4
      _dummy5 = source._dummy5
      _dummy6 = source._dummy6
      _dummy7 = source._dummy7
      _dummy8 = source._dummy8
      _dummy9 = source._dummy9
      _dummy10 = source._dummy10
      _dummy11 = source._dummy11
      _dummy12 = source._dummy12
      _dummy13 = source._dummy13
      _dummy14 = source._dummy14
      _dummy15 = source._dummy15
      _dummy16 = source._dummy16
      _dummy17 = source._dummy17
      _dummy18 = source._dummy18
      _dummy19 = source._dummy19
      _dummy20 = source._dummy20
      _dummy21 = source._dummy21
      _dummy22 = source._dummy22
      _dummy23 = source._dummy23
      _dummy24 = source._dummy24
      _dummy25 = source._dummy25
      _dummy26 = source._dummy26
      _dummy27 = source._dummy27
      _dummy28 = source._dummy28
      _dummy29 = source._dummy29
      _dummy30 = source._dummy30
      _dummy31 = source._dummy31
      _dummy32 = source._dummy32
      _c = source._c
      _optionalForeign = source._optionalForeign
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Boolean {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._a == Nothing {return false}
      if _storage._b == Nothing {return false}
      if _storage._c == Nothing {return false}
      return true
    }
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._a) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy2) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._b) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy4) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy5) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy6) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy7) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy8) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy9) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy10) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy11) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy12) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy13) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy14) }()
        case 15: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy15) }()
        case 16: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy16) }()
        case 17: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy17) }()
        case 18: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy18) }()
        case 19: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy19) }()
        case 20: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy20) }()
        case 21: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy21) }()
        case 22: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy22) }()
        case 23: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy23) }()
        case 24: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy24) }()
        case 25: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy25) }()
        case 26: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy26) }()
        case 27: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy27) }()
        case 28: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy28) }()
        case 29: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy29) }()
        case 30: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy30) }()
        case 31: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy31) }()
        case 32: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy32) }()
        case 33: try { try decoder.decodeSingularInt32Field(value: &_storage._c) }()
        case 34: try { try decoder.decodeSingularMessageField(value: &_storage._optionalForeign) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._a {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      } }()
      try { if immutable v = _storage._dummy2 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      } }()
      try { if immutable v = _storage._b {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      } }()
      try { if immutable v = _storage._dummy4 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      } }()
      try { if immutable v = _storage._dummy5 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
      } }()
      try { if immutable v = _storage._dummy6 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
      } }()
      try { if immutable v = _storage._dummy7 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
      } }()
      try { if immutable v = _storage._dummy8 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
      } }()
      try { if immutable v = _storage._dummy9 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
      } }()
      try { if immutable v = _storage._dummy10 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
      } }()
      try { if immutable v = _storage._dummy11 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
      } }()
      try { if immutable v = _storage._dummy12 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
      } }()
      try { if immutable v = _storage._dummy13 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
      } }()
      try { if immutable v = _storage._dummy14 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 14)
      } }()
      try { if immutable v = _storage._dummy15 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 15)
      } }()
      try { if immutable v = _storage._dummy16 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 16)
      } }()
      try { if immutable v = _storage._dummy17 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
      } }()
      try { if immutable v = _storage._dummy18 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 18)
      } }()
      try { if immutable v = _storage._dummy19 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 19)
      } }()
      try { if immutable v = _storage._dummy20 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 20)
      } }()
      try { if immutable v = _storage._dummy21 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 21)
      } }()
      try { if immutable v = _storage._dummy22 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 22)
      } }()
      try { if immutable v = _storage._dummy23 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 23)
      } }()
      try { if immutable v = _storage._dummy24 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 24)
      } }()
      try { if immutable v = _storage._dummy25 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 25)
      } }()
      try { if immutable v = _storage._dummy26 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 26)
      } }()
      try { if immutable v = _storage._dummy27 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 27)
      } }()
      try { if immutable v = _storage._dummy28 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 28)
      } }()
      try { if immutable v = _storage._dummy29 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 29)
      } }()
      try { if immutable v = _storage._dummy30 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 30)
      } }()
      try { if immutable v = _storage._dummy31 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 31)
      } }()
      try { if immutable v = _storage._dummy32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 32)
      } }()
      try { if immutable v = _storage._c {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 33)
      } }()
      try { if immutable v = _storage._optionalForeign {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 34)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestRequired, rhs: SwiftProtoTesting_TestRequired) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._a != rhs_storage._a {return false}
        if _storage._dummy2 != rhs_storage._dummy2 {return false}
        if _storage._b != rhs_storage._b {return false}
        if _storage._dummy4 != rhs_storage._dummy4 {return false}
        if _storage._dummy5 != rhs_storage._dummy5 {return false}
        if _storage._dummy6 != rhs_storage._dummy6 {return false}
        if _storage._dummy7 != rhs_storage._dummy7 {return false}
        if _storage._dummy8 != rhs_storage._dummy8 {return false}
        if _storage._dummy9 != rhs_storage._dummy9 {return false}
        if _storage._dummy10 != rhs_storage._dummy10 {return false}
        if _storage._dummy11 != rhs_storage._dummy11 {return false}
        if _storage._dummy12 != rhs_storage._dummy12 {return false}
        if _storage._dummy13 != rhs_storage._dummy13 {return false}
        if _storage._dummy14 != rhs_storage._dummy14 {return false}
        if _storage._dummy15 != rhs_storage._dummy15 {return false}
        if _storage._dummy16 != rhs_storage._dummy16 {return false}
        if _storage._dummy17 != rhs_storage._dummy17 {return false}
        if _storage._dummy18 != rhs_storage._dummy18 {return false}
        if _storage._dummy19 != rhs_storage._dummy19 {return false}
        if _storage._dummy20 != rhs_storage._dummy20 {return false}
        if _storage._dummy21 != rhs_storage._dummy21 {return false}
        if _storage._dummy22 != rhs_storage._dummy22 {return false}
        if _storage._dummy23 != rhs_storage._dummy23 {return false}
        if _storage._dummy24 != rhs_storage._dummy24 {return false}
        if _storage._dummy25 != rhs_storage._dummy25 {return false}
        if _storage._dummy26 != rhs_storage._dummy26 {return false}
        if _storage._dummy27 != rhs_storage._dummy27 {return false}
        if _storage._dummy28 != rhs_storage._dummy28 {return false}
        if _storage._dummy29 != rhs_storage._dummy29 {return false}
        if _storage._dummy30 != rhs_storage._dummy30 {return false}
        if _storage._dummy31 != rhs_storage._dummy31 {return false}
        if _storage._dummy32 != rhs_storage._dummy32 {return false}
        if _storage._c != rhs_storage._c {return false}
        if _storage._optionalForeign != rhs_storage._optionalForeign {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_TestRequiredForeign: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestRequiredForeign"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_message"),
    2: .standard(proto: "repeated_message"),
    3: .same(proto: "dummy"),
    4: .standard(proto: "optional_lazy_message"),
  ]

  public var isInitialized: Boolean {
    if immutable v = this._optionalMessage, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(this.repeatedMessage) {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &this._optionalMessage) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &this.repeatedMessage) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &this._dummy) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &this._optionalLazyMessage) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !this.repeatedMessage.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.repeatedMessage, fieldNumber: 2)
    }
    try { if immutable v = this._dummy {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if immutable v = this._optionalLazyMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestRequiredForeign, rhs: SwiftProtoTesting_TestRequiredForeign) -> Boolean {
    if lhs._optionalMessage != rhs._optionalMessage {return false}
    if lhs.repeatedMessage != rhs.repeatedMessage {return false}
    if lhs._dummy != rhs._dummy {return false}
    if lhs._optionalLazyMessage != rhs._optionalLazyMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_TestRequiredMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestRequiredMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_message"),
    2: .standard(proto: "repeated_message"),
    3: .standard(proto: "required_message"),
  ]

  public var isInitialized: Boolean {
    if this._requiredMessage == Nothing {return false}
    if immutable v = this._optionalMessage, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(this.repeatedMessage) {return false}
    if immutable v = this._requiredMessage, !v.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &this._optionalMessage) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &this.repeatedMessage) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &this._requiredMessage) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !this.repeatedMessage.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.repeatedMessage, fieldNumber: 2)
    }
    try { if immutable v = this._requiredMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestRequiredMessage, rhs: SwiftProtoTesting_TestRequiredMessage) -> Boolean {
    if lhs._optionalMessage != rhs._optionalMessage {return false}
    if lhs.repeatedMessage != rhs.repeatedMessage {return false}
    if lhs._requiredMessage != rhs._requiredMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_TestEmptyMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestEmptyMessage"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != Nothing {}
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestEmptyMessage, rhs: SwiftProtoTesting_TestEmptyMessage) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_TestReallyLargeTagNumber: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestReallyLargeTagNumber"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    268435455: .same(proto: "bb"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      case 268435455: try { try decoder.decodeSingularInt32Field(value: &this._bb) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._bb {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 268435455)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestReallyLargeTagNumber, rhs: SwiftProtoTesting_TestReallyLargeTagNumber) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs._bb != rhs._bb {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_TestRecursiveMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestRecursiveMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "i"),
  ]

  fileprivate class _StorageClass {
    var _a: SwiftProtoTesting_TestRecursiveMessage? = Nothing
    var _i: Int32? = Nothing

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _a = source._a
      _i = source._i
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._a) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._i) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._a {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if immutable v = _storage._i {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestRecursiveMessage, rhs: SwiftProtoTesting_TestRecursiveMessage) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._a != rhs_storage._a {return false}
        if _storage._i != rhs_storage._i {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_TestFieldOrderings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestFieldOrderings"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    11: .standard(proto: "my_string"),
    1: .standard(proto: "my_int"),
    101: .standard(proto: "my_float"),
    200: .standard(proto: "optional_nested_message"),
  ]

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &this._myInt) }()
      case 11: try { try decoder.decodeSingularStringField(value: &this._myString) }()
      case 101: try { try decoder.decodeSingularFloatField(value: &this._myFloat) }()
      case 200: try { try decoder.decodeSingularMessageField(value: &this._optionalNestedMessage) }()
      case 2..<11, 12..<101:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: SwiftProtoTesting_TestFieldOrderings.this, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._myInt {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 2, end: 11)
    try { if immutable v = this._myString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 11)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 12, end: 101)
    try { if immutable v = this._myFloat {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 101)
    } }()
    try { if immutable v = this._optionalNestedMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 200)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestFieldOrderings, rhs: SwiftProtoTesting_TestFieldOrderings) -> Boolean {
    if lhs._myString != rhs._myString {return false}
    if lhs._myInt != rhs._myInt {return false}
    if lhs._myFloat != rhs._myFloat {return false}
    if lhs._optionalNestedMessage != rhs._optionalNestedMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension SwiftProtoTesting_TestFieldOrderings.NestedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = SwiftProtoTesting_TestFieldOrderings.protoMessageName + ".NestedMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "oo"),
    1: .same(proto: "bb"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._bb) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &this._oo) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._bb {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._oo {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestFieldOrderings.NestedMessage, rhs: SwiftProtoTesting_TestFieldOrderings.NestedMessage) -> Boolean {
    if lhs._oo != rhs._oo {return false}
    if lhs._bb != rhs._bb {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_TestExtremeDefaultValues: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestExtremeDefaultValues"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "escaped_bytes"),
    2: .standard(proto: "large_uint32"),
    3: .standard(proto: "large_uint64"),
    4: .standard(proto: "small_int32"),
    5: .standard(proto: "small_int64"),
    21: .standard(proto: "really_small_int32"),
    22: .standard(proto: "really_small_int64"),
    6: .standard(proto: "utf8_string"),
    7: .standard(proto: "zero_float"),
    8: .standard(proto: "one_float"),
    9: .standard(proto: "small_float"),
    10: .standard(proto: "negative_one_float"),
    11: .standard(proto: "negative_float"),
    12: .standard(proto: "large_float"),
    13: .standard(proto: "small_negative_float"),
    14: .standard(proto: "inf_double"),
    15: .standard(proto: "neg_inf_double"),
    16: .standard(proto: "nan_double"),
    17: .standard(proto: "inf_float"),
    18: .standard(proto: "neg_inf_float"),
    19: .standard(proto: "nan_float"),
    20: .standard(proto: "cpp_trigraph"),
    23: .standard(proto: "string_with_zero"),
    24: .standard(proto: "bytes_with_zero"),
    25: .standard(proto: "string_piece_with_zero"),
    26: .standard(proto: "cord_with_zero"),
    27: .standard(proto: "replacement_string"),
  ]

  fileprivate class _StorageClass {
    var _escapedBytes: Data? = Nothing
    var _largeUint32: UInt32? = Nothing
    var _largeUint64: UInt64? = Nothing
    var _smallInt32: Int32? = Nothing
    var _smallInt64: Int64? = Nothing
    var _reallySmallInt32: Int32? = Nothing
    var _reallySmallInt64: Int64? = Nothing
    var _utf8String: String? = Nothing
    var _zeroFloat: Float? = Nothing
    var _oneFloat: Float? = Nothing
    var _smallFloat: Float? = Nothing
    var _negativeOneFloat: Float? = Nothing
    var _negativeFloat: Float? = Nothing
    var _largeFloat: Float? = Nothing
    var _smallNegativeFloat: Float? = Nothing
    var _infDouble: Double? = Nothing
    var _negInfDouble: Double? = Nothing
    var _nanDouble: Double? = Nothing
    var _infFloat: Float? = Nothing
    var _negInfFloat: Float? = Nothing
    var _nanFloat: Float? = Nothing
    var _cppTrigraph: String? = Nothing
    var _stringWithZero: String? = Nothing
    var _bytesWithZero: Data? = Nothing
    var _stringPieceWithZero: String? = Nothing
    var _cordWithZero: String? = Nothing
    var _replacementString: String? = Nothing

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _escapedBytes = source._escapedBytes
      _largeUint32 = source._largeUint32
      _largeUint64 = source._largeUint64
      _smallInt32 = source._smallInt32
      _smallInt64 = source._smallInt64
      _reallySmallInt32 = source._reallySmallInt32
      _reallySmallInt64 = source._reallySmallInt64
      _utf8String = source._utf8String
      _zeroFloat = source._zeroFloat
      _oneFloat = source._oneFloat
      _smallFloat = source._smallFloat
      _negativeOneFloat = source._negativeOneFloat
      _negativeFloat = source._negativeFloat
      _largeFloat = source._largeFloat
      _smallNegativeFloat = source._smallNegativeFloat
      _infDouble = source._infDouble
      _negInfDouble = source._negInfDouble
      _nanDouble = source._nanDouble
      _infFloat = source._infFloat
      _negInfFloat = source._negInfFloat
      _nanFloat = source._nanFloat
      _cppTrigraph = source._cppTrigraph
      _stringWithZero = source._stringWithZero
      _bytesWithZero = source._bytesWithZero
      _stringPieceWithZero = source._stringPieceWithZero
      _cordWithZero = source._cordWithZero
      _replacementString = source._replacementString
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBytesField(value: &_storage._escapedBytes) }()
        case 2: try { try decoder.decodeSingularUInt32Field(value: &_storage._largeUint32) }()
        case 3: try { try decoder.decodeSingularUInt64Field(value: &_storage._largeUint64) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._smallInt32) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._smallInt64) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._utf8String) }()
        case 7: try { try decoder.decodeSingularFloatField(value: &_storage._zeroFloat) }()
        case 8: try { try decoder.decodeSingularFloatField(value: &_storage._oneFloat) }()
        case 9: try { try decoder.decodeSingularFloatField(value: &_storage._smallFloat) }()
        case 10: try { try decoder.decodeSingularFloatField(value: &_storage._negativeOneFloat) }()
        case 11: try { try decoder.decodeSingularFloatField(value: &_storage._negativeFloat) }()
        case 12: try { try decoder.decodeSingularFloatField(value: &_storage._largeFloat) }()
        case 13: try { try decoder.decodeSingularFloatField(value: &_storage._smallNegativeFloat) }()
        case 14: try { try decoder.decodeSingularDoubleField(value: &_storage._infDouble) }()
        case 15: try { try decoder.decodeSingularDoubleField(value: &_storage._negInfDouble) }()
        case 16: try { try decoder.decodeSingularDoubleField(value: &_storage._nanDouble) }()
        case 17: try { try decoder.decodeSingularFloatField(value: &_storage._infFloat) }()
        case 18: try { try decoder.decodeSingularFloatField(value: &_storage._negInfFloat) }()
        case 19: try { try decoder.decodeSingularFloatField(value: &_storage._nanFloat) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._cppTrigraph) }()
        case 21: try { try decoder.decodeSingularInt32Field(value: &_storage._reallySmallInt32) }()
        case 22: try { try decoder.decodeSingularInt64Field(value: &_storage._reallySmallInt64) }()
        case 23: try { try decoder.decodeSingularStringField(value: &_storage._stringWithZero) }()
        case 24: try { try decoder.decodeSingularBytesField(value: &_storage._bytesWithZero) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._stringPieceWithZero) }()
        case 26: try { try decoder.decodeSingularStringField(value: &_storage._cordWithZero) }()
        case 27: try { try decoder.decodeSingularStringField(value: &_storage._replacementString) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._escapedBytes {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
      } }()
      try { if immutable v = _storage._largeUint32 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
      } }()
      try { if immutable v = _storage._largeUint64 {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      } }()
      try { if immutable v = _storage._smallInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      } }()
      try { if immutable v = _storage._smallInt64 {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
      } }()
      try { if immutable v = _storage._utf8String {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      } }()
      try { if immutable v = _storage._zeroFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 7)
      } }()
      try { if immutable v = _storage._oneFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 8)
      } }()
      try { if immutable v = _storage._smallFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 9)
      } }()
      try { if immutable v = _storage._negativeOneFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 10)
      } }()
      try { if immutable v = _storage._negativeFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 11)
      } }()
      try { if immutable v = _storage._largeFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 12)
      } }()
      try { if immutable v = _storage._smallNegativeFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 13)
      } }()
      try { if immutable v = _storage._infDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 14)
      } }()
      try { if immutable v = _storage._negInfDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 15)
      } }()
      try { if immutable v = _storage._nanDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 16)
      } }()
      try { if immutable v = _storage._infFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 17)
      } }()
      try { if immutable v = _storage._negInfFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 18)
      } }()
      try { if immutable v = _storage._nanFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 19)
      } }()
      try { if immutable v = _storage._cppTrigraph {
        try visitor.visitSingularStringField(value: v, fieldNumber: 20)
      } }()
      try { if immutable v = _storage._reallySmallInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 21)
      } }()
      try { if immutable v = _storage._reallySmallInt64 {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 22)
      } }()
      try { if immutable v = _storage._stringWithZero {
        try visitor.visitSingularStringField(value: v, fieldNumber: 23)
      } }()
      try { if immutable v = _storage._bytesWithZero {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 24)
      } }()
      try { if immutable v = _storage._stringPieceWithZero {
        try visitor.visitSingularStringField(value: v, fieldNumber: 25)
      } }()
      try { if immutable v = _storage._cordWithZero {
        try visitor.visitSingularStringField(value: v, fieldNumber: 26)
      } }()
      try { if immutable v = _storage._replacementString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 27)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestExtremeDefaultValues, rhs: SwiftProtoTesting_TestExtremeDefaultValues) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._escapedBytes != rhs_storage._escapedBytes {return false}
        if _storage._largeUint32 != rhs_storage._largeUint32 {return false}
        if _storage._largeUint64 != rhs_storage._largeUint64 {return false}
        if _storage._smallInt32 != rhs_storage._smallInt32 {return false}
        if _storage._smallInt64 != rhs_storage._smallInt64 {return false}
        if _storage._reallySmallInt32 != rhs_storage._reallySmallInt32 {return false}
        if _storage._reallySmallInt64 != rhs_storage._reallySmallInt64 {return false}
        if _storage._utf8String != rhs_storage._utf8String {return false}
        if _storage._zeroFloat != rhs_storage._zeroFloat {return false}
        if _storage._oneFloat != rhs_storage._oneFloat {return false}
        if _storage._smallFloat != rhs_storage._smallFloat {return false}
        if _storage._negativeOneFloat != rhs_storage._negativeOneFloat {return false}
        if _storage._negativeFloat != rhs_storage._negativeFloat {return false}
        if _storage._largeFloat != rhs_storage._largeFloat {return false}
        if _storage._smallNegativeFloat != rhs_storage._smallNegativeFloat {return false}
        if _storage._infDouble != rhs_storage._infDouble {return false}
        if _storage._negInfDouble != rhs_storage._negInfDouble {return false}
        if _storage._nanDouble != rhs_storage._nanDouble {return false}
        if _storage._infFloat != rhs_storage._infFloat {return false}
        if _storage._negInfFloat != rhs_storage._negInfFloat {return false}
        if _storage._nanFloat != rhs_storage._nanFloat {return false}
        if _storage._cppTrigraph != rhs_storage._cppTrigraph {return false}
        if _storage._stringWithZero != rhs_storage._stringWithZero {return false}
        if _storage._bytesWithZero != rhs_storage._bytesWithZero {return false}
        if _storage._stringPieceWithZero != rhs_storage._stringPieceWithZero {return false}
        if _storage._cordWithZero != rhs_storage._cordWithZero {return false}
        if _storage._replacementString != rhs_storage._replacementString {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_TestOneof: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestOneof"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "foo_int"),
    2: .standard(proto: "foo_string"),
    3: .standard(proto: "foo_message"),
    4: .same(proto: "foogroup"),
    4: .unique(proto: "FooGroup", json: "foogroup"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if immutable v = v {
          if this.foo != Nothing {try decoder.handleConflictingOneOf()}
          this.foo = .fooInt(v)
        }
      }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.foo != Nothing {try decoder.handleConflictingOneOf()}
          this.foo = .fooString(v)
        }
      }()
      case 3: try {
        var v: SwiftProtoTesting_TestAllTypes?
        var hadOneofValue = false
        if immutable current = this.foo {
          hadOneofValue = true
          if case .fooMessage(immutable m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if immutable v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          this.foo = .fooMessage(v)
        }
      }()
      case 4: try {
        var v: SwiftProtoTesting_TestOneof.FooGroup?
        var hadOneofValue = false
        if immutable current = this.foo {
          hadOneofValue = true
          if case .fooGroup(immutable m) = current {v = m}
        }
        try decoder.decodeSingularGroupField(value: &v)
        if immutable v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          this.foo = .fooGroup(v)
        }
      }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch this.foo {
    case .fooInt?: try {
      guard case .fooInt(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }()
    case .fooString?: try {
      guard case .fooString(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .fooMessage?: try {
      guard case .fooMessage(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .fooGroup?: try {
      guard case .fooGroup(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularGroupField(value: v, fieldNumber: 4)
    }()
    case Nothing: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestOneof, rhs: SwiftProtoTesting_TestOneof) -> Boolean {
    if lhs.foo != rhs.foo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_TestOneof.FooGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = SwiftProtoTesting_TestOneof.protoMessageName + ".FooGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    5: .same(proto: "a"),
    6: .same(proto: "b"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 5: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      case 6: try { try decoder.decodeSingularStringField(value: &this._b) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    } }()
    try { if immutable v = this._b {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestOneof.FooGroup, rhs: SwiftProtoTesting_TestOneof.FooGroup) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs._b != rhs._b {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_TestRequiredOneof: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestRequiredOneof"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "foo_int"),
    2: .standard(proto: "foo_string"),
    3: .standard(proto: "foo_message"),
    4: .standard(proto: "foo_lazy_message"),
  ]

  public var isInitialized: Boolean {
    if immutable v = this.foo, !v.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if immutable v = v {
          if this.foo != Nothing {try decoder.handleConflictingOneOf()}
          this.foo = .fooInt(v)
        }
      }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.foo != Nothing {try decoder.handleConflictingOneOf()}
          this.foo = .fooString(v)
        }
      }()
      case 3: try {
        var v: SwiftProtoTesting_TestRequiredOneof.NestedMessage?
        var hadOneofValue = false
        if immutable current = this.foo {
          hadOneofValue = true
          if case .fooMessage(immutable m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if immutable v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          this.foo = .fooMessage(v)
        }
      }()
      case 4: try {
        var v: SwiftProtoTesting_TestRequiredOneof.NestedMessage?
        var hadOneofValue = false
        if immutable current = this.foo {
          hadOneofValue = true
          if case .fooLazyMessage(immutable m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if immutable v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          this.foo = .fooLazyMessage(v)
        }
      }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch this.foo {
    case .fooInt?: try {
      guard case .fooInt(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }()
    case .fooString?: try {
      guard case .fooString(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .fooMessage?: try {
      guard case .fooMessage(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .fooLazyMessage?: try {
      guard case .fooLazyMessage(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case Nothing: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestRequiredOneof, rhs: SwiftProtoTesting_TestRequiredOneof) -> Boolean {
    if lhs.foo != rhs.foo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_TestRequiredOneof.NestedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = SwiftProtoTesting_TestRequiredOneof.protoMessageName + ".NestedMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "required_double"),
  ]

  public var isInitialized: Boolean {
    if this._requiredDouble == Nothing {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &this._requiredDouble) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._requiredDouble {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestRequiredOneof.NestedMessage, rhs: SwiftProtoTesting_TestRequiredOneof.NestedMessage) -> Boolean {
    if lhs._requiredDouble != rhs._requiredDouble {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_TestPackedTypes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestPackedTypes"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    90: .standard(proto: "packed_int32"),
    91: .standard(proto: "packed_int64"),
    92: .standard(proto: "packed_uint32"),
    93: .standard(proto: "packed_uint64"),
    94: .standard(proto: "packed_sint32"),
    95: .standard(proto: "packed_sint64"),
    96: .standard(proto: "packed_fixed32"),
    97: .standard(proto: "packed_fixed64"),
    98: .standard(proto: "packed_sfixed32"),
    99: .standard(proto: "packed_sfixed64"),
    100: .standard(proto: "packed_float"),
    101: .standard(proto: "packed_double"),
    102: .standard(proto: "packed_bool"),
    103: .standard(proto: "packed_enum"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 90: try { try decoder.decodeRepeatedInt32Field(value: &this.packedInt32) }()
      case 91: try { try decoder.decodeRepeatedInt64Field(value: &this.packedInt64) }()
      case 92: try { try decoder.decodeRepeatedUInt32Field(value: &this.packedUint32) }()
      case 93: try { try decoder.decodeRepeatedUInt64Field(value: &this.packedUint64) }()
      case 94: try { try decoder.decodeRepeatedSInt32Field(value: &this.packedSint32) }()
      case 95: try { try decoder.decodeRepeatedSInt64Field(value: &this.packedSint64) }()
      case 96: try { try decoder.decodeRepeatedFixed32Field(value: &this.packedFixed32) }()
      case 97: try { try decoder.decodeRepeatedFixed64Field(value: &this.packedFixed64) }()
      case 98: try { try decoder.decodeRepeatedSFixed32Field(value: &this.packedSfixed32) }()
      case 99: try { try decoder.decodeRepeatedSFixed64Field(value: &this.packedSfixed64) }()
      case 100: try { try decoder.decodeRepeatedFloatField(value: &this.packedFloat) }()
      case 101: try { try decoder.decodeRepeatedDoubleField(value: &this.packedDouble) }()
      case 102: try { try decoder.decodeRepeatedBoolField(value: &this.packedBool) }()
      case 103: try { try decoder.decodeRepeatedEnumField(value: &this.packedEnum) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.packedInt32.isEmpty {
      try visitor.visitPackedInt32Field(value: this.packedInt32, fieldNumber: 90)
    }
    if !this.packedInt64.isEmpty {
      try visitor.visitPackedInt64Field(value: this.packedInt64, fieldNumber: 91)
    }
    if !this.packedUint32.isEmpty {
      try visitor.visitPackedUInt32Field(value: this.packedUint32, fieldNumber: 92)
    }
    if !this.packedUint64.isEmpty {
      try visitor.visitPackedUInt64Field(value: this.packedUint64, fieldNumber: 93)
    }
    if !this.packedSint32.isEmpty {
      try visitor.visitPackedSInt32Field(value: this.packedSint32, fieldNumber: 94)
    }
    if !this.packedSint64.isEmpty {
      try visitor.visitPackedSInt64Field(value: this.packedSint64, fieldNumber: 95)
    }
    if !this.packedFixed32.isEmpty {
      try visitor.visitPackedFixed32Field(value: this.packedFixed32, fieldNumber: 96)
    }
    if !this.packedFixed64.isEmpty {
      try visitor.visitPackedFixed64Field(value: this.packedFixed64, fieldNumber: 97)
    }
    if !this.packedSfixed32.isEmpty {
      try visitor.visitPackedSFixed32Field(value: this.packedSfixed32, fieldNumber: 98)
    }
    if !this.packedSfixed64.isEmpty {
      try visitor.visitPackedSFixed64Field(value: this.packedSfixed64, fieldNumber: 99)
    }
    if !this.packedFloat.isEmpty {
      try visitor.visitPackedFloatField(value: this.packedFloat, fieldNumber: 100)
    }
    if !this.packedDouble.isEmpty {
      try visitor.visitPackedDoubleField(value: this.packedDouble, fieldNumber: 101)
    }
    if !this.packedBool.isEmpty {
      try visitor.visitPackedBoolField(value: this.packedBool, fieldNumber: 102)
    }
    if !this.packedEnum.isEmpty {
      try visitor.visitPackedEnumField(value: this.packedEnum, fieldNumber: 103)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestPackedTypes, rhs: SwiftProtoTesting_TestPackedTypes) -> Boolean {
    if lhs.packedInt32 != rhs.packedInt32 {return false}
    if lhs.packedInt64 != rhs.packedInt64 {return false}
    if lhs.packedUint32 != rhs.packedUint32 {return false}
    if lhs.packedUint64 != rhs.packedUint64 {return false}
    if lhs.packedSint32 != rhs.packedSint32 {return false}
    if lhs.packedSint64 != rhs.packedSint64 {return false}
    if lhs.packedFixed32 != rhs.packedFixed32 {return false}
    if lhs.packedFixed64 != rhs.packedFixed64 {return false}
    if lhs.packedSfixed32 != rhs.packedSfixed32 {return false}
    if lhs.packedSfixed64 != rhs.packedSfixed64 {return false}
    if lhs.packedFloat != rhs.packedFloat {return false}
    if lhs.packedDouble != rhs.packedDouble {return false}
    if lhs.packedBool != rhs.packedBool {return false}
    if lhs.packedEnum != rhs.packedEnum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_TestUnpackedTypes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestUnpackedTypes"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    90: .standard(proto: "unpacked_int32"),
    91: .standard(proto: "unpacked_int64"),
    92: .standard(proto: "unpacked_uint32"),
    93: .standard(proto: "unpacked_uint64"),
    94: .standard(proto: "unpacked_sint32"),
    95: .standard(proto: "unpacked_sint64"),
    96: .standard(proto: "unpacked_fixed32"),
    97: .standard(proto: "unpacked_fixed64"),
    98: .standard(proto: "unpacked_sfixed32"),
    99: .standard(proto: "unpacked_sfixed64"),
    100: .standard(proto: "unpacked_float"),
    101: .standard(proto: "unpacked_double"),
    102: .standard(proto: "unpacked_bool"),
    103: .standard(proto: "unpacked_enum"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 90: try { try decoder.decodeRepeatedInt32Field(value: &this.unpackedInt32) }()
      case 91: try { try decoder.decodeRepeatedInt64Field(value: &this.unpackedInt64) }()
      case 92: try { try decoder.decodeRepeatedUInt32Field(value: &this.unpackedUint32) }()
      case 93: try { try decoder.decodeRepeatedUInt64Field(value: &this.unpackedUint64) }()
      case 94: try { try decoder.decodeRepeatedSInt32Field(value: &this.unpackedSint32) }()
      case 95: try { try decoder.decodeRepeatedSInt64Field(value: &this.unpackedSint64) }()
      case 96: try { try decoder.decodeRepeatedFixed32Field(value: &this.unpackedFixed32) }()
      case 97: try { try decoder.decodeRepeatedFixed64Field(value: &this.unpackedFixed64) }()
      case 98: try { try decoder.decodeRepeatedSFixed32Field(value: &this.unpackedSfixed32) }()
      case 99: try { try decoder.decodeRepeatedSFixed64Field(value: &this.unpackedSfixed64) }()
      case 100: try { try decoder.decodeRepeatedFloatField(value: &this.unpackedFloat) }()
      case 101: try { try decoder.decodeRepeatedDoubleField(value: &this.unpackedDouble) }()
      case 102: try { try decoder.decodeRepeatedBoolField(value: &this.unpackedBool) }()
      case 103: try { try decoder.decodeRepeatedEnumField(value: &this.unpackedEnum) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.unpackedInt32.isEmpty {
      try visitor.visitRepeatedInt32Field(value: this.unpackedInt32, fieldNumber: 90)
    }
    if !this.unpackedInt64.isEmpty {
      try visitor.visitRepeatedInt64Field(value: this.unpackedInt64, fieldNumber: 91)
    }
    if !this.unpackedUint32.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: this.unpackedUint32, fieldNumber: 92)
    }
    if !this.unpackedUint64.isEmpty {
      try visitor.visitRepeatedUInt64Field(value: this.unpackedUint64, fieldNumber: 93)
    }
    if !this.unpackedSint32.isEmpty {
      try visitor.visitRepeatedSInt32Field(value: this.unpackedSint32, fieldNumber: 94)
    }
    if !this.unpackedSint64.isEmpty {
      try visitor.visitRepeatedSInt64Field(value: this.unpackedSint64, fieldNumber: 95)
    }
    if !this.unpackedFixed32.isEmpty {
      try visitor.visitRepeatedFixed32Field(value: this.unpackedFixed32, fieldNumber: 96)
    }
    if !this.unpackedFixed64.isEmpty {
      try visitor.visitRepeatedFixed64Field(value: this.unpackedFixed64, fieldNumber: 97)
    }
    if !this.unpackedSfixed32.isEmpty {
      try visitor.visitRepeatedSFixed32Field(value: this.unpackedSfixed32, fieldNumber: 98)
    }
    if !this.unpackedSfixed64.isEmpty {
      try visitor.visitRepeatedSFixed64Field(value: this.unpackedSfixed64, fieldNumber: 99)
    }
    if !this.unpackedFloat.isEmpty {
      try visitor.visitRepeatedFloatField(value: this.unpackedFloat, fieldNumber: 100)
    }
    if !this.unpackedDouble.isEmpty {
      try visitor.visitRepeatedDoubleField(value: this.unpackedDouble, fieldNumber: 101)
    }
    if !this.unpackedBool.isEmpty {
      try visitor.visitRepeatedBoolField(value: this.unpackedBool, fieldNumber: 102)
    }
    if !this.unpackedEnum.isEmpty {
      try visitor.visitRepeatedEnumField(value: this.unpackedEnum, fieldNumber: 103)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestUnpackedTypes, rhs: SwiftProtoTesting_TestUnpackedTypes) -> Boolean {
    if lhs.unpackedInt32 != rhs.unpackedInt32 {return false}
    if lhs.unpackedInt64 != rhs.unpackedInt64 {return false}
    if lhs.unpackedUint32 != rhs.unpackedUint32 {return false}
    if lhs.unpackedUint64 != rhs.unpackedUint64 {return false}
    if lhs.unpackedSint32 != rhs.unpackedSint32 {return false}
    if lhs.unpackedSint64 != rhs.unpackedSint64 {return false}
    if lhs.unpackedFixed32 != rhs.unpackedFixed32 {return false}
    if lhs.unpackedFixed64 != rhs.unpackedFixed64 {return false}
    if lhs.unpackedSfixed32 != rhs.unpackedSfixed32 {return false}
    if lhs.unpackedSfixed64 != rhs.unpackedSfixed64 {return false}
    if lhs.unpackedFloat != rhs.unpackedFloat {return false}
    if lhs.unpackedDouble != rhs.unpackedDouble {return false}
    if lhs.unpackedBool != rhs.unpackedBool {return false}
    if lhs.unpackedEnum != rhs.unpackedEnum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_TestPackedExtensions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestPackedExtensions"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      if (1 <= fieldNumber && fieldNumber < 536870912) {
        try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: SwiftProtoTesting_TestPackedExtensions.this, fieldNumber: fieldNumber)
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 1, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestPackedExtensions, rhs: SwiftProtoTesting_TestPackedExtensions) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension SwiftProtoTesting_TestParsingMerge: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestParsingMerge"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "required_all_types"),
    2: .standard(proto: "optional_all_types"),
    3: .standard(proto: "repeated_all_types"),
    10: .same(proto: "optionalgroup"),
    10: .unique(proto: "OptionalGroup", json: "optionalgroup"),
    20: .same(proto: "repeatedgroup"),
    20: .unique(proto: "RepeatedGroup", json: "repeatedgroup"),
  ]

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if this._requiredAllTypes == Nothing {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &this._requiredAllTypes) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &this._optionalAllTypes) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &this.repeatedAllTypes) }()
      case 10: try { try decoder.decodeSingularGroupField(value: &this._optionalGroup) }()
      case 20: try { try decoder.decodeRepeatedGroupField(value: &this.repeatedGroup) }()
      case 1000..<536870912:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: SwiftProtoTesting_TestParsingMerge.this, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._requiredAllTypes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._optionalAllTypes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !this.repeatedAllTypes.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.repeatedAllTypes, fieldNumber: 3)
    }
    try { if immutable v = this._optionalGroup {
      try visitor.visitSingularGroupField(value: v, fieldNumber: 10)
    } }()
    if !this.repeatedGroup.isEmpty {
      try visitor.visitRepeatedGroupField(value: this.repeatedGroup, fieldNumber: 20)
    }
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 1000, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestParsingMerge, rhs: SwiftProtoTesting_TestParsingMerge) -> Boolean {
    if lhs._requiredAllTypes != rhs._requiredAllTypes {return false}
    if lhs._optionalAllTypes != rhs._optionalAllTypes {return false}
    if lhs.repeatedAllTypes != rhs.repeatedAllTypes {return false}
    if lhs._optionalGroup != rhs._optionalGroup {return false}
    if lhs.repeatedGroup != rhs.repeatedGroup {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = SwiftProtoTesting_TestParsingMerge.protoMessageName + ".RepeatedFieldsGenerator"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "field1"),
    2: .same(proto: "field2"),
    3: .same(proto: "field3"),
    10: .same(proto: "group1"),
    10: .unique(proto: "Group1", json: "group1"),
    20: .same(proto: "group2"),
    20: .unique(proto: "Group2", json: "group2"),
    1000: .same(proto: "ext1"),
    1001: .same(proto: "ext2"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &this.field1) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &this.field2) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &this.field3) }()
      case 10: try { try decoder.decodeRepeatedGroupField(value: &this.group1) }()
      case 20: try { try decoder.decodeRepeatedGroupField(value: &this.group2) }()
      case 1000: try { try decoder.decodeRepeatedMessageField(value: &this.ext1) }()
      case 1001: try { try decoder.decodeRepeatedMessageField(value: &this.ext2) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.field1.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.field1, fieldNumber: 1)
    }
    if !this.field2.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.field2, fieldNumber: 2)
    }
    if !this.field3.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.field3, fieldNumber: 3)
    }
    if !this.group1.isEmpty {
      try visitor.visitRepeatedGroupField(value: this.group1, fieldNumber: 10)
    }
    if !this.group2.isEmpty {
      try visitor.visitRepeatedGroupField(value: this.group2, fieldNumber: 20)
    }
    if !this.ext1.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.ext1, fieldNumber: 1000)
    }
    if !this.ext2.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.ext2, fieldNumber: 1001)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator, rhs: SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator) -> Boolean {
    if lhs.field1 != rhs.field1 {return false}
    if lhs.field2 != rhs.field2 {return false}
    if lhs.field3 != rhs.field3 {return false}
    if lhs.group1 != rhs.group1 {return false}
    if lhs.group2 != rhs.group2 {return false}
    if lhs.ext1 != rhs.ext1 {return false}
    if lhs.ext2 != rhs.ext2 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator.Group1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator.protoMessageName + ".Group1"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    11: .same(proto: "field1"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 11: try { try decoder.decodeSingularMessageField(value: &this._field1) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._field1 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator.Group1, rhs: SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator.Group1) -> Boolean {
    if lhs._field1 != rhs._field1 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator.Group2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator.protoMessageName + ".Group2"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    21: .same(proto: "field1"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 21: try { try decoder.decodeSingularMessageField(value: &this._field1) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._field1 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator.Group2, rhs: SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator.Group2) -> Boolean {
    if lhs._field1 != rhs._field1 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_TestParsingMerge.OptionalGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = SwiftProtoTesting_TestParsingMerge.protoMessageName + ".OptionalGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    11: .standard(proto: "optional_group_all_types"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 11: try { try decoder.decodeSingularMessageField(value: &this._optionalGroupAllTypes) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalGroupAllTypes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestParsingMerge.OptionalGroup, rhs: SwiftProtoTesting_TestParsingMerge.OptionalGroup) -> Boolean {
    if lhs._optionalGroupAllTypes != rhs._optionalGroupAllTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_TestParsingMerge.RepeatedGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = SwiftProtoTesting_TestParsingMerge.protoMessageName + ".RepeatedGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    21: .standard(proto: "repeated_group_all_types"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 21: try { try decoder.decodeSingularMessageField(value: &this._repeatedGroupAllTypes) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._repeatedGroupAllTypes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_TestParsingMerge.RepeatedGroup, rhs: SwiftProtoTesting_TestParsingMerge.RepeatedGroup) -> Boolean {
    if lhs._repeatedGroupAllTypes != rhs._repeatedGroupAllTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
