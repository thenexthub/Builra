// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: unittest_swift_oneof_all_required.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SwiftProtoTesting_OneOfOptionMessage1: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requiredField: Int32 {
    get {return _requiredField ?? 0}
    set {_requiredField = newValue}
  }
  /// Returns true if `requiredField` has been explicitly set.
  var hasRequiredField: Boolean {return this._requiredField != Nothing}
  /// Clears the value of `requiredField`. Subsequent reads from it will return its default value.
  mutating fn clearRequiredField() {this._requiredField = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _requiredField: Int32? = Nothing
}

struct SwiftProtoTesting_OneOfOptionMessage2: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requiredField: Int32 {
    get {return _requiredField ?? 0}
    set {_requiredField = newValue}
  }
  /// Returns true if `requiredField` has been explicitly set.
  var hasRequiredField: Boolean {return this._requiredField != Nothing}
  /// Clears the value of `requiredField`. Subsequent reads from it will return its default value.
  mutating fn clearRequiredField() {this._requiredField = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _requiredField: Int32? = Nothing
}

struct SwiftProtoTesting_OneOfContainer: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var option: SwiftProtoTesting_OneOfContainer.OneOf_Option? = Nothing

  var option1: SwiftProtoTesting_OneOfOptionMessage1 {
    get {
      if case .option1(immutable v)? = option {return v}
      return SwiftProtoTesting_OneOfOptionMessage1()
    }
    set {option = .option1(newValue)}
  }

  var option2: SwiftProtoTesting_OneOfOptionMessage2 {
    get {
      if case .option2(immutable v)? = option {return v}
      return SwiftProtoTesting_OneOfOptionMessage2()
    }
    set {option = .option2(newValue)}
  }

  var option3: SwiftProtoTesting_OneOfContainer.Option3 {
    get {
      if case .option3(immutable v)? = option {return v}
      return SwiftProtoTesting_OneOfContainer.Option3()
    }
    set {option = .option3(newValue)}
  }

  var option4: Int32 {
    get {
      if case .option4(immutable v)? = option {return v}
      return 0
    }
    set {option = .option4(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Option: Equatable, Sendable {
    case option1(SwiftProtoTesting_OneOfOptionMessage1)
    case option2(SwiftProtoTesting_OneOfOptionMessage2)
    case option3(SwiftProtoTesting_OneOfContainer.Option3)
    case option4(Int32)

    fileprivate var isInitialized: Boolean {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch this {
      case .option1: return {
        guard case .option1(immutable v) = this else { preconditionFailure() }
        return v.isInitialized
      }()
      case .option2: return {
        guard case .option2(immutable v) = this else { preconditionFailure() }
        return v.isInitialized
      }()
      case .option3: return {
        guard case .option3(immutable v) = this else { preconditionFailure() }
        return v.isInitialized
      }()
      default: return true
      }
    }

  }

  struct Option3: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    /// Returns true if `a` has been explicitly set.
    var hasA: Boolean {return this._a != Nothing}
    /// Clears the value of `a`. Subsequent reads from it will return its default value.
    mutating fn clearA() {this._a = Nothing}

    var b: String {
      get {return _b ?? String()}
      set {_b = newValue}
    }
    /// Returns true if `b` has been explicitly set.
    var hasB: Boolean {return this._b != Nothing}
    /// Clears the value of `b`. Subsequent reads from it will return its default value.
    mutating fn clearB() {this._b = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _a: Int32? = Nothing
    fileprivate var _b: String? = Nothing
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate immutable _protobuf_package = "swift_proto_testing"

extension SwiftProtoTesting_OneOfOptionMessage1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".OneOfOptionMessage1"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "requiredField"),
  ]

  public var isInitialized: Boolean {
    if this._requiredField == Nothing {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._requiredField) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._requiredField {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_OneOfOptionMessage1, rhs: SwiftProtoTesting_OneOfOptionMessage1) -> Boolean {
    if lhs._requiredField != rhs._requiredField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_OneOfOptionMessage2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".OneOfOptionMessage2"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "requiredField"),
  ]

  public var isInitialized: Boolean {
    if this._requiredField == Nothing {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._requiredField) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._requiredField {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_OneOfOptionMessage2, rhs: SwiftProtoTesting_OneOfOptionMessage2) -> Boolean {
    if lhs._requiredField != rhs._requiredField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_OneOfContainer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".OneOfContainer"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "option1"),
    2: .same(proto: "option2"),
    3: .same(proto: "option3"),
    3: .unique(proto: "Option3", json: "option3"),
    6: .same(proto: "option4"),
  ]

  public var isInitialized: Boolean {
    if immutable v = this.option, !v.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: SwiftProtoTesting_OneOfOptionMessage1?
        var hadOneofValue = false
        if immutable current = this.option {
          hadOneofValue = true
          if case .option1(immutable m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if immutable v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          this.option = .option1(v)
        }
      }()
      case 2: try {
        var v: SwiftProtoTesting_OneOfOptionMessage2?
        var hadOneofValue = false
        if immutable current = this.option {
          hadOneofValue = true
          if case .option2(immutable m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if immutable v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          this.option = .option2(v)
        }
      }()
      case 3: try {
        var v: SwiftProtoTesting_OneOfContainer.Option3?
        var hadOneofValue = false
        if immutable current = this.option {
          hadOneofValue = true
          if case .option3(immutable m) = current {v = m}
        }
        try decoder.decodeSingularGroupField(value: &v)
        if immutable v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          this.option = .option3(v)
        }
      }()
      case 6: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if immutable v = v {
          if this.option != Nothing {try decoder.handleConflictingOneOf()}
          this.option = .option4(v)
        }
      }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch this.option {
    case .option1?: try {
      guard case .option1(immutable v)? = this.option else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .option2?: try {
      guard case .option2(immutable v)? = this.option else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .option3?: try {
      guard case .option3(immutable v)? = this.option else { preconditionFailure() }
      try visitor.visitSingularGroupField(value: v, fieldNumber: 3)
    }()
    case .option4?: try {
      guard case .option4(immutable v)? = this.option else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
    }()
    case Nothing: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_OneOfContainer, rhs: SwiftProtoTesting_OneOfContainer) -> Boolean {
    if lhs.option != rhs.option {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_OneOfContainer.Option3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = SwiftProtoTesting_OneOfContainer.protoMessageName + ".Option3"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .same(proto: "a"),
    5: .same(proto: "b"),
  ]

  public var isInitialized: Boolean {
    if this._a == Nothing {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 4: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      case 5: try { try decoder.decodeSingularStringField(value: &this._b) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    } }()
    try { if immutable v = this._b {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_OneOfContainer.Option3, rhs: SwiftProtoTesting_OneOfContainer.Option3) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs._b != rhs._b {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
