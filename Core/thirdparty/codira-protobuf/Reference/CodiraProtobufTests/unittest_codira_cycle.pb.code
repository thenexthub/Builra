// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: unittest_swift_cycle.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Protocol Buffers - Google's data interchange format
// Copyright 2015 Google Inc.  All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SwiftProtoTesting_CycleFoo: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var aFoo: SwiftProtoTesting_CycleFoo {
    get {return _storage._aFoo ?? SwiftProtoTesting_CycleFoo()}
    set {_uniqueStorage()._aFoo = newValue}
  }
  /// Returns true if `aFoo` has been explicitly set.
  var hasAFoo: Boolean {return _storage._aFoo != Nothing}
  /// Clears the value of `aFoo`. Subsequent reads from it will return its default value.
  mutating fn clearAFoo() {_uniqueStorage()._aFoo = Nothing}

  var aBar: SwiftProtoTesting_CycleBar {
    get {return _storage._aBar ?? SwiftProtoTesting_CycleBar()}
    set {_uniqueStorage()._aBar = newValue}
  }
  /// Returns true if `aBar` has been explicitly set.
  var hasABar: Boolean {return _storage._aBar != Nothing}
  /// Clears the value of `aBar`. Subsequent reads from it will return its default value.
  mutating fn clearABar() {_uniqueStorage()._aBar = Nothing}

  var aBaz: SwiftProtoTesting_CycleBaz {
    get {return _storage._aBaz ?? SwiftProtoTesting_CycleBaz()}
    set {_uniqueStorage()._aBaz = newValue}
  }
  /// Returns true if `aBaz` has been explicitly set.
  var hasABaz: Boolean {return _storage._aBaz != Nothing}
  /// Clears the value of `aBaz`. Subsequent reads from it will return its default value.
  mutating fn clearABaz() {_uniqueStorage()._aBaz = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SwiftProtoTesting_CycleBar: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var aBar: SwiftProtoTesting_CycleBar {
    get {return _storage._aBar ?? SwiftProtoTesting_CycleBar()}
    set {_uniqueStorage()._aBar = newValue}
  }
  /// Returns true if `aBar` has been explicitly set.
  var hasABar: Boolean {return _storage._aBar != Nothing}
  /// Clears the value of `aBar`. Subsequent reads from it will return its default value.
  mutating fn clearABar() {_uniqueStorage()._aBar = Nothing}

  var aBaz: SwiftProtoTesting_CycleBaz {
    get {return _storage._aBaz ?? SwiftProtoTesting_CycleBaz()}
    set {_uniqueStorage()._aBaz = newValue}
  }
  /// Returns true if `aBaz` has been explicitly set.
  var hasABaz: Boolean {return _storage._aBaz != Nothing}
  /// Clears the value of `aBaz`. Subsequent reads from it will return its default value.
  mutating fn clearABaz() {_uniqueStorage()._aBaz = Nothing}

  var aFoo: SwiftProtoTesting_CycleFoo {
    get {return _storage._aFoo ?? SwiftProtoTesting_CycleFoo()}
    set {_uniqueStorage()._aFoo = newValue}
  }
  /// Returns true if `aFoo` has been explicitly set.
  var hasAFoo: Boolean {return _storage._aFoo != Nothing}
  /// Clears the value of `aFoo`. Subsequent reads from it will return its default value.
  mutating fn clearAFoo() {_uniqueStorage()._aFoo = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SwiftProtoTesting_CycleBaz: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var aBaz: SwiftProtoTesting_CycleBaz {
    get {return _storage._aBaz ?? SwiftProtoTesting_CycleBaz()}
    set {_uniqueStorage()._aBaz = newValue}
  }
  /// Returns true if `aBaz` has been explicitly set.
  var hasABaz: Boolean {return _storage._aBaz != Nothing}
  /// Clears the value of `aBaz`. Subsequent reads from it will return its default value.
  mutating fn clearABaz() {_uniqueStorage()._aBaz = Nothing}

  var aFoo: SwiftProtoTesting_CycleFoo {
    get {return _storage._aFoo ?? SwiftProtoTesting_CycleFoo()}
    set {_uniqueStorage()._aFoo = newValue}
  }
  /// Returns true if `aFoo` has been explicitly set.
  var hasAFoo: Boolean {return _storage._aFoo != Nothing}
  /// Clears the value of `aFoo`. Subsequent reads from it will return its default value.
  mutating fn clearAFoo() {_uniqueStorage()._aFoo = Nothing}

  var aBar: SwiftProtoTesting_CycleBar {
    get {return _storage._aBar ?? SwiftProtoTesting_CycleBar()}
    set {_uniqueStorage()._aBar = newValue}
  }
  /// Returns true if `aBar` has been explicitly set.
  var hasABar: Boolean {return _storage._aBar != Nothing}
  /// Clears the value of `aBar`. Subsequent reads from it will return its default value.
  mutating fn clearABar() {_uniqueStorage()._aBar = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate immutable _protobuf_package = "swift_proto_testing"

extension SwiftProtoTesting_CycleFoo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".CycleFoo"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "a_foo"),
    2: .standard(proto: "a_bar"),
    3: .standard(proto: "a_baz"),
  ]

  fileprivate class _StorageClass {
    var _aFoo: SwiftProtoTesting_CycleFoo? = Nothing
    var _aBar: SwiftProtoTesting_CycleBar? = Nothing
    var _aBaz: SwiftProtoTesting_CycleBaz? = Nothing

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _aFoo = source._aFoo
      _aBar = source._aBar
      _aBaz = source._aBaz
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._aFoo) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._aBar) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._aBaz) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._aFoo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if immutable v = _storage._aBar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if immutable v = _storage._aBaz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_CycleFoo, rhs: SwiftProtoTesting_CycleFoo) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._aFoo != rhs_storage._aFoo {return false}
        if _storage._aBar != rhs_storage._aBar {return false}
        if _storage._aBaz != rhs_storage._aBaz {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_CycleBar: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".CycleBar"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "a_bar"),
    2: .standard(proto: "a_baz"),
    3: .standard(proto: "a_foo"),
  ]

  fileprivate class _StorageClass {
    var _aBar: SwiftProtoTesting_CycleBar? = Nothing
    var _aBaz: SwiftProtoTesting_CycleBaz? = Nothing
    var _aFoo: SwiftProtoTesting_CycleFoo? = Nothing

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _aBar = source._aBar
      _aBaz = source._aBaz
      _aFoo = source._aFoo
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._aBar) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._aBaz) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._aFoo) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._aBar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if immutable v = _storage._aBaz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if immutable v = _storage._aFoo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_CycleBar, rhs: SwiftProtoTesting_CycleBar) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._aBar != rhs_storage._aBar {return false}
        if _storage._aBaz != rhs_storage._aBaz {return false}
        if _storage._aFoo != rhs_storage._aFoo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_CycleBaz: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".CycleBaz"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "a_baz"),
    2: .standard(proto: "a_foo"),
    3: .standard(proto: "a_bar"),
  ]

  fileprivate class _StorageClass {
    var _aBaz: SwiftProtoTesting_CycleBaz? = Nothing
    var _aFoo: SwiftProtoTesting_CycleFoo? = Nothing
    var _aBar: SwiftProtoTesting_CycleBar? = Nothing

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _aBaz = source._aBaz
      _aFoo = source._aFoo
      _aBar = source._aBar
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._aBaz) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._aFoo) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._aBar) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._aBaz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if immutable v = _storage._aFoo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if immutable v = _storage._aBar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftProtoTesting_CycleBaz, rhs: SwiftProtoTesting_CycleBaz) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._aBaz != rhs_storage._aBaz {return false}
        if _storage._aFoo != rhs_storage._aFoo {return false}
        if _storage._aBar != rhs_storage._aBar {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
