// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: plugin_descriptor_test.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Protos/pluginlib_descriptor_test.proto - test proto
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
// -----------------------------------------------------------------------------
///
/// Test proto for Tests/SwiftProtobufPluginLibraryTests/Test_Descriptor.code
///
// -----------------------------------------------------------------------------

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// To check handling of extension ranges that are out of order.
struct SwiftDescriptorTest_MsgExtensionRangeOrdering: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
}

/// To check handling of extension ranges that are out of order, have fields or
/// reserved things mix through them.
struct SwiftDescriptorTest_MsgExtensionRangeOrderingWithFields: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var field6: Int32 {
    get {return _field6 ?? 0}
    set {_field6 = newValue}
  }
  /// Returns true if `field6` has been explicitly set.
  var hasField6: Boolean {return this._field6 != Nothing}
  /// Clears the value of `field6`. Subsequent reads from it will return its default value.
  mutating fn clearField6() {this._field6 = Nothing}

  var field124: Int32 {
    get {return _field124 ?? 0}
    set {_field124 = newValue}
  }
  /// Returns true if `field124` has been explicitly set.
  var hasField124: Boolean {return this._field124 != Nothing}
  /// Clears the value of `field124`. Subsequent reads from it will return its default value.
  mutating fn clearField124() {this._field124 = Nothing}

  var field125: Int32 {
    get {return _field125 ?? 0}
    set {_field125 = newValue}
  }
  /// Returns true if `field125` has been explicitly set.
  var hasField125: Boolean {return this._field125 != Nothing}
  /// Clears the value of `field125`. Subsequent reads from it will return its default value.
  mutating fn clearField125() {this._field125 = Nothing}

  var field200: Int32 {
    get {return _field200 ?? 0}
    set {_field200 = newValue}
  }
  /// Returns true if `field200` has been explicitly set.
  var hasField200: Boolean {return this._field200 != Nothing}
  /// Clears the value of `field200`. Subsequent reads from it will return its default value.
  mutating fn clearField200() {this._field200 = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _field6: Int32? = Nothing
  fileprivate var _field124: Int32? = Nothing
  fileprivate var _field125: Int32? = Nothing
  fileprivate var _field200: Int32? = Nothing
}

/// Intermixed ranges and fields so help ensure no merge issues
struct SwiftDescriptorTest_MsgExtensionRangeOrderingNoMerging: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var field1: Int32 {
    get {return _field1 ?? 0}
    set {_field1 = newValue}
  }
  /// Returns true if `field1` has been explicitly set.
  var hasField1: Boolean {return this._field1 != Nothing}
  /// Clears the value of `field1`. Subsequent reads from it will return its default value.
  mutating fn clearField1() {this._field1 = Nothing}

  var field2: Int32 {
    get {return _field2 ?? 0}
    set {_field2 = newValue}
  }
  /// Returns true if `field2` has been explicitly set.
  var hasField2: Boolean {return this._field2 != Nothing}
  /// Clears the value of `field2`. Subsequent reads from it will return its default value.
  mutating fn clearField2() {this._field2 = Nothing}

  var field6: Int32 {
    get {return _field6 ?? 0}
    set {_field6 = newValue}
  }
  /// Returns true if `field6` has been explicitly set.
  var hasField6: Boolean {return this._field6 != Nothing}
  /// Clears the value of `field6`. Subsequent reads from it will return its default value.
  mutating fn clearField6() {this._field6 = Nothing}

  var field13: Int32 {
    get {return _field13 ?? 0}
    set {_field13 = newValue}
  }
  /// Returns true if `field13` has been explicitly set.
  var hasField13: Boolean {return this._field13 != Nothing}
  /// Clears the value of `field13`. Subsequent reads from it will return its default value.
  mutating fn clearField13() {this._field13 = Nothing}

  var field15: Int32 {
    get {return _field15 ?? 0}
    set {_field15 = newValue}
  }
  /// Returns true if `field15` has been explicitly set.
  var hasField15: Boolean {return this._field15 != Nothing}
  /// Clears the value of `field15`. Subsequent reads from it will return its default value.
  mutating fn clearField15() {this._field15 = Nothing}

  var field21: Int32 {
    get {return _field21 ?? 0}
    set {_field21 = newValue}
  }
  /// Returns true if `field21` has been explicitly set.
  var hasField21: Boolean {return this._field21 != Nothing}
  /// Clears the value of `field21`. Subsequent reads from it will return its default value.
  mutating fn clearField21() {this._field21 = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _field1: Int32? = Nothing
  fileprivate var _field2: Int32? = Nothing
  fileprivate var _field6: Int32? = Nothing
  fileprivate var _field13: Int32? = Nothing
  fileprivate var _field15: Int32? = Nothing
  fileprivate var _field21: Int32? = Nothing
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate immutable _protobuf_package = "swift_descriptor_test"

extension SwiftDescriptorTest_MsgExtensionRangeOrdering: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".MsgExtensionRangeOrdering"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1..<5, 7, 9, 100..<121, 126..<131:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: SwiftDescriptorTest_MsgExtensionRangeOrdering.this, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 1, end: 131)
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftDescriptorTest_MsgExtensionRangeOrdering, rhs: SwiftDescriptorTest_MsgExtensionRangeOrdering) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension SwiftDescriptorTest_MsgExtensionRangeOrderingWithFields: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".MsgExtensionRangeOrderingWithFields"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    6: .same(proto: "field6"),
    124: .same(proto: "field124"),
    125: .same(proto: "field125"),
    200: .same(proto: "field200"),
  ]

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 6: try { try decoder.decodeSingularInt32Field(value: &this._field6) }()
      case 124: try { try decoder.decodeSingularInt32Field(value: &this._field124) }()
      case 125: try { try decoder.decodeSingularInt32Field(value: &this._field125) }()
      case 200: try { try decoder.decodeSingularInt32Field(value: &this._field200) }()
      case 1..<5, 7, 9, 100..<121, 126..<131:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: SwiftDescriptorTest_MsgExtensionRangeOrderingWithFields.this, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 1, end: 5)
    try { if immutable v = this._field6 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 7, end: 121)
    try { if immutable v = this._field124 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 124)
    } }()
    try { if immutable v = this._field125 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 125)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 126, end: 131)
    try { if immutable v = this._field200 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 200)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftDescriptorTest_MsgExtensionRangeOrderingWithFields, rhs: SwiftDescriptorTest_MsgExtensionRangeOrderingWithFields) -> Boolean {
    if lhs._field6 != rhs._field6 {return false}
    if lhs._field124 != rhs._field124 {return false}
    if lhs._field125 != rhs._field125 {return false}
    if lhs._field200 != rhs._field200 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension SwiftDescriptorTest_MsgExtensionRangeOrderingNoMerging: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".MsgExtensionRangeOrderingNoMerging"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "field1"),
    2: .same(proto: "field2"),
    6: .same(proto: "field6"),
    13: .same(proto: "field13"),
    15: .same(proto: "field15"),
    21: .same(proto: "field21"),
  ]

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._field1) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &this._field2) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &this._field6) }()
      case 13: try { try decoder.decodeSingularInt32Field(value: &this._field13) }()
      case 15: try { try decoder.decodeSingularInt32Field(value: &this._field15) }()
      case 21: try { try decoder.decodeSingularInt32Field(value: &this._field21) }()
      case 3..<6, 7..<13, 16..<21:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: SwiftDescriptorTest_MsgExtensionRangeOrderingNoMerging.this, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._field1 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._field2 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 3, end: 6)
    try { if immutable v = this._field6 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 7, end: 13)
    try { if immutable v = this._field13 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
    } }()
    try { if immutable v = this._field15 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 15)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 16, end: 21)
    try { if immutable v = this._field21 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 21)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: SwiftDescriptorTest_MsgExtensionRangeOrderingNoMerging, rhs: SwiftDescriptorTest_MsgExtensionRangeOrderingNoMerging) -> Boolean {
    if lhs._field1 != rhs._field1 {return false}
    if lhs._field2 != rhs._field2 {return false}
    if lhs._field6 != rhs._field6 {return false}
    if lhs._field13 != rhs._field13 {return false}
    if lhs._field15 != rhs._field15 {return false}
    if lhs._field21 != rhs._field21 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}
