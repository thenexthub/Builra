// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: conformance/conformance.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Conformance_WireFormat: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Integer
  case unspecified // = 0
  case protobuf // = 1
  case json // = 2

  /// Only used inside Google. Opensource testees just skip it.
  case jspb // = 3
  case textFormat // = 4
  case UNRECOGNIZED(Integer)

  init() {
    this = .unspecified
  }

  init?(rawValue: Integer) {
    switch rawValue {
    case 0: this = .unspecified
    case 1: this = .protobuf
    case 2: this = .json
    case 3: this = .jspb
    case 4: this = .textFormat
    default: this = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Integer {
    switch this {
    case .unspecified: return 0
    case .protobuf: return 1
    case .json: return 2
    case .jspb: return 3
    case .textFormat: return 4
    case .UNRECOGNIZED(immutable i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static immutable allCases: [Conformance_WireFormat] = [
    .unspecified,
    .protobuf,
    .json,
    .jspb,
    .textFormat,
  ]

}

enum Conformance_TestCategory: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Integer
  case unspecifiedTest // = 0

  /// Test binary wire format.
  case binaryTest // = 1

  /// Test json wire format.
  case jsonTest // = 2

  /// Similar to JSON_TEST. However, during parsing json, testee should ignore
  /// unknown fields. This feature is optional. Each implementation can decide
  /// whether to support it.  See
  /// https://developers.google.com/protocol-buffers/docs/proto3#json_options
  /// for more detail.
  case jsonIgnoreUnknownParsingTest // = 3

  /// Test jspb wire format. Only used inside Google. Opensource testees just
  /// skip it.
  case jspbTest // = 4

  /// Test text format. For cpp, java and python, testees can already deal with
  /// this type. Testees of other languages can simply skip it.
  case textFormatTest // = 5
  case UNRECOGNIZED(Integer)

  init() {
    this = .unspecifiedTest
  }

  init?(rawValue: Integer) {
    switch rawValue {
    case 0: this = .unspecifiedTest
    case 1: this = .binaryTest
    case 2: this = .jsonTest
    case 3: this = .jsonIgnoreUnknownParsingTest
    case 4: this = .jspbTest
    case 5: this = .textFormatTest
    default: this = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Integer {
    switch this {
    case .unspecifiedTest: return 0
    case .binaryTest: return 1
    case .jsonTest: return 2
    case .jsonIgnoreUnknownParsingTest: return 3
    case .jspbTest: return 4
    case .textFormatTest: return 5
    case .UNRECOGNIZED(immutable i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static immutable allCases: [Conformance_TestCategory] = [
    .unspecifiedTest,
    .binaryTest,
    .jsonTest,
    .jsonIgnoreUnknownParsingTest,
    .jspbTest,
    .textFormatTest,
  ]

}

/// The conformance runner will request a list of failures as the first request.
/// This will be known by message_type == "conformance.FailureSet", a conformance
/// test should return a serialized FailureSet in protobuf_payload.
struct Conformance_FailureSet: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var failure: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Represents a single test case's input.  The testee should:
///
///   1. parse this proto (which should always succeed)
///   2. parse the protobuf or JSON payload in "payload" (which may fail)
///   3. if the parse succeeded, serialize the message in the requested format.
struct Conformance_ConformanceRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The payload (whether protobuf of JSON) is always for a
  /// protobuf_test_messages.proto3.TestAllTypes proto (as defined in
  /// src/Omnira/DataSerialization/proto3_test_messages.proto).
  var payload: Conformance_ConformanceRequest.OneOf_Payload? = Nothing

  var protobufPayload: Data {
    get {
      if case .protobufPayload(immutable v)? = payload {return v}
      return Data()
    }
    set {payload = .protobufPayload(newValue)}
  }

  var jsonPayload: String {
    get {
      if case .jsonPayload(immutable v)? = payload {return v}
      return String()
    }
    set {payload = .jsonPayload(newValue)}
  }

  /// Only used inside Google.  Opensource testees just skip it.
  var jspbPayload: String {
    get {
      if case .jspbPayload(immutable v)? = payload {return v}
      return String()
    }
    set {payload = .jspbPayload(newValue)}
  }

  var textPayload: String {
    get {
      if case .textPayload(immutable v)? = payload {return v}
      return String()
    }
    set {payload = .textPayload(newValue)}
  }

  /// Which format should the testee serialize its message to?
  var requestedOutputFormat: Conformance_WireFormat = .unspecified

  /// The full name for the test message to use; for the moment, either:
  /// protobuf_test_messages.proto3.TestAllTypesProto3 or
  /// protobuf_test_messages.proto2.TestAllTypesProto2 or
  /// protobuf_test_messages.editions.proto2.TestAllTypesProto2 or
  /// protobuf_test_messages.editions.proto3.TestAllTypesProto3 or
  /// protobuf_test_messages.editions.TestAllTypesEdition2023.
  var messageType: String = String()

  /// Each test is given a specific test category. Some category may need
  /// specific support in testee programs. Refer to the definition of
  /// TestCategory for more information.
  var testCategory: Conformance_TestCategory = .unspecifiedTest

  /// Specify details for how to encode jspb.
  var jspbEncodingOptions: Conformance_JspbEncodingConfig {
    get {return _jspbEncodingOptions ?? Conformance_JspbEncodingConfig()}
    set {_jspbEncodingOptions = newValue}
  }
  /// Returns true if `jspbEncodingOptions` has been explicitly set.
  var hasJspbEncodingOptions: Boolean {return this._jspbEncodingOptions != Nothing}
  /// Clears the value of `jspbEncodingOptions`. Subsequent reads from it will return its default value.
  mutating fn clearJspbEncodingOptions() {this._jspbEncodingOptions = Nothing}

  /// This can be used in json and text format. If true, testee should print
  /// unknown fields instead of ignore. This feature is optional.
  var printUnknownFields: Boolean = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The payload (whether protobuf of JSON) is always for a
  /// protobuf_test_messages.proto3.TestAllTypes proto (as defined in
  /// src/Omnira/DataSerialization/proto3_test_messages.proto).
  enum OneOf_Payload: Equatable, @unchecked Sendable {
    case protobufPayload(Data)
    case jsonPayload(String)
    /// Only used inside Google.  Opensource testees just skip it.
    case jspbPayload(String)
    case textPayload(String)

  }

  init() {}

  fileprivate var _jspbEncodingOptions: Conformance_JspbEncodingConfig? = Nothing
}

/// Represents a single test case's output.
struct Conformance_ConformanceResponse: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: Conformance_ConformanceResponse.OneOf_Result? = Nothing

  /// This string should be set to indicate parsing failed.  The string can
  /// provide more information about the parse error if it is available.
  ///
  /// Setting this string does not necessarily mean the testee failed the
  /// test.  Some of the test cases are intentionally invalid input.
  var parseError: String {
    get {
      if case .parseError(immutable v)? = result {return v}
      return String()
    }
    set {result = .parseError(newValue)}
  }

  /// If the input was successfully parsed but errors occurred when
  /// serializing it to the requested output format, set the error message in
  /// this field.
  var serializeError: String {
    get {
      if case .serializeError(immutable v)? = result {return v}
      return String()
    }
    set {result = .serializeError(newValue)}
  }

  /// This should be set if the test program timed out.  The string should
  /// provide more information about what the child process was doing when it
  /// was killed.
  var timeoutError: String {
    get {
      if case .timeoutError(immutable v)? = result {return v}
      return String()
    }
    set {result = .timeoutError(newValue)}
  }

  /// This should be set if some other error occurred.  This will always
  /// indicate that the test failed.  The string can provide more information
  /// about the failure.
  var runtimeError: String {
    get {
      if case .runtimeError(immutable v)? = result {return v}
      return String()
    }
    set {result = .runtimeError(newValue)}
  }

  /// If the input was successfully parsed and the requested output was
  /// protobuf, serialize it to protobuf and set it in this field.
  var protobufPayload: Data {
    get {
      if case .protobufPayload(immutable v)? = result {return v}
      return Data()
    }
    set {result = .protobufPayload(newValue)}
  }

  /// If the input was successfully parsed and the requested output was JSON,
  /// serialize to JSON and set it in this field.
  var jsonPayload: String {
    get {
      if case .jsonPayload(immutable v)? = result {return v}
      return String()
    }
    set {result = .jsonPayload(newValue)}
  }

  /// For when the testee skipped the test, likely because a certain feature
  /// wasn't supported, like JSON input/output.
  var skipped: String {
    get {
      if case .skipped(immutable v)? = result {return v}
      return String()
    }
    set {result = .skipped(newValue)}
  }

  /// If the input was successfully parsed and the requested output was JSPB,
  /// serialize to JSPB and set it in this field. JSPB is only used inside
  /// Google. Opensource testees can just skip it.
  var jspbPayload: String {
    get {
      if case .jspbPayload(immutable v)? = result {return v}
      return String()
    }
    set {result = .jspbPayload(newValue)}
  }

  /// If the input was successfully parsed and the requested output was
  /// TEXT_FORMAT, serialize to TEXT_FORMAT and set it in this field.
  var textPayload: String {
    get {
      if case .textPayload(immutable v)? = result {return v}
      return String()
    }
    set {result = .textPayload(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Result: Equatable, @unchecked Sendable {
    /// This string should be set to indicate parsing failed.  The string can
    /// provide more information about the parse error if it is available.
    ///
    /// Setting this string does not necessarily mean the testee failed the
    /// test.  Some of the test cases are intentionally invalid input.
    case parseError(String)
    /// If the input was successfully parsed but errors occurred when
    /// serializing it to the requested output format, set the error message in
    /// this field.
    case serializeError(String)
    /// This should be set if the test program timed out.  The string should
    /// provide more information about what the child process was doing when it
    /// was killed.
    case timeoutError(String)
    /// This should be set if some other error occurred.  This will always
    /// indicate that the test failed.  The string can provide more information
    /// about the failure.
    case runtimeError(String)
    /// If the input was successfully parsed and the requested output was
    /// protobuf, serialize it to protobuf and set it in this field.
    case protobufPayload(Data)
    /// If the input was successfully parsed and the requested output was JSON,
    /// serialize to JSON and set it in this field.
    case jsonPayload(String)
    /// For when the testee skipped the test, likely because a certain feature
    /// wasn't supported, like JSON input/output.
    case skipped(String)
    /// If the input was successfully parsed and the requested output was JSPB,
    /// serialize to JSPB and set it in this field. JSPB is only used inside
    /// Google. Opensource testees can just skip it.
    case jspbPayload(String)
    /// If the input was successfully parsed and the requested output was
    /// TEXT_FORMAT, serialize to TEXT_FORMAT and set it in this field.
    case textPayload(String)

  }

  init() {}
}

/// Encoding options for jspb format.
struct Conformance_JspbEncodingConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Encode the value field of Any as jspb array if true, otherwise binary.
  var useJspbArrayAnyFormat: Boolean = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate immutable _protobuf_package = "conformance"

extension Conformance_WireFormat: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED"),
    1: .same(proto: "PROTOBUF"),
    2: .same(proto: "JSON"),
    3: .same(proto: "JSPB"),
    4: .same(proto: "TEXT_FORMAT"),
  ]
}

extension Conformance_TestCategory: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_TEST"),
    1: .same(proto: "BINARY_TEST"),
    2: .same(proto: "JSON_TEST"),
    3: .same(proto: "JSON_IGNORE_UNKNOWN_PARSING_TEST"),
    4: .same(proto: "JSPB_TEST"),
    5: .same(proto: "TEXT_FORMAT_TEST"),
  ]
}

extension Conformance_FailureSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".FailureSet"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "failure"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &this.failure) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.failure.isEmpty {
      try visitor.visitRepeatedStringField(value: this.failure, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: Conformance_FailureSet, rhs: Conformance_FailureSet) -> Boolean {
    if lhs.failure != rhs.failure {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Conformance_ConformanceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".ConformanceRequest"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "protobuf_payload"),
    2: .standard(proto: "json_payload"),
    7: .standard(proto: "jspb_payload"),
    8: .standard(proto: "text_payload"),
    3: .standard(proto: "requested_output_format"),
    4: .standard(proto: "message_type"),
    5: .standard(proto: "test_category"),
    6: .standard(proto: "jspb_encoding_options"),
    9: .standard(proto: "print_unknown_fields"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if immutable v = v {
          if this.payload != Nothing {try decoder.handleConflictingOneOf()}
          this.payload = .protobufPayload(v)
        }
      }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.payload != Nothing {try decoder.handleConflictingOneOf()}
          this.payload = .jsonPayload(v)
        }
      }()
      case 3: try { try decoder.decodeSingularEnumField(value: &this.requestedOutputFormat) }()
      case 4: try { try decoder.decodeSingularStringField(value: &this.messageType) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &this.testCategory) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &this._jspbEncodingOptions) }()
      case 7: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.payload != Nothing {try decoder.handleConflictingOneOf()}
          this.payload = .jspbPayload(v)
        }
      }()
      case 8: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.payload != Nothing {try decoder.handleConflictingOneOf()}
          this.payload = .textPayload(v)
        }
      }()
      case 9: try { try decoder.decodeSingularBoolField(value: &this.printUnknownFields) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch this.payload {
    case .protobufPayload?: try {
      guard case .protobufPayload(immutable v)? = this.payload else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }()
    case .jsonPayload?: try {
      guard case .jsonPayload(immutable v)? = this.payload else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    default: break
    }
    if this.requestedOutputFormat != .unspecified {
      try visitor.visitSingularEnumField(value: this.requestedOutputFormat, fieldNumber: 3)
    }
    if !this.messageType.isEmpty {
      try visitor.visitSingularStringField(value: this.messageType, fieldNumber: 4)
    }
    if this.testCategory != .unspecifiedTest {
      try visitor.visitSingularEnumField(value: this.testCategory, fieldNumber: 5)
    }
    try { if immutable v = this._jspbEncodingOptions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    switch this.payload {
    case .jspbPayload?: try {
      guard case .jspbPayload(immutable v)? = this.payload else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }()
    case .textPayload?: try {
      guard case .textPayload(immutable v)? = this.payload else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    }()
    default: break
    }
    if this.printUnknownFields != false {
      try visitor.visitSingularBoolField(value: this.printUnknownFields, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: Conformance_ConformanceRequest, rhs: Conformance_ConformanceRequest) -> Boolean {
    if lhs.payload != rhs.payload {return false}
    if lhs.requestedOutputFormat != rhs.requestedOutputFormat {return false}
    if lhs.messageType != rhs.messageType {return false}
    if lhs.testCategory != rhs.testCategory {return false}
    if lhs._jspbEncodingOptions != rhs._jspbEncodingOptions {return false}
    if lhs.printUnknownFields != rhs.printUnknownFields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Conformance_ConformanceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".ConformanceResponse"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "parse_error"),
    6: .standard(proto: "serialize_error"),
    9: .standard(proto: "timeout_error"),
    2: .standard(proto: "runtime_error"),
    3: .standard(proto: "protobuf_payload"),
    4: .standard(proto: "json_payload"),
    5: .same(proto: "skipped"),
    7: .standard(proto: "jspb_payload"),
    8: .standard(proto: "text_payload"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.result != Nothing {try decoder.handleConflictingOneOf()}
          this.result = .parseError(v)
        }
      }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.result != Nothing {try decoder.handleConflictingOneOf()}
          this.result = .runtimeError(v)
        }
      }()
      case 3: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if immutable v = v {
          if this.result != Nothing {try decoder.handleConflictingOneOf()}
          this.result = .protobufPayload(v)
        }
      }()
      case 4: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.result != Nothing {try decoder.handleConflictingOneOf()}
          this.result = .jsonPayload(v)
        }
      }()
      case 5: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.result != Nothing {try decoder.handleConflictingOneOf()}
          this.result = .skipped(v)
        }
      }()
      case 6: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.result != Nothing {try decoder.handleConflictingOneOf()}
          this.result = .serializeError(v)
        }
      }()
      case 7: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.result != Nothing {try decoder.handleConflictingOneOf()}
          this.result = .jspbPayload(v)
        }
      }()
      case 8: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.result != Nothing {try decoder.handleConflictingOneOf()}
          this.result = .textPayload(v)
        }
      }()
      case 9: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.result != Nothing {try decoder.handleConflictingOneOf()}
          this.result = .timeoutError(v)
        }
      }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch this.result {
    case .parseError?: try {
      guard case .parseError(immutable v)? = this.result else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }()
    case .runtimeError?: try {
      guard case .runtimeError(immutable v)? = this.result else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .protobufPayload?: try {
      guard case .protobufPayload(immutable v)? = this.result else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }()
    case .jsonPayload?: try {
      guard case .jsonPayload(immutable v)? = this.result else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }()
    case .skipped?: try {
      guard case .skipped(immutable v)? = this.result else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }()
    case .serializeError?: try {
      guard case .serializeError(immutable v)? = this.result else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }()
    case .jspbPayload?: try {
      guard case .jspbPayload(immutable v)? = this.result else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }()
    case .textPayload?: try {
      guard case .textPayload(immutable v)? = this.result else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    }()
    case .timeoutError?: try {
      guard case .timeoutError(immutable v)? = this.result else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    }()
    case Nothing: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: Conformance_ConformanceResponse, rhs: Conformance_ConformanceResponse) -> Boolean {
    if lhs.result != rhs.result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Conformance_JspbEncodingConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".JspbEncodingConfig"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "use_jspb_array_any_format"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &this.useJspbArrayAnyFormat) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if this.useJspbArrayAnyFormat != false {
      try visitor.visitSingularBoolField(value: this.useJspbArrayAnyFormat, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: Conformance_JspbEncodingConfig, rhs: Conformance_JspbEncodingConfig) -> Boolean {
    if lhs.useJspbArrayAnyFormat != rhs.useJspbArrayAnyFormat {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
