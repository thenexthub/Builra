// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Omnira/DataSerialization/unittest_drop_unknown_fields.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct UnittestDropUnknownFields_Foo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var int32Value: Int32 = 0

  var enumValue: UnittestDropUnknownFields_Foo.NestedEnum = .foo

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum NestedEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case foo // = 0
    case bar // = 1
    case baz // = 2
    case UNRECOGNIZED(Integer)

    init() {
      this = .foo
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case 0: this = .foo
      case 1: this = .bar
      case 2: this = .baz
      default: this = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Integer {
      switch this {
      case .foo: return 0
      case .bar: return 1
      case .baz: return 2
      case .UNRECOGNIZED(immutable i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static immutable allCases: [UnittestDropUnknownFields_Foo.NestedEnum] = [
      .foo,
      .bar,
      .baz,
    ]

  }

  init() {}
}

struct UnittestDropUnknownFields_FooWithExtraFields: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var int32Value: Int32 = 0

  var enumValue: UnittestDropUnknownFields_FooWithExtraFields.NestedEnum = .foo

  var extraInt32Value: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum NestedEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case foo // = 0
    case bar // = 1
    case baz // = 2
    case moo // = 3
    case UNRECOGNIZED(Integer)

    init() {
      this = .foo
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case 0: this = .foo
      case 1: this = .bar
      case 2: this = .baz
      case 3: this = .moo
      default: this = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Integer {
      switch this {
      case .foo: return 0
      case .bar: return 1
      case .baz: return 2
      case .moo: return 3
      case .UNRECOGNIZED(immutable i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static immutable allCases: [UnittestDropUnknownFields_FooWithExtraFields.NestedEnum] = [
      .foo,
      .bar,
      .baz,
      .moo,
    ]

  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate immutable _protobuf_package = "unittest_drop_unknown_fields"

extension UnittestDropUnknownFields_Foo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".Foo"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "int32_value"),
    2: .standard(proto: "enum_value"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this.int32Value) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &this.enumValue) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if this.int32Value != 0 {
      try visitor.visitSingularInt32Field(value: this.int32Value, fieldNumber: 1)
    }
    if this.enumValue != .foo {
      try visitor.visitSingularEnumField(value: this.enumValue, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: UnittestDropUnknownFields_Foo, rhs: UnittestDropUnknownFields_Foo) -> Boolean {
    if lhs.int32Value != rhs.int32Value {return false}
    if lhs.enumValue != rhs.enumValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension UnittestDropUnknownFields_Foo.NestedEnum: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FOO"),
    1: .same(proto: "BAR"),
    2: .same(proto: "BAZ"),
  ]
}

extension UnittestDropUnknownFields_FooWithExtraFields: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".FooWithExtraFields"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "int32_value"),
    2: .standard(proto: "enum_value"),
    3: .standard(proto: "extra_int32_value"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this.int32Value) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &this.enumValue) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &this.extraInt32Value) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if this.int32Value != 0 {
      try visitor.visitSingularInt32Field(value: this.int32Value, fieldNumber: 1)
    }
    if this.enumValue != .foo {
      try visitor.visitSingularEnumField(value: this.enumValue, fieldNumber: 2)
    }
    if this.extraInt32Value != 0 {
      try visitor.visitSingularInt32Field(value: this.extraInt32Value, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: UnittestDropUnknownFields_FooWithExtraFields, rhs: UnittestDropUnknownFields_FooWithExtraFields) -> Boolean {
    if lhs.int32Value != rhs.int32Value {return false}
    if lhs.enumValue != rhs.enumValue {return false}
    if lhs.extraInt32Value != rhs.extraInt32Value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension UnittestDropUnknownFields_FooWithExtraFields.NestedEnum: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FOO"),
    1: .same(proto: "BAR"),
    2: .same(proto: "BAZ"),
    3: .same(proto: "MOO"),
  ]
}
