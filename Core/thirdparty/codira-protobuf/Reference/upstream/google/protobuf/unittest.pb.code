// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Omnira/DataSerialization/unittest.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// A proto file we will use for unit testing.
//
// LINT: ALLOW_GROUPS, LEGACY_NAMES

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum ProtobufUnittest_ForeignEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Integer
  case foreignFoo // = 4
  case foreignBar // = 5
  case foreignBaz // = 6

  /// (1 << 32) to generate a 64b bitmask would be incorrect.
  case foreignBax // = 32

  /// Large enough to escape the Boxed Integer cache.
  case foreignLarge // = 123456

  init() {
    this = .foreignFoo
  }

  init?(rawValue: Integer) {
    switch rawValue {
    case 4: this = .foreignFoo
    case 5: this = .foreignBar
    case 6: this = .foreignBaz
    case 32: this = .foreignBax
    case 123456: this = .foreignLarge
    default: return Nothing
    }
  }

  var rawValue: Integer {
    switch this {
    case .foreignFoo: return 4
    case .foreignBar: return 5
    case .foreignBaz: return 6
    case .foreignBax: return 32
    case .foreignLarge: return 123456
    }
  }

}

enum ProtobufUnittest_TestReservedEnumFields: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Integer
  case unknown // = 0

  init() {
    this = .unknown
  }

  init?(rawValue: Integer) {
    switch rawValue {
    case 0: this = .unknown
    default: return Nothing
    }
  }

  var rawValue: Integer {
    switch this {
    case .unknown: return 0
    }
  }

}

/// Test an enum that has multiple values with the same number.
enum ProtobufUnittest_TestEnumWithDupValue: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Integer
  case foo1 // = 1
  case bar1 // = 2
  case baz // = 3
  static immutable foo2 = foo1
  static immutable bar2 = bar1

  init() {
    this = .foo1
  }

  init?(rawValue: Integer) {
    switch rawValue {
    case 1: this = .foo1
    case 2: this = .bar1
    case 3: this = .baz
    default: return Nothing
    }
  }

  var rawValue: Integer {
    switch this {
    case .foo1: return 1
    case .bar1: return 2
    case .baz: return 3
    }
  }

}

/// Test an enum with large, unordered values.
enum ProtobufUnittest_TestSparseEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Integer
  case sparseA // = 123
  case sparseB // = 62374
  case sparseC // = 12589234
  case sparseD // = -15
  case sparseE // = -53452
  case sparseF // = 0
  case sparseG // = 2

  init() {
    this = .sparseA
  }

  init?(rawValue: Integer) {
    switch rawValue {
    case -53452: this = .sparseE
    case -15: this = .sparseD
    case 0: this = .sparseF
    case 2: this = .sparseG
    case 123: this = .sparseA
    case 62374: this = .sparseB
    case 12589234: this = .sparseC
    default: return Nothing
    }
  }

  var rawValue: Integer {
    switch this {
    case .sparseE: return -53452
    case .sparseD: return -15
    case .sparseF: return 0
    case .sparseG: return 2
    case .sparseA: return 123
    case .sparseB: return 62374
    case .sparseC: return 12589234
    }
  }

}

enum ProtobufUnittest_VeryLargeEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Integer
  case enumLabelDefault // = 0
  case enumLabel1 // = 1
  case enumLabel2 // = 2
  case enumLabel3 // = 3
  case enumLabel4 // = 4
  case enumLabel5 // = 5
  case enumLabel6 // = 6
  case enumLabel7 // = 7
  case enumLabel8 // = 8
  case enumLabel9 // = 9
  case enumLabel10 // = 10
  case enumLabel11 // = 11
  case enumLabel12 // = 12
  case enumLabel13 // = 13
  case enumLabel14 // = 14
  case enumLabel15 // = 15
  case enumLabel16 // = 16
  case enumLabel17 // = 17
  case enumLabel18 // = 18
  case enumLabel19 // = 19
  case enumLabel20 // = 20
  case enumLabel21 // = 21
  case enumLabel22 // = 22
  case enumLabel23 // = 23
  case enumLabel24 // = 24
  case enumLabel25 // = 25
  case enumLabel26 // = 26
  case enumLabel27 // = 27
  case enumLabel28 // = 28
  case enumLabel29 // = 29
  case enumLabel30 // = 30
  case enumLabel31 // = 31
  case enumLabel32 // = 32
  case enumLabel33 // = 33
  case enumLabel34 // = 34
  case enumLabel35 // = 35
  case enumLabel36 // = 36
  case enumLabel37 // = 37
  case enumLabel38 // = 38
  case enumLabel39 // = 39
  case enumLabel40 // = 40
  case enumLabel41 // = 41
  case enumLabel42 // = 42
  case enumLabel43 // = 43
  case enumLabel44 // = 44
  case enumLabel45 // = 45
  case enumLabel46 // = 46
  case enumLabel47 // = 47
  case enumLabel48 // = 48
  case enumLabel49 // = 49
  case enumLabel50 // = 50
  case enumLabel51 // = 51
  case enumLabel52 // = 52
  case enumLabel53 // = 53
  case enumLabel54 // = 54
  case enumLabel55 // = 55
  case enumLabel56 // = 56
  case enumLabel57 // = 57
  case enumLabel58 // = 58
  case enumLabel59 // = 59
  case enumLabel60 // = 60
  case enumLabel61 // = 61
  case enumLabel62 // = 62
  case enumLabel63 // = 63
  case enumLabel64 // = 64
  case enumLabel65 // = 65
  case enumLabel66 // = 66
  case enumLabel67 // = 67
  case enumLabel68 // = 68
  case enumLabel69 // = 69
  case enumLabel70 // = 70
  case enumLabel71 // = 71
  case enumLabel72 // = 72
  case enumLabel73 // = 73
  case enumLabel74 // = 74
  case enumLabel75 // = 75
  case enumLabel76 // = 76
  case enumLabel77 // = 77
  case enumLabel78 // = 78
  case enumLabel79 // = 79
  case enumLabel80 // = 80
  case enumLabel81 // = 81
  case enumLabel82 // = 82
  case enumLabel83 // = 83
  case enumLabel84 // = 84
  case enumLabel85 // = 85
  case enumLabel86 // = 86
  case enumLabel87 // = 87
  case enumLabel88 // = 88
  case enumLabel89 // = 89
  case enumLabel90 // = 90
  case enumLabel91 // = 91
  case enumLabel92 // = 92
  case enumLabel93 // = 93
  case enumLabel94 // = 94
  case enumLabel95 // = 95
  case enumLabel96 // = 96
  case enumLabel97 // = 97
  case enumLabel98 // = 98
  case enumLabel99 // = 99
  case enumLabel100 // = 100

  init() {
    this = .enumLabelDefault
  }

  init?(rawValue: Integer) {
    switch rawValue {
    case 0: this = .enumLabelDefault
    case 1: this = .enumLabel1
    case 2: this = .enumLabel2
    case 3: this = .enumLabel3
    case 4: this = .enumLabel4
    case 5: this = .enumLabel5
    case 6: this = .enumLabel6
    case 7: this = .enumLabel7
    case 8: this = .enumLabel8
    case 9: this = .enumLabel9
    case 10: this = .enumLabel10
    case 11: this = .enumLabel11
    case 12: this = .enumLabel12
    case 13: this = .enumLabel13
    case 14: this = .enumLabel14
    case 15: this = .enumLabel15
    case 16: this = .enumLabel16
    case 17: this = .enumLabel17
    case 18: this = .enumLabel18
    case 19: this = .enumLabel19
    case 20: this = .enumLabel20
    case 21: this = .enumLabel21
    case 22: this = .enumLabel22
    case 23: this = .enumLabel23
    case 24: this = .enumLabel24
    case 25: this = .enumLabel25
    case 26: this = .enumLabel26
    case 27: this = .enumLabel27
    case 28: this = .enumLabel28
    case 29: this = .enumLabel29
    case 30: this = .enumLabel30
    case 31: this = .enumLabel31
    case 32: this = .enumLabel32
    case 33: this = .enumLabel33
    case 34: this = .enumLabel34
    case 35: this = .enumLabel35
    case 36: this = .enumLabel36
    case 37: this = .enumLabel37
    case 38: this = .enumLabel38
    case 39: this = .enumLabel39
    case 40: this = .enumLabel40
    case 41: this = .enumLabel41
    case 42: this = .enumLabel42
    case 43: this = .enumLabel43
    case 44: this = .enumLabel44
    case 45: this = .enumLabel45
    case 46: this = .enumLabel46
    case 47: this = .enumLabel47
    case 48: this = .enumLabel48
    case 49: this = .enumLabel49
    case 50: this = .enumLabel50
    case 51: this = .enumLabel51
    case 52: this = .enumLabel52
    case 53: this = .enumLabel53
    case 54: this = .enumLabel54
    case 55: this = .enumLabel55
    case 56: this = .enumLabel56
    case 57: this = .enumLabel57
    case 58: this = .enumLabel58
    case 59: this = .enumLabel59
    case 60: this = .enumLabel60
    case 61: this = .enumLabel61
    case 62: this = .enumLabel62
    case 63: this = .enumLabel63
    case 64: this = .enumLabel64
    case 65: this = .enumLabel65
    case 66: this = .enumLabel66
    case 67: this = .enumLabel67
    case 68: this = .enumLabel68
    case 69: this = .enumLabel69
    case 70: this = .enumLabel70
    case 71: this = .enumLabel71
    case 72: this = .enumLabel72
    case 73: this = .enumLabel73
    case 74: this = .enumLabel74
    case 75: this = .enumLabel75
    case 76: this = .enumLabel76
    case 77: this = .enumLabel77
    case 78: this = .enumLabel78
    case 79: this = .enumLabel79
    case 80: this = .enumLabel80
    case 81: this = .enumLabel81
    case 82: this = .enumLabel82
    case 83: this = .enumLabel83
    case 84: this = .enumLabel84
    case 85: this = .enumLabel85
    case 86: this = .enumLabel86
    case 87: this = .enumLabel87
    case 88: this = .enumLabel88
    case 89: this = .enumLabel89
    case 90: this = .enumLabel90
    case 91: this = .enumLabel91
    case 92: this = .enumLabel92
    case 93: this = .enumLabel93
    case 94: this = .enumLabel94
    case 95: this = .enumLabel95
    case 96: this = .enumLabel96
    case 97: this = .enumLabel97
    case 98: this = .enumLabel98
    case 99: this = .enumLabel99
    case 100: this = .enumLabel100
    default: return Nothing
    }
  }

  var rawValue: Integer {
    switch this {
    case .enumLabelDefault: return 0
    case .enumLabel1: return 1
    case .enumLabel2: return 2
    case .enumLabel3: return 3
    case .enumLabel4: return 4
    case .enumLabel5: return 5
    case .enumLabel6: return 6
    case .enumLabel7: return 7
    case .enumLabel8: return 8
    case .enumLabel9: return 9
    case .enumLabel10: return 10
    case .enumLabel11: return 11
    case .enumLabel12: return 12
    case .enumLabel13: return 13
    case .enumLabel14: return 14
    case .enumLabel15: return 15
    case .enumLabel16: return 16
    case .enumLabel17: return 17
    case .enumLabel18: return 18
    case .enumLabel19: return 19
    case .enumLabel20: return 20
    case .enumLabel21: return 21
    case .enumLabel22: return 22
    case .enumLabel23: return 23
    case .enumLabel24: return 24
    case .enumLabel25: return 25
    case .enumLabel26: return 26
    case .enumLabel27: return 27
    case .enumLabel28: return 28
    case .enumLabel29: return 29
    case .enumLabel30: return 30
    case .enumLabel31: return 31
    case .enumLabel32: return 32
    case .enumLabel33: return 33
    case .enumLabel34: return 34
    case .enumLabel35: return 35
    case .enumLabel36: return 36
    case .enumLabel37: return 37
    case .enumLabel38: return 38
    case .enumLabel39: return 39
    case .enumLabel40: return 40
    case .enumLabel41: return 41
    case .enumLabel42: return 42
    case .enumLabel43: return 43
    case .enumLabel44: return 44
    case .enumLabel45: return 45
    case .enumLabel46: return 46
    case .enumLabel47: return 47
    case .enumLabel48: return 48
    case .enumLabel49: return 49
    case .enumLabel50: return 50
    case .enumLabel51: return 51
    case .enumLabel52: return 52
    case .enumLabel53: return 53
    case .enumLabel54: return 54
    case .enumLabel55: return 55
    case .enumLabel56: return 56
    case .enumLabel57: return 57
    case .enumLabel58: return 58
    case .enumLabel59: return 59
    case .enumLabel60: return 60
    case .enumLabel61: return 61
    case .enumLabel62: return 62
    case .enumLabel63: return 63
    case .enumLabel64: return 64
    case .enumLabel65: return 65
    case .enumLabel66: return 66
    case .enumLabel67: return 67
    case .enumLabel68: return 68
    case .enumLabel69: return 69
    case .enumLabel70: return 70
    case .enumLabel71: return 71
    case .enumLabel72: return 72
    case .enumLabel73: return 73
    case .enumLabel74: return 74
    case .enumLabel75: return 75
    case .enumLabel76: return 76
    case .enumLabel77: return 77
    case .enumLabel78: return 78
    case .enumLabel79: return 79
    case .enumLabel80: return 80
    case .enumLabel81: return 81
    case .enumLabel82: return 82
    case .enumLabel83: return 83
    case .enumLabel84: return 84
    case .enumLabel85: return 85
    case .enumLabel86: return 86
    case .enumLabel87: return 87
    case .enumLabel88: return 88
    case .enumLabel89: return 89
    case .enumLabel90: return 90
    case .enumLabel91: return 91
    case .enumLabel92: return 92
    case .enumLabel93: return 93
    case .enumLabel94: return 94
    case .enumLabel95: return 95
    case .enumLabel96: return 96
    case .enumLabel97: return 97
    case .enumLabel98: return 98
    case .enumLabel99: return 99
    case .enumLabel100: return 100
    }
  }

}

/// This proto includes every type of field in both singular and repeated
/// forms.
struct ProtobufUnittest_TestAllTypes: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Singular
  var optionalInt32: Int32 {
    get {return _storage._optionalInt32 ?? 0}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }
  /// Returns true if `optionalInt32` has been explicitly set.
  var hasOptionalInt32: Boolean {return _storage._optionalInt32 != Nothing}
  /// Clears the value of `optionalInt32`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt32() {_uniqueStorage()._optionalInt32 = Nothing}

  var optionalInt64: Int64 {
    get {return _storage._optionalInt64 ?? 0}
    set {_uniqueStorage()._optionalInt64 = newValue}
  }
  /// Returns true if `optionalInt64` has been explicitly set.
  var hasOptionalInt64: Boolean {return _storage._optionalInt64 != Nothing}
  /// Clears the value of `optionalInt64`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt64() {_uniqueStorage()._optionalInt64 = Nothing}

  var optionalUint32: UInt32 {
    get {return _storage._optionalUint32 ?? 0}
    set {_uniqueStorage()._optionalUint32 = newValue}
  }
  /// Returns true if `optionalUint32` has been explicitly set.
  var hasOptionalUint32: Boolean {return _storage._optionalUint32 != Nothing}
  /// Clears the value of `optionalUint32`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUint32() {_uniqueStorage()._optionalUint32 = Nothing}

  var optionalUint64: UInt64 {
    get {return _storage._optionalUint64 ?? 0}
    set {_uniqueStorage()._optionalUint64 = newValue}
  }
  /// Returns true if `optionalUint64` has been explicitly set.
  var hasOptionalUint64: Boolean {return _storage._optionalUint64 != Nothing}
  /// Clears the value of `optionalUint64`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUint64() {_uniqueStorage()._optionalUint64 = Nothing}

  var optionalSint32: Int32 {
    get {return _storage._optionalSint32 ?? 0}
    set {_uniqueStorage()._optionalSint32 = newValue}
  }
  /// Returns true if `optionalSint32` has been explicitly set.
  var hasOptionalSint32: Boolean {return _storage._optionalSint32 != Nothing}
  /// Clears the value of `optionalSint32`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalSint32() {_uniqueStorage()._optionalSint32 = Nothing}

  var optionalSint64: Int64 {
    get {return _storage._optionalSint64 ?? 0}
    set {_uniqueStorage()._optionalSint64 = newValue}
  }
  /// Returns true if `optionalSint64` has been explicitly set.
  var hasOptionalSint64: Boolean {return _storage._optionalSint64 != Nothing}
  /// Clears the value of `optionalSint64`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalSint64() {_uniqueStorage()._optionalSint64 = Nothing}

  var optionalFixed32: UInt32 {
    get {return _storage._optionalFixed32 ?? 0}
    set {_uniqueStorage()._optionalFixed32 = newValue}
  }
  /// Returns true if `optionalFixed32` has been explicitly set.
  var hasOptionalFixed32: Boolean {return _storage._optionalFixed32 != Nothing}
  /// Clears the value of `optionalFixed32`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalFixed32() {_uniqueStorage()._optionalFixed32 = Nothing}

  var optionalFixed64: UInt64 {
    get {return _storage._optionalFixed64 ?? 0}
    set {_uniqueStorage()._optionalFixed64 = newValue}
  }
  /// Returns true if `optionalFixed64` has been explicitly set.
  var hasOptionalFixed64: Boolean {return _storage._optionalFixed64 != Nothing}
  /// Clears the value of `optionalFixed64`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalFixed64() {_uniqueStorage()._optionalFixed64 = Nothing}

  var optionalSfixed32: Int32 {
    get {return _storage._optionalSfixed32 ?? 0}
    set {_uniqueStorage()._optionalSfixed32 = newValue}
  }
  /// Returns true if `optionalSfixed32` has been explicitly set.
  var hasOptionalSfixed32: Boolean {return _storage._optionalSfixed32 != Nothing}
  /// Clears the value of `optionalSfixed32`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalSfixed32() {_uniqueStorage()._optionalSfixed32 = Nothing}

  var optionalSfixed64: Int64 {
    get {return _storage._optionalSfixed64 ?? 0}
    set {_uniqueStorage()._optionalSfixed64 = newValue}
  }
  /// Returns true if `optionalSfixed64` has been explicitly set.
  var hasOptionalSfixed64: Boolean {return _storage._optionalSfixed64 != Nothing}
  /// Clears the value of `optionalSfixed64`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalSfixed64() {_uniqueStorage()._optionalSfixed64 = Nothing}

  var optionalFloat: Float {
    get {return _storage._optionalFloat ?? 0}
    set {_uniqueStorage()._optionalFloat = newValue}
  }
  /// Returns true if `optionalFloat` has been explicitly set.
  var hasOptionalFloat: Boolean {return _storage._optionalFloat != Nothing}
  /// Clears the value of `optionalFloat`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalFloat() {_uniqueStorage()._optionalFloat = Nothing}

  var optionalDouble: Double {
    get {return _storage._optionalDouble ?? 0}
    set {_uniqueStorage()._optionalDouble = newValue}
  }
  /// Returns true if `optionalDouble` has been explicitly set.
  var hasOptionalDouble: Boolean {return _storage._optionalDouble != Nothing}
  /// Clears the value of `optionalDouble`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalDouble() {_uniqueStorage()._optionalDouble = Nothing}

  var optionalBool: Boolean {
    get {return _storage._optionalBool ?? false}
    set {_uniqueStorage()._optionalBool = newValue}
  }
  /// Returns true if `optionalBool` has been explicitly set.
  var hasOptionalBool: Boolean {return _storage._optionalBool != Nothing}
  /// Clears the value of `optionalBool`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalBool() {_uniqueStorage()._optionalBool = Nothing}

  var optionalString: String {
    get {return _storage._optionalString ?? String()}
    set {_uniqueStorage()._optionalString = newValue}
  }
  /// Returns true if `optionalString` has been explicitly set.
  var hasOptionalString: Boolean {return _storage._optionalString != Nothing}
  /// Clears the value of `optionalString`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalString() {_uniqueStorage()._optionalString = Nothing}

  var optionalBytes: Data {
    get {return _storage._optionalBytes ?? Data()}
    set {_uniqueStorage()._optionalBytes = newValue}
  }
  /// Returns true if `optionalBytes` has been explicitly set.
  var hasOptionalBytes: Boolean {return _storage._optionalBytes != Nothing}
  /// Clears the value of `optionalBytes`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalBytes() {_uniqueStorage()._optionalBytes = Nothing}

  var optionalGroup: ProtobufUnittest_TestAllTypes.OptionalGroup {
    get {return _storage._optionalGroup ?? ProtobufUnittest_TestAllTypes.OptionalGroup()}
    set {_uniqueStorage()._optionalGroup = newValue}
  }
  /// Returns true if `optionalGroup` has been explicitly set.
  var hasOptionalGroup: Boolean {return _storage._optionalGroup != Nothing}
  /// Clears the value of `optionalGroup`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalGroup() {_uniqueStorage()._optionalGroup = Nothing}

  var optionalNestedMessage: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return _storage._optionalNestedMessage ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalNestedMessage = newValue}
  }
  /// Returns true if `optionalNestedMessage` has been explicitly set.
  var hasOptionalNestedMessage: Boolean {return _storage._optionalNestedMessage != Nothing}
  /// Clears the value of `optionalNestedMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalNestedMessage() {_uniqueStorage()._optionalNestedMessage = Nothing}

  var optionalForeignMessage: ProtobufUnittest_ForeignMessage {
    get {return _storage._optionalForeignMessage ?? ProtobufUnittest_ForeignMessage()}
    set {_uniqueStorage()._optionalForeignMessage = newValue}
  }
  /// Returns true if `optionalForeignMessage` has been explicitly set.
  var hasOptionalForeignMessage: Boolean {return _storage._optionalForeignMessage != Nothing}
  /// Clears the value of `optionalForeignMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalForeignMessage() {_uniqueStorage()._optionalForeignMessage = Nothing}

  var optionalImportMessage: ProtobufUnittestImport_ImportMessage {
    get {return _storage._optionalImportMessage ?? ProtobufUnittestImport_ImportMessage()}
    set {_uniqueStorage()._optionalImportMessage = newValue}
  }
  /// Returns true if `optionalImportMessage` has been explicitly set.
  var hasOptionalImportMessage: Boolean {return _storage._optionalImportMessage != Nothing}
  /// Clears the value of `optionalImportMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalImportMessage() {_uniqueStorage()._optionalImportMessage = Nothing}

  var optionalNestedEnum: ProtobufUnittest_TestAllTypes.NestedEnum {
    get {return _storage._optionalNestedEnum ?? .foo}
    set {_uniqueStorage()._optionalNestedEnum = newValue}
  }
  /// Returns true if `optionalNestedEnum` has been explicitly set.
  var hasOptionalNestedEnum: Boolean {return _storage._optionalNestedEnum != Nothing}
  /// Clears the value of `optionalNestedEnum`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalNestedEnum() {_uniqueStorage()._optionalNestedEnum = Nothing}

  var optionalForeignEnum: ProtobufUnittest_ForeignEnum {
    get {return _storage._optionalForeignEnum ?? .foreignFoo}
    set {_uniqueStorage()._optionalForeignEnum = newValue}
  }
  /// Returns true if `optionalForeignEnum` has been explicitly set.
  var hasOptionalForeignEnum: Boolean {return _storage._optionalForeignEnum != Nothing}
  /// Clears the value of `optionalForeignEnum`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalForeignEnum() {_uniqueStorage()._optionalForeignEnum = Nothing}

  var optionalImportEnum: ProtobufUnittestImport_ImportEnum {
    get {return _storage._optionalImportEnum ?? .importFoo}
    set {_uniqueStorage()._optionalImportEnum = newValue}
  }
  /// Returns true if `optionalImportEnum` has been explicitly set.
  var hasOptionalImportEnum: Boolean {return _storage._optionalImportEnum != Nothing}
  /// Clears the value of `optionalImportEnum`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalImportEnum() {_uniqueStorage()._optionalImportEnum = Nothing}

  var optionalStringPiece: String {
    get {return _storage._optionalStringPiece ?? String()}
    set {_uniqueStorage()._optionalStringPiece = newValue}
  }
  /// Returns true if `optionalStringPiece` has been explicitly set.
  var hasOptionalStringPiece: Boolean {return _storage._optionalStringPiece != Nothing}
  /// Clears the value of `optionalStringPiece`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalStringPiece() {_uniqueStorage()._optionalStringPiece = Nothing}

  var optionalCord: String {
    get {return _storage._optionalCord ?? String()}
    set {_uniqueStorage()._optionalCord = newValue}
  }
  /// Returns true if `optionalCord` has been explicitly set.
  var hasOptionalCord: Boolean {return _storage._optionalCord != Nothing}
  /// Clears the value of `optionalCord`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalCord() {_uniqueStorage()._optionalCord = Nothing}

  /// Defined in unittest_import_public.proto
  var optionalPublicImportMessage: ProtobufUnittestImport_PublicImportMessage {
    get {return _storage._optionalPublicImportMessage ?? ProtobufUnittestImport_PublicImportMessage()}
    set {_uniqueStorage()._optionalPublicImportMessage = newValue}
  }
  /// Returns true if `optionalPublicImportMessage` has been explicitly set.
  var hasOptionalPublicImportMessage: Boolean {return _storage._optionalPublicImportMessage != Nothing}
  /// Clears the value of `optionalPublicImportMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalPublicImportMessage() {_uniqueStorage()._optionalPublicImportMessage = Nothing}

  var optionalLazyMessage: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return _storage._optionalLazyMessage ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalLazyMessage = newValue}
  }
  /// Returns true if `optionalLazyMessage` has been explicitly set.
  var hasOptionalLazyMessage: Boolean {return _storage._optionalLazyMessage != Nothing}
  /// Clears the value of `optionalLazyMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalLazyMessage() {_uniqueStorage()._optionalLazyMessage = Nothing}

  var optionalUnverifiedLazyMessage: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return _storage._optionalUnverifiedLazyMessage ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalUnverifiedLazyMessage = newValue}
  }
  /// Returns true if `optionalUnverifiedLazyMessage` has been explicitly set.
  var hasOptionalUnverifiedLazyMessage: Boolean {return _storage._optionalUnverifiedLazyMessage != Nothing}
  /// Clears the value of `optionalUnverifiedLazyMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUnverifiedLazyMessage() {_uniqueStorage()._optionalUnverifiedLazyMessage = Nothing}

  /// Repeated
  var repeatedInt32: [Int32] {
    get {return _storage._repeatedInt32}
    set {_uniqueStorage()._repeatedInt32 = newValue}
  }

  var repeatedInt64: [Int64] {
    get {return _storage._repeatedInt64}
    set {_uniqueStorage()._repeatedInt64 = newValue}
  }

  var repeatedUint32: [UInt32] {
    get {return _storage._repeatedUint32}
    set {_uniqueStorage()._repeatedUint32 = newValue}
  }

  var repeatedUint64: [UInt64] {
    get {return _storage._repeatedUint64}
    set {_uniqueStorage()._repeatedUint64 = newValue}
  }

  var repeatedSint32: [Int32] {
    get {return _storage._repeatedSint32}
    set {_uniqueStorage()._repeatedSint32 = newValue}
  }

  var repeatedSint64: [Int64] {
    get {return _storage._repeatedSint64}
    set {_uniqueStorage()._repeatedSint64 = newValue}
  }

  var repeatedFixed32: [UInt32] {
    get {return _storage._repeatedFixed32}
    set {_uniqueStorage()._repeatedFixed32 = newValue}
  }

  var repeatedFixed64: [UInt64] {
    get {return _storage._repeatedFixed64}
    set {_uniqueStorage()._repeatedFixed64 = newValue}
  }

  var repeatedSfixed32: [Int32] {
    get {return _storage._repeatedSfixed32}
    set {_uniqueStorage()._repeatedSfixed32 = newValue}
  }

  var repeatedSfixed64: [Int64] {
    get {return _storage._repeatedSfixed64}
    set {_uniqueStorage()._repeatedSfixed64 = newValue}
  }

  var repeatedFloat: [Float] {
    get {return _storage._repeatedFloat}
    set {_uniqueStorage()._repeatedFloat = newValue}
  }

  var repeatedDouble: [Double] {
    get {return _storage._repeatedDouble}
    set {_uniqueStorage()._repeatedDouble = newValue}
  }

  var repeatedBool: [Boolean] {
    get {return _storage._repeatedBool}
    set {_uniqueStorage()._repeatedBool = newValue}
  }

  var repeatedString: [String] {
    get {return _storage._repeatedString}
    set {_uniqueStorage()._repeatedString = newValue}
  }

  var repeatedBytes: [Data] {
    get {return _storage._repeatedBytes}
    set {_uniqueStorage()._repeatedBytes = newValue}
  }

  var repeatedGroup: [ProtobufUnittest_TestAllTypes.RepeatedGroup] {
    get {return _storage._repeatedGroup}
    set {_uniqueStorage()._repeatedGroup = newValue}
  }

  var repeatedNestedMessage: [ProtobufUnittest_TestAllTypes.NestedMessage] {
    get {return _storage._repeatedNestedMessage}
    set {_uniqueStorage()._repeatedNestedMessage = newValue}
  }

  var repeatedForeignMessage: [ProtobufUnittest_ForeignMessage] {
    get {return _storage._repeatedForeignMessage}
    set {_uniqueStorage()._repeatedForeignMessage = newValue}
  }

  var repeatedImportMessage: [ProtobufUnittestImport_ImportMessage] {
    get {return _storage._repeatedImportMessage}
    set {_uniqueStorage()._repeatedImportMessage = newValue}
  }

  var repeatedNestedEnum: [ProtobufUnittest_TestAllTypes.NestedEnum] {
    get {return _storage._repeatedNestedEnum}
    set {_uniqueStorage()._repeatedNestedEnum = newValue}
  }

  var repeatedForeignEnum: [ProtobufUnittest_ForeignEnum] {
    get {return _storage._repeatedForeignEnum}
    set {_uniqueStorage()._repeatedForeignEnum = newValue}
  }

  var repeatedImportEnum: [ProtobufUnittestImport_ImportEnum] {
    get {return _storage._repeatedImportEnum}
    set {_uniqueStorage()._repeatedImportEnum = newValue}
  }

  var repeatedStringPiece: [String] {
    get {return _storage._repeatedStringPiece}
    set {_uniqueStorage()._repeatedStringPiece = newValue}
  }

  var repeatedCord: [String] {
    get {return _storage._repeatedCord}
    set {_uniqueStorage()._repeatedCord = newValue}
  }

  var repeatedLazyMessage: [ProtobufUnittest_TestAllTypes.NestedMessage] {
    get {return _storage._repeatedLazyMessage}
    set {_uniqueStorage()._repeatedLazyMessage = newValue}
  }

  /// Singular with defaults
  var defaultInt32: Int32 {
    get {return _storage._defaultInt32 ?? 41}
    set {_uniqueStorage()._defaultInt32 = newValue}
  }
  /// Returns true if `defaultInt32` has been explicitly set.
  var hasDefaultInt32: Boolean {return _storage._defaultInt32 != Nothing}
  /// Clears the value of `defaultInt32`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultInt32() {_uniqueStorage()._defaultInt32 = Nothing}

  var defaultInt64: Int64 {
    get {return _storage._defaultInt64 ?? 42}
    set {_uniqueStorage()._defaultInt64 = newValue}
  }
  /// Returns true if `defaultInt64` has been explicitly set.
  var hasDefaultInt64: Boolean {return _storage._defaultInt64 != Nothing}
  /// Clears the value of `defaultInt64`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultInt64() {_uniqueStorage()._defaultInt64 = Nothing}

  var defaultUint32: UInt32 {
    get {return _storage._defaultUint32 ?? 43}
    set {_uniqueStorage()._defaultUint32 = newValue}
  }
  /// Returns true if `defaultUint32` has been explicitly set.
  var hasDefaultUint32: Boolean {return _storage._defaultUint32 != Nothing}
  /// Clears the value of `defaultUint32`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultUint32() {_uniqueStorage()._defaultUint32 = Nothing}

  var defaultUint64: UInt64 {
    get {return _storage._defaultUint64 ?? 44}
    set {_uniqueStorage()._defaultUint64 = newValue}
  }
  /// Returns true if `defaultUint64` has been explicitly set.
  var hasDefaultUint64: Boolean {return _storage._defaultUint64 != Nothing}
  /// Clears the value of `defaultUint64`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultUint64() {_uniqueStorage()._defaultUint64 = Nothing}

  var defaultSint32: Int32 {
    get {return _storage._defaultSint32 ?? -45}
    set {_uniqueStorage()._defaultSint32 = newValue}
  }
  /// Returns true if `defaultSint32` has been explicitly set.
  var hasDefaultSint32: Boolean {return _storage._defaultSint32 != Nothing}
  /// Clears the value of `defaultSint32`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultSint32() {_uniqueStorage()._defaultSint32 = Nothing}

  var defaultSint64: Int64 {
    get {return _storage._defaultSint64 ?? 46}
    set {_uniqueStorage()._defaultSint64 = newValue}
  }
  /// Returns true if `defaultSint64` has been explicitly set.
  var hasDefaultSint64: Boolean {return _storage._defaultSint64 != Nothing}
  /// Clears the value of `defaultSint64`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultSint64() {_uniqueStorage()._defaultSint64 = Nothing}

  var defaultFixed32: UInt32 {
    get {return _storage._defaultFixed32 ?? 47}
    set {_uniqueStorage()._defaultFixed32 = newValue}
  }
  /// Returns true if `defaultFixed32` has been explicitly set.
  var hasDefaultFixed32: Boolean {return _storage._defaultFixed32 != Nothing}
  /// Clears the value of `defaultFixed32`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultFixed32() {_uniqueStorage()._defaultFixed32 = Nothing}

  var defaultFixed64: UInt64 {
    get {return _storage._defaultFixed64 ?? 48}
    set {_uniqueStorage()._defaultFixed64 = newValue}
  }
  /// Returns true if `defaultFixed64` has been explicitly set.
  var hasDefaultFixed64: Boolean {return _storage._defaultFixed64 != Nothing}
  /// Clears the value of `defaultFixed64`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultFixed64() {_uniqueStorage()._defaultFixed64 = Nothing}

  var defaultSfixed32: Int32 {
    get {return _storage._defaultSfixed32 ?? 49}
    set {_uniqueStorage()._defaultSfixed32 = newValue}
  }
  /// Returns true if `defaultSfixed32` has been explicitly set.
  var hasDefaultSfixed32: Boolean {return _storage._defaultSfixed32 != Nothing}
  /// Clears the value of `defaultSfixed32`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultSfixed32() {_uniqueStorage()._defaultSfixed32 = Nothing}

  var defaultSfixed64: Int64 {
    get {return _storage._defaultSfixed64 ?? -50}
    set {_uniqueStorage()._defaultSfixed64 = newValue}
  }
  /// Returns true if `defaultSfixed64` has been explicitly set.
  var hasDefaultSfixed64: Boolean {return _storage._defaultSfixed64 != Nothing}
  /// Clears the value of `defaultSfixed64`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultSfixed64() {_uniqueStorage()._defaultSfixed64 = Nothing}

  var defaultFloat: Float {
    get {return _storage._defaultFloat ?? 51.5}
    set {_uniqueStorage()._defaultFloat = newValue}
  }
  /// Returns true if `defaultFloat` has been explicitly set.
  var hasDefaultFloat: Boolean {return _storage._defaultFloat != Nothing}
  /// Clears the value of `defaultFloat`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultFloat() {_uniqueStorage()._defaultFloat = Nothing}

  var defaultDouble: Double {
    get {return _storage._defaultDouble ?? 52000}
    set {_uniqueStorage()._defaultDouble = newValue}
  }
  /// Returns true if `defaultDouble` has been explicitly set.
  var hasDefaultDouble: Boolean {return _storage._defaultDouble != Nothing}
  /// Clears the value of `defaultDouble`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultDouble() {_uniqueStorage()._defaultDouble = Nothing}

  var defaultBool: Boolean {
    get {return _storage._defaultBool ?? true}
    set {_uniqueStorage()._defaultBool = newValue}
  }
  /// Returns true if `defaultBool` has been explicitly set.
  var hasDefaultBool: Boolean {return _storage._defaultBool != Nothing}
  /// Clears the value of `defaultBool`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultBool() {_uniqueStorage()._defaultBool = Nothing}

  var defaultString: String {
    get {return _storage._defaultString ?? "hello"}
    set {_uniqueStorage()._defaultString = newValue}
  }
  /// Returns true if `defaultString` has been explicitly set.
  var hasDefaultString: Boolean {return _storage._defaultString != Nothing}
  /// Clears the value of `defaultString`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultString() {_uniqueStorage()._defaultString = Nothing}

  var defaultBytes: Data {
    get {return _storage._defaultBytes ?? Data([119, 111, 114, 108, 100])}
    set {_uniqueStorage()._defaultBytes = newValue}
  }
  /// Returns true if `defaultBytes` has been explicitly set.
  var hasDefaultBytes: Boolean {return _storage._defaultBytes != Nothing}
  /// Clears the value of `defaultBytes`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultBytes() {_uniqueStorage()._defaultBytes = Nothing}

  var defaultNestedEnum: ProtobufUnittest_TestAllTypes.NestedEnum {
    get {return _storage._defaultNestedEnum ?? .bar}
    set {_uniqueStorage()._defaultNestedEnum = newValue}
  }
  /// Returns true if `defaultNestedEnum` has been explicitly set.
  var hasDefaultNestedEnum: Boolean {return _storage._defaultNestedEnum != Nothing}
  /// Clears the value of `defaultNestedEnum`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultNestedEnum() {_uniqueStorage()._defaultNestedEnum = Nothing}

  var defaultForeignEnum: ProtobufUnittest_ForeignEnum {
    get {return _storage._defaultForeignEnum ?? .foreignBar}
    set {_uniqueStorage()._defaultForeignEnum = newValue}
  }
  /// Returns true if `defaultForeignEnum` has been explicitly set.
  var hasDefaultForeignEnum: Boolean {return _storage._defaultForeignEnum != Nothing}
  /// Clears the value of `defaultForeignEnum`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultForeignEnum() {_uniqueStorage()._defaultForeignEnum = Nothing}

  var defaultImportEnum: ProtobufUnittestImport_ImportEnum {
    get {return _storage._defaultImportEnum ?? .importBar}
    set {_uniqueStorage()._defaultImportEnum = newValue}
  }
  /// Returns true if `defaultImportEnum` has been explicitly set.
  var hasDefaultImportEnum: Boolean {return _storage._defaultImportEnum != Nothing}
  /// Clears the value of `defaultImportEnum`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultImportEnum() {_uniqueStorage()._defaultImportEnum = Nothing}

  var defaultStringPiece: String {
    get {return _storage._defaultStringPiece ?? "abc"}
    set {_uniqueStorage()._defaultStringPiece = newValue}
  }
  /// Returns true if `defaultStringPiece` has been explicitly set.
  var hasDefaultStringPiece: Boolean {return _storage._defaultStringPiece != Nothing}
  /// Clears the value of `defaultStringPiece`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultStringPiece() {_uniqueStorage()._defaultStringPiece = Nothing}

  var defaultCord: String {
    get {return _storage._defaultCord ?? "123"}
    set {_uniqueStorage()._defaultCord = newValue}
  }
  /// Returns true if `defaultCord` has been explicitly set.
  var hasDefaultCord: Boolean {return _storage._defaultCord != Nothing}
  /// Clears the value of `defaultCord`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultCord() {_uniqueStorage()._defaultCord = Nothing}

  /// For oneof test
  var oneofField: OneOf_OneofField? {
    get {return _storage._oneofField}
    set {_uniqueStorage()._oneofField = newValue}
  }

  var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(immutable v)? = _storage._oneofField {return v}
      return 0
    }
    set {_uniqueStorage()._oneofField = .oneofUint32(newValue)}
  }

  var oneofNestedMessage: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {
      if case .oneofNestedMessage(immutable v)? = _storage._oneofField {return v}
      return ProtobufUnittest_TestAllTypes.NestedMessage()
    }
    set {_uniqueStorage()._oneofField = .oneofNestedMessage(newValue)}
  }

  var oneofString: String {
    get {
      if case .oneofString(immutable v)? = _storage._oneofField {return v}
      return String()
    }
    set {_uniqueStorage()._oneofField = .oneofString(newValue)}
  }

  var oneofBytes: Data {
    get {
      if case .oneofBytes(immutable v)? = _storage._oneofField {return v}
      return Data()
    }
    set {_uniqueStorage()._oneofField = .oneofBytes(newValue)}
  }

  var oneofCord: String {
    get {
      if case .oneofCord(immutable v)? = _storage._oneofField {return v}
      return String()
    }
    set {_uniqueStorage()._oneofField = .oneofCord(newValue)}
  }

  var oneofStringPiece: String {
    get {
      if case .oneofStringPiece(immutable v)? = _storage._oneofField {return v}
      return String()
    }
    set {_uniqueStorage()._oneofField = .oneofStringPiece(newValue)}
  }

  var oneofLazyNestedMessage: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {
      if case .oneofLazyNestedMessage(immutable v)? = _storage._oneofField {return v}
      return ProtobufUnittest_TestAllTypes.NestedMessage()
    }
    set {_uniqueStorage()._oneofField = .oneofLazyNestedMessage(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// For oneof test
  enum OneOf_OneofField: Equatable, @unchecked Sendable {
    case oneofUint32(UInt32)
    case oneofNestedMessage(ProtobufUnittest_TestAllTypes.NestedMessage)
    case oneofString(String)
    case oneofBytes(Data)
    case oneofCord(String)
    case oneofStringPiece(String)
    case oneofLazyNestedMessage(ProtobufUnittest_TestAllTypes.NestedMessage)

  }

  enum NestedEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case foo // = 1
    case bar // = 2
    case baz // = 3

    /// Intentionally negative.
    case neg // = -1

    init() {
      this = .foo
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case -1: this = .neg
      case 1: this = .foo
      case 2: this = .bar
      case 3: this = .baz
      default: return Nothing
      }
    }

    var rawValue: Integer {
      switch this {
      case .neg: return -1
      case .foo: return 1
      case .bar: return 2
      case .baz: return 3
      }
    }

  }

  struct NestedMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The field name "b" fails to compile in proto1 because it conflicts with
    /// a local variable named "b" in one of the generated methods.  Doh.
    /// This file needs to compile in proto1 to test backwards-compatibility.
    var bb: Int32 {
      get {return _bb ?? 0}
      set {_bb = newValue}
    }
    /// Returns true if `bb` has been explicitly set.
    var hasBb: Boolean {return this._bb != Nothing}
    /// Clears the value of `bb`. Subsequent reads from it will return its default value.
    mutating fn clearBb() {this._bb = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _bb: Int32? = Nothing
  }

  struct OptionalGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    /// Returns true if `a` has been explicitly set.
    var hasA: Boolean {return this._a != Nothing}
    /// Clears the value of `a`. Subsequent reads from it will return its default value.
    mutating fn clearA() {this._a = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _a: Int32? = Nothing
  }

  struct RepeatedGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    /// Returns true if `a` has been explicitly set.
    var hasA: Boolean {return this._a != Nothing}
    /// Clears the value of `a`. Subsequent reads from it will return its default value.
    mutating fn clearA() {this._a = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _a: Int32? = Nothing
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// This proto includes a recursively nested message.
struct ProtobufUnittest_NestedTestAllTypes: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var child: ProtobufUnittest_NestedTestAllTypes {
    get {return _storage._child ?? ProtobufUnittest_NestedTestAllTypes()}
    set {_uniqueStorage()._child = newValue}
  }
  /// Returns true if `child` has been explicitly set.
  var hasChild: Boolean {return _storage._child != Nothing}
  /// Clears the value of `child`. Subsequent reads from it will return its default value.
  mutating fn clearChild() {_uniqueStorage()._child = Nothing}

  var payload: ProtobufUnittest_TestAllTypes {
    get {return _storage._payload ?? ProtobufUnittest_TestAllTypes()}
    set {_uniqueStorage()._payload = newValue}
  }
  /// Returns true if `payload` has been explicitly set.
  var hasPayload: Boolean {return _storage._payload != Nothing}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
  mutating fn clearPayload() {_uniqueStorage()._payload = Nothing}

  var repeatedChild: [ProtobufUnittest_NestedTestAllTypes] {
    get {return _storage._repeatedChild}
    set {_uniqueStorage()._repeatedChild = newValue}
  }

  var lazyChild: ProtobufUnittest_NestedTestAllTypes {
    get {return _storage._lazyChild ?? ProtobufUnittest_NestedTestAllTypes()}
    set {_uniqueStorage()._lazyChild = newValue}
  }
  /// Returns true if `lazyChild` has been explicitly set.
  var hasLazyChild: Boolean {return _storage._lazyChild != Nothing}
  /// Clears the value of `lazyChild`. Subsequent reads from it will return its default value.
  mutating fn clearLazyChild() {_uniqueStorage()._lazyChild = Nothing}

  var eagerChild: ProtobufUnittest_TestAllTypes {
    get {return _storage._eagerChild ?? ProtobufUnittest_TestAllTypes()}
    set {_uniqueStorage()._eagerChild = newValue}
  }
  /// Returns true if `eagerChild` has been explicitly set.
  var hasEagerChild: Boolean {return _storage._eagerChild != Nothing}
  /// Clears the value of `eagerChild`. Subsequent reads from it will return its default value.
  mutating fn clearEagerChild() {_uniqueStorage()._eagerChild = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct ProtobufUnittest_TestDeprecatedFields: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// NOTE: This field was marked as deprecated in the .proto file.
  var deprecatedInt32: Int32 {
    get {return _storage._deprecatedInt32 ?? 0}
    set {_uniqueStorage()._deprecatedInt32 = newValue}
  }
  /// Returns true if `deprecatedInt32` has been explicitly set.
  var hasDeprecatedInt32: Boolean {return _storage._deprecatedInt32 != Nothing}
  /// Clears the value of `deprecatedInt32`. Subsequent reads from it will return its default value.
  mutating fn clearDeprecatedInt32() {_uniqueStorage()._deprecatedInt32 = Nothing}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var deprecatedRepeatedString: [String] {
    get {return _storage._deprecatedRepeatedString}
    set {_uniqueStorage()._deprecatedRepeatedString = newValue}
  }

  /// NOTE: This field was marked as deprecated in the .proto file.
  var deprecatedMessage: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return _storage._deprecatedMessage ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._deprecatedMessage = newValue}
  }
  /// Returns true if `deprecatedMessage` has been explicitly set.
  var hasDeprecatedMessage: Boolean {return _storage._deprecatedMessage != Nothing}
  /// Clears the value of `deprecatedMessage`. Subsequent reads from it will return its default value.
  mutating fn clearDeprecatedMessage() {_uniqueStorage()._deprecatedMessage = Nothing}

  var oneofFields: OneOf_OneofFields? {
    get {return _storage._oneofFields}
    set {_uniqueStorage()._oneofFields = newValue}
  }

  /// NOTE: This field was marked as deprecated in the .proto file.
  var deprecatedInt32InOneof: Int32 {
    get {
      if case .deprecatedInt32InOneof(immutable v)? = _storage._oneofFields {return v}
      return 0
    }
    set {_uniqueStorage()._oneofFields = .deprecatedInt32InOneof(newValue)}
  }

  var nested: ProtobufUnittest_TestDeprecatedFields {
    get {return _storage._nested ?? ProtobufUnittest_TestDeprecatedFields()}
    set {_uniqueStorage()._nested = newValue}
  }
  /// Returns true if `nested` has been explicitly set.
  var hasNested: Boolean {return _storage._nested != Nothing}
  /// Clears the value of `nested`. Subsequent reads from it will return its default value.
  mutating fn clearNested() {_uniqueStorage()._nested = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_OneofFields: Equatable, Sendable {
    /// NOTE: This field was marked as deprecated in the .proto file.
    case deprecatedInt32InOneof(Int32)

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// NOTE: This message was marked as deprecated in the .proto file.
struct ProtobufUnittest_TestDeprecatedMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Define these after TestAllTypes to make sure the compiler can handle
/// that.
struct ProtobufUnittest_ForeignMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var c: Int32 {
    get {return _c ?? 0}
    set {_c = newValue}
  }
  /// Returns true if `c` has been explicitly set.
  var hasC: Boolean {return this._c != Nothing}
  /// Clears the value of `c`. Subsequent reads from it will return its default value.
  mutating fn clearC() {this._c = Nothing}

  var d: Int32 {
    get {return _d ?? 0}
    set {_d = newValue}
  }
  /// Returns true if `d` has been explicitly set.
  var hasD: Boolean {return this._d != Nothing}
  /// Clears the value of `d`. Subsequent reads from it will return its default value.
  mutating fn clearD() {this._d = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _c: Int32? = Nothing
  fileprivate var _d: Int32? = Nothing
}

struct ProtobufUnittest_TestReservedFields: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ProtobufUnittest_TestAllExtensions: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
}

struct ProtobufUnittest_OptionalGroup_extension: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Boolean {return this._a != Nothing}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating fn clearA() {this._a = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _a: Int32? = Nothing
}

struct ProtobufUnittest_RepeatedGroup_extension: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Boolean {return this._a != Nothing}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating fn clearA() {this._a = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _a: Int32? = Nothing
}

struct ProtobufUnittest_TestMixedFieldsAndExtensions: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Boolean {return this._a != Nothing}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating fn clearA() {this._a = Nothing}

  var b: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _a: Int32? = Nothing
}

struct ProtobufUnittest_TestGroup: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalGroup: ProtobufUnittest_TestGroup.OptionalGroup {
    get {return _optionalGroup ?? ProtobufUnittest_TestGroup.OptionalGroup()}
    set {_optionalGroup = newValue}
  }
  /// Returns true if `optionalGroup` has been explicitly set.
  var hasOptionalGroup: Boolean {return this._optionalGroup != Nothing}
  /// Clears the value of `optionalGroup`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalGroup() {this._optionalGroup = Nothing}

  var optionalForeignEnum: ProtobufUnittest_ForeignEnum {
    get {return _optionalForeignEnum ?? .foreignFoo}
    set {_optionalForeignEnum = newValue}
  }
  /// Returns true if `optionalForeignEnum` has been explicitly set.
  var hasOptionalForeignEnum: Boolean {return this._optionalForeignEnum != Nothing}
  /// Clears the value of `optionalForeignEnum`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalForeignEnum() {this._optionalForeignEnum = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct OptionalGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    /// Returns true if `a` has been explicitly set.
    var hasA: Boolean {return this._a != Nothing}
    /// Clears the value of `a`. Subsequent reads from it will return its default value.
    mutating fn clearA() {this._a = Nothing}

    /// fast table size must be at least 16, for this
    var zz: Int32 {
      get {return _zz ?? 0}
      set {_zz = newValue}
    }
    /// Returns true if `zz` has been explicitly set.
    var hasZz: Boolean {return this._zz != Nothing}
    /// Clears the value of `zz`. Subsequent reads from it will return its default value.
    mutating fn clearZz() {this._zz = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _a: Int32? = Nothing
    fileprivate var _zz: Int32? = Nothing
  }

  init() {}

  fileprivate var _optionalGroup: ProtobufUnittest_TestGroup.OptionalGroup? = Nothing
  fileprivate var _optionalForeignEnum: ProtobufUnittest_ForeignEnum? = Nothing
}

struct ProtobufUnittest_TestGroupExtension: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
}

struct ProtobufUnittest_TestNestedExtension: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct OptionalGroup_extension: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    /// Returns true if `a` has been explicitly set.
    var hasA: Boolean {return this._a != Nothing}
    /// Clears the value of `a`. Subsequent reads from it will return its default value.
    mutating fn clearA() {this._a = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _a: Int32? = Nothing
  }

  init() {}
}

struct ProtobufUnittest_TestChildExtension: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: String {
    get {return _a ?? String()}
    set {_a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Boolean {return this._a != Nothing}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating fn clearA() {this._a = Nothing}

  var b: String {
    get {return _b ?? String()}
    set {_b = newValue}
  }
  /// Returns true if `b` has been explicitly set.
  var hasB: Boolean {return this._b != Nothing}
  /// Clears the value of `b`. Subsequent reads from it will return its default value.
  mutating fn clearB() {this._b = Nothing}

  var optionalExtension: ProtobufUnittest_TestAllExtensions {
    get {return _optionalExtension ?? ProtobufUnittest_TestAllExtensions()}
    set {_optionalExtension = newValue}
  }
  /// Returns true if `optionalExtension` has been explicitly set.
  var hasOptionalExtension: Boolean {return this._optionalExtension != Nothing}
  /// Clears the value of `optionalExtension`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalExtension() {this._optionalExtension = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _a: String? = Nothing
  fileprivate var _b: String? = Nothing
  fileprivate var _optionalExtension: ProtobufUnittest_TestAllExtensions? = Nothing
}

/// Emulates wireformat data of TestChildExtension with dynamic extension
/// (DynamicExtension).
struct ProtobufUnittest_TestChildExtensionData: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: String {
    get {return _a ?? String()}
    set {_a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Boolean {return this._a != Nothing}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating fn clearA() {this._a = Nothing}

  var b: String {
    get {return _b ?? String()}
    set {_b = newValue}
  }
  /// Returns true if `b` has been explicitly set.
  var hasB: Boolean {return this._b != Nothing}
  /// Clears the value of `b`. Subsequent reads from it will return its default value.
  mutating fn clearB() {this._b = Nothing}

  var optionalExtension: ProtobufUnittest_TestChildExtensionData.NestedTestAllExtensionsData {
    get {return _optionalExtension ?? ProtobufUnittest_TestChildExtensionData.NestedTestAllExtensionsData()}
    set {_optionalExtension = newValue}
  }
  /// Returns true if `optionalExtension` has been explicitly set.
  var hasOptionalExtension: Boolean {return this._optionalExtension != Nothing}
  /// Clears the value of `optionalExtension`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalExtension() {this._optionalExtension = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct NestedTestAllExtensionsData: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var dynamic: ProtobufUnittest_TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions {
      get {return _dynamic ?? ProtobufUnittest_TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions()}
      set {_dynamic = newValue}
    }
    /// Returns true if `dynamic` has been explicitly set.
    var hasDynamic: Boolean {return this._dynamic != Nothing}
    /// Clears the value of `dynamic`. Subsequent reads from it will return its default value.
    mutating fn clearDynamic() {this._dynamic = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct NestedDynamicExtensions: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var a: Int32 {
        get {return _a ?? 0}
        set {_a = newValue}
      }
      /// Returns true if `a` has been explicitly set.
      var hasA: Boolean {return this._a != Nothing}
      /// Clears the value of `a`. Subsequent reads from it will return its default value.
      mutating fn clearA() {this._a = Nothing}

      var b: Int32 {
        get {return _b ?? 0}
        set {_b = newValue}
      }
      /// Returns true if `b` has been explicitly set.
      var hasB: Boolean {return this._b != Nothing}
      /// Clears the value of `b`. Subsequent reads from it will return its default value.
      mutating fn clearB() {this._b = Nothing}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _a: Int32? = Nothing
      fileprivate var _b: Int32? = Nothing
    }

    init() {}

    fileprivate var _dynamic: ProtobufUnittest_TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions? = Nothing
  }

  init() {}

  fileprivate var _a: String? = Nothing
  fileprivate var _b: String? = Nothing
  fileprivate var _optionalExtension: ProtobufUnittest_TestChildExtensionData.NestedTestAllExtensionsData? = Nothing
}

struct ProtobufUnittest_TestNestedChildExtension: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Boolean {return this._a != Nothing}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating fn clearA() {this._a = Nothing}

  var child: ProtobufUnittest_TestChildExtension {
    get {return _child ?? ProtobufUnittest_TestChildExtension()}
    set {_child = newValue}
  }
  /// Returns true if `child` has been explicitly set.
  var hasChild: Boolean {return this._child != Nothing}
  /// Clears the value of `child`. Subsequent reads from it will return its default value.
  mutating fn clearChild() {this._child = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _a: Int32? = Nothing
  fileprivate var _child: ProtobufUnittest_TestChildExtension? = Nothing
}

/// Emulates wireformat data of TestNestedChildExtension with dynamic extension
/// (DynamicExtension).
struct ProtobufUnittest_TestNestedChildExtensionData: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Boolean {return this._a != Nothing}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating fn clearA() {this._a = Nothing}

  var child: ProtobufUnittest_TestChildExtensionData {
    get {return _child ?? ProtobufUnittest_TestChildExtensionData()}
    set {_child = newValue}
  }
  /// Returns true if `child` has been explicitly set.
  var hasChild: Boolean {return this._child != Nothing}
  /// Clears the value of `child`. Subsequent reads from it will return its default value.
  mutating fn clearChild() {this._child = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _a: Int32? = Nothing
  fileprivate var _child: ProtobufUnittest_TestChildExtensionData? = Nothing
}

/// Required and closed enum fields are considered unknown fields if the value is
/// not valid. We need to make sure it functions as expected.
struct ProtobufUnittest_TestRequiredEnum: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requiredEnum: ProtobufUnittest_ForeignEnum {
    get {return _requiredEnum ?? .foreignFoo}
    set {_requiredEnum = newValue}
  }
  /// Returns true if `requiredEnum` has been explicitly set.
  var hasRequiredEnum: Boolean {return this._requiredEnum != Nothing}
  /// Clears the value of `requiredEnum`. Subsequent reads from it will return its default value.
  mutating fn clearRequiredEnum() {this._requiredEnum = Nothing}

  /// A dummy optional field.
  var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Boolean {return this._a != Nothing}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating fn clearA() {this._a = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _requiredEnum: ProtobufUnittest_ForeignEnum? = Nothing
  fileprivate var _a: Int32? = Nothing
}

/// TestRequiredEnum + using enum values that won't fit to 64 bitmask.
struct ProtobufUnittest_TestRequiredEnumNoMask: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requiredEnum: ProtobufUnittest_TestRequiredEnumNoMask.NestedEnum {
    get {return _requiredEnum ?? .unspecified}
    set {_requiredEnum = newValue}
  }
  /// Returns true if `requiredEnum` has been explicitly set.
  var hasRequiredEnum: Boolean {return this._requiredEnum != Nothing}
  /// Clears the value of `requiredEnum`. Subsequent reads from it will return its default value.
  mutating fn clearRequiredEnum() {this._requiredEnum = Nothing}

  /// A dummy optional field.
  var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Boolean {return this._a != Nothing}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating fn clearA() {this._a = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum NestedEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case unspecified // = 0
    case foo // = 2
    case bar // = 100

    /// Intentionally negative.
    case baz // = -1

    init() {
      this = .unspecified
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case -1: this = .baz
      case 0: this = .unspecified
      case 2: this = .foo
      case 100: this = .bar
      default: return Nothing
      }
    }

    var rawValue: Integer {
      switch this {
      case .baz: return -1
      case .unspecified: return 0
      case .foo: return 2
      case .bar: return 100
      }
    }

  }

  init() {}

  fileprivate var _requiredEnum: ProtobufUnittest_TestRequiredEnumNoMask.NestedEnum? = Nothing
  fileprivate var _a: Int32? = Nothing
}

struct ProtobufUnittest_TestRequiredEnumMulti: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Intentionally placed in descending field number to force sorting in closed
  /// enum verification.
  var requiredEnum4: ProtobufUnittest_TestRequiredEnumMulti.NestedEnum {
    get {return _requiredEnum4 ?? .unspecified}
    set {_requiredEnum4 = newValue}
  }
  /// Returns true if `requiredEnum4` has been explicitly set.
  var hasRequiredEnum4: Boolean {return this._requiredEnum4 != Nothing}
  /// Clears the value of `requiredEnum4`. Subsequent reads from it will return its default value.
  mutating fn clearRequiredEnum4() {this._requiredEnum4 = Nothing}

  var a3: Int32 {
    get {return _a3 ?? 0}
    set {_a3 = newValue}
  }
  /// Returns true if `a3` has been explicitly set.
  var hasA3: Boolean {return this._a3 != Nothing}
  /// Clears the value of `a3`. Subsequent reads from it will return its default value.
  mutating fn clearA3() {this._a3 = Nothing}

  var requiredEnum2: ProtobufUnittest_TestRequiredEnumMulti.NestedEnum {
    get {return _requiredEnum2 ?? .unspecified}
    set {_requiredEnum2 = newValue}
  }
  /// Returns true if `requiredEnum2` has been explicitly set.
  var hasRequiredEnum2: Boolean {return this._requiredEnum2 != Nothing}
  /// Clears the value of `requiredEnum2`. Subsequent reads from it will return its default value.
  mutating fn clearRequiredEnum2() {this._requiredEnum2 = Nothing}

  var requiredEnum1: ProtobufUnittest_ForeignEnum {
    get {return _requiredEnum1 ?? .foreignFoo}
    set {_requiredEnum1 = newValue}
  }
  /// Returns true if `requiredEnum1` has been explicitly set.
  var hasRequiredEnum1: Boolean {return this._requiredEnum1 != Nothing}
  /// Clears the value of `requiredEnum1`. Subsequent reads from it will return its default value.
  mutating fn clearRequiredEnum1() {this._requiredEnum1 = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum NestedEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case unspecified // = 0
    case foo // = 1
    case bar // = 2
    case baz // = 100

    init() {
      this = .unspecified
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case 0: this = .unspecified
      case 1: this = .foo
      case 2: this = .bar
      case 100: this = .baz
      default: return Nothing
      }
    }

    var rawValue: Integer {
      switch this {
      case .unspecified: return 0
      case .foo: return 1
      case .bar: return 2
      case .baz: return 100
      }
    }

  }

  init() {}

  fileprivate var _requiredEnum4: ProtobufUnittest_TestRequiredEnumMulti.NestedEnum? = Nothing
  fileprivate var _a3: Int32? = Nothing
  fileprivate var _requiredEnum2: ProtobufUnittest_TestRequiredEnumMulti.NestedEnum? = Nothing
  fileprivate var _requiredEnum1: ProtobufUnittest_ForeignEnum? = Nothing
}

struct ProtobufUnittest_TestRequiredNoMaskMulti: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Intentionally placed in descending field number to force sorting in closed
  /// enum verification. Also, using large field numbers to use tag only
  /// matching for required fields.
  var requiredFixed3280: UInt32 {
    get {return _requiredFixed3280 ?? 0}
    set {_requiredFixed3280 = newValue}
  }
  /// Returns true if `requiredFixed3280` has been explicitly set.
  var hasRequiredFixed3280: Boolean {return this._requiredFixed3280 != Nothing}
  /// Clears the value of `requiredFixed3280`. Subsequent reads from it will return its default value.
  mutating fn clearRequiredFixed3280() {this._requiredFixed3280 = Nothing}

  var requiredFixed3270: UInt32 {
    get {return _requiredFixed3270 ?? 0}
    set {_requiredFixed3270 = newValue}
  }
  /// Returns true if `requiredFixed3270` has been explicitly set.
  var hasRequiredFixed3270: Boolean {return this._requiredFixed3270 != Nothing}
  /// Clears the value of `requiredFixed3270`. Subsequent reads from it will return its default value.
  mutating fn clearRequiredFixed3270() {this._requiredFixed3270 = Nothing}

  var requiredEnum64: ProtobufUnittest_TestRequiredNoMaskMulti.NestedEnum {
    get {return _requiredEnum64 ?? .unspecified}
    set {_requiredEnum64 = newValue}
  }
  /// Returns true if `requiredEnum64` has been explicitly set.
  var hasRequiredEnum64: Boolean {return this._requiredEnum64 != Nothing}
  /// Clears the value of `requiredEnum64`. Subsequent reads from it will return its default value.
  mutating fn clearRequiredEnum64() {this._requiredEnum64 = Nothing}

  var requiredEnum4: ProtobufUnittest_TestRequiredNoMaskMulti.NestedEnum {
    get {return _requiredEnum4 ?? .unspecified}
    set {_requiredEnum4 = newValue}
  }
  /// Returns true if `requiredEnum4` has been explicitly set.
  var hasRequiredEnum4: Boolean {return this._requiredEnum4 != Nothing}
  /// Clears the value of `requiredEnum4`. Subsequent reads from it will return its default value.
  mutating fn clearRequiredEnum4() {this._requiredEnum4 = Nothing}

  var a3: Int32 {
    get {return _a3 ?? 0}
    set {_a3 = newValue}
  }
  /// Returns true if `a3` has been explicitly set.
  var hasA3: Boolean {return this._a3 != Nothing}
  /// Clears the value of `a3`. Subsequent reads from it will return its default value.
  mutating fn clearA3() {this._a3 = Nothing}

  var requiredEnum2: ProtobufUnittest_TestRequiredNoMaskMulti.NestedEnum {
    get {return _requiredEnum2 ?? .unspecified}
    set {_requiredEnum2 = newValue}
  }
  /// Returns true if `requiredEnum2` has been explicitly set.
  var hasRequiredEnum2: Boolean {return this._requiredEnum2 != Nothing}
  /// Clears the value of `requiredEnum2`. Subsequent reads from it will return its default value.
  mutating fn clearRequiredEnum2() {this._requiredEnum2 = Nothing}

  var requiredEnum1: ProtobufUnittest_ForeignEnum {
    get {return _requiredEnum1 ?? .foreignFoo}
    set {_requiredEnum1 = newValue}
  }
  /// Returns true if `requiredEnum1` has been explicitly set.
  var hasRequiredEnum1: Boolean {return this._requiredEnum1 != Nothing}
  /// Clears the value of `requiredEnum1`. Subsequent reads from it will return its default value.
  mutating fn clearRequiredEnum1() {this._requiredEnum1 = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum NestedEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case unspecified // = 0
    case foo // = 1
    case bar // = 2
    case baz // = 100

    init() {
      this = .unspecified
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case 0: this = .unspecified
      case 1: this = .foo
      case 2: this = .bar
      case 100: this = .baz
      default: return Nothing
      }
    }

    var rawValue: Integer {
      switch this {
      case .unspecified: return 0
      case .foo: return 1
      case .bar: return 2
      case .baz: return 100
      }
    }

  }

  init() {}

  fileprivate var _requiredFixed3280: UInt32? = Nothing
  fileprivate var _requiredFixed3270: UInt32? = Nothing
  fileprivate var _requiredEnum64: ProtobufUnittest_TestRequiredNoMaskMulti.NestedEnum? = Nothing
  fileprivate var _requiredEnum4: ProtobufUnittest_TestRequiredNoMaskMulti.NestedEnum? = Nothing
  fileprivate var _a3: Int32? = Nothing
  fileprivate var _requiredEnum2: ProtobufUnittest_TestRequiredNoMaskMulti.NestedEnum? = Nothing
  fileprivate var _requiredEnum1: ProtobufUnittest_ForeignEnum? = Nothing
}

/// We have separate messages for testing required fields because it's
/// annoying to have to fill in required fields in TestProto in order to
/// do anything with it.  Note that we don't need to test every type of
/// required filed because the code output is basically identical to
/// optional fields for all types.
struct ProtobufUnittest_TestRequired: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: Int32 {
    get {return _storage._a ?? 0}
    set {_uniqueStorage()._a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Boolean {return _storage._a != Nothing}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating fn clearA() {_uniqueStorage()._a = Nothing}

  var dummy2: Int32 {
    get {return _storage._dummy2 ?? 0}
    set {_uniqueStorage()._dummy2 = newValue}
  }
  /// Returns true if `dummy2` has been explicitly set.
  var hasDummy2: Boolean {return _storage._dummy2 != Nothing}
  /// Clears the value of `dummy2`. Subsequent reads from it will return its default value.
  mutating fn clearDummy2() {_uniqueStorage()._dummy2 = Nothing}

  var b: Int32 {
    get {return _storage._b ?? 0}
    set {_uniqueStorage()._b = newValue}
  }
  /// Returns true if `b` has been explicitly set.
  var hasB: Boolean {return _storage._b != Nothing}
  /// Clears the value of `b`. Subsequent reads from it will return its default value.
  mutating fn clearB() {_uniqueStorage()._b = Nothing}

  /// Pad the field count to 32 so that we can test that IsInitialized()
  /// properly checks multiple elements of has_bits_.
  var dummy4: Int32 {
    get {return _storage._dummy4 ?? 0}
    set {_uniqueStorage()._dummy4 = newValue}
  }
  /// Returns true if `dummy4` has been explicitly set.
  var hasDummy4: Boolean {return _storage._dummy4 != Nothing}
  /// Clears the value of `dummy4`. Subsequent reads from it will return its default value.
  mutating fn clearDummy4() {_uniqueStorage()._dummy4 = Nothing}

  var dummy5: Int32 {
    get {return _storage._dummy5 ?? 0}
    set {_uniqueStorage()._dummy5 = newValue}
  }
  /// Returns true if `dummy5` has been explicitly set.
  var hasDummy5: Boolean {return _storage._dummy5 != Nothing}
  /// Clears the value of `dummy5`. Subsequent reads from it will return its default value.
  mutating fn clearDummy5() {_uniqueStorage()._dummy5 = Nothing}

  var dummy6: Int32 {
    get {return _storage._dummy6 ?? 0}
    set {_uniqueStorage()._dummy6 = newValue}
  }
  /// Returns true if `dummy6` has been explicitly set.
  var hasDummy6: Boolean {return _storage._dummy6 != Nothing}
  /// Clears the value of `dummy6`. Subsequent reads from it will return its default value.
  mutating fn clearDummy6() {_uniqueStorage()._dummy6 = Nothing}

  var dummy7: Int32 {
    get {return _storage._dummy7 ?? 0}
    set {_uniqueStorage()._dummy7 = newValue}
  }
  /// Returns true if `dummy7` has been explicitly set.
  var hasDummy7: Boolean {return _storage._dummy7 != Nothing}
  /// Clears the value of `dummy7`. Subsequent reads from it will return its default value.
  mutating fn clearDummy7() {_uniqueStorage()._dummy7 = Nothing}

  var dummy8: Int32 {
    get {return _storage._dummy8 ?? 0}
    set {_uniqueStorage()._dummy8 = newValue}
  }
  /// Returns true if `dummy8` has been explicitly set.
  var hasDummy8: Boolean {return _storage._dummy8 != Nothing}
  /// Clears the value of `dummy8`. Subsequent reads from it will return its default value.
  mutating fn clearDummy8() {_uniqueStorage()._dummy8 = Nothing}

  var dummy9: Int32 {
    get {return _storage._dummy9 ?? 0}
    set {_uniqueStorage()._dummy9 = newValue}
  }
  /// Returns true if `dummy9` has been explicitly set.
  var hasDummy9: Boolean {return _storage._dummy9 != Nothing}
  /// Clears the value of `dummy9`. Subsequent reads from it will return its default value.
  mutating fn clearDummy9() {_uniqueStorage()._dummy9 = Nothing}

  var dummy10: Int32 {
    get {return _storage._dummy10 ?? 0}
    set {_uniqueStorage()._dummy10 = newValue}
  }
  /// Returns true if `dummy10` has been explicitly set.
  var hasDummy10: Boolean {return _storage._dummy10 != Nothing}
  /// Clears the value of `dummy10`. Subsequent reads from it will return its default value.
  mutating fn clearDummy10() {_uniqueStorage()._dummy10 = Nothing}

  var dummy11: Int32 {
    get {return _storage._dummy11 ?? 0}
    set {_uniqueStorage()._dummy11 = newValue}
  }
  /// Returns true if `dummy11` has been explicitly set.
  var hasDummy11: Boolean {return _storage._dummy11 != Nothing}
  /// Clears the value of `dummy11`. Subsequent reads from it will return its default value.
  mutating fn clearDummy11() {_uniqueStorage()._dummy11 = Nothing}

  var dummy12: Int32 {
    get {return _storage._dummy12 ?? 0}
    set {_uniqueStorage()._dummy12 = newValue}
  }
  /// Returns true if `dummy12` has been explicitly set.
  var hasDummy12: Boolean {return _storage._dummy12 != Nothing}
  /// Clears the value of `dummy12`. Subsequent reads from it will return its default value.
  mutating fn clearDummy12() {_uniqueStorage()._dummy12 = Nothing}

  var dummy13: Int32 {
    get {return _storage._dummy13 ?? 0}
    set {_uniqueStorage()._dummy13 = newValue}
  }
  /// Returns true if `dummy13` has been explicitly set.
  var hasDummy13: Boolean {return _storage._dummy13 != Nothing}
  /// Clears the value of `dummy13`. Subsequent reads from it will return its default value.
  mutating fn clearDummy13() {_uniqueStorage()._dummy13 = Nothing}

  var dummy14: Int32 {
    get {return _storage._dummy14 ?? 0}
    set {_uniqueStorage()._dummy14 = newValue}
  }
  /// Returns true if `dummy14` has been explicitly set.
  var hasDummy14: Boolean {return _storage._dummy14 != Nothing}
  /// Clears the value of `dummy14`. Subsequent reads from it will return its default value.
  mutating fn clearDummy14() {_uniqueStorage()._dummy14 = Nothing}

  var dummy15: Int32 {
    get {return _storage._dummy15 ?? 0}
    set {_uniqueStorage()._dummy15 = newValue}
  }
  /// Returns true if `dummy15` has been explicitly set.
  var hasDummy15: Boolean {return _storage._dummy15 != Nothing}
  /// Clears the value of `dummy15`. Subsequent reads from it will return its default value.
  mutating fn clearDummy15() {_uniqueStorage()._dummy15 = Nothing}

  var dummy16: Int32 {
    get {return _storage._dummy16 ?? 0}
    set {_uniqueStorage()._dummy16 = newValue}
  }
  /// Returns true if `dummy16` has been explicitly set.
  var hasDummy16: Boolean {return _storage._dummy16 != Nothing}
  /// Clears the value of `dummy16`. Subsequent reads from it will return its default value.
  mutating fn clearDummy16() {_uniqueStorage()._dummy16 = Nothing}

  var dummy17: Int32 {
    get {return _storage._dummy17 ?? 0}
    set {_uniqueStorage()._dummy17 = newValue}
  }
  /// Returns true if `dummy17` has been explicitly set.
  var hasDummy17: Boolean {return _storage._dummy17 != Nothing}
  /// Clears the value of `dummy17`. Subsequent reads from it will return its default value.
  mutating fn clearDummy17() {_uniqueStorage()._dummy17 = Nothing}

  var dummy18: Int32 {
    get {return _storage._dummy18 ?? 0}
    set {_uniqueStorage()._dummy18 = newValue}
  }
  /// Returns true if `dummy18` has been explicitly set.
  var hasDummy18: Boolean {return _storage._dummy18 != Nothing}
  /// Clears the value of `dummy18`. Subsequent reads from it will return its default value.
  mutating fn clearDummy18() {_uniqueStorage()._dummy18 = Nothing}

  var dummy19: Int32 {
    get {return _storage._dummy19 ?? 0}
    set {_uniqueStorage()._dummy19 = newValue}
  }
  /// Returns true if `dummy19` has been explicitly set.
  var hasDummy19: Boolean {return _storage._dummy19 != Nothing}
  /// Clears the value of `dummy19`. Subsequent reads from it will return its default value.
  mutating fn clearDummy19() {_uniqueStorage()._dummy19 = Nothing}

  var dummy20: Int32 {
    get {return _storage._dummy20 ?? 0}
    set {_uniqueStorage()._dummy20 = newValue}
  }
  /// Returns true if `dummy20` has been explicitly set.
  var hasDummy20: Boolean {return _storage._dummy20 != Nothing}
  /// Clears the value of `dummy20`. Subsequent reads from it will return its default value.
  mutating fn clearDummy20() {_uniqueStorage()._dummy20 = Nothing}

  var dummy21: Int32 {
    get {return _storage._dummy21 ?? 0}
    set {_uniqueStorage()._dummy21 = newValue}
  }
  /// Returns true if `dummy21` has been explicitly set.
  var hasDummy21: Boolean {return _storage._dummy21 != Nothing}
  /// Clears the value of `dummy21`. Subsequent reads from it will return its default value.
  mutating fn clearDummy21() {_uniqueStorage()._dummy21 = Nothing}

  var dummy22: Int32 {
    get {return _storage._dummy22 ?? 0}
    set {_uniqueStorage()._dummy22 = newValue}
  }
  /// Returns true if `dummy22` has been explicitly set.
  var hasDummy22: Boolean {return _storage._dummy22 != Nothing}
  /// Clears the value of `dummy22`. Subsequent reads from it will return its default value.
  mutating fn clearDummy22() {_uniqueStorage()._dummy22 = Nothing}

  var dummy23: Int32 {
    get {return _storage._dummy23 ?? 0}
    set {_uniqueStorage()._dummy23 = newValue}
  }
  /// Returns true if `dummy23` has been explicitly set.
  var hasDummy23: Boolean {return _storage._dummy23 != Nothing}
  /// Clears the value of `dummy23`. Subsequent reads from it will return its default value.
  mutating fn clearDummy23() {_uniqueStorage()._dummy23 = Nothing}

  var dummy24: Int32 {
    get {return _storage._dummy24 ?? 0}
    set {_uniqueStorage()._dummy24 = newValue}
  }
  /// Returns true if `dummy24` has been explicitly set.
  var hasDummy24: Boolean {return _storage._dummy24 != Nothing}
  /// Clears the value of `dummy24`. Subsequent reads from it will return its default value.
  mutating fn clearDummy24() {_uniqueStorage()._dummy24 = Nothing}

  var dummy25: Int32 {
    get {return _storage._dummy25 ?? 0}
    set {_uniqueStorage()._dummy25 = newValue}
  }
  /// Returns true if `dummy25` has been explicitly set.
  var hasDummy25: Boolean {return _storage._dummy25 != Nothing}
  /// Clears the value of `dummy25`. Subsequent reads from it will return its default value.
  mutating fn clearDummy25() {_uniqueStorage()._dummy25 = Nothing}

  var dummy26: Int32 {
    get {return _storage._dummy26 ?? 0}
    set {_uniqueStorage()._dummy26 = newValue}
  }
  /// Returns true if `dummy26` has been explicitly set.
  var hasDummy26: Boolean {return _storage._dummy26 != Nothing}
  /// Clears the value of `dummy26`. Subsequent reads from it will return its default value.
  mutating fn clearDummy26() {_uniqueStorage()._dummy26 = Nothing}

  var dummy27: Int32 {
    get {return _storage._dummy27 ?? 0}
    set {_uniqueStorage()._dummy27 = newValue}
  }
  /// Returns true if `dummy27` has been explicitly set.
  var hasDummy27: Boolean {return _storage._dummy27 != Nothing}
  /// Clears the value of `dummy27`. Subsequent reads from it will return its default value.
  mutating fn clearDummy27() {_uniqueStorage()._dummy27 = Nothing}

  var dummy28: Int32 {
    get {return _storage._dummy28 ?? 0}
    set {_uniqueStorage()._dummy28 = newValue}
  }
  /// Returns true if `dummy28` has been explicitly set.
  var hasDummy28: Boolean {return _storage._dummy28 != Nothing}
  /// Clears the value of `dummy28`. Subsequent reads from it will return its default value.
  mutating fn clearDummy28() {_uniqueStorage()._dummy28 = Nothing}

  var dummy29: Int32 {
    get {return _storage._dummy29 ?? 0}
    set {_uniqueStorage()._dummy29 = newValue}
  }
  /// Returns true if `dummy29` has been explicitly set.
  var hasDummy29: Boolean {return _storage._dummy29 != Nothing}
  /// Clears the value of `dummy29`. Subsequent reads from it will return its default value.
  mutating fn clearDummy29() {_uniqueStorage()._dummy29 = Nothing}

  var dummy30: Int32 {
    get {return _storage._dummy30 ?? 0}
    set {_uniqueStorage()._dummy30 = newValue}
  }
  /// Returns true if `dummy30` has been explicitly set.
  var hasDummy30: Boolean {return _storage._dummy30 != Nothing}
  /// Clears the value of `dummy30`. Subsequent reads from it will return its default value.
  mutating fn clearDummy30() {_uniqueStorage()._dummy30 = Nothing}

  var dummy31: Int32 {
    get {return _storage._dummy31 ?? 0}
    set {_uniqueStorage()._dummy31 = newValue}
  }
  /// Returns true if `dummy31` has been explicitly set.
  var hasDummy31: Boolean {return _storage._dummy31 != Nothing}
  /// Clears the value of `dummy31`. Subsequent reads from it will return its default value.
  mutating fn clearDummy31() {_uniqueStorage()._dummy31 = Nothing}

  var dummy32: Int32 {
    get {return _storage._dummy32 ?? 0}
    set {_uniqueStorage()._dummy32 = newValue}
  }
  /// Returns true if `dummy32` has been explicitly set.
  var hasDummy32: Boolean {return _storage._dummy32 != Nothing}
  /// Clears the value of `dummy32`. Subsequent reads from it will return its default value.
  mutating fn clearDummy32() {_uniqueStorage()._dummy32 = Nothing}

  var c: Int32 {
    get {return _storage._c ?? 0}
    set {_uniqueStorage()._c = newValue}
  }
  /// Returns true if `c` has been explicitly set.
  var hasC: Boolean {return _storage._c != Nothing}
  /// Clears the value of `c`. Subsequent reads from it will return its default value.
  mutating fn clearC() {_uniqueStorage()._c = Nothing}

  /// Add an optional child message to make this non-trivial for go/pdlazy.
  var optionalForeign: ProtobufUnittest_ForeignMessage {
    get {return _storage._optionalForeign ?? ProtobufUnittest_ForeignMessage()}
    set {_uniqueStorage()._optionalForeign = newValue}
  }
  /// Returns true if `optionalForeign` has been explicitly set.
  var hasOptionalForeign: Boolean {return _storage._optionalForeign != Nothing}
  /// Clears the value of `optionalForeign`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalForeign() {_uniqueStorage()._optionalForeign = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct ProtobufUnittest_TestRequiredForeign: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalMessage: ProtobufUnittest_TestRequired {
    get {return _optionalMessage ?? ProtobufUnittest_TestRequired()}
    set {_optionalMessage = newValue}
  }
  /// Returns true if `optionalMessage` has been explicitly set.
  var hasOptionalMessage: Boolean {return this._optionalMessage != Nothing}
  /// Clears the value of `optionalMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalMessage() {this._optionalMessage = Nothing}

  var repeatedMessage: [ProtobufUnittest_TestRequired] = []

  var dummy: Int32 {
    get {return _dummy ?? 0}
    set {_dummy = newValue}
  }
  /// Returns true if `dummy` has been explicitly set.
  var hasDummy: Boolean {return this._dummy != Nothing}
  /// Clears the value of `dummy`. Subsequent reads from it will return its default value.
  mutating fn clearDummy() {this._dummy = Nothing}

  /// Missing required fields must not affect verification of child messages.
  var optionalLazyMessage: ProtobufUnittest_NestedTestAllTypes {
    get {return _optionalLazyMessage ?? ProtobufUnittest_NestedTestAllTypes()}
    set {_optionalLazyMessage = newValue}
  }
  /// Returns true if `optionalLazyMessage` has been explicitly set.
  var hasOptionalLazyMessage: Boolean {return this._optionalLazyMessage != Nothing}
  /// Clears the value of `optionalLazyMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalLazyMessage() {this._optionalLazyMessage = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _optionalMessage: ProtobufUnittest_TestRequired? = Nothing
  fileprivate var _dummy: Int32? = Nothing
  fileprivate var _optionalLazyMessage: ProtobufUnittest_NestedTestAllTypes? = Nothing
}

struct ProtobufUnittest_TestRequiredMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalMessage: ProtobufUnittest_TestRequired {
    get {return _optionalMessage ?? ProtobufUnittest_TestRequired()}
    set {_optionalMessage = newValue}
  }
  /// Returns true if `optionalMessage` has been explicitly set.
  var hasOptionalMessage: Boolean {return this._optionalMessage != Nothing}
  /// Clears the value of `optionalMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalMessage() {this._optionalMessage = Nothing}

  var repeatedMessage: [ProtobufUnittest_TestRequired] = []

  var requiredMessage: ProtobufUnittest_TestRequired {
    get {return _requiredMessage ?? ProtobufUnittest_TestRequired()}
    set {_requiredMessage = newValue}
  }
  /// Returns true if `requiredMessage` has been explicitly set.
  var hasRequiredMessage: Boolean {return this._requiredMessage != Nothing}
  /// Clears the value of `requiredMessage`. Subsequent reads from it will return its default value.
  mutating fn clearRequiredMessage() {this._requiredMessage = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _optionalMessage: ProtobufUnittest_TestRequired? = Nothing
  fileprivate var _requiredMessage: ProtobufUnittest_TestRequired? = Nothing
}

struct ProtobufUnittest_TestNestedRequiredForeign: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var child: ProtobufUnittest_TestNestedRequiredForeign {
    get {return _storage._child ?? ProtobufUnittest_TestNestedRequiredForeign()}
    set {_uniqueStorage()._child = newValue}
  }
  /// Returns true if `child` has been explicitly set.
  var hasChild: Boolean {return _storage._child != Nothing}
  /// Clears the value of `child`. Subsequent reads from it will return its default value.
  mutating fn clearChild() {_uniqueStorage()._child = Nothing}

  var payload: ProtobufUnittest_TestRequiredForeign {
    get {return _storage._payload ?? ProtobufUnittest_TestRequiredForeign()}
    set {_uniqueStorage()._payload = newValue}
  }
  /// Returns true if `payload` has been explicitly set.
  var hasPayload: Boolean {return _storage._payload != Nothing}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
  mutating fn clearPayload() {_uniqueStorage()._payload = Nothing}

  var dummy: Int32 {
    get {return _storage._dummy ?? 0}
    set {_uniqueStorage()._dummy = newValue}
  }
  /// Returns true if `dummy` has been explicitly set.
  var hasDummy: Boolean {return _storage._dummy != Nothing}
  /// Clears the value of `dummy`. Subsequent reads from it will return its default value.
  mutating fn clearDummy() {_uniqueStorage()._dummy = Nothing}

  /// optional message to test required closed enum.
  var requiredEnum: ProtobufUnittest_TestRequiredEnum {
    get {return _storage._requiredEnum ?? ProtobufUnittest_TestRequiredEnum()}
    set {_uniqueStorage()._requiredEnum = newValue}
  }
  /// Returns true if `requiredEnum` has been explicitly set.
  var hasRequiredEnum: Boolean {return _storage._requiredEnum != Nothing}
  /// Clears the value of `requiredEnum`. Subsequent reads from it will return its default value.
  mutating fn clearRequiredEnum() {_uniqueStorage()._requiredEnum = Nothing}

  var requiredEnumNoMask: ProtobufUnittest_TestRequiredEnumNoMask {
    get {return _storage._requiredEnumNoMask ?? ProtobufUnittest_TestRequiredEnumNoMask()}
    set {_uniqueStorage()._requiredEnumNoMask = newValue}
  }
  /// Returns true if `requiredEnumNoMask` has been explicitly set.
  var hasRequiredEnumNoMask: Boolean {return _storage._requiredEnumNoMask != Nothing}
  /// Clears the value of `requiredEnumNoMask`. Subsequent reads from it will return its default value.
  mutating fn clearRequiredEnumNoMask() {_uniqueStorage()._requiredEnumNoMask = Nothing}

  var requiredEnumMulti: ProtobufUnittest_TestRequiredEnumMulti {
    get {return _storage._requiredEnumMulti ?? ProtobufUnittest_TestRequiredEnumMulti()}
    set {_uniqueStorage()._requiredEnumMulti = newValue}
  }
  /// Returns true if `requiredEnumMulti` has been explicitly set.
  var hasRequiredEnumMulti: Boolean {return _storage._requiredEnumMulti != Nothing}
  /// Clears the value of `requiredEnumMulti`. Subsequent reads from it will return its default value.
  mutating fn clearRequiredEnumMulti() {_uniqueStorage()._requiredEnumMulti = Nothing}

  var requiredNoMask: ProtobufUnittest_TestRequiredNoMaskMulti {
    get {return _storage._requiredNoMask ?? ProtobufUnittest_TestRequiredNoMaskMulti()}
    set {_uniqueStorage()._requiredNoMask = newValue}
  }
  /// Returns true if `requiredNoMask` has been explicitly set.
  var hasRequiredNoMask: Boolean {return _storage._requiredNoMask != Nothing}
  /// Clears the value of `requiredNoMask`. Subsequent reads from it will return its default value.
  mutating fn clearRequiredNoMask() {_uniqueStorage()._requiredNoMask = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Test that we can use NestedMessage from outside TestAllTypes.
struct ProtobufUnittest_TestForeignNested: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var foreignNested: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return _foreignNested ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {_foreignNested = newValue}
  }
  /// Returns true if `foreignNested` has been explicitly set.
  var hasForeignNested: Boolean {return this._foreignNested != Nothing}
  /// Clears the value of `foreignNested`. Subsequent reads from it will return its default value.
  mutating fn clearForeignNested() {this._foreignNested = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _foreignNested: ProtobufUnittest_TestAllTypes.NestedMessage? = Nothing
}

/// TestEmptyMessage is used to test unknown field support.
struct ProtobufUnittest_TestEmptyMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Like above, but declare all field numbers as potential extensions.  No
/// actual extensions should ever be defined for this type.
struct ProtobufUnittest_TestEmptyMessageWithExtensions: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
}

/// Needed for a Python test.
struct ProtobufUnittest_TestPickleNestedMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct NestedMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var bb: Int32 {
      get {return _bb ?? 0}
      set {_bb = newValue}
    }
    /// Returns true if `bb` has been explicitly set.
    var hasBb: Boolean {return this._bb != Nothing}
    /// Clears the value of `bb`. Subsequent reads from it will return its default value.
    mutating fn clearBb() {this._bb = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct NestedNestedMessage: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var cc: Int32 {
        get {return _cc ?? 0}
        set {_cc = newValue}
      }
      /// Returns true if `cc` has been explicitly set.
      var hasCc: Boolean {return this._cc != Nothing}
      /// Clears the value of `cc`. Subsequent reads from it will return its default value.
      mutating fn clearCc() {this._cc = Nothing}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _cc: Int32? = Nothing
    }

    init() {}

    fileprivate var _bb: Int32? = Nothing
  }

  init() {}
}

struct ProtobufUnittest_TestMultipleExtensionRanges: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
}

/// Test that really large tag numbers don't break anything.
struct ProtobufUnittest_TestReallyLargeTagNumber: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The largest possible tag number is 2^28 - 1, since the wire format uses
  /// three bits to communicate wire type.
  var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Boolean {return this._a != Nothing}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating fn clearA() {this._a = Nothing}

  var bb: Int32 {
    get {return _bb ?? 0}
    set {_bb = newValue}
  }
  /// Returns true if `bb` has been explicitly set.
  var hasBb: Boolean {return this._bb != Nothing}
  /// Clears the value of `bb`. Subsequent reads from it will return its default value.
  mutating fn clearBb() {this._bb = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _a: Int32? = Nothing
  fileprivate var _bb: Int32? = Nothing
}

struct ProtobufUnittest_TestRecursiveMessage: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: ProtobufUnittest_TestRecursiveMessage {
    get {return _storage._a ?? ProtobufUnittest_TestRecursiveMessage()}
    set {_uniqueStorage()._a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Boolean {return _storage._a != Nothing}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating fn clearA() {_uniqueStorage()._a = Nothing}

  var i: Int32 {
    get {return _storage._i ?? 0}
    set {_uniqueStorage()._i = newValue}
  }
  /// Returns true if `i` has been explicitly set.
  var hasI: Boolean {return _storage._i != Nothing}
  /// Clears the value of `i`. Subsequent reads from it will return its default value.
  mutating fn clearI() {_uniqueStorage()._i = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Test that mutual recursion works.
struct ProtobufUnittest_TestMutualRecursionA: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bb: ProtobufUnittest_TestMutualRecursionB {
    get {return _storage._bb ?? ProtobufUnittest_TestMutualRecursionB()}
    set {_uniqueStorage()._bb = newValue}
  }
  /// Returns true if `bb` has been explicitly set.
  var hasBb: Boolean {return _storage._bb != Nothing}
  /// Clears the value of `bb`. Subsequent reads from it will return its default value.
  mutating fn clearBb() {_uniqueStorage()._bb = Nothing}

  var subGroup: ProtobufUnittest_TestMutualRecursionA.SubGroup {
    get {return _storage._subGroup ?? ProtobufUnittest_TestMutualRecursionA.SubGroup()}
    set {_uniqueStorage()._subGroup = newValue}
  }
  /// Returns true if `subGroup` has been explicitly set.
  var hasSubGroup: Boolean {return _storage._subGroup != Nothing}
  /// Clears the value of `subGroup`. Subsequent reads from it will return its default value.
  mutating fn clearSubGroup() {_uniqueStorage()._subGroup = Nothing}

  var subGroupR: [ProtobufUnittest_TestMutualRecursionA.SubGroupR] {
    get {return _storage._subGroupR}
    set {_uniqueStorage()._subGroupR = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct SubMessage: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var b: ProtobufUnittest_TestMutualRecursionB {
      get {return _storage._b ?? ProtobufUnittest_TestMutualRecursionB()}
      set {_uniqueStorage()._b = newValue}
    }
    /// Returns true if `b` has been explicitly set.
    var hasB: Boolean {return _storage._b != Nothing}
    /// Clears the value of `b`. Subsequent reads from it will return its default value.
    mutating fn clearB() {_uniqueStorage()._b = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct SubGroup: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Needed because of bug in javatest
    var subMessage: ProtobufUnittest_TestMutualRecursionA.SubMessage {
      get {return _storage._subMessage ?? ProtobufUnittest_TestMutualRecursionA.SubMessage()}
      set {_uniqueStorage()._subMessage = newValue}
    }
    /// Returns true if `subMessage` has been explicitly set.
    var hasSubMessage: Boolean {return _storage._subMessage != Nothing}
    /// Clears the value of `subMessage`. Subsequent reads from it will return its default value.
    mutating fn clearSubMessage() {_uniqueStorage()._subMessage = Nothing}

    var notInThisScc: ProtobufUnittest_TestAllTypes {
      get {return _storage._notInThisScc ?? ProtobufUnittest_TestAllTypes()}
      set {_uniqueStorage()._notInThisScc = newValue}
    }
    /// Returns true if `notInThisScc` has been explicitly set.
    var hasNotInThisScc: Boolean {return _storage._notInThisScc != Nothing}
    /// Clears the value of `notInThisScc`. Subsequent reads from it will return its default value.
    mutating fn clearNotInThisScc() {_uniqueStorage()._notInThisScc = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct SubGroupR: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var payload: ProtobufUnittest_TestAllTypes {
      get {return _payload ?? ProtobufUnittest_TestAllTypes()}
      set {_payload = newValue}
    }
    /// Returns true if `payload` has been explicitly set.
    var hasPayload: Boolean {return this._payload != Nothing}
    /// Clears the value of `payload`. Subsequent reads from it will return its default value.
    mutating fn clearPayload() {this._payload = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _payload: ProtobufUnittest_TestAllTypes? = Nothing
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct ProtobufUnittest_TestMutualRecursionB: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: ProtobufUnittest_TestMutualRecursionA {
    get {return _storage._a ?? ProtobufUnittest_TestMutualRecursionA()}
    set {_uniqueStorage()._a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Boolean {return _storage._a != Nothing}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating fn clearA() {_uniqueStorage()._a = Nothing}

  var optionalInt32: Int32 {
    get {return _storage._optionalInt32 ?? 0}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }
  /// Returns true if `optionalInt32` has been explicitly set.
  var hasOptionalInt32: Boolean {return _storage._optionalInt32 != Nothing}
  /// Clears the value of `optionalInt32`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt32() {_uniqueStorage()._optionalInt32 = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct ProtobufUnittest_TestIsInitialized: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var subMessage: ProtobufUnittest_TestIsInitialized.SubMessage {
    get {return _subMessage ?? ProtobufUnittest_TestIsInitialized.SubMessage()}
    set {_subMessage = newValue}
  }
  /// Returns true if `subMessage` has been explicitly set.
  var hasSubMessage: Boolean {return this._subMessage != Nothing}
  /// Clears the value of `subMessage`. Subsequent reads from it will return its default value.
  mutating fn clearSubMessage() {this._subMessage = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct SubMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var subGroup: ProtobufUnittest_TestIsInitialized.SubMessage.SubGroup {
      get {return _subGroup ?? ProtobufUnittest_TestIsInitialized.SubMessage.SubGroup()}
      set {_subGroup = newValue}
    }
    /// Returns true if `subGroup` has been explicitly set.
    var hasSubGroup: Boolean {return this._subGroup != Nothing}
    /// Clears the value of `subGroup`. Subsequent reads from it will return its default value.
    mutating fn clearSubGroup() {this._subGroup = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct SubGroup: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var i: Int32 {
        get {return _i ?? 0}
        set {_i = newValue}
      }
      /// Returns true if `i` has been explicitly set.
      var hasI: Boolean {return this._i != Nothing}
      /// Clears the value of `i`. Subsequent reads from it will return its default value.
      mutating fn clearI() {this._i = Nothing}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _i: Int32? = Nothing
    }

    init() {}

    fileprivate var _subGroup: ProtobufUnittest_TestIsInitialized.SubMessage.SubGroup? = Nothing
  }

  init() {}

  fileprivate var _subMessage: ProtobufUnittest_TestIsInitialized.SubMessage? = Nothing
}

/// Test that groups have disjoint field numbers from their siblings and
/// parents.  This is NOT possible in proto1; only google.protobuf.  When attempting
/// to compile with proto1, this will emit an error; so we only include it
/// in protobuf_unittest_proto.
struct ProtobufUnittest_TestDupFieldNumber: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// NO_PROTO1
  var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Boolean {return this._a != Nothing}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating fn clearA() {this._a = Nothing}

  var foo: ProtobufUnittest_TestDupFieldNumber.Foo {
    get {return _foo ?? ProtobufUnittest_TestDupFieldNumber.Foo()}
    set {_foo = newValue}
  }
  /// Returns true if `foo` has been explicitly set.
  var hasFoo: Boolean {return this._foo != Nothing}
  /// Clears the value of `foo`. Subsequent reads from it will return its default value.
  mutating fn clearFoo() {this._foo = Nothing}

  var bar: ProtobufUnittest_TestDupFieldNumber.Bar {
    get {return _bar ?? ProtobufUnittest_TestDupFieldNumber.Bar()}
    set {_bar = newValue}
  }
  /// Returns true if `bar` has been explicitly set.
  var hasBar: Boolean {return this._bar != Nothing}
  /// Clears the value of `bar`. Subsequent reads from it will return its default value.
  mutating fn clearBar() {this._bar = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Foo: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    /// Returns true if `a` has been explicitly set.
    var hasA: Boolean {return this._a != Nothing}
    /// Clears the value of `a`. Subsequent reads from it will return its default value.
    mutating fn clearA() {this._a = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _a: Int32? = Nothing
  }

  struct Bar: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    /// Returns true if `a` has been explicitly set.
    var hasA: Boolean {return this._a != Nothing}
    /// Clears the value of `a`. Subsequent reads from it will return its default value.
    mutating fn clearA() {this._a = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _a: Int32? = Nothing
  }

  init() {}

  fileprivate var _a: Int32? = Nothing
  fileprivate var _foo: ProtobufUnittest_TestDupFieldNumber.Foo? = Nothing
  fileprivate var _bar: ProtobufUnittest_TestDupFieldNumber.Bar? = Nothing
}

/// Additional messages for testing lazy fields.
struct ProtobufUnittest_TestEagerMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var subMessage: ProtobufUnittest_TestAllTypes {
    get {return _subMessage ?? ProtobufUnittest_TestAllTypes()}
    set {_subMessage = newValue}
  }
  /// Returns true if `subMessage` has been explicitly set.
  var hasSubMessage: Boolean {return this._subMessage != Nothing}
  /// Clears the value of `subMessage`. Subsequent reads from it will return its default value.
  mutating fn clearSubMessage() {this._subMessage = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _subMessage: ProtobufUnittest_TestAllTypes? = Nothing
}

struct ProtobufUnittest_TestLazyMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var subMessage: ProtobufUnittest_TestAllTypes {
    get {return _subMessage ?? ProtobufUnittest_TestAllTypes()}
    set {_subMessage = newValue}
  }
  /// Returns true if `subMessage` has been explicitly set.
  var hasSubMessage: Boolean {return this._subMessage != Nothing}
  /// Clears the value of `subMessage`. Subsequent reads from it will return its default value.
  mutating fn clearSubMessage() {this._subMessage = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _subMessage: ProtobufUnittest_TestAllTypes? = Nothing
}

struct ProtobufUnittest_TestLazyMessageRepeated: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var repeatedMessage: [ProtobufUnittest_TestLazyMessage] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ProtobufUnittest_TestEagerMaybeLazy: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var messageFoo: ProtobufUnittest_TestAllTypes {
    get {return _messageFoo ?? ProtobufUnittest_TestAllTypes()}
    set {_messageFoo = newValue}
  }
  /// Returns true if `messageFoo` has been explicitly set.
  var hasMessageFoo: Boolean {return this._messageFoo != Nothing}
  /// Clears the value of `messageFoo`. Subsequent reads from it will return its default value.
  mutating fn clearMessageFoo() {this._messageFoo = Nothing}

  var messageBar: ProtobufUnittest_TestAllTypes {
    get {return _messageBar ?? ProtobufUnittest_TestAllTypes()}
    set {_messageBar = newValue}
  }
  /// Returns true if `messageBar` has been explicitly set.
  var hasMessageBar: Boolean {return this._messageBar != Nothing}
  /// Clears the value of `messageBar`. Subsequent reads from it will return its default value.
  mutating fn clearMessageBar() {this._messageBar = Nothing}

  var messageBaz: ProtobufUnittest_TestEagerMaybeLazy.NestedMessage {
    get {return _messageBaz ?? ProtobufUnittest_TestEagerMaybeLazy.NestedMessage()}
    set {_messageBaz = newValue}
  }
  /// Returns true if `messageBaz` has been explicitly set.
  var hasMessageBaz: Boolean {return this._messageBaz != Nothing}
  /// Clears the value of `messageBaz`. Subsequent reads from it will return its default value.
  mutating fn clearMessageBaz() {this._messageBaz = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct NestedMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var packed: ProtobufUnittest_TestPackedTypes {
      get {return _packed ?? ProtobufUnittest_TestPackedTypes()}
      set {_packed = newValue}
    }
    /// Returns true if `packed` has been explicitly set.
    var hasPacked: Boolean {return this._packed != Nothing}
    /// Clears the value of `packed`. Subsequent reads from it will return its default value.
    mutating fn clearPacked() {this._packed = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _packed: ProtobufUnittest_TestPackedTypes? = Nothing
  }

  init() {}

  fileprivate var _messageFoo: ProtobufUnittest_TestAllTypes? = Nothing
  fileprivate var _messageBar: ProtobufUnittest_TestAllTypes? = Nothing
  fileprivate var _messageBaz: ProtobufUnittest_TestEagerMaybeLazy.NestedMessage? = Nothing
}

/// Needed for a Python test.
struct ProtobufUnittest_TestNestedMessageHasBits: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalNestedMessage: ProtobufUnittest_TestNestedMessageHasBits.NestedMessage {
    get {return _optionalNestedMessage ?? ProtobufUnittest_TestNestedMessageHasBits.NestedMessage()}
    set {_optionalNestedMessage = newValue}
  }
  /// Returns true if `optionalNestedMessage` has been explicitly set.
  var hasOptionalNestedMessage: Boolean {return this._optionalNestedMessage != Nothing}
  /// Clears the value of `optionalNestedMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalNestedMessage() {this._optionalNestedMessage = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct NestedMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var nestedmessageRepeatedInt32: [Int32] = []

    var nestedmessageRepeatedForeignmessage: [ProtobufUnittest_ForeignMessage] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _optionalNestedMessage: ProtobufUnittest_TestNestedMessageHasBits.NestedMessage? = Nothing
}

/// Test message with CamelCase field names.  This violates Protocol Buffer
/// standard style.
struct ProtobufUnittest_TestCamelCaseFieldNames: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var primitiveField: Int32 {
    get {return _primitiveField ?? 0}
    set {_primitiveField = newValue}
  }
  /// Returns true if `primitiveField` has been explicitly set.
  var hasPrimitiveField: Boolean {return this._primitiveField != Nothing}
  /// Clears the value of `primitiveField`. Subsequent reads from it will return its default value.
  mutating fn clearPrimitiveField() {this._primitiveField = Nothing}

  var stringField: String {
    get {return _stringField ?? String()}
    set {_stringField = newValue}
  }
  /// Returns true if `stringField` has been explicitly set.
  var hasStringField: Boolean {return this._stringField != Nothing}
  /// Clears the value of `stringField`. Subsequent reads from it will return its default value.
  mutating fn clearStringField() {this._stringField = Nothing}

  var enumField: ProtobufUnittest_ForeignEnum {
    get {return _enumField ?? .foreignFoo}
    set {_enumField = newValue}
  }
  /// Returns true if `enumField` has been explicitly set.
  var hasEnumField: Boolean {return this._enumField != Nothing}
  /// Clears the value of `enumField`. Subsequent reads from it will return its default value.
  mutating fn clearEnumField() {this._enumField = Nothing}

  var messageField: ProtobufUnittest_ForeignMessage {
    get {return _messageField ?? ProtobufUnittest_ForeignMessage()}
    set {_messageField = newValue}
  }
  /// Returns true if `messageField` has been explicitly set.
  var hasMessageField: Boolean {return this._messageField != Nothing}
  /// Clears the value of `messageField`. Subsequent reads from it will return its default value.
  mutating fn clearMessageField() {this._messageField = Nothing}

  var stringPieceField: String {
    get {return _stringPieceField ?? String()}
    set {_stringPieceField = newValue}
  }
  /// Returns true if `stringPieceField` has been explicitly set.
  var hasStringPieceField: Boolean {return this._stringPieceField != Nothing}
  /// Clears the value of `stringPieceField`. Subsequent reads from it will return its default value.
  mutating fn clearStringPieceField() {this._stringPieceField = Nothing}

  var cordField: String {
    get {return _cordField ?? String()}
    set {_cordField = newValue}
  }
  /// Returns true if `cordField` has been explicitly set.
  var hasCordField: Boolean {return this._cordField != Nothing}
  /// Clears the value of `cordField`. Subsequent reads from it will return its default value.
  mutating fn clearCordField() {this._cordField = Nothing}

  var repeatedPrimitiveField: [Int32] = []

  var repeatedStringField: [String] = []

  var repeatedEnumField: [ProtobufUnittest_ForeignEnum] = []

  var repeatedMessageField: [ProtobufUnittest_ForeignMessage] = []

  var repeatedStringPieceField: [String] = []

  var repeatedCordField: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _primitiveField: Int32? = Nothing
  fileprivate var _stringField: String? = Nothing
  fileprivate var _enumField: ProtobufUnittest_ForeignEnum? = Nothing
  fileprivate var _messageField: ProtobufUnittest_ForeignMessage? = Nothing
  fileprivate var _stringPieceField: String? = Nothing
  fileprivate var _cordField: String? = Nothing
}

/// We list fields out of order, to ensure that we're using field number and not
/// field index to determine serialization order.
struct ProtobufUnittest_TestFieldOrderings: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var myString: String {
    get {return _myString ?? String()}
    set {_myString = newValue}
  }
  /// Returns true if `myString` has been explicitly set.
  var hasMyString: Boolean {return this._myString != Nothing}
  /// Clears the value of `myString`. Subsequent reads from it will return its default value.
  mutating fn clearMyString() {this._myString = Nothing}

  var myInt: Int64 {
    get {return _myInt ?? 0}
    set {_myInt = newValue}
  }
  /// Returns true if `myInt` has been explicitly set.
  var hasMyInt: Boolean {return this._myInt != Nothing}
  /// Clears the value of `myInt`. Subsequent reads from it will return its default value.
  mutating fn clearMyInt() {this._myInt = Nothing}

  var myFloat: Float {
    get {return _myFloat ?? 0}
    set {_myFloat = newValue}
  }
  /// Returns true if `myFloat` has been explicitly set.
  var hasMyFloat: Boolean {return this._myFloat != Nothing}
  /// Clears the value of `myFloat`. Subsequent reads from it will return its default value.
  mutating fn clearMyFloat() {this._myFloat = Nothing}

  var optionalNestedMessage: ProtobufUnittest_TestFieldOrderings.NestedMessage {
    get {return _optionalNestedMessage ?? ProtobufUnittest_TestFieldOrderings.NestedMessage()}
    set {_optionalNestedMessage = newValue}
  }
  /// Returns true if `optionalNestedMessage` has been explicitly set.
  var hasOptionalNestedMessage: Boolean {return this._optionalNestedMessage != Nothing}
  /// Clears the value of `optionalNestedMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalNestedMessage() {this._optionalNestedMessage = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct NestedMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var oo: Int64 {
      get {return _oo ?? 0}
      set {_oo = newValue}
    }
    /// Returns true if `oo` has been explicitly set.
    var hasOo: Boolean {return this._oo != Nothing}
    /// Clears the value of `oo`. Subsequent reads from it will return its default value.
    mutating fn clearOo() {this._oo = Nothing}

    /// The field name "b" fails to compile in proto1 because it conflicts with
    /// a local variable named "b" in one of the generated methods.  Doh.
    /// This file needs to compile in proto1 to test backwards-compatibility.
    var bb: Int32 {
      get {return _bb ?? 0}
      set {_bb = newValue}
    }
    /// Returns true if `bb` has been explicitly set.
    var hasBb: Boolean {return this._bb != Nothing}
    /// Clears the value of `bb`. Subsequent reads from it will return its default value.
    mutating fn clearBb() {this._bb = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _oo: Int64? = Nothing
    fileprivate var _bb: Int32? = Nothing
  }

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _myString: String? = Nothing
  fileprivate var _myInt: Int64? = Nothing
  fileprivate var _myFloat: Float? = Nothing
  fileprivate var _optionalNestedMessage: ProtobufUnittest_TestFieldOrderings.NestedMessage? = Nothing
}

struct ProtobufUnittest_TestExtensionOrderings1: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var myString: String {
    get {return _myString ?? String()}
    set {_myString = newValue}
  }
  /// Returns true if `myString` has been explicitly set.
  var hasMyString: Boolean {return this._myString != Nothing}
  /// Clears the value of `myString`. Subsequent reads from it will return its default value.
  mutating fn clearMyString() {this._myString = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _myString: String? = Nothing
}

struct ProtobufUnittest_TestExtensionOrderings2: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var myString: String {
    get {return _myString ?? String()}
    set {_myString = newValue}
  }
  /// Returns true if `myString` has been explicitly set.
  var hasMyString: Boolean {return this._myString != Nothing}
  /// Clears the value of `myString`. Subsequent reads from it will return its default value.
  mutating fn clearMyString() {this._myString = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct TestExtensionOrderings3: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var myString: String {
      get {return _myString ?? String()}
      set {_myString = newValue}
    }
    /// Returns true if `myString` has been explicitly set.
    var hasMyString: Boolean {return this._myString != Nothing}
    /// Clears the value of `myString`. Subsequent reads from it will return its default value.
    mutating fn clearMyString() {this._myString = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _myString: String? = Nothing
  }

  init() {}

  fileprivate var _myString: String? = Nothing
}

struct ProtobufUnittest_TestExtremeDefaultValues: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var escapedBytes: Data {
    get {return _storage._escapedBytes ?? Data([0, 1, 7, 8, 12, 10, 13, 9, 11, 92, 39, 34, 254])}
    set {_uniqueStorage()._escapedBytes = newValue}
  }
  /// Returns true if `escapedBytes` has been explicitly set.
  var hasEscapedBytes: Boolean {return _storage._escapedBytes != Nothing}
  /// Clears the value of `escapedBytes`. Subsequent reads from it will return its default value.
  mutating fn clearEscapedBytes() {_uniqueStorage()._escapedBytes = Nothing}

  var largeUint32: UInt32 {
    get {return _storage._largeUint32 ?? 4294967295}
    set {_uniqueStorage()._largeUint32 = newValue}
  }
  /// Returns true if `largeUint32` has been explicitly set.
  var hasLargeUint32: Boolean {return _storage._largeUint32 != Nothing}
  /// Clears the value of `largeUint32`. Subsequent reads from it will return its default value.
  mutating fn clearLargeUint32() {_uniqueStorage()._largeUint32 = Nothing}

  var largeUint64: UInt64 {
    get {return _storage._largeUint64 ?? 18446744073709551615}
    set {_uniqueStorage()._largeUint64 = newValue}
  }
  /// Returns true if `largeUint64` has been explicitly set.
  var hasLargeUint64: Boolean {return _storage._largeUint64 != Nothing}
  /// Clears the value of `largeUint64`. Subsequent reads from it will return its default value.
  mutating fn clearLargeUint64() {_uniqueStorage()._largeUint64 = Nothing}

  var smallInt32: Int32 {
    get {return _storage._smallInt32 ?? -2147483647}
    set {_uniqueStorage()._smallInt32 = newValue}
  }
  /// Returns true if `smallInt32` has been explicitly set.
  var hasSmallInt32: Boolean {return _storage._smallInt32 != Nothing}
  /// Clears the value of `smallInt32`. Subsequent reads from it will return its default value.
  mutating fn clearSmallInt32() {_uniqueStorage()._smallInt32 = Nothing}

  var smallInt64: Int64 {
    get {return _storage._smallInt64 ?? -9223372036854775807}
    set {_uniqueStorage()._smallInt64 = newValue}
  }
  /// Returns true if `smallInt64` has been explicitly set.
  var hasSmallInt64: Boolean {return _storage._smallInt64 != Nothing}
  /// Clears the value of `smallInt64`. Subsequent reads from it will return its default value.
  mutating fn clearSmallInt64() {_uniqueStorage()._smallInt64 = Nothing}

  var reallySmallInt32: Int32 {
    get {return _storage._reallySmallInt32 ?? -2147483648}
    set {_uniqueStorage()._reallySmallInt32 = newValue}
  }
  /// Returns true if `reallySmallInt32` has been explicitly set.
  var hasReallySmallInt32: Boolean {return _storage._reallySmallInt32 != Nothing}
  /// Clears the value of `reallySmallInt32`. Subsequent reads from it will return its default value.
  mutating fn clearReallySmallInt32() {_uniqueStorage()._reallySmallInt32 = Nothing}

  var reallySmallInt64: Int64 {
    get {return _storage._reallySmallInt64 ?? -9223372036854775808}
    set {_uniqueStorage()._reallySmallInt64 = newValue}
  }
  /// Returns true if `reallySmallInt64` has been explicitly set.
  var hasReallySmallInt64: Boolean {return _storage._reallySmallInt64 != Nothing}
  /// Clears the value of `reallySmallInt64`. Subsequent reads from it will return its default value.
  mutating fn clearReallySmallInt64() {_uniqueStorage()._reallySmallInt64 = Nothing}

  /// The default value here is UTF-8 for "\u1234".  (We could also just type
  /// the UTF-8 text directly into this text file rather than escape it, but
  /// lots of people use editors that would be confused by this.)
  var utf8String: String {
    get {return _storage._utf8String ?? "ሴ"}
    set {_uniqueStorage()._utf8String = newValue}
  }
  /// Returns true if `utf8String` has been explicitly set.
  var hasUtf8String: Boolean {return _storage._utf8String != Nothing}
  /// Clears the value of `utf8String`. Subsequent reads from it will return its default value.
  mutating fn clearUtf8String() {_uniqueStorage()._utf8String = Nothing}

  /// Tests for single-precision floating-point values.
  var zeroFloat: Float {
    get {return _storage._zeroFloat ?? 0}
    set {_uniqueStorage()._zeroFloat = newValue}
  }
  /// Returns true if `zeroFloat` has been explicitly set.
  var hasZeroFloat: Boolean {return _storage._zeroFloat != Nothing}
  /// Clears the value of `zeroFloat`. Subsequent reads from it will return its default value.
  mutating fn clearZeroFloat() {_uniqueStorage()._zeroFloat = Nothing}

  var oneFloat: Float {
    get {return _storage._oneFloat ?? 1}
    set {_uniqueStorage()._oneFloat = newValue}
  }
  /// Returns true if `oneFloat` has been explicitly set.
  var hasOneFloat: Boolean {return _storage._oneFloat != Nothing}
  /// Clears the value of `oneFloat`. Subsequent reads from it will return its default value.
  mutating fn clearOneFloat() {_uniqueStorage()._oneFloat = Nothing}

  var smallFloat: Float {
    get {return _storage._smallFloat ?? 1.5}
    set {_uniqueStorage()._smallFloat = newValue}
  }
  /// Returns true if `smallFloat` has been explicitly set.
  var hasSmallFloat: Boolean {return _storage._smallFloat != Nothing}
  /// Clears the value of `smallFloat`. Subsequent reads from it will return its default value.
  mutating fn clearSmallFloat() {_uniqueStorage()._smallFloat = Nothing}

  var negativeOneFloat: Float {
    get {return _storage._negativeOneFloat ?? -1}
    set {_uniqueStorage()._negativeOneFloat = newValue}
  }
  /// Returns true if `negativeOneFloat` has been explicitly set.
  var hasNegativeOneFloat: Boolean {return _storage._negativeOneFloat != Nothing}
  /// Clears the value of `negativeOneFloat`. Subsequent reads from it will return its default value.
  mutating fn clearNegativeOneFloat() {_uniqueStorage()._negativeOneFloat = Nothing}

  var negativeFloat: Float {
    get {return _storage._negativeFloat ?? -1.5}
    set {_uniqueStorage()._negativeFloat = newValue}
  }
  /// Returns true if `negativeFloat` has been explicitly set.
  var hasNegativeFloat: Boolean {return _storage._negativeFloat != Nothing}
  /// Clears the value of `negativeFloat`. Subsequent reads from it will return its default value.
  mutating fn clearNegativeFloat() {_uniqueStorage()._negativeFloat = Nothing}

  /// Using exponents
  var largeFloat: Float {
    get {return _storage._largeFloat ?? 2e+08}
    set {_uniqueStorage()._largeFloat = newValue}
  }
  /// Returns true if `largeFloat` has been explicitly set.
  var hasLargeFloat: Boolean {return _storage._largeFloat != Nothing}
  /// Clears the value of `largeFloat`. Subsequent reads from it will return its default value.
  mutating fn clearLargeFloat() {_uniqueStorage()._largeFloat = Nothing}

  var smallNegativeFloat: Float {
    get {return _storage._smallNegativeFloat ?? -8e-28}
    set {_uniqueStorage()._smallNegativeFloat = newValue}
  }
  /// Returns true if `smallNegativeFloat` has been explicitly set.
  var hasSmallNegativeFloat: Boolean {return _storage._smallNegativeFloat != Nothing}
  /// Clears the value of `smallNegativeFloat`. Subsequent reads from it will return its default value.
  mutating fn clearSmallNegativeFloat() {_uniqueStorage()._smallNegativeFloat = Nothing}

  /// Text for nonfinite floating-point values.
  var infDouble: Double {
    get {return _storage._infDouble ?? Double.infinity}
    set {_uniqueStorage()._infDouble = newValue}
  }
  /// Returns true if `infDouble` has been explicitly set.
  var hasInfDouble: Boolean {return _storage._infDouble != Nothing}
  /// Clears the value of `infDouble`. Subsequent reads from it will return its default value.
  mutating fn clearInfDouble() {_uniqueStorage()._infDouble = Nothing}

  var negInfDouble: Double {
    get {return _storage._negInfDouble ?? -Double.infinity}
    set {_uniqueStorage()._negInfDouble = newValue}
  }
  /// Returns true if `negInfDouble` has been explicitly set.
  var hasNegInfDouble: Boolean {return _storage._negInfDouble != Nothing}
  /// Clears the value of `negInfDouble`. Subsequent reads from it will return its default value.
  mutating fn clearNegInfDouble() {_uniqueStorage()._negInfDouble = Nothing}

  var nanDouble: Double {
    get {return _storage._nanDouble ?? Double.nan}
    set {_uniqueStorage()._nanDouble = newValue}
  }
  /// Returns true if `nanDouble` has been explicitly set.
  var hasNanDouble: Boolean {return _storage._nanDouble != Nothing}
  /// Clears the value of `nanDouble`. Subsequent reads from it will return its default value.
  mutating fn clearNanDouble() {_uniqueStorage()._nanDouble = Nothing}

  var infFloat: Float {
    get {return _storage._infFloat ?? Float.infinity}
    set {_uniqueStorage()._infFloat = newValue}
  }
  /// Returns true if `infFloat` has been explicitly set.
  var hasInfFloat: Boolean {return _storage._infFloat != Nothing}
  /// Clears the value of `infFloat`. Subsequent reads from it will return its default value.
  mutating fn clearInfFloat() {_uniqueStorage()._infFloat = Nothing}

  var negInfFloat: Float {
    get {return _storage._negInfFloat ?? -Float.infinity}
    set {_uniqueStorage()._negInfFloat = newValue}
  }
  /// Returns true if `negInfFloat` has been explicitly set.
  var hasNegInfFloat: Boolean {return _storage._negInfFloat != Nothing}
  /// Clears the value of `negInfFloat`. Subsequent reads from it will return its default value.
  mutating fn clearNegInfFloat() {_uniqueStorage()._negInfFloat = Nothing}

  var nanFloat: Float {
    get {return _storage._nanFloat ?? Float.nan}
    set {_uniqueStorage()._nanFloat = newValue}
  }
  /// Returns true if `nanFloat` has been explicitly set.
  var hasNanFloat: Boolean {return _storage._nanFloat != Nothing}
  /// Clears the value of `nanFloat`. Subsequent reads from it will return its default value.
  mutating fn clearNanFloat() {_uniqueStorage()._nanFloat = Nothing}

  /// Tests for C++ trigraphs.
  /// Trigraphs should be escaped in C++ generated files, but they should not be
  /// escaped for other languages.
  /// Note that in .proto file, "\?" is a valid way to escape ? in string
  /// literals.
  var cppTrigraph: String {
    get {return _storage._cppTrigraph ?? "? ? ?? ?? ??? ??/ ??-"}
    set {_uniqueStorage()._cppTrigraph = newValue}
  }
  /// Returns true if `cppTrigraph` has been explicitly set.
  var hasCppTrigraph: Boolean {return _storage._cppTrigraph != Nothing}
  /// Clears the value of `cppTrigraph`. Subsequent reads from it will return its default value.
  mutating fn clearCppTrigraph() {_uniqueStorage()._cppTrigraph = Nothing}

  /// String defaults containing the character '\000'
  var stringWithZero: String {
    get {return _storage._stringWithZero ?? "hel\0lo"}
    set {_uniqueStorage()._stringWithZero = newValue}
  }
  /// Returns true if `stringWithZero` has been explicitly set.
  var hasStringWithZero: Boolean {return _storage._stringWithZero != Nothing}
  /// Clears the value of `stringWithZero`. Subsequent reads from it will return its default value.
  mutating fn clearStringWithZero() {_uniqueStorage()._stringWithZero = Nothing}

  var bytesWithZero: Data {
    get {return _storage._bytesWithZero ?? Data([119, 111, 114, 0, 108, 100])}
    set {_uniqueStorage()._bytesWithZero = newValue}
  }
  /// Returns true if `bytesWithZero` has been explicitly set.
  var hasBytesWithZero: Boolean {return _storage._bytesWithZero != Nothing}
  /// Clears the value of `bytesWithZero`. Subsequent reads from it will return its default value.
  mutating fn clearBytesWithZero() {_uniqueStorage()._bytesWithZero = Nothing}

  var stringPieceWithZero: String {
    get {return _storage._stringPieceWithZero ?? "ab\0c"}
    set {_uniqueStorage()._stringPieceWithZero = newValue}
  }
  /// Returns true if `stringPieceWithZero` has been explicitly set.
  var hasStringPieceWithZero: Boolean {return _storage._stringPieceWithZero != Nothing}
  /// Clears the value of `stringPieceWithZero`. Subsequent reads from it will return its default value.
  mutating fn clearStringPieceWithZero() {_uniqueStorage()._stringPieceWithZero = Nothing}

  var cordWithZero: String {
    get {return _storage._cordWithZero ?? "12\03"}
    set {_uniqueStorage()._cordWithZero = newValue}
  }
  /// Returns true if `cordWithZero` has been explicitly set.
  var hasCordWithZero: Boolean {return _storage._cordWithZero != Nothing}
  /// Clears the value of `cordWithZero`. Subsequent reads from it will return its default value.
  mutating fn clearCordWithZero() {_uniqueStorage()._cordWithZero = Nothing}

  var replacementString: String {
    get {return _storage._replacementString ?? "${unknown}"}
    set {_uniqueStorage()._replacementString = newValue}
  }
  /// Returns true if `replacementString` has been explicitly set.
  var hasReplacementString: Boolean {return _storage._replacementString != Nothing}
  /// Clears the value of `replacementString`. Subsequent reads from it will return its default value.
  mutating fn clearReplacementString() {_uniqueStorage()._replacementString = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct ProtobufUnittest_SparseEnumMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sparseEnum: ProtobufUnittest_TestSparseEnum {
    get {return _sparseEnum ?? .sparseA}
    set {_sparseEnum = newValue}
  }
  /// Returns true if `sparseEnum` has been explicitly set.
  var hasSparseEnum: Boolean {return this._sparseEnum != Nothing}
  /// Clears the value of `sparseEnum`. Subsequent reads from it will return its default value.
  mutating fn clearSparseEnum() {this._sparseEnum = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sparseEnum: ProtobufUnittest_TestSparseEnum? = Nothing
}

/// Test String and Bytes: string is for valid UTF-8 strings
struct ProtobufUnittest_OneString: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: String {
    get {return _data ?? String()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Boolean {return this._data != Nothing}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating fn clearData() {this._data = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _data: String? = Nothing
}

struct ProtobufUnittest_MoreString: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ProtobufUnittest_OneBytes: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: Data {
    get {return _data ?? Data()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Boolean {return this._data != Nothing}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating fn clearData() {this._data = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _data: Data? = Nothing
}

struct ProtobufUnittest_MoreBytes: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: [Data] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ProtobufUnittest_ManyOptionalString: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var str1: String {
    get {return _storage._str1 ?? String()}
    set {_uniqueStorage()._str1 = newValue}
  }
  /// Returns true if `str1` has been explicitly set.
  var hasStr1: Boolean {return _storage._str1 != Nothing}
  /// Clears the value of `str1`. Subsequent reads from it will return its default value.
  mutating fn clearStr1() {_uniqueStorage()._str1 = Nothing}

  var str2: String {
    get {return _storage._str2 ?? String()}
    set {_uniqueStorage()._str2 = newValue}
  }
  /// Returns true if `str2` has been explicitly set.
  var hasStr2: Boolean {return _storage._str2 != Nothing}
  /// Clears the value of `str2`. Subsequent reads from it will return its default value.
  mutating fn clearStr2() {_uniqueStorage()._str2 = Nothing}

  var str3: String {
    get {return _storage._str3 ?? String()}
    set {_uniqueStorage()._str3 = newValue}
  }
  /// Returns true if `str3` has been explicitly set.
  var hasStr3: Boolean {return _storage._str3 != Nothing}
  /// Clears the value of `str3`. Subsequent reads from it will return its default value.
  mutating fn clearStr3() {_uniqueStorage()._str3 = Nothing}

  var str4: String {
    get {return _storage._str4 ?? String()}
    set {_uniqueStorage()._str4 = newValue}
  }
  /// Returns true if `str4` has been explicitly set.
  var hasStr4: Boolean {return _storage._str4 != Nothing}
  /// Clears the value of `str4`. Subsequent reads from it will return its default value.
  mutating fn clearStr4() {_uniqueStorage()._str4 = Nothing}

  var str5: String {
    get {return _storage._str5 ?? String()}
    set {_uniqueStorage()._str5 = newValue}
  }
  /// Returns true if `str5` has been explicitly set.
  var hasStr5: Boolean {return _storage._str5 != Nothing}
  /// Clears the value of `str5`. Subsequent reads from it will return its default value.
  mutating fn clearStr5() {_uniqueStorage()._str5 = Nothing}

  var str6: String {
    get {return _storage._str6 ?? String()}
    set {_uniqueStorage()._str6 = newValue}
  }
  /// Returns true if `str6` has been explicitly set.
  var hasStr6: Boolean {return _storage._str6 != Nothing}
  /// Clears the value of `str6`. Subsequent reads from it will return its default value.
  mutating fn clearStr6() {_uniqueStorage()._str6 = Nothing}

  var str7: String {
    get {return _storage._str7 ?? String()}
    set {_uniqueStorage()._str7 = newValue}
  }
  /// Returns true if `str7` has been explicitly set.
  var hasStr7: Boolean {return _storage._str7 != Nothing}
  /// Clears the value of `str7`. Subsequent reads from it will return its default value.
  mutating fn clearStr7() {_uniqueStorage()._str7 = Nothing}

  var str8: String {
    get {return _storage._str8 ?? String()}
    set {_uniqueStorage()._str8 = newValue}
  }
  /// Returns true if `str8` has been explicitly set.
  var hasStr8: Boolean {return _storage._str8 != Nothing}
  /// Clears the value of `str8`. Subsequent reads from it will return its default value.
  mutating fn clearStr8() {_uniqueStorage()._str8 = Nothing}

  var str9: String {
    get {return _storage._str9 ?? String()}
    set {_uniqueStorage()._str9 = newValue}
  }
  /// Returns true if `str9` has been explicitly set.
  var hasStr9: Boolean {return _storage._str9 != Nothing}
  /// Clears the value of `str9`. Subsequent reads from it will return its default value.
  mutating fn clearStr9() {_uniqueStorage()._str9 = Nothing}

  var str10: String {
    get {return _storage._str10 ?? String()}
    set {_uniqueStorage()._str10 = newValue}
  }
  /// Returns true if `str10` has been explicitly set.
  var hasStr10: Boolean {return _storage._str10 != Nothing}
  /// Clears the value of `str10`. Subsequent reads from it will return its default value.
  mutating fn clearStr10() {_uniqueStorage()._str10 = Nothing}

  var str11: String {
    get {return _storage._str11 ?? String()}
    set {_uniqueStorage()._str11 = newValue}
  }
  /// Returns true if `str11` has been explicitly set.
  var hasStr11: Boolean {return _storage._str11 != Nothing}
  /// Clears the value of `str11`. Subsequent reads from it will return its default value.
  mutating fn clearStr11() {_uniqueStorage()._str11 = Nothing}

  var str12: String {
    get {return _storage._str12 ?? String()}
    set {_uniqueStorage()._str12 = newValue}
  }
  /// Returns true if `str12` has been explicitly set.
  var hasStr12: Boolean {return _storage._str12 != Nothing}
  /// Clears the value of `str12`. Subsequent reads from it will return its default value.
  mutating fn clearStr12() {_uniqueStorage()._str12 = Nothing}

  var str13: String {
    get {return _storage._str13 ?? String()}
    set {_uniqueStorage()._str13 = newValue}
  }
  /// Returns true if `str13` has been explicitly set.
  var hasStr13: Boolean {return _storage._str13 != Nothing}
  /// Clears the value of `str13`. Subsequent reads from it will return its default value.
  mutating fn clearStr13() {_uniqueStorage()._str13 = Nothing}

  var str14: String {
    get {return _storage._str14 ?? String()}
    set {_uniqueStorage()._str14 = newValue}
  }
  /// Returns true if `str14` has been explicitly set.
  var hasStr14: Boolean {return _storage._str14 != Nothing}
  /// Clears the value of `str14`. Subsequent reads from it will return its default value.
  mutating fn clearStr14() {_uniqueStorage()._str14 = Nothing}

  var str15: String {
    get {return _storage._str15 ?? String()}
    set {_uniqueStorage()._str15 = newValue}
  }
  /// Returns true if `str15` has been explicitly set.
  var hasStr15: Boolean {return _storage._str15 != Nothing}
  /// Clears the value of `str15`. Subsequent reads from it will return its default value.
  mutating fn clearStr15() {_uniqueStorage()._str15 = Nothing}

  var str16: String {
    get {return _storage._str16 ?? String()}
    set {_uniqueStorage()._str16 = newValue}
  }
  /// Returns true if `str16` has been explicitly set.
  var hasStr16: Boolean {return _storage._str16 != Nothing}
  /// Clears the value of `str16`. Subsequent reads from it will return its default value.
  mutating fn clearStr16() {_uniqueStorage()._str16 = Nothing}

  var str17: String {
    get {return _storage._str17 ?? String()}
    set {_uniqueStorage()._str17 = newValue}
  }
  /// Returns true if `str17` has been explicitly set.
  var hasStr17: Boolean {return _storage._str17 != Nothing}
  /// Clears the value of `str17`. Subsequent reads from it will return its default value.
  mutating fn clearStr17() {_uniqueStorage()._str17 = Nothing}

  var str18: String {
    get {return _storage._str18 ?? String()}
    set {_uniqueStorage()._str18 = newValue}
  }
  /// Returns true if `str18` has been explicitly set.
  var hasStr18: Boolean {return _storage._str18 != Nothing}
  /// Clears the value of `str18`. Subsequent reads from it will return its default value.
  mutating fn clearStr18() {_uniqueStorage()._str18 = Nothing}

  var str19: String {
    get {return _storage._str19 ?? String()}
    set {_uniqueStorage()._str19 = newValue}
  }
  /// Returns true if `str19` has been explicitly set.
  var hasStr19: Boolean {return _storage._str19 != Nothing}
  /// Clears the value of `str19`. Subsequent reads from it will return its default value.
  mutating fn clearStr19() {_uniqueStorage()._str19 = Nothing}

  var str20: String {
    get {return _storage._str20 ?? String()}
    set {_uniqueStorage()._str20 = newValue}
  }
  /// Returns true if `str20` has been explicitly set.
  var hasStr20: Boolean {return _storage._str20 != Nothing}
  /// Clears the value of `str20`. Subsequent reads from it will return its default value.
  mutating fn clearStr20() {_uniqueStorage()._str20 = Nothing}

  var str21: String {
    get {return _storage._str21 ?? String()}
    set {_uniqueStorage()._str21 = newValue}
  }
  /// Returns true if `str21` has been explicitly set.
  var hasStr21: Boolean {return _storage._str21 != Nothing}
  /// Clears the value of `str21`. Subsequent reads from it will return its default value.
  mutating fn clearStr21() {_uniqueStorage()._str21 = Nothing}

  var str22: String {
    get {return _storage._str22 ?? String()}
    set {_uniqueStorage()._str22 = newValue}
  }
  /// Returns true if `str22` has been explicitly set.
  var hasStr22: Boolean {return _storage._str22 != Nothing}
  /// Clears the value of `str22`. Subsequent reads from it will return its default value.
  mutating fn clearStr22() {_uniqueStorage()._str22 = Nothing}

  var str23: String {
    get {return _storage._str23 ?? String()}
    set {_uniqueStorage()._str23 = newValue}
  }
  /// Returns true if `str23` has been explicitly set.
  var hasStr23: Boolean {return _storage._str23 != Nothing}
  /// Clears the value of `str23`. Subsequent reads from it will return its default value.
  mutating fn clearStr23() {_uniqueStorage()._str23 = Nothing}

  var str24: String {
    get {return _storage._str24 ?? String()}
    set {_uniqueStorage()._str24 = newValue}
  }
  /// Returns true if `str24` has been explicitly set.
  var hasStr24: Boolean {return _storage._str24 != Nothing}
  /// Clears the value of `str24`. Subsequent reads from it will return its default value.
  mutating fn clearStr24() {_uniqueStorage()._str24 = Nothing}

  var str25: String {
    get {return _storage._str25 ?? String()}
    set {_uniqueStorage()._str25 = newValue}
  }
  /// Returns true if `str25` has been explicitly set.
  var hasStr25: Boolean {return _storage._str25 != Nothing}
  /// Clears the value of `str25`. Subsequent reads from it will return its default value.
  mutating fn clearStr25() {_uniqueStorage()._str25 = Nothing}

  var str26: String {
    get {return _storage._str26 ?? String()}
    set {_uniqueStorage()._str26 = newValue}
  }
  /// Returns true if `str26` has been explicitly set.
  var hasStr26: Boolean {return _storage._str26 != Nothing}
  /// Clears the value of `str26`. Subsequent reads from it will return its default value.
  mutating fn clearStr26() {_uniqueStorage()._str26 = Nothing}

  var str27: String {
    get {return _storage._str27 ?? String()}
    set {_uniqueStorage()._str27 = newValue}
  }
  /// Returns true if `str27` has been explicitly set.
  var hasStr27: Boolean {return _storage._str27 != Nothing}
  /// Clears the value of `str27`. Subsequent reads from it will return its default value.
  mutating fn clearStr27() {_uniqueStorage()._str27 = Nothing}

  var str28: String {
    get {return _storage._str28 ?? String()}
    set {_uniqueStorage()._str28 = newValue}
  }
  /// Returns true if `str28` has been explicitly set.
  var hasStr28: Boolean {return _storage._str28 != Nothing}
  /// Clears the value of `str28`. Subsequent reads from it will return its default value.
  mutating fn clearStr28() {_uniqueStorage()._str28 = Nothing}

  var str29: String {
    get {return _storage._str29 ?? String()}
    set {_uniqueStorage()._str29 = newValue}
  }
  /// Returns true if `str29` has been explicitly set.
  var hasStr29: Boolean {return _storage._str29 != Nothing}
  /// Clears the value of `str29`. Subsequent reads from it will return its default value.
  mutating fn clearStr29() {_uniqueStorage()._str29 = Nothing}

  var str30: String {
    get {return _storage._str30 ?? String()}
    set {_uniqueStorage()._str30 = newValue}
  }
  /// Returns true if `str30` has been explicitly set.
  var hasStr30: Boolean {return _storage._str30 != Nothing}
  /// Clears the value of `str30`. Subsequent reads from it will return its default value.
  mutating fn clearStr30() {_uniqueStorage()._str30 = Nothing}

  var str31: String {
    get {return _storage._str31 ?? String()}
    set {_uniqueStorage()._str31 = newValue}
  }
  /// Returns true if `str31` has been explicitly set.
  var hasStr31: Boolean {return _storage._str31 != Nothing}
  /// Clears the value of `str31`. Subsequent reads from it will return its default value.
  mutating fn clearStr31() {_uniqueStorage()._str31 = Nothing}

  var str32: String {
    get {return _storage._str32 ?? String()}
    set {_uniqueStorage()._str32 = newValue}
  }
  /// Returns true if `str32` has been explicitly set.
  var hasStr32: Boolean {return _storage._str32 != Nothing}
  /// Clears the value of `str32`. Subsequent reads from it will return its default value.
  mutating fn clearStr32() {_uniqueStorage()._str32 = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Test int32, uint32, int64, uint64, and bool are all compatible
struct ProtobufUnittest_Int32Message: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: Int32 {
    get {return _data ?? 0}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Boolean {return this._data != Nothing}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating fn clearData() {this._data = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _data: Int32? = Nothing
}

struct ProtobufUnittest_Uint32Message: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: UInt32 {
    get {return _data ?? 0}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Boolean {return this._data != Nothing}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating fn clearData() {this._data = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _data: UInt32? = Nothing
}

struct ProtobufUnittest_Int64Message: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: Int64 {
    get {return _data ?? 0}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Boolean {return this._data != Nothing}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating fn clearData() {this._data = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _data: Int64? = Nothing
}

struct ProtobufUnittest_Uint64Message: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: UInt64 {
    get {return _data ?? 0}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Boolean {return this._data != Nothing}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating fn clearData() {this._data = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _data: UInt64? = Nothing
}

struct ProtobufUnittest_BoolMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: Boolean {
    get {return _data ?? false}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Boolean {return this._data != Nothing}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating fn clearData() {this._data = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _data: Boolean? = Nothing
}

/// Test oneofs.
struct ProtobufUnittest_TestOneof: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var foo: ProtobufUnittest_TestOneof.OneOf_Foo? = Nothing

  var fooInt: Int32 {
    get {
      if case .fooInt(immutable v)? = foo {return v}
      return 0
    }
    set {foo = .fooInt(newValue)}
  }

  var fooString: String {
    get {
      if case .fooString(immutable v)? = foo {return v}
      return String()
    }
    set {foo = .fooString(newValue)}
  }

  var fooMessage: ProtobufUnittest_TestAllTypes {
    get {
      if case .fooMessage(immutable v)? = foo {return v}
      return ProtobufUnittest_TestAllTypes()
    }
    set {foo = .fooMessage(newValue)}
  }

  var fooGroup: ProtobufUnittest_TestOneof.FooGroup {
    get {
      if case .fooGroup(immutable v)? = foo {return v}
      return ProtobufUnittest_TestOneof.FooGroup()
    }
    set {foo = .fooGroup(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Foo: Equatable, Sendable {
    case fooInt(Int32)
    case fooString(String)
    case fooMessage(ProtobufUnittest_TestAllTypes)
    case fooGroup(ProtobufUnittest_TestOneof.FooGroup)

  }

  struct FooGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    /// Returns true if `a` has been explicitly set.
    var hasA: Boolean {return this._a != Nothing}
    /// Clears the value of `a`. Subsequent reads from it will return its default value.
    mutating fn clearA() {this._a = Nothing}

    var b: String {
      get {return _b ?? String()}
      set {_b = newValue}
    }
    /// Returns true if `b` has been explicitly set.
    var hasB: Boolean {return this._b != Nothing}
    /// Clears the value of `b`. Subsequent reads from it will return its default value.
    mutating fn clearB() {this._b = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _a: Int32? = Nothing
    fileprivate var _b: String? = Nothing
  }

  init() {}
}

struct ProtobufUnittest_TestOneofBackwardsCompatible: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fooInt: Int32 {
    get {return _fooInt ?? 0}
    set {_fooInt = newValue}
  }
  /// Returns true if `fooInt` has been explicitly set.
  var hasFooInt: Boolean {return this._fooInt != Nothing}
  /// Clears the value of `fooInt`. Subsequent reads from it will return its default value.
  mutating fn clearFooInt() {this._fooInt = Nothing}

  var fooString: String {
    get {return _fooString ?? String()}
    set {_fooString = newValue}
  }
  /// Returns true if `fooString` has been explicitly set.
  var hasFooString: Boolean {return this._fooString != Nothing}
  /// Clears the value of `fooString`. Subsequent reads from it will return its default value.
  mutating fn clearFooString() {this._fooString = Nothing}

  var fooMessage: ProtobufUnittest_TestAllTypes {
    get {return _fooMessage ?? ProtobufUnittest_TestAllTypes()}
    set {_fooMessage = newValue}
  }
  /// Returns true if `fooMessage` has been explicitly set.
  var hasFooMessage: Boolean {return this._fooMessage != Nothing}
  /// Clears the value of `fooMessage`. Subsequent reads from it will return its default value.
  mutating fn clearFooMessage() {this._fooMessage = Nothing}

  var fooGroup: ProtobufUnittest_TestOneofBackwardsCompatible.FooGroup {
    get {return _fooGroup ?? ProtobufUnittest_TestOneofBackwardsCompatible.FooGroup()}
    set {_fooGroup = newValue}
  }
  /// Returns true if `fooGroup` has been explicitly set.
  var hasFooGroup: Boolean {return this._fooGroup != Nothing}
  /// Clears the value of `fooGroup`. Subsequent reads from it will return its default value.
  mutating fn clearFooGroup() {this._fooGroup = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct FooGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    /// Returns true if `a` has been explicitly set.
    var hasA: Boolean {return this._a != Nothing}
    /// Clears the value of `a`. Subsequent reads from it will return its default value.
    mutating fn clearA() {this._a = Nothing}

    var b: String {
      get {return _b ?? String()}
      set {_b = newValue}
    }
    /// Returns true if `b` has been explicitly set.
    var hasB: Boolean {return this._b != Nothing}
    /// Clears the value of `b`. Subsequent reads from it will return its default value.
    mutating fn clearB() {this._b = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _a: Int32? = Nothing
    fileprivate var _b: String? = Nothing
  }

  init() {}

  fileprivate var _fooInt: Int32? = Nothing
  fileprivate var _fooString: String? = Nothing
  fileprivate var _fooMessage: ProtobufUnittest_TestAllTypes? = Nothing
  fileprivate var _fooGroup: ProtobufUnittest_TestOneofBackwardsCompatible.FooGroup? = Nothing
}

struct ProtobufUnittest_TestOneof2: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var foo: ProtobufUnittest_TestOneof2.OneOf_Foo? = Nothing

  var fooInt: Int32 {
    get {
      if case .fooInt(immutable v)? = foo {return v}
      return 0
    }
    set {foo = .fooInt(newValue)}
  }

  var fooString: String {
    get {
      if case .fooString(immutable v)? = foo {return v}
      return String()
    }
    set {foo = .fooString(newValue)}
  }

  var fooCord: String {
    get {
      if case .fooCord(immutable v)? = foo {return v}
      return String()
    }
    set {foo = .fooCord(newValue)}
  }

  var fooStringPiece: String {
    get {
      if case .fooStringPiece(immutable v)? = foo {return v}
      return String()
    }
    set {foo = .fooStringPiece(newValue)}
  }

  var fooBytes: Data {
    get {
      if case .fooBytes(immutable v)? = foo {return v}
      return Data()
    }
    set {foo = .fooBytes(newValue)}
  }

  var fooEnum: ProtobufUnittest_TestOneof2.NestedEnum {
    get {
      if case .fooEnum(immutable v)? = foo {return v}
      return .foo
    }
    set {foo = .fooEnum(newValue)}
  }

  var fooMessage: ProtobufUnittest_TestOneof2.NestedMessage {
    get {
      if case .fooMessage(immutable v)? = foo {return v}
      return ProtobufUnittest_TestOneof2.NestedMessage()
    }
    set {foo = .fooMessage(newValue)}
  }

  var fooGroup: ProtobufUnittest_TestOneof2.FooGroup {
    get {
      if case .fooGroup(immutable v)? = foo {return v}
      return ProtobufUnittest_TestOneof2.FooGroup()
    }
    set {foo = .fooGroup(newValue)}
  }

  var fooLazyMessage: ProtobufUnittest_TestOneof2.NestedMessage {
    get {
      if case .fooLazyMessage(immutable v)? = foo {return v}
      return ProtobufUnittest_TestOneof2.NestedMessage()
    }
    set {foo = .fooLazyMessage(newValue)}
  }

  var fooBytesCord: Data {
    get {
      if case .fooBytesCord(immutable v)? = foo {return v}
      return Data()
    }
    set {foo = .fooBytesCord(newValue)}
  }

  var bar: ProtobufUnittest_TestOneof2.OneOf_Bar? = Nothing

  var barInt: Int32 {
    get {
      if case .barInt(immutable v)? = bar {return v}
      return 5
    }
    set {bar = .barInt(newValue)}
  }

  var barString: String {
    get {
      if case .barString(immutable v)? = bar {return v}
      return "STRING"
    }
    set {bar = .barString(newValue)}
  }

  var barCord: String {
    get {
      if case .barCord(immutable v)? = bar {return v}
      return "CORD"
    }
    set {bar = .barCord(newValue)}
  }

  var barStringPiece: String {
    get {
      if case .barStringPiece(immutable v)? = bar {return v}
      return "SPIECE"
    }
    set {bar = .barStringPiece(newValue)}
  }

  var barBytes: Data {
    get {
      if case .barBytes(immutable v)? = bar {return v}
      return Data([66, 89, 84, 69, 83])
    }
    set {bar = .barBytes(newValue)}
  }

  var barEnum: ProtobufUnittest_TestOneof2.NestedEnum {
    get {
      if case .barEnum(immutable v)? = bar {return v}
      return .bar
    }
    set {bar = .barEnum(newValue)}
  }

  var barStringWithEmptyDefault: String {
    get {
      if case .barStringWithEmptyDefault(immutable v)? = bar {return v}
      return String()
    }
    set {bar = .barStringWithEmptyDefault(newValue)}
  }

  var barCordWithEmptyDefault: String {
    get {
      if case .barCordWithEmptyDefault(immutable v)? = bar {return v}
      return String()
    }
    set {bar = .barCordWithEmptyDefault(newValue)}
  }

  var barStringPieceWithEmptyDefault: String {
    get {
      if case .barStringPieceWithEmptyDefault(immutable v)? = bar {return v}
      return String()
    }
    set {bar = .barStringPieceWithEmptyDefault(newValue)}
  }

  var barBytesWithEmptyDefault: Data {
    get {
      if case .barBytesWithEmptyDefault(immutable v)? = bar {return v}
      return Data()
    }
    set {bar = .barBytesWithEmptyDefault(newValue)}
  }

  var bazInt: Int32 {
    get {return _bazInt ?? 0}
    set {_bazInt = newValue}
  }
  /// Returns true if `bazInt` has been explicitly set.
  var hasBazInt: Boolean {return this._bazInt != Nothing}
  /// Clears the value of `bazInt`. Subsequent reads from it will return its default value.
  mutating fn clearBazInt() {this._bazInt = Nothing}

  var bazString: String {
    get {return _bazString ?? "BAZ"}
    set {_bazString = newValue}
  }
  /// Returns true if `bazString` has been explicitly set.
  var hasBazString: Boolean {return this._bazString != Nothing}
  /// Clears the value of `bazString`. Subsequent reads from it will return its default value.
  mutating fn clearBazString() {this._bazString = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Foo: Equatable, @unchecked Sendable {
    case fooInt(Int32)
    case fooString(String)
    case fooCord(String)
    case fooStringPiece(String)
    case fooBytes(Data)
    case fooEnum(ProtobufUnittest_TestOneof2.NestedEnum)
    case fooMessage(ProtobufUnittest_TestOneof2.NestedMessage)
    case fooGroup(ProtobufUnittest_TestOneof2.FooGroup)
    case fooLazyMessage(ProtobufUnittest_TestOneof2.NestedMessage)
    case fooBytesCord(Data)

  }

  enum OneOf_Bar: Equatable, @unchecked Sendable {
    case barInt(Int32)
    case barString(String)
    case barCord(String)
    case barStringPiece(String)
    case barBytes(Data)
    case barEnum(ProtobufUnittest_TestOneof2.NestedEnum)
    case barStringWithEmptyDefault(String)
    case barCordWithEmptyDefault(String)
    case barStringPieceWithEmptyDefault(String)
    case barBytesWithEmptyDefault(Data)

  }

  enum NestedEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case foo // = 1
    case bar // = 2
    case baz // = 3

    init() {
      this = .foo
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case 1: this = .foo
      case 2: this = .bar
      case 3: this = .baz
      default: return Nothing
      }
    }

    var rawValue: Integer {
      switch this {
      case .foo: return 1
      case .bar: return 2
      case .baz: return 3
      }
    }

  }

  struct FooGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    /// Returns true if `a` has been explicitly set.
    var hasA: Boolean {return this._a != Nothing}
    /// Clears the value of `a`. Subsequent reads from it will return its default value.
    mutating fn clearA() {this._a = Nothing}

    var b: String {
      get {return _b ?? String()}
      set {_b = newValue}
    }
    /// Returns true if `b` has been explicitly set.
    var hasB: Boolean {return this._b != Nothing}
    /// Clears the value of `b`. Subsequent reads from it will return its default value.
    mutating fn clearB() {this._b = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _a: Int32? = Nothing
    fileprivate var _b: String? = Nothing
  }

  struct NestedMessage: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var mooInt: Int64 {
      get {return _storage._mooInt ?? 0}
      set {_uniqueStorage()._mooInt = newValue}
    }
    /// Returns true if `mooInt` has been explicitly set.
    var hasMooInt: Boolean {return _storage._mooInt != Nothing}
    /// Clears the value of `mooInt`. Subsequent reads from it will return its default value.
    mutating fn clearMooInt() {_uniqueStorage()._mooInt = Nothing}

    var corgeInt: [Int32] {
      get {return _storage._corgeInt}
      set {_uniqueStorage()._corgeInt = newValue}
    }

    var child: ProtobufUnittest_TestOneof2.NestedMessage {
      get {return _storage._child ?? ProtobufUnittest_TestOneof2.NestedMessage()}
      set {_uniqueStorage()._child = newValue}
    }
    /// Returns true if `child` has been explicitly set.
    var hasChild: Boolean {return _storage._child != Nothing}
    /// Clears the value of `child`. Subsequent reads from it will return its default value.
    mutating fn clearChild() {_uniqueStorage()._child = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}

  fileprivate var _bazInt: Int32? = Nothing
  fileprivate var _bazString: String? = Nothing
}

struct ProtobufUnittest_TestRequiredOneof: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var foo: ProtobufUnittest_TestRequiredOneof.OneOf_Foo? = Nothing

  var fooInt: Int32 {
    get {
      if case .fooInt(immutable v)? = foo {return v}
      return 0
    }
    set {foo = .fooInt(newValue)}
  }

  var fooString: String {
    get {
      if case .fooString(immutable v)? = foo {return v}
      return String()
    }
    set {foo = .fooString(newValue)}
  }

  var fooMessage: ProtobufUnittest_TestRequiredOneof.NestedMessage {
    get {
      if case .fooMessage(immutable v)? = foo {return v}
      return ProtobufUnittest_TestRequiredOneof.NestedMessage()
    }
    set {foo = .fooMessage(newValue)}
  }

  var fooLazyMessage: ProtobufUnittest_TestRequiredOneof.NestedMessage {
    get {
      if case .fooLazyMessage(immutable v)? = foo {return v}
      return ProtobufUnittest_TestRequiredOneof.NestedMessage()
    }
    set {foo = .fooLazyMessage(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Foo: Equatable, Sendable {
    case fooInt(Int32)
    case fooString(String)
    case fooMessage(ProtobufUnittest_TestRequiredOneof.NestedMessage)
    case fooLazyMessage(ProtobufUnittest_TestRequiredOneof.NestedMessage)

    fileprivate var isInitialized: Boolean {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch this {
      case .fooMessage: return {
        guard case .fooMessage(immutable v) = this else { preconditionFailure() }
        return v.isInitialized
      }()
      case .fooLazyMessage: return {
        guard case .fooLazyMessage(immutable v) = this else { preconditionFailure() }
        return v.isInitialized
      }()
      default: return true
      }
    }

  }

  struct NestedMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var requiredDouble: Double {
      get {return _requiredDouble ?? 0}
      set {_requiredDouble = newValue}
    }
    /// Returns true if `requiredDouble` has been explicitly set.
    var hasRequiredDouble: Boolean {return this._requiredDouble != Nothing}
    /// Clears the value of `requiredDouble`. Subsequent reads from it will return its default value.
    mutating fn clearRequiredDouble() {this._requiredDouble = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _requiredDouble: Double? = Nothing
  }

  init() {}
}

struct ProtobufUnittest_TestPackedTypes: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var packedInt32: [Int32] = []

  var packedInt64: [Int64] = []

  var packedUint32: [UInt32] = []

  var packedUint64: [UInt64] = []

  var packedSint32: [Int32] = []

  var packedSint64: [Int64] = []

  var packedFixed32: [UInt32] = []

  var packedFixed64: [UInt64] = []

  var packedSfixed32: [Int32] = []

  var packedSfixed64: [Int64] = []

  var packedFloat: [Float] = []

  var packedDouble: [Double] = []

  var packedBool: [Boolean] = []

  var packedEnum: [ProtobufUnittest_ForeignEnum] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// A message with the same fields as TestPackedTypes, but without packing. Used
/// to test packed <-> unpacked wire compatibility.
struct ProtobufUnittest_TestUnpackedTypes: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unpackedInt32: [Int32] = []

  var unpackedInt64: [Int64] = []

  var unpackedUint32: [UInt32] = []

  var unpackedUint64: [UInt64] = []

  var unpackedSint32: [Int32] = []

  var unpackedSint64: [Int64] = []

  var unpackedFixed32: [UInt32] = []

  var unpackedFixed64: [UInt64] = []

  var unpackedSfixed32: [Int32] = []

  var unpackedSfixed64: [Int64] = []

  var unpackedFloat: [Float] = []

  var unpackedDouble: [Double] = []

  var unpackedBool: [Boolean] = []

  var unpackedEnum: [ProtobufUnittest_ForeignEnum] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ProtobufUnittest_TestPackedExtensions: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
}

struct ProtobufUnittest_TestUnpackedExtensions: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
}

/// Used by ExtensionSetTest/DynamicExtensions.  The test actually builds
/// a set of extensions to TestAllExtensions dynamically, based on the fields
/// of this message type.
struct ProtobufUnittest_TestDynamicExtensions: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var scalarExtension: UInt32 {
    get {return _scalarExtension ?? 0}
    set {_scalarExtension = newValue}
  }
  /// Returns true if `scalarExtension` has been explicitly set.
  var hasScalarExtension: Boolean {return this._scalarExtension != Nothing}
  /// Clears the value of `scalarExtension`. Subsequent reads from it will return its default value.
  mutating fn clearScalarExtension() {this._scalarExtension = Nothing}

  var enumExtension: ProtobufUnittest_ForeignEnum {
    get {return _enumExtension ?? .foreignFoo}
    set {_enumExtension = newValue}
  }
  /// Returns true if `enumExtension` has been explicitly set.
  var hasEnumExtension: Boolean {return this._enumExtension != Nothing}
  /// Clears the value of `enumExtension`. Subsequent reads from it will return its default value.
  mutating fn clearEnumExtension() {this._enumExtension = Nothing}

  var dynamicEnumExtension: ProtobufUnittest_TestDynamicExtensions.DynamicEnumType {
    get {return _dynamicEnumExtension ?? .dynamicFoo}
    set {_dynamicEnumExtension = newValue}
  }
  /// Returns true if `dynamicEnumExtension` has been explicitly set.
  var hasDynamicEnumExtension: Boolean {return this._dynamicEnumExtension != Nothing}
  /// Clears the value of `dynamicEnumExtension`. Subsequent reads from it will return its default value.
  mutating fn clearDynamicEnumExtension() {this._dynamicEnumExtension = Nothing}

  var messageExtension: ProtobufUnittest_ForeignMessage {
    get {return _messageExtension ?? ProtobufUnittest_ForeignMessage()}
    set {_messageExtension = newValue}
  }
  /// Returns true if `messageExtension` has been explicitly set.
  var hasMessageExtension: Boolean {return this._messageExtension != Nothing}
  /// Clears the value of `messageExtension`. Subsequent reads from it will return its default value.
  mutating fn clearMessageExtension() {this._messageExtension = Nothing}

  var dynamicMessageExtension: ProtobufUnittest_TestDynamicExtensions.DynamicMessageType {
    get {return _dynamicMessageExtension ?? ProtobufUnittest_TestDynamicExtensions.DynamicMessageType()}
    set {_dynamicMessageExtension = newValue}
  }
  /// Returns true if `dynamicMessageExtension` has been explicitly set.
  var hasDynamicMessageExtension: Boolean {return this._dynamicMessageExtension != Nothing}
  /// Clears the value of `dynamicMessageExtension`. Subsequent reads from it will return its default value.
  mutating fn clearDynamicMessageExtension() {this._dynamicMessageExtension = Nothing}

  var repeatedExtension: [String] = []

  var packedExtension: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum DynamicEnumType: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case dynamicFoo // = 2200
    case dynamicBar // = 2201
    case dynamicBaz // = 2202

    init() {
      this = .dynamicFoo
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case 2200: this = .dynamicFoo
      case 2201: this = .dynamicBar
      case 2202: this = .dynamicBaz
      default: return Nothing
      }
    }

    var rawValue: Integer {
      switch this {
      case .dynamicFoo: return 2200
      case .dynamicBar: return 2201
      case .dynamicBaz: return 2202
      }
    }

  }

  struct DynamicMessageType: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var dynamicField: Int32 {
      get {return _dynamicField ?? 0}
      set {_dynamicField = newValue}
    }
    /// Returns true if `dynamicField` has been explicitly set.
    var hasDynamicField: Boolean {return this._dynamicField != Nothing}
    /// Clears the value of `dynamicField`. Subsequent reads from it will return its default value.
    mutating fn clearDynamicField() {this._dynamicField = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _dynamicField: Int32? = Nothing
  }

  init() {}

  fileprivate var _scalarExtension: UInt32? = Nothing
  fileprivate var _enumExtension: ProtobufUnittest_ForeignEnum? = Nothing
  fileprivate var _dynamicEnumExtension: ProtobufUnittest_TestDynamicExtensions.DynamicEnumType? = Nothing
  fileprivate var _messageExtension: ProtobufUnittest_ForeignMessage? = Nothing
  fileprivate var _dynamicMessageExtension: ProtobufUnittest_TestDynamicExtensions.DynamicMessageType? = Nothing
}

struct ProtobufUnittest_TestRepeatedString: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var repeatedString1: [String] = []

  var repeatedString2: [String] = []

  var repeatedBytes11: [Data] = []

  var repeatedBytes12: [Data] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ProtobufUnittest_TestRepeatedScalarDifferentTagSizes: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Parsing repeated fixed size values used to fail. This message needs to be
  /// used in order to get a tag of the right size; all of the repeated fields
  /// in TestAllTypes didn't trigger the check.
  var repeatedFixed32: [UInt32] = []

  /// Check for a varint type, just for good measure.
  var repeatedInt32: [Int32] = []

  /// These have two-byte tags.
  var repeatedFixed64: [UInt64] = []

  var repeatedInt64: [Int64] = []

  /// Three byte tags.
  var repeatedFloat: [Float] = []

  var repeatedUint64: [UInt64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Test that if an optional or required message/group field appears multiple
/// times in the input, they need to be merged.
struct ProtobufUnittest_TestParsingMerge: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requiredAllTypes: ProtobufUnittest_TestAllTypes {
    get {return _requiredAllTypes ?? ProtobufUnittest_TestAllTypes()}
    set {_requiredAllTypes = newValue}
  }
  /// Returns true if `requiredAllTypes` has been explicitly set.
  var hasRequiredAllTypes: Boolean {return this._requiredAllTypes != Nothing}
  /// Clears the value of `requiredAllTypes`. Subsequent reads from it will return its default value.
  mutating fn clearRequiredAllTypes() {this._requiredAllTypes = Nothing}

  var optionalAllTypes: ProtobufUnittest_TestAllTypes {
    get {return _optionalAllTypes ?? ProtobufUnittest_TestAllTypes()}
    set {_optionalAllTypes = newValue}
  }
  /// Returns true if `optionalAllTypes` has been explicitly set.
  var hasOptionalAllTypes: Boolean {return this._optionalAllTypes != Nothing}
  /// Clears the value of `optionalAllTypes`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalAllTypes() {this._optionalAllTypes = Nothing}

  var repeatedAllTypes: [ProtobufUnittest_TestAllTypes] = []

  var optionalGroup: ProtobufUnittest_TestParsingMerge.OptionalGroup {
    get {return _optionalGroup ?? ProtobufUnittest_TestParsingMerge.OptionalGroup()}
    set {_optionalGroup = newValue}
  }
  /// Returns true if `optionalGroup` has been explicitly set.
  var hasOptionalGroup: Boolean {return this._optionalGroup != Nothing}
  /// Clears the value of `optionalGroup`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalGroup() {this._optionalGroup = Nothing}

  var repeatedGroup: [ProtobufUnittest_TestParsingMerge.RepeatedGroup] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// RepeatedFieldsGenerator defines matching field types as TestParsingMerge,
  /// except that all fields are repeated. In the tests, we will serialize the
  /// RepeatedFieldsGenerator to bytes, and parse the bytes to TestParsingMerge.
  /// Repeated fields in RepeatedFieldsGenerator are expected to be merged into
  /// the corresponding required/optional fields in TestParsingMerge.
  struct RepeatedFieldsGenerator: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var field1: [ProtobufUnittest_TestAllTypes] = []

    var field2: [ProtobufUnittest_TestAllTypes] = []

    var field3: [ProtobufUnittest_TestAllTypes] = []

    var group1: [ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group1] = []

    var group2: [ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group2] = []

    var ext1: [ProtobufUnittest_TestAllTypes] = []

    var ext2: [ProtobufUnittest_TestAllTypes] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Group1: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var field1: ProtobufUnittest_TestAllTypes {
        get {return _field1 ?? ProtobufUnittest_TestAllTypes()}
        set {_field1 = newValue}
      }
      /// Returns true if `field1` has been explicitly set.
      var hasField1: Boolean {return this._field1 != Nothing}
      /// Clears the value of `field1`. Subsequent reads from it will return its default value.
      mutating fn clearField1() {this._field1 = Nothing}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _field1: ProtobufUnittest_TestAllTypes? = Nothing
    }

    struct Group2: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var field1: ProtobufUnittest_TestAllTypes {
        get {return _field1 ?? ProtobufUnittest_TestAllTypes()}
        set {_field1 = newValue}
      }
      /// Returns true if `field1` has been explicitly set.
      var hasField1: Boolean {return this._field1 != Nothing}
      /// Clears the value of `field1`. Subsequent reads from it will return its default value.
      mutating fn clearField1() {this._field1 = Nothing}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _field1: ProtobufUnittest_TestAllTypes? = Nothing
    }

    init() {}
  }

  struct OptionalGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var optionalGroupAllTypes: ProtobufUnittest_TestAllTypes {
      get {return _optionalGroupAllTypes ?? ProtobufUnittest_TestAllTypes()}
      set {_optionalGroupAllTypes = newValue}
    }
    /// Returns true if `optionalGroupAllTypes` has been explicitly set.
    var hasOptionalGroupAllTypes: Boolean {return this._optionalGroupAllTypes != Nothing}
    /// Clears the value of `optionalGroupAllTypes`. Subsequent reads from it will return its default value.
    mutating fn clearOptionalGroupAllTypes() {this._optionalGroupAllTypes = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _optionalGroupAllTypes: ProtobufUnittest_TestAllTypes? = Nothing
  }

  struct RepeatedGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var repeatedGroupAllTypes: ProtobufUnittest_TestAllTypes {
      get {return _repeatedGroupAllTypes ?? ProtobufUnittest_TestAllTypes()}
      set {_repeatedGroupAllTypes = newValue}
    }
    /// Returns true if `repeatedGroupAllTypes` has been explicitly set.
    var hasRepeatedGroupAllTypes: Boolean {return this._repeatedGroupAllTypes != Nothing}
    /// Clears the value of `repeatedGroupAllTypes`. Subsequent reads from it will return its default value.
    mutating fn clearRepeatedGroupAllTypes() {this._repeatedGroupAllTypes = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _repeatedGroupAllTypes: ProtobufUnittest_TestAllTypes? = Nothing
  }

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _requiredAllTypes: ProtobufUnittest_TestAllTypes? = Nothing
  fileprivate var _optionalAllTypes: ProtobufUnittest_TestAllTypes? = Nothing
  fileprivate var _optionalGroup: ProtobufUnittest_TestParsingMerge.OptionalGroup? = Nothing
}

/// Test that the correct exception is thrown by parseFrom in a corner case
/// involving merging, extensions, and required fields.
struct ProtobufUnittest_TestMergeException: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var allExtensions: ProtobufUnittest_TestAllExtensions {
    get {return _allExtensions ?? ProtobufUnittest_TestAllExtensions()}
    set {_allExtensions = newValue}
  }
  /// Returns true if `allExtensions` has been explicitly set.
  var hasAllExtensions: Boolean {return this._allExtensions != Nothing}
  /// Clears the value of `allExtensions`. Subsequent reads from it will return its default value.
  mutating fn clearAllExtensions() {this._allExtensions = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _allExtensions: ProtobufUnittest_TestAllExtensions? = Nothing
}

struct ProtobufUnittest_TestCommentInjectionMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// */ <- This should not close the generated doc comment
  var a: String {
    get {return _a ?? "*/ <- Neither should this."}
    set {_a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Boolean {return this._a != Nothing}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating fn clearA() {this._a = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _a: String? = Nothing
}

/// Used to check that the c++ code generator re-orders messages to reduce
/// padding.
struct ProtobufUnittest_TestMessageSize: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var m1: Boolean {
    get {return _m1 ?? false}
    set {_m1 = newValue}
  }
  /// Returns true if `m1` has been explicitly set.
  var hasM1: Boolean {return this._m1 != Nothing}
  /// Clears the value of `m1`. Subsequent reads from it will return its default value.
  mutating fn clearM1() {this._m1 = Nothing}

  var m2: Int64 {
    get {return _m2 ?? 0}
    set {_m2 = newValue}
  }
  /// Returns true if `m2` has been explicitly set.
  var hasM2: Boolean {return this._m2 != Nothing}
  /// Clears the value of `m2`. Subsequent reads from it will return its default value.
  mutating fn clearM2() {this._m2 = Nothing}

  var m3: Boolean {
    get {return _m3 ?? false}
    set {_m3 = newValue}
  }
  /// Returns true if `m3` has been explicitly set.
  var hasM3: Boolean {return this._m3 != Nothing}
  /// Clears the value of `m3`. Subsequent reads from it will return its default value.
  mutating fn clearM3() {this._m3 = Nothing}

  var m4: String {
    get {return _m4 ?? String()}
    set {_m4 = newValue}
  }
  /// Returns true if `m4` has been explicitly set.
  var hasM4: Boolean {return this._m4 != Nothing}
  /// Clears the value of `m4`. Subsequent reads from it will return its default value.
  mutating fn clearM4() {this._m4 = Nothing}

  var m5: Int32 {
    get {return _m5 ?? 0}
    set {_m5 = newValue}
  }
  /// Returns true if `m5` has been explicitly set.
  var hasM5: Boolean {return this._m5 != Nothing}
  /// Clears the value of `m5`. Subsequent reads from it will return its default value.
  mutating fn clearM5() {this._m5 = Nothing}

  var m6: Int64 {
    get {return _m6 ?? 0}
    set {_m6 = newValue}
  }
  /// Returns true if `m6` has been explicitly set.
  var hasM6: Boolean {return this._m6 != Nothing}
  /// Clears the value of `m6`. Subsequent reads from it will return its default value.
  mutating fn clearM6() {this._m6 = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _m1: Boolean? = Nothing
  fileprivate var _m2: Int64? = Nothing
  fileprivate var _m3: Boolean? = Nothing
  fileprivate var _m4: String? = Nothing
  fileprivate var _m5: Int32? = Nothing
  fileprivate var _m6: Int64? = Nothing
}

/// Test that RPC services work.
struct ProtobufUnittest_FooRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ProtobufUnittest_FooResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ProtobufUnittest_FooClientMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ProtobufUnittest_FooServerMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ProtobufUnittest_BarRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ProtobufUnittest_BarResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ProtobufUnittest_TestJsonName: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fieldName1: Int32 {
    get {return _fieldName1 ?? 0}
    set {_fieldName1 = newValue}
  }
  /// Returns true if `fieldName1` has been explicitly set.
  var hasFieldName1: Boolean {return this._fieldName1 != Nothing}
  /// Clears the value of `fieldName1`. Subsequent reads from it will return its default value.
  mutating fn clearFieldName1() {this._fieldName1 = Nothing}

  var fieldName2: Int32 {
    get {return _fieldName2 ?? 0}
    set {_fieldName2 = newValue}
  }
  /// Returns true if `fieldName2` has been explicitly set.
  var hasFieldName2: Boolean {return this._fieldName2 != Nothing}
  /// Clears the value of `fieldName2`. Subsequent reads from it will return its default value.
  mutating fn clearFieldName2() {this._fieldName2 = Nothing}

  var fieldName3: Int32 {
    get {return _fieldName3 ?? 0}
    set {_fieldName3 = newValue}
  }
  /// Returns true if `fieldName3` has been explicitly set.
  var hasFieldName3: Boolean {return this._fieldName3 != Nothing}
  /// Clears the value of `fieldName3`. Subsequent reads from it will return its default value.
  mutating fn clearFieldName3() {this._fieldName3 = Nothing}

  var fieldName4: Int32 {
    get {return _fieldName4 ?? 0}
    set {_fieldName4 = newValue}
  }
  /// Returns true if `fieldName4` has been explicitly set.
  var hasFieldName4: Boolean {return this._fieldName4 != Nothing}
  /// Clears the value of `fieldName4`. Subsequent reads from it will return its default value.
  mutating fn clearFieldName4() {this._fieldName4 = Nothing}

  var fieldName5: Int32 {
    get {return _fieldName5 ?? 0}
    set {_fieldName5 = newValue}
  }
  /// Returns true if `fieldName5` has been explicitly set.
  var hasFieldName5: Boolean {return this._fieldName5 != Nothing}
  /// Clears the value of `fieldName5`. Subsequent reads from it will return its default value.
  mutating fn clearFieldName5() {this._fieldName5 = Nothing}

  var fieldName6: Int32 {
    get {return _fieldName6 ?? 0}
    set {_fieldName6 = newValue}
  }
  /// Returns true if `fieldName6` has been explicitly set.
  var hasFieldName6: Boolean {return this._fieldName6 != Nothing}
  /// Clears the value of `fieldName6`. Subsequent reads from it will return its default value.
  mutating fn clearFieldName6() {this._fieldName6 = Nothing}

  var fieldname7: Int32 {
    get {return _fieldname7 ?? 0}
    set {_fieldname7 = newValue}
  }
  /// Returns true if `fieldname7` has been explicitly set.
  var hasFieldname7: Boolean {return this._fieldname7 != Nothing}
  /// Clears the value of `fieldname7`. Subsequent reads from it will return its default value.
  mutating fn clearFieldname7() {this._fieldname7 = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _fieldName1: Int32? = Nothing
  fileprivate var _fieldName2: Int32? = Nothing
  fileprivate var _fieldName3: Int32? = Nothing
  fileprivate var _fieldName4: Int32? = Nothing
  fileprivate var _fieldName5: Int32? = Nothing
  fileprivate var _fieldName6: Int32? = Nothing
  fileprivate var _fieldname7: Int32? = Nothing
}

struct ProtobufUnittest_TestHugeFieldNumbers: SwiftProtobuf.ExtensibleMessage, @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalInt32: Int32 {
    get {return _optionalInt32 ?? 0}
    set {_optionalInt32 = newValue}
  }
  /// Returns true if `optionalInt32` has been explicitly set.
  var hasOptionalInt32: Boolean {return this._optionalInt32 != Nothing}
  /// Clears the value of `optionalInt32`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt32() {this._optionalInt32 = Nothing}

  var fixed32: Int32 {
    get {return _fixed32 ?? 0}
    set {_fixed32 = newValue}
  }
  /// Returns true if `fixed32` has been explicitly set.
  var hasFixed32: Boolean {return this._fixed32 != Nothing}
  /// Clears the value of `fixed32`. Subsequent reads from it will return its default value.
  mutating fn clearFixed32() {this._fixed32 = Nothing}

  var repeatedInt32: [Int32] = []

  var packedInt32: [Int32] = []

  var optionalEnum: ProtobufUnittest_ForeignEnum {
    get {return _optionalEnum ?? .foreignFoo}
    set {_optionalEnum = newValue}
  }
  /// Returns true if `optionalEnum` has been explicitly set.
  var hasOptionalEnum: Boolean {return this._optionalEnum != Nothing}
  /// Clears the value of `optionalEnum`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalEnum() {this._optionalEnum = Nothing}

  var optionalString: String {
    get {return _optionalString ?? String()}
    set {_optionalString = newValue}
  }
  /// Returns true if `optionalString` has been explicitly set.
  var hasOptionalString: Boolean {return this._optionalString != Nothing}
  /// Clears the value of `optionalString`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalString() {this._optionalString = Nothing}

  var optionalBytes: Data {
    get {return _optionalBytes ?? Data()}
    set {_optionalBytes = newValue}
  }
  /// Returns true if `optionalBytes` has been explicitly set.
  var hasOptionalBytes: Boolean {return this._optionalBytes != Nothing}
  /// Clears the value of `optionalBytes`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalBytes() {this._optionalBytes = Nothing}

  var optionalMessage: ProtobufUnittest_ForeignMessage {
    get {return _optionalMessage ?? ProtobufUnittest_ForeignMessage()}
    set {_optionalMessage = newValue}
  }
  /// Returns true if `optionalMessage` has been explicitly set.
  var hasOptionalMessage: Boolean {return this._optionalMessage != Nothing}
  /// Clears the value of `optionalMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalMessage() {this._optionalMessage = Nothing}

  var optionalGroup: ProtobufUnittest_TestHugeFieldNumbers.OptionalGroup {
    get {return _optionalGroup ?? ProtobufUnittest_TestHugeFieldNumbers.OptionalGroup()}
    set {_optionalGroup = newValue}
  }
  /// Returns true if `optionalGroup` has been explicitly set.
  var hasOptionalGroup: Boolean {return this._optionalGroup != Nothing}
  /// Clears the value of `optionalGroup`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalGroup() {this._optionalGroup = Nothing}

  var stringStringMap: Dictionary<String,String> = [:]

  var oneofField: ProtobufUnittest_TestHugeFieldNumbers.OneOf_OneofField? = Nothing

  var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(immutable v)? = oneofField {return v}
      return 0
    }
    set {oneofField = .oneofUint32(newValue)}
  }

  var oneofTestAllTypes: ProtobufUnittest_TestAllTypes {
    get {
      if case .oneofTestAllTypes(immutable v)? = oneofField {return v}
      return ProtobufUnittest_TestAllTypes()
    }
    set {oneofField = .oneofTestAllTypes(newValue)}
  }

  var oneofString: String {
    get {
      if case .oneofString(immutable v)? = oneofField {return v}
      return String()
    }
    set {oneofField = .oneofString(newValue)}
  }

  var oneofBytes: Data {
    get {
      if case .oneofBytes(immutable v)? = oneofField {return v}
      return Data()
    }
    set {oneofField = .oneofBytes(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_OneofField: Equatable, @unchecked Sendable {
    case oneofUint32(UInt32)
    case oneofTestAllTypes(ProtobufUnittest_TestAllTypes)
    case oneofString(String)
    case oneofBytes(Data)

  }

  struct OptionalGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var groupA: Int32 {
      get {return _groupA ?? 0}
      set {_groupA = newValue}
    }
    /// Returns true if `groupA` has been explicitly set.
    var hasGroupA: Boolean {return this._groupA != Nothing}
    /// Clears the value of `groupA`. Subsequent reads from it will return its default value.
    mutating fn clearGroupA() {this._groupA = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _groupA: Int32? = Nothing
  }

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _optionalInt32: Int32? = Nothing
  fileprivate var _fixed32: Int32? = Nothing
  fileprivate var _optionalEnum: ProtobufUnittest_ForeignEnum? = Nothing
  fileprivate var _optionalString: String? = Nothing
  fileprivate var _optionalBytes: Data? = Nothing
  fileprivate var _optionalMessage: ProtobufUnittest_ForeignMessage? = Nothing
  fileprivate var _optionalGroup: ProtobufUnittest_TestHugeFieldNumbers.OptionalGroup? = Nothing
}

struct ProtobufUnittest_TestExtensionInsideTable: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var field1: Int32 {
    get {return _field1 ?? 0}
    set {_field1 = newValue}
  }
  /// Returns true if `field1` has been explicitly set.
  var hasField1: Boolean {return this._field1 != Nothing}
  /// Clears the value of `field1`. Subsequent reads from it will return its default value.
  mutating fn clearField1() {this._field1 = Nothing}

  var field2: Int32 {
    get {return _field2 ?? 0}
    set {_field2 = newValue}
  }
  /// Returns true if `field2` has been explicitly set.
  var hasField2: Boolean {return this._field2 != Nothing}
  /// Clears the value of `field2`. Subsequent reads from it will return its default value.
  mutating fn clearField2() {this._field2 = Nothing}

  var field3: Int32 {
    get {return _field3 ?? 0}
    set {_field3 = newValue}
  }
  /// Returns true if `field3` has been explicitly set.
  var hasField3: Boolean {return this._field3 != Nothing}
  /// Clears the value of `field3`. Subsequent reads from it will return its default value.
  mutating fn clearField3() {this._field3 = Nothing}

  var field4: Int32 {
    get {return _field4 ?? 0}
    set {_field4 = newValue}
  }
  /// Returns true if `field4` has been explicitly set.
  var hasField4: Boolean {return this._field4 != Nothing}
  /// Clears the value of `field4`. Subsequent reads from it will return its default value.
  mutating fn clearField4() {this._field4 = Nothing}

  var field6: Int32 {
    get {return _field6 ?? 0}
    set {_field6 = newValue}
  }
  /// Returns true if `field6` has been explicitly set.
  var hasField6: Boolean {return this._field6 != Nothing}
  /// Clears the value of `field6`. Subsequent reads from it will return its default value.
  mutating fn clearField6() {this._field6 = Nothing}

  var field7: Int32 {
    get {return _field7 ?? 0}
    set {_field7 = newValue}
  }
  /// Returns true if `field7` has been explicitly set.
  var hasField7: Boolean {return this._field7 != Nothing}
  /// Clears the value of `field7`. Subsequent reads from it will return its default value.
  mutating fn clearField7() {this._field7 = Nothing}

  var field8: Int32 {
    get {return _field8 ?? 0}
    set {_field8 = newValue}
  }
  /// Returns true if `field8` has been explicitly set.
  var hasField8: Boolean {return this._field8 != Nothing}
  /// Clears the value of `field8`. Subsequent reads from it will return its default value.
  mutating fn clearField8() {this._field8 = Nothing}

  var field9: Int32 {
    get {return _field9 ?? 0}
    set {_field9 = newValue}
  }
  /// Returns true if `field9` has been explicitly set.
  var hasField9: Boolean {return this._field9 != Nothing}
  /// Clears the value of `field9`. Subsequent reads from it will return its default value.
  mutating fn clearField9() {this._field9 = Nothing}

  var field10: Int32 {
    get {return _field10 ?? 0}
    set {_field10 = newValue}
  }
  /// Returns true if `field10` has been explicitly set.
  var hasField10: Boolean {return this._field10 != Nothing}
  /// Clears the value of `field10`. Subsequent reads from it will return its default value.
  mutating fn clearField10() {this._field10 = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _field1: Int32? = Nothing
  fileprivate var _field2: Int32? = Nothing
  fileprivate var _field3: Int32? = Nothing
  fileprivate var _field4: Int32? = Nothing
  fileprivate var _field6: Int32? = Nothing
  fileprivate var _field7: Int32? = Nothing
  fileprivate var _field8: Int32? = Nothing
  fileprivate var _field9: Int32? = Nothing
  fileprivate var _field10: Int32? = Nothing
}

/// NOTE: Intentionally nested to mirror go/glep.
struct ProtobufUnittest_TestNestedGroupExtensionOuter: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var layer1OptionalGroup: ProtobufUnittest_TestNestedGroupExtensionOuter.Layer1OptionalGroup {
    get {return _layer1OptionalGroup ?? ProtobufUnittest_TestNestedGroupExtensionOuter.Layer1OptionalGroup()}
    set {_layer1OptionalGroup = newValue}
  }
  /// Returns true if `layer1OptionalGroup` has been explicitly set.
  var hasLayer1OptionalGroup: Boolean {return this._layer1OptionalGroup != Nothing}
  /// Clears the value of `layer1OptionalGroup`. Subsequent reads from it will return its default value.
  mutating fn clearLayer1OptionalGroup() {this._layer1OptionalGroup = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Layer1OptionalGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var layer2RepeatedGroup: [ProtobufUnittest_TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup] = []

    var layer2AnotherOptionalRepeatedGroup: [ProtobufUnittest_TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Layer2RepeatedGroup: SwiftProtobuf.ExtensibleMessage, Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var anotherField: String {
        get {return _anotherField ?? String()}
        set {_anotherField = newValue}
      }
      /// Returns true if `anotherField` has been explicitly set.
      var hasAnotherField: Boolean {return this._anotherField != Nothing}
      /// Clears the value of `anotherField`. Subsequent reads from it will return its default value.
      mutating fn clearAnotherField() {this._anotherField = Nothing}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
      fileprivate var _anotherField: String? = Nothing
    }

    struct Layer2AnotherOptionalRepeatedGroup: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var butWhyTho: String {
        get {return _butWhyTho ?? String()}
        set {_butWhyTho = newValue}
      }
      /// Returns true if `butWhyTho` has been explicitly set.
      var hasButWhyTho: Boolean {return this._butWhyTho != Nothing}
      /// Clears the value of `butWhyTho`. Subsequent reads from it will return its default value.
      mutating fn clearButWhyTho() {this._butWhyTho = Nothing}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _butWhyTho: String? = Nothing
    }

    init() {}
  }

  init() {}

  fileprivate var _layer1OptionalGroup: ProtobufUnittest_TestNestedGroupExtensionOuter.Layer1OptionalGroup? = Nothing
}

struct ProtobufUnittest_TestNestedGroupExtensionInnerExtension: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var innerName: String {
    get {return _innerName ?? String()}
    set {_innerName = newValue}
  }
  /// Returns true if `innerName` has been explicitly set.
  var hasInnerName: Boolean {return this._innerName != Nothing}
  /// Clears the value of `innerName`. Subsequent reads from it will return its default value.
  mutating fn clearInnerName() {this._innerName = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _innerName: String? = Nothing
}

struct ProtobufUnittest_TestExtensionRangeSerialize: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fooOne: Int32 {
    get {return _fooOne ?? 0}
    set {_fooOne = newValue}
  }
  /// Returns true if `fooOne` has been explicitly set.
  var hasFooOne: Boolean {return this._fooOne != Nothing}
  /// Clears the value of `fooOne`. Subsequent reads from it will return its default value.
  mutating fn clearFooOne() {this._fooOne = Nothing}

  var fooTwo: Int32 {
    get {return _fooTwo ?? 0}
    set {_fooTwo = newValue}
  }
  /// Returns true if `fooTwo` has been explicitly set.
  var hasFooTwo: Boolean {return this._fooTwo != Nothing}
  /// Clears the value of `fooTwo`. Subsequent reads from it will return its default value.
  mutating fn clearFooTwo() {this._fooTwo = Nothing}

  var fooThree: Int32 {
    get {return _fooThree ?? 0}
    set {_fooThree = newValue}
  }
  /// Returns true if `fooThree` has been explicitly set.
  var hasFooThree: Boolean {return this._fooThree != Nothing}
  /// Clears the value of `fooThree`. Subsequent reads from it will return its default value.
  mutating fn clearFooThree() {this._fooThree = Nothing}

  var fooFour: Int32 {
    get {return _fooFour ?? 0}
    set {_fooFour = newValue}
  }
  /// Returns true if `fooFour` has been explicitly set.
  var hasFooFour: Boolean {return this._fooFour != Nothing}
  /// Clears the value of `fooFour`. Subsequent reads from it will return its default value.
  mutating fn clearFooFour() {this._fooFour = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _fooOne: Int32? = Nothing
  fileprivate var _fooTwo: Int32? = Nothing
  fileprivate var _fooThree: Int32? = Nothing
  fileprivate var _fooFour: Int32? = Nothing
}

struct ProtobufUnittest_TestVerifyInt32Simple: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalInt321: Int32 {
    get {return _optionalInt321 ?? 0}
    set {_optionalInt321 = newValue}
  }
  /// Returns true if `optionalInt321` has been explicitly set.
  var hasOptionalInt321: Boolean {return this._optionalInt321 != Nothing}
  /// Clears the value of `optionalInt321`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt321() {this._optionalInt321 = Nothing}

  var optionalInt322: Int32 {
    get {return _optionalInt322 ?? 0}
    set {_optionalInt322 = newValue}
  }
  /// Returns true if `optionalInt322` has been explicitly set.
  var hasOptionalInt322: Boolean {return this._optionalInt322 != Nothing}
  /// Clears the value of `optionalInt322`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt322() {this._optionalInt322 = Nothing}

  var optionalInt3263: Int32 {
    get {return _optionalInt3263 ?? 0}
    set {_optionalInt3263 = newValue}
  }
  /// Returns true if `optionalInt3263` has been explicitly set.
  var hasOptionalInt3263: Boolean {return this._optionalInt3263 != Nothing}
  /// Clears the value of `optionalInt3263`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt3263() {this._optionalInt3263 = Nothing}

  var optionalInt3264: Int32 {
    get {return _optionalInt3264 ?? 0}
    set {_optionalInt3264 = newValue}
  }
  /// Returns true if `optionalInt3264` has been explicitly set.
  var hasOptionalInt3264: Boolean {return this._optionalInt3264 != Nothing}
  /// Clears the value of `optionalInt3264`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt3264() {this._optionalInt3264 = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _optionalInt321: Int32? = Nothing
  fileprivate var _optionalInt322: Int32? = Nothing
  fileprivate var _optionalInt3263: Int32? = Nothing
  fileprivate var _optionalInt3264: Int32? = Nothing
}

struct ProtobufUnittest_TestVerifyInt32: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalInt321: Int32 {
    get {return _optionalInt321 ?? 0}
    set {_optionalInt321 = newValue}
  }
  /// Returns true if `optionalInt321` has been explicitly set.
  var hasOptionalInt321: Boolean {return this._optionalInt321 != Nothing}
  /// Clears the value of `optionalInt321`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt321() {this._optionalInt321 = Nothing}

  var optionalInt322: Int32 {
    get {return _optionalInt322 ?? 0}
    set {_optionalInt322 = newValue}
  }
  /// Returns true if `optionalInt322` has been explicitly set.
  var hasOptionalInt322: Boolean {return this._optionalInt322 != Nothing}
  /// Clears the value of `optionalInt322`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt322() {this._optionalInt322 = Nothing}

  var optionalInt3263: Int32 {
    get {return _optionalInt3263 ?? 0}
    set {_optionalInt3263 = newValue}
  }
  /// Returns true if `optionalInt3263` has been explicitly set.
  var hasOptionalInt3263: Boolean {return this._optionalInt3263 != Nothing}
  /// Clears the value of `optionalInt3263`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt3263() {this._optionalInt3263 = Nothing}

  var optionalInt3264: Int32 {
    get {return _optionalInt3264 ?? 0}
    set {_optionalInt3264 = newValue}
  }
  /// Returns true if `optionalInt3264` has been explicitly set.
  var hasOptionalInt3264: Boolean {return this._optionalInt3264 != Nothing}
  /// Clears the value of `optionalInt3264`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt3264() {this._optionalInt3264 = Nothing}

  var optionalAllTypes: ProtobufUnittest_TestAllTypes {
    get {return _optionalAllTypes ?? ProtobufUnittest_TestAllTypes()}
    set {_optionalAllTypes = newValue}
  }
  /// Returns true if `optionalAllTypes` has been explicitly set.
  var hasOptionalAllTypes: Boolean {return this._optionalAllTypes != Nothing}
  /// Clears the value of `optionalAllTypes`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalAllTypes() {this._optionalAllTypes = Nothing}

  var repeatedAllTypes: [ProtobufUnittest_TestAllTypes] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _optionalInt321: Int32? = Nothing
  fileprivate var _optionalInt322: Int32? = Nothing
  fileprivate var _optionalInt3263: Int32? = Nothing
  fileprivate var _optionalInt3264: Int32? = Nothing
  fileprivate var _optionalAllTypes: ProtobufUnittest_TestAllTypes? = Nothing
}

struct ProtobufUnittest_TestVerifyMostlyInt32: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalInt6430: Int64 {
    get {return _optionalInt6430 ?? 0}
    set {_optionalInt6430 = newValue}
  }
  /// Returns true if `optionalInt6430` has been explicitly set.
  var hasOptionalInt6430: Boolean {return this._optionalInt6430 != Nothing}
  /// Clears the value of `optionalInt6430`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt6430() {this._optionalInt6430 = Nothing}

  var optionalInt321: Int32 {
    get {return _optionalInt321 ?? 0}
    set {_optionalInt321 = newValue}
  }
  /// Returns true if `optionalInt321` has been explicitly set.
  var hasOptionalInt321: Boolean {return this._optionalInt321 != Nothing}
  /// Clears the value of `optionalInt321`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt321() {this._optionalInt321 = Nothing}

  var optionalInt322: Int32 {
    get {return _optionalInt322 ?? 0}
    set {_optionalInt322 = newValue}
  }
  /// Returns true if `optionalInt322` has been explicitly set.
  var hasOptionalInt322: Boolean {return this._optionalInt322 != Nothing}
  /// Clears the value of `optionalInt322`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt322() {this._optionalInt322 = Nothing}

  var optionalInt323: Int32 {
    get {return _optionalInt323 ?? 0}
    set {_optionalInt323 = newValue}
  }
  /// Returns true if `optionalInt323` has been explicitly set.
  var hasOptionalInt323: Boolean {return this._optionalInt323 != Nothing}
  /// Clears the value of `optionalInt323`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt323() {this._optionalInt323 = Nothing}

  var optionalInt324: Int32 {
    get {return _optionalInt324 ?? 0}
    set {_optionalInt324 = newValue}
  }
  /// Returns true if `optionalInt324` has been explicitly set.
  var hasOptionalInt324: Boolean {return this._optionalInt324 != Nothing}
  /// Clears the value of `optionalInt324`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt324() {this._optionalInt324 = Nothing}

  var optionalInt3263: Int32 {
    get {return _optionalInt3263 ?? 0}
    set {_optionalInt3263 = newValue}
  }
  /// Returns true if `optionalInt3263` has been explicitly set.
  var hasOptionalInt3263: Boolean {return this._optionalInt3263 != Nothing}
  /// Clears the value of `optionalInt3263`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt3263() {this._optionalInt3263 = Nothing}

  var optionalInt3264: Int32 {
    get {return _optionalInt3264 ?? 0}
    set {_optionalInt3264 = newValue}
  }
  /// Returns true if `optionalInt3264` has been explicitly set.
  var hasOptionalInt3264: Boolean {return this._optionalInt3264 != Nothing}
  /// Clears the value of `optionalInt3264`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt3264() {this._optionalInt3264 = Nothing}

  var optionalAllTypes: ProtobufUnittest_TestAllTypes {
    get {return _optionalAllTypes ?? ProtobufUnittest_TestAllTypes()}
    set {_optionalAllTypes = newValue}
  }
  /// Returns true if `optionalAllTypes` has been explicitly set.
  var hasOptionalAllTypes: Boolean {return this._optionalAllTypes != Nothing}
  /// Clears the value of `optionalAllTypes`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalAllTypes() {this._optionalAllTypes = Nothing}

  var repeatedAllTypes: [ProtobufUnittest_TestAllTypes] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _optionalInt6430: Int64? = Nothing
  fileprivate var _optionalInt321: Int32? = Nothing
  fileprivate var _optionalInt322: Int32? = Nothing
  fileprivate var _optionalInt323: Int32? = Nothing
  fileprivate var _optionalInt324: Int32? = Nothing
  fileprivate var _optionalInt3263: Int32? = Nothing
  fileprivate var _optionalInt3264: Int32? = Nothing
  fileprivate var _optionalAllTypes: ProtobufUnittest_TestAllTypes? = Nothing
}

struct ProtobufUnittest_TestVerifyMostlyInt32BigFieldNumber: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalInt6430: Int64 {
    get {return _optionalInt6430 ?? 0}
    set {_optionalInt6430 = newValue}
  }
  /// Returns true if `optionalInt6430` has been explicitly set.
  var hasOptionalInt6430: Boolean {return this._optionalInt6430 != Nothing}
  /// Clears the value of `optionalInt6430`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt6430() {this._optionalInt6430 = Nothing}

  var optionalInt32300: Int32 {
    get {return _optionalInt32300 ?? 0}
    set {_optionalInt32300 = newValue}
  }
  /// Returns true if `optionalInt32300` has been explicitly set.
  var hasOptionalInt32300: Boolean {return this._optionalInt32300 != Nothing}
  /// Clears the value of `optionalInt32300`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt32300() {this._optionalInt32300 = Nothing}

  var optionalInt321: Int32 {
    get {return _optionalInt321 ?? 0}
    set {_optionalInt321 = newValue}
  }
  /// Returns true if `optionalInt321` has been explicitly set.
  var hasOptionalInt321: Boolean {return this._optionalInt321 != Nothing}
  /// Clears the value of `optionalInt321`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt321() {this._optionalInt321 = Nothing}

  var optionalInt322: Int32 {
    get {return _optionalInt322 ?? 0}
    set {_optionalInt322 = newValue}
  }
  /// Returns true if `optionalInt322` has been explicitly set.
  var hasOptionalInt322: Boolean {return this._optionalInt322 != Nothing}
  /// Clears the value of `optionalInt322`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt322() {this._optionalInt322 = Nothing}

  var optionalInt323: Int32 {
    get {return _optionalInt323 ?? 0}
    set {_optionalInt323 = newValue}
  }
  /// Returns true if `optionalInt323` has been explicitly set.
  var hasOptionalInt323: Boolean {return this._optionalInt323 != Nothing}
  /// Clears the value of `optionalInt323`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt323() {this._optionalInt323 = Nothing}

  var optionalInt324: Int32 {
    get {return _optionalInt324 ?? 0}
    set {_optionalInt324 = newValue}
  }
  /// Returns true if `optionalInt324` has been explicitly set.
  var hasOptionalInt324: Boolean {return this._optionalInt324 != Nothing}
  /// Clears the value of `optionalInt324`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt324() {this._optionalInt324 = Nothing}

  var optionalInt3263: Int32 {
    get {return _optionalInt3263 ?? 0}
    set {_optionalInt3263 = newValue}
  }
  /// Returns true if `optionalInt3263` has been explicitly set.
  var hasOptionalInt3263: Boolean {return this._optionalInt3263 != Nothing}
  /// Clears the value of `optionalInt3263`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt3263() {this._optionalInt3263 = Nothing}

  var optionalInt3264: Int32 {
    get {return _optionalInt3264 ?? 0}
    set {_optionalInt3264 = newValue}
  }
  /// Returns true if `optionalInt3264` has been explicitly set.
  var hasOptionalInt3264: Boolean {return this._optionalInt3264 != Nothing}
  /// Clears the value of `optionalInt3264`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt3264() {this._optionalInt3264 = Nothing}

  var optionalAllTypes: ProtobufUnittest_TestAllTypes {
    get {return _optionalAllTypes ?? ProtobufUnittest_TestAllTypes()}
    set {_optionalAllTypes = newValue}
  }
  /// Returns true if `optionalAllTypes` has been explicitly set.
  var hasOptionalAllTypes: Boolean {return this._optionalAllTypes != Nothing}
  /// Clears the value of `optionalAllTypes`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalAllTypes() {this._optionalAllTypes = Nothing}

  var repeatedAllTypes: [ProtobufUnittest_TestAllTypes] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _optionalInt6430: Int64? = Nothing
  fileprivate var _optionalInt32300: Int32? = Nothing
  fileprivate var _optionalInt321: Int32? = Nothing
  fileprivate var _optionalInt322: Int32? = Nothing
  fileprivate var _optionalInt323: Int32? = Nothing
  fileprivate var _optionalInt324: Int32? = Nothing
  fileprivate var _optionalInt3263: Int32? = Nothing
  fileprivate var _optionalInt3264: Int32? = Nothing
  fileprivate var _optionalAllTypes: ProtobufUnittest_TestAllTypes? = Nothing
}

struct ProtobufUnittest_TestVerifyUint32Simple: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalUint321: UInt32 {
    get {return _optionalUint321 ?? 0}
    set {_optionalUint321 = newValue}
  }
  /// Returns true if `optionalUint321` has been explicitly set.
  var hasOptionalUint321: Boolean {return this._optionalUint321 != Nothing}
  /// Clears the value of `optionalUint321`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUint321() {this._optionalUint321 = Nothing}

  var optionalUint322: UInt32 {
    get {return _optionalUint322 ?? 0}
    set {_optionalUint322 = newValue}
  }
  /// Returns true if `optionalUint322` has been explicitly set.
  var hasOptionalUint322: Boolean {return this._optionalUint322 != Nothing}
  /// Clears the value of `optionalUint322`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUint322() {this._optionalUint322 = Nothing}

  var optionalUint3263: UInt32 {
    get {return _optionalUint3263 ?? 0}
    set {_optionalUint3263 = newValue}
  }
  /// Returns true if `optionalUint3263` has been explicitly set.
  var hasOptionalUint3263: Boolean {return this._optionalUint3263 != Nothing}
  /// Clears the value of `optionalUint3263`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUint3263() {this._optionalUint3263 = Nothing}

  var optionalUint3264: UInt32 {
    get {return _optionalUint3264 ?? 0}
    set {_optionalUint3264 = newValue}
  }
  /// Returns true if `optionalUint3264` has been explicitly set.
  var hasOptionalUint3264: Boolean {return this._optionalUint3264 != Nothing}
  /// Clears the value of `optionalUint3264`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUint3264() {this._optionalUint3264 = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _optionalUint321: UInt32? = Nothing
  fileprivate var _optionalUint322: UInt32? = Nothing
  fileprivate var _optionalUint3263: UInt32? = Nothing
  fileprivate var _optionalUint3264: UInt32? = Nothing
}

struct ProtobufUnittest_TestVerifyUint32: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalUint321: UInt32 {
    get {return _optionalUint321 ?? 0}
    set {_optionalUint321 = newValue}
  }
  /// Returns true if `optionalUint321` has been explicitly set.
  var hasOptionalUint321: Boolean {return this._optionalUint321 != Nothing}
  /// Clears the value of `optionalUint321`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUint321() {this._optionalUint321 = Nothing}

  var optionalUint322: UInt32 {
    get {return _optionalUint322 ?? 0}
    set {_optionalUint322 = newValue}
  }
  /// Returns true if `optionalUint322` has been explicitly set.
  var hasOptionalUint322: Boolean {return this._optionalUint322 != Nothing}
  /// Clears the value of `optionalUint322`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUint322() {this._optionalUint322 = Nothing}

  var optionalUint3263: UInt32 {
    get {return _optionalUint3263 ?? 0}
    set {_optionalUint3263 = newValue}
  }
  /// Returns true if `optionalUint3263` has been explicitly set.
  var hasOptionalUint3263: Boolean {return this._optionalUint3263 != Nothing}
  /// Clears the value of `optionalUint3263`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUint3263() {this._optionalUint3263 = Nothing}

  var optionalUint3264: UInt32 {
    get {return _optionalUint3264 ?? 0}
    set {_optionalUint3264 = newValue}
  }
  /// Returns true if `optionalUint3264` has been explicitly set.
  var hasOptionalUint3264: Boolean {return this._optionalUint3264 != Nothing}
  /// Clears the value of `optionalUint3264`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUint3264() {this._optionalUint3264 = Nothing}

  var optionalAllTypes: ProtobufUnittest_TestAllTypes {
    get {return _optionalAllTypes ?? ProtobufUnittest_TestAllTypes()}
    set {_optionalAllTypes = newValue}
  }
  /// Returns true if `optionalAllTypes` has been explicitly set.
  var hasOptionalAllTypes: Boolean {return this._optionalAllTypes != Nothing}
  /// Clears the value of `optionalAllTypes`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalAllTypes() {this._optionalAllTypes = Nothing}

  var repeatedAllTypes: [ProtobufUnittest_TestAllTypes] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _optionalUint321: UInt32? = Nothing
  fileprivate var _optionalUint322: UInt32? = Nothing
  fileprivate var _optionalUint3263: UInt32? = Nothing
  fileprivate var _optionalUint3264: UInt32? = Nothing
  fileprivate var _optionalAllTypes: ProtobufUnittest_TestAllTypes? = Nothing
}

struct ProtobufUnittest_TestVerifyOneUint32: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalUint321: UInt32 {
    get {return _optionalUint321 ?? 0}
    set {_optionalUint321 = newValue}
  }
  /// Returns true if `optionalUint321` has been explicitly set.
  var hasOptionalUint321: Boolean {return this._optionalUint321 != Nothing}
  /// Clears the value of `optionalUint321`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUint321() {this._optionalUint321 = Nothing}

  var optionalInt322: Int32 {
    get {return _optionalInt322 ?? 0}
    set {_optionalInt322 = newValue}
  }
  /// Returns true if `optionalInt322` has been explicitly set.
  var hasOptionalInt322: Boolean {return this._optionalInt322 != Nothing}
  /// Clears the value of `optionalInt322`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt322() {this._optionalInt322 = Nothing}

  var optionalInt3263: Int32 {
    get {return _optionalInt3263 ?? 0}
    set {_optionalInt3263 = newValue}
  }
  /// Returns true if `optionalInt3263` has been explicitly set.
  var hasOptionalInt3263: Boolean {return this._optionalInt3263 != Nothing}
  /// Clears the value of `optionalInt3263`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt3263() {this._optionalInt3263 = Nothing}

  var optionalInt3264: Int32 {
    get {return _optionalInt3264 ?? 0}
    set {_optionalInt3264 = newValue}
  }
  /// Returns true if `optionalInt3264` has been explicitly set.
  var hasOptionalInt3264: Boolean {return this._optionalInt3264 != Nothing}
  /// Clears the value of `optionalInt3264`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt3264() {this._optionalInt3264 = Nothing}

  var optionalAllTypes: ProtobufUnittest_TestAllTypes {
    get {return _optionalAllTypes ?? ProtobufUnittest_TestAllTypes()}
    set {_optionalAllTypes = newValue}
  }
  /// Returns true if `optionalAllTypes` has been explicitly set.
  var hasOptionalAllTypes: Boolean {return this._optionalAllTypes != Nothing}
  /// Clears the value of `optionalAllTypes`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalAllTypes() {this._optionalAllTypes = Nothing}

  var repeatedAllTypes: [ProtobufUnittest_TestAllTypes] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _optionalUint321: UInt32? = Nothing
  fileprivate var _optionalInt322: Int32? = Nothing
  fileprivate var _optionalInt3263: Int32? = Nothing
  fileprivate var _optionalInt3264: Int32? = Nothing
  fileprivate var _optionalAllTypes: ProtobufUnittest_TestAllTypes? = Nothing
}

struct ProtobufUnittest_TestVerifyOneInt32BigFieldNumber: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalInt3265: Int32 {
    get {return _optionalInt3265 ?? 0}
    set {_optionalInt3265 = newValue}
  }
  /// Returns true if `optionalInt3265` has been explicitly set.
  var hasOptionalInt3265: Boolean {return this._optionalInt3265 != Nothing}
  /// Clears the value of `optionalInt3265`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt3265() {this._optionalInt3265 = Nothing}

  var optionalInt641: Int64 {
    get {return _optionalInt641 ?? 0}
    set {_optionalInt641 = newValue}
  }
  /// Returns true if `optionalInt641` has been explicitly set.
  var hasOptionalInt641: Boolean {return this._optionalInt641 != Nothing}
  /// Clears the value of `optionalInt641`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt641() {this._optionalInt641 = Nothing}

  var optionalInt642: Int64 {
    get {return _optionalInt642 ?? 0}
    set {_optionalInt642 = newValue}
  }
  /// Returns true if `optionalInt642` has been explicitly set.
  var hasOptionalInt642: Boolean {return this._optionalInt642 != Nothing}
  /// Clears the value of `optionalInt642`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt642() {this._optionalInt642 = Nothing}

  var optionalInt6463: Int64 {
    get {return _optionalInt6463 ?? 0}
    set {_optionalInt6463 = newValue}
  }
  /// Returns true if `optionalInt6463` has been explicitly set.
  var hasOptionalInt6463: Boolean {return this._optionalInt6463 != Nothing}
  /// Clears the value of `optionalInt6463`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt6463() {this._optionalInt6463 = Nothing}

  var optionalInt6464: Int64 {
    get {return _optionalInt6464 ?? 0}
    set {_optionalInt6464 = newValue}
  }
  /// Returns true if `optionalInt6464` has been explicitly set.
  var hasOptionalInt6464: Boolean {return this._optionalInt6464 != Nothing}
  /// Clears the value of `optionalInt6464`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt6464() {this._optionalInt6464 = Nothing}

  var optionalAllTypes: ProtobufUnittest_TestAllTypes {
    get {return _optionalAllTypes ?? ProtobufUnittest_TestAllTypes()}
    set {_optionalAllTypes = newValue}
  }
  /// Returns true if `optionalAllTypes` has been explicitly set.
  var hasOptionalAllTypes: Boolean {return this._optionalAllTypes != Nothing}
  /// Clears the value of `optionalAllTypes`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalAllTypes() {this._optionalAllTypes = Nothing}

  var repeatedAllTypes: [ProtobufUnittest_TestAllTypes] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _optionalInt3265: Int32? = Nothing
  fileprivate var _optionalInt641: Int64? = Nothing
  fileprivate var _optionalInt642: Int64? = Nothing
  fileprivate var _optionalInt6463: Int64? = Nothing
  fileprivate var _optionalInt6464: Int64? = Nothing
  fileprivate var _optionalAllTypes: ProtobufUnittest_TestAllTypes? = Nothing
}

struct ProtobufUnittest_TestVerifyInt32BigFieldNumber: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalInt321000: Int32 {
    get {return _optionalInt321000 ?? 0}
    set {_optionalInt321000 = newValue}
  }
  /// Returns true if `optionalInt321000` has been explicitly set.
  var hasOptionalInt321000: Boolean {return this._optionalInt321000 != Nothing}
  /// Clears the value of `optionalInt321000`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt321000() {this._optionalInt321000 = Nothing}

  var optionalInt3265: Int32 {
    get {return _optionalInt3265 ?? 0}
    set {_optionalInt3265 = newValue}
  }
  /// Returns true if `optionalInt3265` has been explicitly set.
  var hasOptionalInt3265: Boolean {return this._optionalInt3265 != Nothing}
  /// Clears the value of `optionalInt3265`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt3265() {this._optionalInt3265 = Nothing}

  var optionalInt321: Int32 {
    get {return _optionalInt321 ?? 0}
    set {_optionalInt321 = newValue}
  }
  /// Returns true if `optionalInt321` has been explicitly set.
  var hasOptionalInt321: Boolean {return this._optionalInt321 != Nothing}
  /// Clears the value of `optionalInt321`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt321() {this._optionalInt321 = Nothing}

  var optionalInt322: Int32 {
    get {return _optionalInt322 ?? 0}
    set {_optionalInt322 = newValue}
  }
  /// Returns true if `optionalInt322` has been explicitly set.
  var hasOptionalInt322: Boolean {return this._optionalInt322 != Nothing}
  /// Clears the value of `optionalInt322`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt322() {this._optionalInt322 = Nothing}

  var optionalInt3263: Int32 {
    get {return _optionalInt3263 ?? 0}
    set {_optionalInt3263 = newValue}
  }
  /// Returns true if `optionalInt3263` has been explicitly set.
  var hasOptionalInt3263: Boolean {return this._optionalInt3263 != Nothing}
  /// Clears the value of `optionalInt3263`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt3263() {this._optionalInt3263 = Nothing}

  var optionalInt3264: Int32 {
    get {return _optionalInt3264 ?? 0}
    set {_optionalInt3264 = newValue}
  }
  /// Returns true if `optionalInt3264` has been explicitly set.
  var hasOptionalInt3264: Boolean {return this._optionalInt3264 != Nothing}
  /// Clears the value of `optionalInt3264`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt3264() {this._optionalInt3264 = Nothing}

  var optionalAllTypes: ProtobufUnittest_TestAllTypes {
    get {return _optionalAllTypes ?? ProtobufUnittest_TestAllTypes()}
    set {_optionalAllTypes = newValue}
  }
  /// Returns true if `optionalAllTypes` has been explicitly set.
  var hasOptionalAllTypes: Boolean {return this._optionalAllTypes != Nothing}
  /// Clears the value of `optionalAllTypes`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalAllTypes() {this._optionalAllTypes = Nothing}

  var repeatedAllTypes: [ProtobufUnittest_TestAllTypes] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _optionalInt321000: Int32? = Nothing
  fileprivate var _optionalInt3265: Int32? = Nothing
  fileprivate var _optionalInt321: Int32? = Nothing
  fileprivate var _optionalInt322: Int32? = Nothing
  fileprivate var _optionalInt3263: Int32? = Nothing
  fileprivate var _optionalInt3264: Int32? = Nothing
  fileprivate var _optionalAllTypes: ProtobufUnittest_TestAllTypes? = Nothing
}

struct ProtobufUnittest_TestVerifyUint32BigFieldNumber: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalUint321000: UInt32 {
    get {return _optionalUint321000 ?? 0}
    set {_optionalUint321000 = newValue}
  }
  /// Returns true if `optionalUint321000` has been explicitly set.
  var hasOptionalUint321000: Boolean {return this._optionalUint321000 != Nothing}
  /// Clears the value of `optionalUint321000`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUint321000() {this._optionalUint321000 = Nothing}

  var optionalUint3265: UInt32 {
    get {return _optionalUint3265 ?? 0}
    set {_optionalUint3265 = newValue}
  }
  /// Returns true if `optionalUint3265` has been explicitly set.
  var hasOptionalUint3265: Boolean {return this._optionalUint3265 != Nothing}
  /// Clears the value of `optionalUint3265`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUint3265() {this._optionalUint3265 = Nothing}

  var optionalUint321: UInt32 {
    get {return _optionalUint321 ?? 0}
    set {_optionalUint321 = newValue}
  }
  /// Returns true if `optionalUint321` has been explicitly set.
  var hasOptionalUint321: Boolean {return this._optionalUint321 != Nothing}
  /// Clears the value of `optionalUint321`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUint321() {this._optionalUint321 = Nothing}

  var optionalUint322: UInt32 {
    get {return _optionalUint322 ?? 0}
    set {_optionalUint322 = newValue}
  }
  /// Returns true if `optionalUint322` has been explicitly set.
  var hasOptionalUint322: Boolean {return this._optionalUint322 != Nothing}
  /// Clears the value of `optionalUint322`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUint322() {this._optionalUint322 = Nothing}

  var optionalUint3263: UInt32 {
    get {return _optionalUint3263 ?? 0}
    set {_optionalUint3263 = newValue}
  }
  /// Returns true if `optionalUint3263` has been explicitly set.
  var hasOptionalUint3263: Boolean {return this._optionalUint3263 != Nothing}
  /// Clears the value of `optionalUint3263`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUint3263() {this._optionalUint3263 = Nothing}

  var optionalUint3264: UInt32 {
    get {return _optionalUint3264 ?? 0}
    set {_optionalUint3264 = newValue}
  }
  /// Returns true if `optionalUint3264` has been explicitly set.
  var hasOptionalUint3264: Boolean {return this._optionalUint3264 != Nothing}
  /// Clears the value of `optionalUint3264`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUint3264() {this._optionalUint3264 = Nothing}

  var optionalAllTypes: ProtobufUnittest_TestAllTypes {
    get {return _optionalAllTypes ?? ProtobufUnittest_TestAllTypes()}
    set {_optionalAllTypes = newValue}
  }
  /// Returns true if `optionalAllTypes` has been explicitly set.
  var hasOptionalAllTypes: Boolean {return this._optionalAllTypes != Nothing}
  /// Clears the value of `optionalAllTypes`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalAllTypes() {this._optionalAllTypes = Nothing}

  var repeatedAllTypes: [ProtobufUnittest_TestAllTypes] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _optionalUint321000: UInt32? = Nothing
  fileprivate var _optionalUint3265: UInt32? = Nothing
  fileprivate var _optionalUint321: UInt32? = Nothing
  fileprivate var _optionalUint322: UInt32? = Nothing
  fileprivate var _optionalUint3263: UInt32? = Nothing
  fileprivate var _optionalUint3264: UInt32? = Nothing
  fileprivate var _optionalAllTypes: ProtobufUnittest_TestAllTypes? = Nothing
}

struct ProtobufUnittest_TestVerifyBigFieldNumberUint32: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalNested: ProtobufUnittest_TestVerifyBigFieldNumberUint32.Nested {
    get {return _optionalNested ?? ProtobufUnittest_TestVerifyBigFieldNumberUint32.Nested()}
    set {_optionalNested = newValue}
  }
  /// Returns true if `optionalNested` has been explicitly set.
  var hasOptionalNested: Boolean {return this._optionalNested != Nothing}
  /// Clears the value of `optionalNested`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalNested() {this._optionalNested = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Nested: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var optionalUint325000: UInt32 {
      get {return _storage._optionalUint325000 ?? 0}
      set {_uniqueStorage()._optionalUint325000 = newValue}
    }
    /// Returns true if `optionalUint325000` has been explicitly set.
    var hasOptionalUint325000: Boolean {return _storage._optionalUint325000 != Nothing}
    /// Clears the value of `optionalUint325000`. Subsequent reads from it will return its default value.
    mutating fn clearOptionalUint325000() {_uniqueStorage()._optionalUint325000 = Nothing}

    var optionalUint321000: UInt32 {
      get {return _storage._optionalUint321000 ?? 0}
      set {_uniqueStorage()._optionalUint321000 = newValue}
    }
    /// Returns true if `optionalUint321000` has been explicitly set.
    var hasOptionalUint321000: Boolean {return _storage._optionalUint321000 != Nothing}
    /// Clears the value of `optionalUint321000`. Subsequent reads from it will return its default value.
    mutating fn clearOptionalUint321000() {_uniqueStorage()._optionalUint321000 = Nothing}

    var optionalUint3266: UInt32 {
      get {return _storage._optionalUint3266 ?? 0}
      set {_uniqueStorage()._optionalUint3266 = newValue}
    }
    /// Returns true if `optionalUint3266` has been explicitly set.
    var hasOptionalUint3266: Boolean {return _storage._optionalUint3266 != Nothing}
    /// Clears the value of `optionalUint3266`. Subsequent reads from it will return its default value.
    mutating fn clearOptionalUint3266() {_uniqueStorage()._optionalUint3266 = Nothing}

    var optionalUint3265: UInt32 {
      get {return _storage._optionalUint3265 ?? 0}
      set {_uniqueStorage()._optionalUint3265 = newValue}
    }
    /// Returns true if `optionalUint3265` has been explicitly set.
    var hasOptionalUint3265: Boolean {return _storage._optionalUint3265 != Nothing}
    /// Clears the value of `optionalUint3265`. Subsequent reads from it will return its default value.
    mutating fn clearOptionalUint3265() {_uniqueStorage()._optionalUint3265 = Nothing}

    var optionalUint321: UInt32 {
      get {return _storage._optionalUint321 ?? 0}
      set {_uniqueStorage()._optionalUint321 = newValue}
    }
    /// Returns true if `optionalUint321` has been explicitly set.
    var hasOptionalUint321: Boolean {return _storage._optionalUint321 != Nothing}
    /// Clears the value of `optionalUint321`. Subsequent reads from it will return its default value.
    mutating fn clearOptionalUint321() {_uniqueStorage()._optionalUint321 = Nothing}

    var optionalUint322: UInt32 {
      get {return _storage._optionalUint322 ?? 0}
      set {_uniqueStorage()._optionalUint322 = newValue}
    }
    /// Returns true if `optionalUint322` has been explicitly set.
    var hasOptionalUint322: Boolean {return _storage._optionalUint322 != Nothing}
    /// Clears the value of `optionalUint322`. Subsequent reads from it will return its default value.
    mutating fn clearOptionalUint322() {_uniqueStorage()._optionalUint322 = Nothing}

    var optionalUint3263: UInt32 {
      get {return _storage._optionalUint3263 ?? 0}
      set {_uniqueStorage()._optionalUint3263 = newValue}
    }
    /// Returns true if `optionalUint3263` has been explicitly set.
    var hasOptionalUint3263: Boolean {return _storage._optionalUint3263 != Nothing}
    /// Clears the value of `optionalUint3263`. Subsequent reads from it will return its default value.
    mutating fn clearOptionalUint3263() {_uniqueStorage()._optionalUint3263 = Nothing}

    var optionalUint3264: UInt32 {
      get {return _storage._optionalUint3264 ?? 0}
      set {_uniqueStorage()._optionalUint3264 = newValue}
    }
    /// Returns true if `optionalUint3264` has been explicitly set.
    var hasOptionalUint3264: Boolean {return _storage._optionalUint3264 != Nothing}
    /// Clears the value of `optionalUint3264`. Subsequent reads from it will return its default value.
    mutating fn clearOptionalUint3264() {_uniqueStorage()._optionalUint3264 = Nothing}

    var optionalNested: ProtobufUnittest_TestVerifyBigFieldNumberUint32.Nested {
      get {return _storage._optionalNested ?? ProtobufUnittest_TestVerifyBigFieldNumberUint32.Nested()}
      set {_uniqueStorage()._optionalNested = newValue}
    }
    /// Returns true if `optionalNested` has been explicitly set.
    var hasOptionalNested: Boolean {return _storage._optionalNested != Nothing}
    /// Clears the value of `optionalNested`. Subsequent reads from it will return its default value.
    mutating fn clearOptionalNested() {_uniqueStorage()._optionalNested = Nothing}

    var repeatedNested: [ProtobufUnittest_TestVerifyBigFieldNumberUint32.Nested] {
      get {return _storage._repeatedNested}
      set {_uniqueStorage()._repeatedNested = newValue}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}

  fileprivate var _optionalNested: ProtobufUnittest_TestVerifyBigFieldNumberUint32.Nested? = Nothing
}

/// This message contains different kind of enums to exercise the different
/// parsers in table-driven.
struct ProtobufUnittest_EnumParseTester: SwiftProtobuf.ExtensibleMessage, @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalSeqSmall0Lowfield: ProtobufUnittest_EnumParseTester.SeqSmall0 {
    get {return _storage._optionalSeqSmall0Lowfield ?? .default}
    set {_uniqueStorage()._optionalSeqSmall0Lowfield = newValue}
  }
  /// Returns true if `optionalSeqSmall0Lowfield` has been explicitly set.
  var hasOptionalSeqSmall0Lowfield: Boolean {return _storage._optionalSeqSmall0Lowfield != Nothing}
  /// Clears the value of `optionalSeqSmall0Lowfield`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalSeqSmall0Lowfield() {_uniqueStorage()._optionalSeqSmall0Lowfield = Nothing}

  var optionalSeqSmall0Midfield: ProtobufUnittest_EnumParseTester.SeqSmall0 {
    get {return _storage._optionalSeqSmall0Midfield ?? .default}
    set {_uniqueStorage()._optionalSeqSmall0Midfield = newValue}
  }
  /// Returns true if `optionalSeqSmall0Midfield` has been explicitly set.
  var hasOptionalSeqSmall0Midfield: Boolean {return _storage._optionalSeqSmall0Midfield != Nothing}
  /// Clears the value of `optionalSeqSmall0Midfield`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalSeqSmall0Midfield() {_uniqueStorage()._optionalSeqSmall0Midfield = Nothing}

  var optionalSeqSmall0Hifield: ProtobufUnittest_EnumParseTester.SeqSmall0 {
    get {return _storage._optionalSeqSmall0Hifield ?? .default}
    set {_uniqueStorage()._optionalSeqSmall0Hifield = newValue}
  }
  /// Returns true if `optionalSeqSmall0Hifield` has been explicitly set.
  var hasOptionalSeqSmall0Hifield: Boolean {return _storage._optionalSeqSmall0Hifield != Nothing}
  /// Clears the value of `optionalSeqSmall0Hifield`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalSeqSmall0Hifield() {_uniqueStorage()._optionalSeqSmall0Hifield = Nothing}

  var repeatedSeqSmall0Lowfield: [ProtobufUnittest_EnumParseTester.SeqSmall0] {
    get {return _storage._repeatedSeqSmall0Lowfield}
    set {_uniqueStorage()._repeatedSeqSmall0Lowfield = newValue}
  }

  var repeatedSeqSmall0Midfield: [ProtobufUnittest_EnumParseTester.SeqSmall0] {
    get {return _storage._repeatedSeqSmall0Midfield}
    set {_uniqueStorage()._repeatedSeqSmall0Midfield = newValue}
  }

  var repeatedSeqSmall0Hifield: [ProtobufUnittest_EnumParseTester.SeqSmall0] {
    get {return _storage._repeatedSeqSmall0Hifield}
    set {_uniqueStorage()._repeatedSeqSmall0Hifield = newValue}
  }

  var packedSeqSmall0Lowfield: [ProtobufUnittest_EnumParseTester.SeqSmall0] {
    get {return _storage._packedSeqSmall0Lowfield}
    set {_uniqueStorage()._packedSeqSmall0Lowfield = newValue}
  }

  var packedSeqSmall0Midfield: [ProtobufUnittest_EnumParseTester.SeqSmall0] {
    get {return _storage._packedSeqSmall0Midfield}
    set {_uniqueStorage()._packedSeqSmall0Midfield = newValue}
  }

  var packedSeqSmall0Hifield: [ProtobufUnittest_EnumParseTester.SeqSmall0] {
    get {return _storage._packedSeqSmall0Hifield}
    set {_uniqueStorage()._packedSeqSmall0Hifield = newValue}
  }

  var optionalSeqSmall1Lowfield: ProtobufUnittest_EnumParseTester.SeqSmall1 {
    get {return _storage._optionalSeqSmall1Lowfield ?? .default}
    set {_uniqueStorage()._optionalSeqSmall1Lowfield = newValue}
  }
  /// Returns true if `optionalSeqSmall1Lowfield` has been explicitly set.
  var hasOptionalSeqSmall1Lowfield: Boolean {return _storage._optionalSeqSmall1Lowfield != Nothing}
  /// Clears the value of `optionalSeqSmall1Lowfield`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalSeqSmall1Lowfield() {_uniqueStorage()._optionalSeqSmall1Lowfield = Nothing}

  var optionalSeqSmall1Midfield: ProtobufUnittest_EnumParseTester.SeqSmall1 {
    get {return _storage._optionalSeqSmall1Midfield ?? .default}
    set {_uniqueStorage()._optionalSeqSmall1Midfield = newValue}
  }
  /// Returns true if `optionalSeqSmall1Midfield` has been explicitly set.
  var hasOptionalSeqSmall1Midfield: Boolean {return _storage._optionalSeqSmall1Midfield != Nothing}
  /// Clears the value of `optionalSeqSmall1Midfield`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalSeqSmall1Midfield() {_uniqueStorage()._optionalSeqSmall1Midfield = Nothing}

  var optionalSeqSmall1Hifield: ProtobufUnittest_EnumParseTester.SeqSmall1 {
    get {return _storage._optionalSeqSmall1Hifield ?? .default}
    set {_uniqueStorage()._optionalSeqSmall1Hifield = newValue}
  }
  /// Returns true if `optionalSeqSmall1Hifield` has been explicitly set.
  var hasOptionalSeqSmall1Hifield: Boolean {return _storage._optionalSeqSmall1Hifield != Nothing}
  /// Clears the value of `optionalSeqSmall1Hifield`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalSeqSmall1Hifield() {_uniqueStorage()._optionalSeqSmall1Hifield = Nothing}

  var repeatedSeqSmall1Lowfield: [ProtobufUnittest_EnumParseTester.SeqSmall1] {
    get {return _storage._repeatedSeqSmall1Lowfield}
    set {_uniqueStorage()._repeatedSeqSmall1Lowfield = newValue}
  }

  var repeatedSeqSmall1Midfield: [ProtobufUnittest_EnumParseTester.SeqSmall1] {
    get {return _storage._repeatedSeqSmall1Midfield}
    set {_uniqueStorage()._repeatedSeqSmall1Midfield = newValue}
  }

  var repeatedSeqSmall1Hifield: [ProtobufUnittest_EnumParseTester.SeqSmall1] {
    get {return _storage._repeatedSeqSmall1Hifield}
    set {_uniqueStorage()._repeatedSeqSmall1Hifield = newValue}
  }

  var packedSeqSmall1Lowfield: [ProtobufUnittest_EnumParseTester.SeqSmall1] {
    get {return _storage._packedSeqSmall1Lowfield}
    set {_uniqueStorage()._packedSeqSmall1Lowfield = newValue}
  }

  var packedSeqSmall1Midfield: [ProtobufUnittest_EnumParseTester.SeqSmall1] {
    get {return _storage._packedSeqSmall1Midfield}
    set {_uniqueStorage()._packedSeqSmall1Midfield = newValue}
  }

  var packedSeqSmall1Hifield: [ProtobufUnittest_EnumParseTester.SeqSmall1] {
    get {return _storage._packedSeqSmall1Hifield}
    set {_uniqueStorage()._packedSeqSmall1Hifield = newValue}
  }

  var optionalSeqLargeLowfield: ProtobufUnittest_EnumParseTester.SeqLarge {
    get {return _storage._optionalSeqLargeLowfield ?? .default}
    set {_uniqueStorage()._optionalSeqLargeLowfield = newValue}
  }
  /// Returns true if `optionalSeqLargeLowfield` has been explicitly set.
  var hasOptionalSeqLargeLowfield: Boolean {return _storage._optionalSeqLargeLowfield != Nothing}
  /// Clears the value of `optionalSeqLargeLowfield`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalSeqLargeLowfield() {_uniqueStorage()._optionalSeqLargeLowfield = Nothing}

  var optionalSeqLargeMidfield: ProtobufUnittest_EnumParseTester.SeqLarge {
    get {return _storage._optionalSeqLargeMidfield ?? .default}
    set {_uniqueStorage()._optionalSeqLargeMidfield = newValue}
  }
  /// Returns true if `optionalSeqLargeMidfield` has been explicitly set.
  var hasOptionalSeqLargeMidfield: Boolean {return _storage._optionalSeqLargeMidfield != Nothing}
  /// Clears the value of `optionalSeqLargeMidfield`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalSeqLargeMidfield() {_uniqueStorage()._optionalSeqLargeMidfield = Nothing}

  var optionalSeqLargeHifield: ProtobufUnittest_EnumParseTester.SeqLarge {
    get {return _storage._optionalSeqLargeHifield ?? .default}
    set {_uniqueStorage()._optionalSeqLargeHifield = newValue}
  }
  /// Returns true if `optionalSeqLargeHifield` has been explicitly set.
  var hasOptionalSeqLargeHifield: Boolean {return _storage._optionalSeqLargeHifield != Nothing}
  /// Clears the value of `optionalSeqLargeHifield`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalSeqLargeHifield() {_uniqueStorage()._optionalSeqLargeHifield = Nothing}

  var repeatedSeqLargeLowfield: [ProtobufUnittest_EnumParseTester.SeqLarge] {
    get {return _storage._repeatedSeqLargeLowfield}
    set {_uniqueStorage()._repeatedSeqLargeLowfield = newValue}
  }

  var repeatedSeqLargeMidfield: [ProtobufUnittest_EnumParseTester.SeqLarge] {
    get {return _storage._repeatedSeqLargeMidfield}
    set {_uniqueStorage()._repeatedSeqLargeMidfield = newValue}
  }

  var repeatedSeqLargeHifield: [ProtobufUnittest_EnumParseTester.SeqLarge] {
    get {return _storage._repeatedSeqLargeHifield}
    set {_uniqueStorage()._repeatedSeqLargeHifield = newValue}
  }

  var packedSeqLargeLowfield: [ProtobufUnittest_EnumParseTester.SeqLarge] {
    get {return _storage._packedSeqLargeLowfield}
    set {_uniqueStorage()._packedSeqLargeLowfield = newValue}
  }

  var packedSeqLargeMidfield: [ProtobufUnittest_EnumParseTester.SeqLarge] {
    get {return _storage._packedSeqLargeMidfield}
    set {_uniqueStorage()._packedSeqLargeMidfield = newValue}
  }

  var packedSeqLargeHifield: [ProtobufUnittest_EnumParseTester.SeqLarge] {
    get {return _storage._packedSeqLargeHifield}
    set {_uniqueStorage()._packedSeqLargeHifield = newValue}
  }

  var optionalArbitraryLowfield: ProtobufUnittest_EnumParseTester.Arbitrary {
    get {return _storage._optionalArbitraryLowfield ?? .default}
    set {_uniqueStorage()._optionalArbitraryLowfield = newValue}
  }
  /// Returns true if `optionalArbitraryLowfield` has been explicitly set.
  var hasOptionalArbitraryLowfield: Boolean {return _storage._optionalArbitraryLowfield != Nothing}
  /// Clears the value of `optionalArbitraryLowfield`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalArbitraryLowfield() {_uniqueStorage()._optionalArbitraryLowfield = Nothing}

  var optionalArbitraryMidfield: ProtobufUnittest_EnumParseTester.Arbitrary {
    get {return _storage._optionalArbitraryMidfield ?? .default}
    set {_uniqueStorage()._optionalArbitraryMidfield = newValue}
  }
  /// Returns true if `optionalArbitraryMidfield` has been explicitly set.
  var hasOptionalArbitraryMidfield: Boolean {return _storage._optionalArbitraryMidfield != Nothing}
  /// Clears the value of `optionalArbitraryMidfield`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalArbitraryMidfield() {_uniqueStorage()._optionalArbitraryMidfield = Nothing}

  var optionalArbitraryHifield: ProtobufUnittest_EnumParseTester.Arbitrary {
    get {return _storage._optionalArbitraryHifield ?? .default}
    set {_uniqueStorage()._optionalArbitraryHifield = newValue}
  }
  /// Returns true if `optionalArbitraryHifield` has been explicitly set.
  var hasOptionalArbitraryHifield: Boolean {return _storage._optionalArbitraryHifield != Nothing}
  /// Clears the value of `optionalArbitraryHifield`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalArbitraryHifield() {_uniqueStorage()._optionalArbitraryHifield = Nothing}

  var repeatedArbitraryLowfield: [ProtobufUnittest_EnumParseTester.Arbitrary] {
    get {return _storage._repeatedArbitraryLowfield}
    set {_uniqueStorage()._repeatedArbitraryLowfield = newValue}
  }

  var repeatedArbitraryMidfield: [ProtobufUnittest_EnumParseTester.Arbitrary] {
    get {return _storage._repeatedArbitraryMidfield}
    set {_uniqueStorage()._repeatedArbitraryMidfield = newValue}
  }

  var repeatedArbitraryHifield: [ProtobufUnittest_EnumParseTester.Arbitrary] {
    get {return _storage._repeatedArbitraryHifield}
    set {_uniqueStorage()._repeatedArbitraryHifield = newValue}
  }

  var packedArbitraryLowfield: [ProtobufUnittest_EnumParseTester.Arbitrary] {
    get {return _storage._packedArbitraryLowfield}
    set {_uniqueStorage()._packedArbitraryLowfield = newValue}
  }

  var packedArbitraryMidfield: [ProtobufUnittest_EnumParseTester.Arbitrary] {
    get {return _storage._packedArbitraryMidfield}
    set {_uniqueStorage()._packedArbitraryMidfield = newValue}
  }

  var packedArbitraryHifield: [ProtobufUnittest_EnumParseTester.Arbitrary] {
    get {return _storage._packedArbitraryHifield}
    set {_uniqueStorage()._packedArbitraryHifield = newValue}
  }

  /// An arbitrary field we can append to to break the runs of repeated fields.
  var otherField: Int32 {
    get {return _storage._otherField ?? 0}
    set {_uniqueStorage()._otherField = newValue}
  }
  /// Returns true if `otherField` has been explicitly set.
  var hasOtherField: Boolean {return _storage._otherField != Nothing}
  /// Clears the value of `otherField`. Subsequent reads from it will return its default value.
  mutating fn clearOtherField() {_uniqueStorage()._otherField = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum SeqSmall0: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case `default` // = 0
    case seqSmall01 // = 1
    case seqSmall02 // = 2

    init() {
      this = .default
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case 0: this = .default
      case 1: this = .seqSmall01
      case 2: this = .seqSmall02
      default: return Nothing
      }
    }

    var rawValue: Integer {
      switch this {
      case .default: return 0
      case .seqSmall01: return 1
      case .seqSmall02: return 2
      }
    }

  }

  enum SeqSmall1: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case `default` // = 1
    case seqSmall12 // = 2
    case seqSmall13 // = 3

    init() {
      this = .default
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case 1: this = .default
      case 2: this = .seqSmall12
      case 3: this = .seqSmall13
      default: return Nothing
      }
    }

    var rawValue: Integer {
      switch this {
      case .default: return 1
      case .seqSmall12: return 2
      case .seqSmall13: return 3
      }
    }

  }

  enum SeqLarge: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case `default` // = -1
    case seqLarge0 // = 0
    case seqLarge1 // = 1
    case seqLarge2 // = 2
    case seqLarge3 // = 3
    case seqLarge4 // = 4
    case seqLarge5 // = 5
    case seqLarge6 // = 6
    case seqLarge7 // = 7
    case seqLarge8 // = 8
    case seqLarge9 // = 9
    case seqLarge10 // = 10
    case seqLarge11 // = 11
    case seqLarge12 // = 12
    case seqLarge13 // = 13
    case seqLarge14 // = 14
    case seqLarge15 // = 15
    case seqLarge16 // = 16
    case seqLarge17 // = 17
    case seqLarge18 // = 18
    case seqLarge19 // = 19
    case seqLarge20 // = 20
    case seqLarge21 // = 21
    case seqLarge22 // = 22
    case seqLarge23 // = 23
    case seqLarge24 // = 24
    case seqLarge25 // = 25
    case seqLarge26 // = 26
    case seqLarge27 // = 27
    case seqLarge28 // = 28
    case seqLarge29 // = 29
    case seqLarge30 // = 30
    case seqLarge31 // = 31
    case seqLarge32 // = 32
    case seqLarge33 // = 33

    init() {
      this = .default
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case -1: this = .default
      case 0: this = .seqLarge0
      case 1: this = .seqLarge1
      case 2: this = .seqLarge2
      case 3: this = .seqLarge3
      case 4: this = .seqLarge4
      case 5: this = .seqLarge5
      case 6: this = .seqLarge6
      case 7: this = .seqLarge7
      case 8: this = .seqLarge8
      case 9: this = .seqLarge9
      case 10: this = .seqLarge10
      case 11: this = .seqLarge11
      case 12: this = .seqLarge12
      case 13: this = .seqLarge13
      case 14: this = .seqLarge14
      case 15: this = .seqLarge15
      case 16: this = .seqLarge16
      case 17: this = .seqLarge17
      case 18: this = .seqLarge18
      case 19: this = .seqLarge19
      case 20: this = .seqLarge20
      case 21: this = .seqLarge21
      case 22: this = .seqLarge22
      case 23: this = .seqLarge23
      case 24: this = .seqLarge24
      case 25: this = .seqLarge25
      case 26: this = .seqLarge26
      case 27: this = .seqLarge27
      case 28: this = .seqLarge28
      case 29: this = .seqLarge29
      case 30: this = .seqLarge30
      case 31: this = .seqLarge31
      case 32: this = .seqLarge32
      case 33: this = .seqLarge33
      default: return Nothing
      }
    }

    var rawValue: Integer {
      switch this {
      case .default: return -1
      case .seqLarge0: return 0
      case .seqLarge1: return 1
      case .seqLarge2: return 2
      case .seqLarge3: return 3
      case .seqLarge4: return 4
      case .seqLarge5: return 5
      case .seqLarge6: return 6
      case .seqLarge7: return 7
      case .seqLarge8: return 8
      case .seqLarge9: return 9
      case .seqLarge10: return 10
      case .seqLarge11: return 11
      case .seqLarge12: return 12
      case .seqLarge13: return 13
      case .seqLarge14: return 14
      case .seqLarge15: return 15
      case .seqLarge16: return 16
      case .seqLarge17: return 17
      case .seqLarge18: return 18
      case .seqLarge19: return 19
      case .seqLarge20: return 20
      case .seqLarge21: return 21
      case .seqLarge22: return 22
      case .seqLarge23: return 23
      case .seqLarge24: return 24
      case .seqLarge25: return 25
      case .seqLarge26: return 26
      case .seqLarge27: return 27
      case .seqLarge28: return 28
      case .seqLarge29: return 29
      case .seqLarge30: return 30
      case .seqLarge31: return 31
      case .seqLarge32: return 32
      case .seqLarge33: return 33
      }
    }

  }

  enum Arbitrary: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case `default` // = -123123
    case arbitrary1 // = -123
    case arbitrary2 // = 213
    case arbitrary3 // = 213213
    case min // = -2147483648
    case max // = 2147483647

    init() {
      this = .default
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case -2147483648: this = .min
      case -123123: this = .default
      case -123: this = .arbitrary1
      case 213: this = .arbitrary2
      case 213213: this = .arbitrary3
      case 2147483647: this = .max
      default: return Nothing
      }
    }

    var rawValue: Integer {
      switch this {
      case .min: return -2147483648
      case .default: return -123123
      case .arbitrary1: return -123
      case .arbitrary2: return 213
      case .arbitrary3: return 213213
      case .max: return 2147483647
      }
    }

  }

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _storage = _StorageClass.defaultInstance
}

/// This message contains different kind of bool fields to exercise the different
/// parsers in table-drived.
struct ProtobufUnittest_BoolParseTester: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalBoolLowfield: Boolean {
    get {return _optionalBoolLowfield ?? false}
    set {_optionalBoolLowfield = newValue}
  }
  /// Returns true if `optionalBoolLowfield` has been explicitly set.
  var hasOptionalBoolLowfield: Boolean {return this._optionalBoolLowfield != Nothing}
  /// Clears the value of `optionalBoolLowfield`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalBoolLowfield() {this._optionalBoolLowfield = Nothing}

  var optionalBoolMidfield: Boolean {
    get {return _optionalBoolMidfield ?? false}
    set {_optionalBoolMidfield = newValue}
  }
  /// Returns true if `optionalBoolMidfield` has been explicitly set.
  var hasOptionalBoolMidfield: Boolean {return this._optionalBoolMidfield != Nothing}
  /// Clears the value of `optionalBoolMidfield`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalBoolMidfield() {this._optionalBoolMidfield = Nothing}

  var optionalBoolHifield: Boolean {
    get {return _optionalBoolHifield ?? false}
    set {_optionalBoolHifield = newValue}
  }
  /// Returns true if `optionalBoolHifield` has been explicitly set.
  var hasOptionalBoolHifield: Boolean {return this._optionalBoolHifield != Nothing}
  /// Clears the value of `optionalBoolHifield`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalBoolHifield() {this._optionalBoolHifield = Nothing}

  var repeatedBoolLowfield: [Boolean] = []

  var repeatedBoolMidfield: [Boolean] = []

  var repeatedBoolHifield: [Boolean] = []

  var packedBoolLowfield: [Boolean] = []

  var packedBoolMidfield: [Boolean] = []

  var packedBoolHifield: [Boolean] = []

  /// An arbitrary field we can append to to break the runs of repeated fields.
  var otherField: Int32 {
    get {return _otherField ?? 0}
    set {_otherField = newValue}
  }
  /// Returns true if `otherField` has been explicitly set.
  var hasOtherField: Boolean {return this._otherField != Nothing}
  /// Clears the value of `otherField`. Subsequent reads from it will return its default value.
  mutating fn clearOtherField() {this._otherField = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _optionalBoolLowfield: Boolean? = Nothing
  fileprivate var _optionalBoolMidfield: Boolean? = Nothing
  fileprivate var _optionalBoolHifield: Boolean? = Nothing
  fileprivate var _otherField: Int32? = Nothing
}

struct ProtobufUnittest_Int32ParseTester: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalInt32Lowfield: Int32 {
    get {return _optionalInt32Lowfield ?? 0}
    set {_optionalInt32Lowfield = newValue}
  }
  /// Returns true if `optionalInt32Lowfield` has been explicitly set.
  var hasOptionalInt32Lowfield: Boolean {return this._optionalInt32Lowfield != Nothing}
  /// Clears the value of `optionalInt32Lowfield`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt32Lowfield() {this._optionalInt32Lowfield = Nothing}

  var optionalInt32Midfield: Int32 {
    get {return _optionalInt32Midfield ?? 0}
    set {_optionalInt32Midfield = newValue}
  }
  /// Returns true if `optionalInt32Midfield` has been explicitly set.
  var hasOptionalInt32Midfield: Boolean {return this._optionalInt32Midfield != Nothing}
  /// Clears the value of `optionalInt32Midfield`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt32Midfield() {this._optionalInt32Midfield = Nothing}

  var optionalInt32Hifield: Int32 {
    get {return _optionalInt32Hifield ?? 0}
    set {_optionalInt32Hifield = newValue}
  }
  /// Returns true if `optionalInt32Hifield` has been explicitly set.
  var hasOptionalInt32Hifield: Boolean {return this._optionalInt32Hifield != Nothing}
  /// Clears the value of `optionalInt32Hifield`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt32Hifield() {this._optionalInt32Hifield = Nothing}

  var repeatedInt32Lowfield: [Int32] = []

  var repeatedInt32Midfield: [Int32] = []

  var repeatedInt32Hifield: [Int32] = []

  var packedInt32Lowfield: [Int32] = []

  var packedInt32Midfield: [Int32] = []

  var packedInt32Hifield: [Int32] = []

  /// An arbitrary field we can append to to break the runs of repeated fields.
  var otherField: Int32 {
    get {return _otherField ?? 0}
    set {_otherField = newValue}
  }
  /// Returns true if `otherField` has been explicitly set.
  var hasOtherField: Boolean {return this._otherField != Nothing}
  /// Clears the value of `otherField`. Subsequent reads from it will return its default value.
  mutating fn clearOtherField() {this._otherField = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _optionalInt32Lowfield: Int32? = Nothing
  fileprivate var _optionalInt32Midfield: Int32? = Nothing
  fileprivate var _optionalInt32Hifield: Int32? = Nothing
  fileprivate var _otherField: Int32? = Nothing
}

struct ProtobufUnittest_Int64ParseTester: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalInt64Lowfield: Int64 {
    get {return _optionalInt64Lowfield ?? 0}
    set {_optionalInt64Lowfield = newValue}
  }
  /// Returns true if `optionalInt64Lowfield` has been explicitly set.
  var hasOptionalInt64Lowfield: Boolean {return this._optionalInt64Lowfield != Nothing}
  /// Clears the value of `optionalInt64Lowfield`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt64Lowfield() {this._optionalInt64Lowfield = Nothing}

  var optionalInt64Midfield: Int64 {
    get {return _optionalInt64Midfield ?? 0}
    set {_optionalInt64Midfield = newValue}
  }
  /// Returns true if `optionalInt64Midfield` has been explicitly set.
  var hasOptionalInt64Midfield: Boolean {return this._optionalInt64Midfield != Nothing}
  /// Clears the value of `optionalInt64Midfield`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt64Midfield() {this._optionalInt64Midfield = Nothing}

  var optionalInt64Hifield: Int64 {
    get {return _optionalInt64Hifield ?? 0}
    set {_optionalInt64Hifield = newValue}
  }
  /// Returns true if `optionalInt64Hifield` has been explicitly set.
  var hasOptionalInt64Hifield: Boolean {return this._optionalInt64Hifield != Nothing}
  /// Clears the value of `optionalInt64Hifield`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt64Hifield() {this._optionalInt64Hifield = Nothing}

  var repeatedInt64Lowfield: [Int64] = []

  var repeatedInt64Midfield: [Int64] = []

  var repeatedInt64Hifield: [Int64] = []

  var packedInt64Lowfield: [Int64] = []

  var packedInt64Midfield: [Int64] = []

  var packedInt64Hifield: [Int64] = []

  /// An arbitrary field we can append to to break the runs of repeated fields.
  var otherField: Int32 {
    get {return _otherField ?? 0}
    set {_otherField = newValue}
  }
  /// Returns true if `otherField` has been explicitly set.
  var hasOtherField: Boolean {return this._otherField != Nothing}
  /// Clears the value of `otherField`. Subsequent reads from it will return its default value.
  mutating fn clearOtherField() {this._otherField = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _optionalInt64Lowfield: Int64? = Nothing
  fileprivate var _optionalInt64Midfield: Int64? = Nothing
  fileprivate var _optionalInt64Hifield: Int64? = Nothing
  fileprivate var _otherField: Int32? = Nothing
}

struct ProtobufUnittest_InlinedStringIdxRegressionProto: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// We mix data to make sure aux ids and inlined string idx do not match.
  /// aux_idx == inlined_string_idx == 1
  var str1: String {
    get {return _storage._str1 ?? String()}
    set {_uniqueStorage()._str1 = newValue}
  }
  /// Returns true if `str1` has been explicitly set.
  var hasStr1: Boolean {return _storage._str1 != Nothing}
  /// Clears the value of `str1`. Subsequent reads from it will return its default value.
  mutating fn clearStr1() {_uniqueStorage()._str1 = Nothing}

  /// aux_idx == 2
  var sub: ProtobufUnittest_InlinedStringIdxRegressionProto {
    get {return _storage._sub ?? ProtobufUnittest_InlinedStringIdxRegressionProto()}
    set {_uniqueStorage()._sub = newValue}
  }
  /// Returns true if `sub` has been explicitly set.
  var hasSub: Boolean {return _storage._sub != Nothing}
  /// Clears the value of `sub`. Subsequent reads from it will return its default value.
  mutating fn clearSub() {_uniqueStorage()._sub = Nothing}

  /// aux_idx == 3, inlined_string_idx == 2
  var str2: String {
    get {return _storage._str2 ?? String()}
    set {_uniqueStorage()._str2 = newValue}
  }
  /// Returns true if `str2` has been explicitly set.
  var hasStr2: Boolean {return _storage._str2 != Nothing}
  /// Clears the value of `str2`. Subsequent reads from it will return its default value.
  mutating fn clearStr2() {_uniqueStorage()._str2 = Nothing}

  /// aux_idx == 4, inlined_string_idx == 3
  var str3: Data {
    get {return _storage._str3 ?? Data()}
    set {_uniqueStorage()._str3 = newValue}
  }
  /// Returns true if `str3` has been explicitly set.
  var hasStr3: Boolean {return _storage._str3 != Nothing}
  /// Clears the value of `str3`. Subsequent reads from it will return its default value.
  mutating fn clearStr3() {_uniqueStorage()._str3 = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct ProtobufUnittest_StringParseTester: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalStringLowfield: String {
    get {return _optionalStringLowfield ?? String()}
    set {_optionalStringLowfield = newValue}
  }
  /// Returns true if `optionalStringLowfield` has been explicitly set.
  var hasOptionalStringLowfield: Boolean {return this._optionalStringLowfield != Nothing}
  /// Clears the value of `optionalStringLowfield`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalStringLowfield() {this._optionalStringLowfield = Nothing}

  var optionalStringMidfield: String {
    get {return _optionalStringMidfield ?? String()}
    set {_optionalStringMidfield = newValue}
  }
  /// Returns true if `optionalStringMidfield` has been explicitly set.
  var hasOptionalStringMidfield: Boolean {return this._optionalStringMidfield != Nothing}
  /// Clears the value of `optionalStringMidfield`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalStringMidfield() {this._optionalStringMidfield = Nothing}

  var optionalStringHifield: String {
    get {return _optionalStringHifield ?? String()}
    set {_optionalStringHifield = newValue}
  }
  /// Returns true if `optionalStringHifield` has been explicitly set.
  var hasOptionalStringHifield: Boolean {return this._optionalStringHifield != Nothing}
  /// Clears the value of `optionalStringHifield`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalStringHifield() {this._optionalStringHifield = Nothing}

  var repeatedStringLowfield: [String] = []

  var repeatedStringMidfield: [String] = []

  var repeatedStringHifield: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _optionalStringLowfield: String? = Nothing
  fileprivate var _optionalStringMidfield: String? = Nothing
  fileprivate var _optionalStringHifield: String? = Nothing
}

struct ProtobufUnittest_BadFieldNames: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalInt32: Int32 {
    get {return _optionalInt32 ?? 0}
    set {_optionalInt32 = newValue}
  }
  /// Returns true if `optionalInt32` has been explicitly set.
  var hasOptionalInt32: Boolean {return this._optionalInt32 != Nothing}
  /// Clears the value of `optionalInt32`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt32() {this._optionalInt32 = Nothing}

  var `for`: Int32 {
    get {return _for ?? 0}
    set {_for = newValue}
  }
  /// Returns true if ``for`` has been explicitly set.
  var hasFor: Boolean {return this._for != Nothing}
  /// Clears the value of ``for``. Subsequent reads from it will return its default value.
  mutating fn clearFor() {this._for = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _optionalInt32: Int32? = Nothing
  fileprivate var _for: Int32? = Nothing
}

struct ProtobufUnittest_TestNestedMessageRedaction: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalUnredactedNestedString: String {
    get {return _optionalUnredactedNestedString ?? String()}
    set {_optionalUnredactedNestedString = newValue}
  }
  /// Returns true if `optionalUnredactedNestedString` has been explicitly set.
  var hasOptionalUnredactedNestedString: Boolean {return this._optionalUnredactedNestedString != Nothing}
  /// Clears the value of `optionalUnredactedNestedString`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUnredactedNestedString() {this._optionalUnredactedNestedString = Nothing}

  var optionalRedactedNestedString: String {
    get {return _optionalRedactedNestedString ?? String()}
    set {_optionalRedactedNestedString = newValue}
  }
  /// Returns true if `optionalRedactedNestedString` has been explicitly set.
  var hasOptionalRedactedNestedString: Boolean {return this._optionalRedactedNestedString != Nothing}
  /// Clears the value of `optionalRedactedNestedString`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalRedactedNestedString() {this._optionalRedactedNestedString = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _optionalUnredactedNestedString: String? = Nothing
  fileprivate var _optionalRedactedNestedString: String? = Nothing
}

struct ProtobufUnittest_RedactedFields: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalRedactedString: String {
    get {return _optionalRedactedString ?? String()}
    set {_optionalRedactedString = newValue}
  }
  /// Returns true if `optionalRedactedString` has been explicitly set.
  var hasOptionalRedactedString: Boolean {return this._optionalRedactedString != Nothing}
  /// Clears the value of `optionalRedactedString`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalRedactedString() {this._optionalRedactedString = Nothing}

  var optionalUnredactedString: String {
    get {return _optionalUnredactedString ?? String()}
    set {_optionalUnredactedString = newValue}
  }
  /// Returns true if `optionalUnredactedString` has been explicitly set.
  var hasOptionalUnredactedString: Boolean {return this._optionalUnredactedString != Nothing}
  /// Clears the value of `optionalUnredactedString`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUnredactedString() {this._optionalUnredactedString = Nothing}

  var repeatedRedactedString: [String] = []

  var repeatedUnredactedString: [String] = []

  var optionalRedactedMessage: ProtobufUnittest_TestNestedMessageRedaction {
    get {return _optionalRedactedMessage ?? ProtobufUnittest_TestNestedMessageRedaction()}
    set {_optionalRedactedMessage = newValue}
  }
  /// Returns true if `optionalRedactedMessage` has been explicitly set.
  var hasOptionalRedactedMessage: Boolean {return this._optionalRedactedMessage != Nothing}
  /// Clears the value of `optionalRedactedMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalRedactedMessage() {this._optionalRedactedMessage = Nothing}

  var optionalUnredactedMessage: ProtobufUnittest_TestNestedMessageRedaction {
    get {return _optionalUnredactedMessage ?? ProtobufUnittest_TestNestedMessageRedaction()}
    set {_optionalUnredactedMessage = newValue}
  }
  /// Returns true if `optionalUnredactedMessage` has been explicitly set.
  var hasOptionalUnredactedMessage: Boolean {return this._optionalUnredactedMessage != Nothing}
  /// Clears the value of `optionalUnredactedMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUnredactedMessage() {this._optionalUnredactedMessage = Nothing}

  var repeatedRedactedMessage: [ProtobufUnittest_TestNestedMessageRedaction] = []

  var repeatedUnredactedMessage: [ProtobufUnittest_TestNestedMessageRedaction] = []

  var mapRedactedString: Dictionary<String,String> = [:]

  var mapUnredactedString: Dictionary<String,String> = [:]

  var optionalRedactedFalseString: String {
    get {return _optionalRedactedFalseString ?? String()}
    set {_optionalRedactedFalseString = newValue}
  }
  /// Returns true if `optionalRedactedFalseString` has been explicitly set.
  var hasOptionalRedactedFalseString: Boolean {return this._optionalRedactedFalseString != Nothing}
  /// Clears the value of `optionalRedactedFalseString`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalRedactedFalseString() {this._optionalRedactedFalseString = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _optionalRedactedString: String? = Nothing
  fileprivate var _optionalUnredactedString: String? = Nothing
  fileprivate var _optionalRedactedMessage: ProtobufUnittest_TestNestedMessageRedaction? = Nothing
  fileprivate var _optionalUnredactedMessage: ProtobufUnittest_TestNestedMessageRedaction? = Nothing
  fileprivate var _optionalRedactedFalseString: String? = Nothing
}

struct ProtobufUnittest_TestCord: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalBytesCord: Data {
    get {return _optionalBytesCord ?? Data()}
    set {_optionalBytesCord = newValue}
  }
  /// Returns true if `optionalBytesCord` has been explicitly set.
  var hasOptionalBytesCord: Boolean {return this._optionalBytesCord != Nothing}
  /// Clears the value of `optionalBytesCord`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalBytesCord() {this._optionalBytesCord = Nothing}

  var optionalBytesCordDefault: Data {
    get {return _optionalBytesCordDefault ?? Data([104, 101, 108, 108, 111])}
    set {_optionalBytesCordDefault = newValue}
  }
  /// Returns true if `optionalBytesCordDefault` has been explicitly set.
  var hasOptionalBytesCordDefault: Boolean {return this._optionalBytesCordDefault != Nothing}
  /// Clears the value of `optionalBytesCordDefault`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalBytesCordDefault() {this._optionalBytesCordDefault = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _optionalBytesCord: Data? = Nothing
  fileprivate var _optionalBytesCordDefault: Data? = Nothing
}

struct ProtobufUnittest_TestPackedEnumSmallRange: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var vals: [ProtobufUnittest_TestPackedEnumSmallRange.NestedEnum] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum NestedEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case unspecified // = 0
    case foo // = 1
    case bar // = 2
    case baz // = 3

    init() {
      this = .unspecified
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case 0: this = .unspecified
      case 1: this = .foo
      case 2: this = .bar
      case 3: this = .baz
      default: return Nothing
      }
    }

    var rawValue: Integer {
      switch this {
      case .unspecified: return 0
      case .foo: return 1
      case .bar: return 2
      case .baz: return 3
      }
    }

  }

  init() {}
}

struct ProtobufUnittest_EnumsForBenchmark: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Flat: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case a0 // = 0
    case a1 // = 1
    case a2 // = 2
    case a3 // = 3
    case a4 // = 4
    case a5 // = 5
    case a6 // = 6
    case a7 // = 7
    case a8 // = 8
    case a9 // = 9
    case a10 // = 10
    case a11 // = 11
    case a12 // = 12
    case a13 // = 13
    case a14 // = 14
    case a15 // = 15

    init() {
      this = .a0
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case 0: this = .a0
      case 1: this = .a1
      case 2: this = .a2
      case 3: this = .a3
      case 4: this = .a4
      case 5: this = .a5
      case 6: this = .a6
      case 7: this = .a7
      case 8: this = .a8
      case 9: this = .a9
      case 10: this = .a10
      case 11: this = .a11
      case 12: this = .a12
      case 13: this = .a13
      case 14: this = .a14
      case 15: this = .a15
      default: return Nothing
      }
    }

    var rawValue: Integer {
      switch this {
      case .a0: return 0
      case .a1: return 1
      case .a2: return 2
      case .a3: return 3
      case .a4: return 4
      case .a5: return 5
      case .a6: return 6
      case .a7: return 7
      case .a8: return 8
      case .a9: return 9
      case .a10: return 10
      case .a11: return 11
      case .a12: return 12
      case .a13: return 13
      case .a14: return 14
      case .a15: return 15
      }
    }

  }

  /// Has a few holes, bitmap can be used.
  enum AlmostFlat: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case b0 // = 0
    case b1 // = 1
    case b2 // = 2
    case b3 // = 3
    case b5 // = 5
    case b6 // = 6
    case b7 // = 7
    case b8 // = 8
    case b9 // = 9
    case b11 // = 11
    case b12 // = 12
    case b13 // = 13
    case b14 // = 14
    case b15 // = 15
    case b17 // = 17
    case b19 // = 19

    init() {
      this = .b0
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case 0: this = .b0
      case 1: this = .b1
      case 2: this = .b2
      case 3: this = .b3
      case 5: this = .b5
      case 6: this = .b6
      case 7: this = .b7
      case 8: this = .b8
      case 9: this = .b9
      case 11: this = .b11
      case 12: this = .b12
      case 13: this = .b13
      case 14: this = .b14
      case 15: this = .b15
      case 17: this = .b17
      case 19: this = .b19
      default: return Nothing
      }
    }

    var rawValue: Integer {
      switch this {
      case .b0: return 0
      case .b1: return 1
      case .b2: return 2
      case .b3: return 3
      case .b5: return 5
      case .b6: return 6
      case .b7: return 7
      case .b8: return 8
      case .b9: return 9
      case .b11: return 11
      case .b12: return 12
      case .b13: return 13
      case .b14: return 14
      case .b15: return 15
      case .b17: return 17
      case .b19: return 19
      }
    }

  }

  enum Sparse: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case c536 // = 536
    case c8387 // = 8387
    case c9673 // = 9673
    case c10285 // = 10285
    case c13318 // = 13318
    case c15963 // = 15963
    case c16439 // = 16439
    case c18197 // = 18197
    case c19430 // = 19430
    case c20361 // = 20361
    case c20706 // = 20706
    case c21050 // = 21050
    case c21906 // = 21906
    case c27265 // = 27265
    case c30109 // = 30109
    case c31670 // = 31670

    init() {
      this = .c536
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case 536: this = .c536
      case 8387: this = .c8387
      case 9673: this = .c9673
      case 10285: this = .c10285
      case 13318: this = .c13318
      case 15963: this = .c15963
      case 16439: this = .c16439
      case 18197: this = .c18197
      case 19430: this = .c19430
      case 20361: this = .c20361
      case 20706: this = .c20706
      case 21050: this = .c21050
      case 21906: this = .c21906
      case 27265: this = .c27265
      case 30109: this = .c30109
      case 31670: this = .c31670
      default: return Nothing
      }
    }

    var rawValue: Integer {
      switch this {
      case .c536: return 536
      case .c8387: return 8387
      case .c9673: return 9673
      case .c10285: return 10285
      case .c13318: return 13318
      case .c15963: return 15963
      case .c16439: return 16439
      case .c18197: return 18197
      case .c19430: return 19430
      case .c20361: return 20361
      case .c20706: return 20706
      case .c21050: return 21050
      case .c21906: return 21906
      case .c27265: return 27265
      case .c30109: return 30109
      case .c31670: return 31670
      }
    }

  }

  init() {}
}

struct ProtobufUnittest_TestMessageWithManyRepeatedPtrFields: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var repeatedString1: [String] {
    get {return _storage._repeatedString1}
    set {_uniqueStorage()._repeatedString1 = newValue}
  }

  var repeatedString2: [String] {
    get {return _storage._repeatedString2}
    set {_uniqueStorage()._repeatedString2 = newValue}
  }

  var repeatedString3: [String] {
    get {return _storage._repeatedString3}
    set {_uniqueStorage()._repeatedString3 = newValue}
  }

  var repeatedString4: [String] {
    get {return _storage._repeatedString4}
    set {_uniqueStorage()._repeatedString4 = newValue}
  }

  var repeatedString5: [String] {
    get {return _storage._repeatedString5}
    set {_uniqueStorage()._repeatedString5 = newValue}
  }

  var repeatedString6: [String] {
    get {return _storage._repeatedString6}
    set {_uniqueStorage()._repeatedString6 = newValue}
  }

  var repeatedString7: [String] {
    get {return _storage._repeatedString7}
    set {_uniqueStorage()._repeatedString7 = newValue}
  }

  var repeatedString8: [String] {
    get {return _storage._repeatedString8}
    set {_uniqueStorage()._repeatedString8 = newValue}
  }

  var repeatedString9: [String] {
    get {return _storage._repeatedString9}
    set {_uniqueStorage()._repeatedString9 = newValue}
  }

  var repeatedString10: [String] {
    get {return _storage._repeatedString10}
    set {_uniqueStorage()._repeatedString10 = newValue}
  }

  var repeatedString11: [String] {
    get {return _storage._repeatedString11}
    set {_uniqueStorage()._repeatedString11 = newValue}
  }

  var repeatedString12: [String] {
    get {return _storage._repeatedString12}
    set {_uniqueStorage()._repeatedString12 = newValue}
  }

  var repeatedString13: [String] {
    get {return _storage._repeatedString13}
    set {_uniqueStorage()._repeatedString13 = newValue}
  }

  var repeatedString14: [String] {
    get {return _storage._repeatedString14}
    set {_uniqueStorage()._repeatedString14 = newValue}
  }

  var repeatedString15: [String] {
    get {return _storage._repeatedString15}
    set {_uniqueStorage()._repeatedString15 = newValue}
  }

  var repeatedString16: [String] {
    get {return _storage._repeatedString16}
    set {_uniqueStorage()._repeatedString16 = newValue}
  }

  var repeatedString17: [String] {
    get {return _storage._repeatedString17}
    set {_uniqueStorage()._repeatedString17 = newValue}
  }

  var repeatedString18: [String] {
    get {return _storage._repeatedString18}
    set {_uniqueStorage()._repeatedString18 = newValue}
  }

  var repeatedString19: [String] {
    get {return _storage._repeatedString19}
    set {_uniqueStorage()._repeatedString19 = newValue}
  }

  var repeatedString20: [String] {
    get {return _storage._repeatedString20}
    set {_uniqueStorage()._repeatedString20 = newValue}
  }

  var repeatedString21: [String] {
    get {return _storage._repeatedString21}
    set {_uniqueStorage()._repeatedString21 = newValue}
  }

  var repeatedString22: [String] {
    get {return _storage._repeatedString22}
    set {_uniqueStorage()._repeatedString22 = newValue}
  }

  var repeatedString23: [String] {
    get {return _storage._repeatedString23}
    set {_uniqueStorage()._repeatedString23 = newValue}
  }

  var repeatedString24: [String] {
    get {return _storage._repeatedString24}
    set {_uniqueStorage()._repeatedString24 = newValue}
  }

  var repeatedString25: [String] {
    get {return _storage._repeatedString25}
    set {_uniqueStorage()._repeatedString25 = newValue}
  }

  var repeatedString26: [String] {
    get {return _storage._repeatedString26}
    set {_uniqueStorage()._repeatedString26 = newValue}
  }

  var repeatedString27: [String] {
    get {return _storage._repeatedString27}
    set {_uniqueStorage()._repeatedString27 = newValue}
  }

  var repeatedString28: [String] {
    get {return _storage._repeatedString28}
    set {_uniqueStorage()._repeatedString28 = newValue}
  }

  var repeatedString29: [String] {
    get {return _storage._repeatedString29}
    set {_uniqueStorage()._repeatedString29 = newValue}
  }

  var repeatedString30: [String] {
    get {return _storage._repeatedString30}
    set {_uniqueStorage()._repeatedString30 = newValue}
  }

  var repeatedString31: [String] {
    get {return _storage._repeatedString31}
    set {_uniqueStorage()._repeatedString31 = newValue}
  }

  var repeatedString32: [String] {
    get {return _storage._repeatedString32}
    set {_uniqueStorage()._repeatedString32 = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Extension support defined in unittest.proto.

// MARK: - Extension Properties

// Swift Extensions on the extended Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension ProtobufUnittest_BoolParseTester {

  var ProtobufUnittest_BoolParseTester_optionalBoolExt: Boolean {
    get {return getExtensionValue(ext: ProtobufUnittest_BoolParseTester.Extensions.optional_bool_ext) ?? false}
    set {setExtensionValue(ext: ProtobufUnittest_BoolParseTester.Extensions.optional_bool_ext, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_BoolParseTester.Extensions.optional_bool_ext`
  /// has been explicitly set.
  var hasProtobufUnittest_BoolParseTester_optionalBoolExt: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_BoolParseTester.Extensions.optional_bool_ext)
  }
  /// Clears the value of extension `ProtobufUnittest_BoolParseTester.Extensions.optional_bool_ext`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_BoolParseTester_optionalBoolExt() {
    clearExtensionValue(ext: ProtobufUnittest_BoolParseTester.Extensions.optional_bool_ext)
  }

  var ProtobufUnittest_BoolParseTester_repeatedBoolExt: [Boolean] {
    get {return getExtensionValue(ext: ProtobufUnittest_BoolParseTester.Extensions.repeated_bool_ext) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_BoolParseTester.Extensions.repeated_bool_ext, value: newValue)}
  }

  var ProtobufUnittest_BoolParseTester_packedBoolExt: [Boolean] {
    get {return getExtensionValue(ext: ProtobufUnittest_BoolParseTester.Extensions.packed_bool_ext) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_BoolParseTester.Extensions.packed_bool_ext, value: newValue)}
  }
}

extension ProtobufUnittest_EnumParseTester {

  var ProtobufUnittest_EnumParseTester_optionalArbitraryExt: ProtobufUnittest_EnumParseTester.Arbitrary {
    get {return getExtensionValue(ext: ProtobufUnittest_EnumParseTester.Extensions.optional_arbitrary_ext) ?? .default}
    set {setExtensionValue(ext: ProtobufUnittest_EnumParseTester.Extensions.optional_arbitrary_ext, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_EnumParseTester.Extensions.optional_arbitrary_ext`
  /// has been explicitly set.
  var hasProtobufUnittest_EnumParseTester_optionalArbitraryExt: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_EnumParseTester.Extensions.optional_arbitrary_ext)
  }
  /// Clears the value of extension `ProtobufUnittest_EnumParseTester.Extensions.optional_arbitrary_ext`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_EnumParseTester_optionalArbitraryExt() {
    clearExtensionValue(ext: ProtobufUnittest_EnumParseTester.Extensions.optional_arbitrary_ext)
  }

  var ProtobufUnittest_EnumParseTester_repeatedArbitraryExt: [ProtobufUnittest_EnumParseTester.Arbitrary] {
    get {return getExtensionValue(ext: ProtobufUnittest_EnumParseTester.Extensions.repeated_arbitrary_ext) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_EnumParseTester.Extensions.repeated_arbitrary_ext, value: newValue)}
  }

  var ProtobufUnittest_EnumParseTester_packedArbitraryExt: [ProtobufUnittest_EnumParseTester.Arbitrary] {
    get {return getExtensionValue(ext: ProtobufUnittest_EnumParseTester.Extensions.packed_arbitrary_ext) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_EnumParseTester.Extensions.packed_arbitrary_ext, value: newValue)}
  }
}

extension ProtobufUnittest_Int32ParseTester {

  var ProtobufUnittest_Int32ParseTester_optionalInt32Ext: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Int32ParseTester.Extensions.optional_int32_ext) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Int32ParseTester.Extensions.optional_int32_ext, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Int32ParseTester.Extensions.optional_int32_ext`
  /// has been explicitly set.
  var hasProtobufUnittest_Int32ParseTester_optionalInt32Ext: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Int32ParseTester.Extensions.optional_int32_ext)
  }
  /// Clears the value of extension `ProtobufUnittest_Int32ParseTester.Extensions.optional_int32_ext`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_Int32ParseTester_optionalInt32Ext() {
    clearExtensionValue(ext: ProtobufUnittest_Int32ParseTester.Extensions.optional_int32_ext)
  }

  var ProtobufUnittest_Int32ParseTester_repeatedInt32Ext: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Int32ParseTester.Extensions.repeated_int32_ext) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Int32ParseTester.Extensions.repeated_int32_ext, value: newValue)}
  }

  var ProtobufUnittest_Int32ParseTester_packedInt32Ext: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Int32ParseTester.Extensions.packed_int32_ext) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Int32ParseTester.Extensions.packed_int32_ext, value: newValue)}
  }
}

extension ProtobufUnittest_Int64ParseTester {

  var ProtobufUnittest_Int64ParseTester_optionalInt64Ext: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Int64ParseTester.Extensions.optional_int64_ext) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Int64ParseTester.Extensions.optional_int64_ext, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Int64ParseTester.Extensions.optional_int64_ext`
  /// has been explicitly set.
  var hasProtobufUnittest_Int64ParseTester_optionalInt64Ext: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Int64ParseTester.Extensions.optional_int64_ext)
  }
  /// Clears the value of extension `ProtobufUnittest_Int64ParseTester.Extensions.optional_int64_ext`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_Int64ParseTester_optionalInt64Ext() {
    clearExtensionValue(ext: ProtobufUnittest_Int64ParseTester.Extensions.optional_int64_ext)
  }

  var ProtobufUnittest_Int64ParseTester_repeatedInt64Ext: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Int64ParseTester.Extensions.repeated_int64_ext) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Int64ParseTester.Extensions.repeated_int64_ext, value: newValue)}
  }

  var ProtobufUnittest_Int64ParseTester_packedInt64Ext: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Int64ParseTester.Extensions.packed_int64_ext) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Int64ParseTester.Extensions.packed_int64_ext, value: newValue)}
  }
}

extension ProtobufUnittest_RedactedFields {

  var ProtobufUnittest_redactedExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_redacted_extension) ?? String()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_redacted_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_redacted_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_redactedExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_redacted_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_redacted_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_redactedExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_redacted_extension)
  }
}

extension ProtobufUnittest_StringParseTester {

  var ProtobufUnittest_StringParseTester_optionalStringExt: String {
    get {return getExtensionValue(ext: ProtobufUnittest_StringParseTester.Extensions.optional_string_ext) ?? String()}
    set {setExtensionValue(ext: ProtobufUnittest_StringParseTester.Extensions.optional_string_ext, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_StringParseTester.Extensions.optional_string_ext`
  /// has been explicitly set.
  var hasProtobufUnittest_StringParseTester_optionalStringExt: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_StringParseTester.Extensions.optional_string_ext)
  }
  /// Clears the value of extension `ProtobufUnittest_StringParseTester.Extensions.optional_string_ext`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_StringParseTester_optionalStringExt() {
    clearExtensionValue(ext: ProtobufUnittest_StringParseTester.Extensions.optional_string_ext)
  }

  var ProtobufUnittest_StringParseTester_repeatedStringExt: [String] {
    get {return getExtensionValue(ext: ProtobufUnittest_StringParseTester.Extensions.repeated_string_ext) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_StringParseTester.Extensions.repeated_string_ext, value: newValue)}
  }
}

extension ProtobufUnittest_TestAllExtensions {

  /// Singular
  var ProtobufUnittest_optionalInt32Extension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_int32_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_int32_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_int32_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalInt32Extension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_int32_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_int32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalInt32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_int32_extension)
  }

  var ProtobufUnittest_optionalInt64Extension: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_int64_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_int64_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_int64_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalInt64Extension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_int64_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_int64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalInt64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_int64_extension)
  }

  var ProtobufUnittest_optionalUint32Extension: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_uint32_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_uint32_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_uint32_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalUint32Extension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_uint32_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_uint32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalUint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_uint32_extension)
  }

  var ProtobufUnittest_optionalUint64Extension: UInt64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_uint64_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_uint64_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_uint64_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalUint64Extension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_uint64_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_uint64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalUint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_uint64_extension)
  }

  var ProtobufUnittest_optionalSint32Extension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_sint32_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_sint32_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_sint32_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalSint32Extension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_sint32_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_sint32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalSint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_sint32_extension)
  }

  var ProtobufUnittest_optionalSint64Extension: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_sint64_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_sint64_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_sint64_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalSint64Extension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_sint64_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_sint64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalSint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_sint64_extension)
  }

  var ProtobufUnittest_optionalFixed32Extension: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_fixed32_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_fixed32_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_fixed32_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalFixed32Extension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_fixed32_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_fixed32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalFixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_fixed32_extension)
  }

  var ProtobufUnittest_optionalFixed64Extension: UInt64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_fixed64_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_fixed64_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_fixed64_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalFixed64Extension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_fixed64_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_fixed64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalFixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_fixed64_extension)
  }

  var ProtobufUnittest_optionalSfixed32Extension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_sfixed32_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_sfixed32_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_sfixed32_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalSfixed32Extension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_sfixed32_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_sfixed32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalSfixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_sfixed32_extension)
  }

  var ProtobufUnittest_optionalSfixed64Extension: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_sfixed64_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_sfixed64_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_sfixed64_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalSfixed64Extension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_sfixed64_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_sfixed64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalSfixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_sfixed64_extension)
  }

  var ProtobufUnittest_optionalFloatExtension: Float {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_float_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_float_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_float_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalFloatExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_float_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_float_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalFloatExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_float_extension)
  }

  var ProtobufUnittest_optionalDoubleExtension: Double {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_double_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_double_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_double_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalDoubleExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_double_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_double_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalDoubleExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_double_extension)
  }

  var ProtobufUnittest_optionalBoolExtension: Boolean {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_bool_extension) ?? false}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_bool_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_bool_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalBoolExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_bool_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_bool_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalBoolExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_bool_extension)
  }

  var ProtobufUnittest_optionalStringExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_string_extension) ?? String()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_string_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_string_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalStringExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_string_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_string_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalStringExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_string_extension)
  }

  var ProtobufUnittest_optionalBytesExtension: Data {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_bytes_extension) ?? Data()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_bytes_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_bytes_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalBytesExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_bytes_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_bytes_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalBytesExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_bytes_extension)
  }

  var ProtobufUnittest_optionalGroupExtension: ProtobufUnittest_OptionalGroup_extension {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_OptionalGroup_extension) ?? ProtobufUnittest_OptionalGroup_extension()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_OptionalGroup_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_OptionalGroup_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalGroupExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_OptionalGroup_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_OptionalGroup_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalGroupExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_OptionalGroup_extension)
  }

  var ProtobufUnittest_optionalNestedMessageExtension: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_nested_message_extension) ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_nested_message_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_nested_message_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalNestedMessageExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_nested_message_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_nested_message_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalNestedMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_nested_message_extension)
  }

  var ProtobufUnittest_optionalForeignMessageExtension: ProtobufUnittest_ForeignMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_foreign_message_extension) ?? ProtobufUnittest_ForeignMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_foreign_message_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_foreign_message_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalForeignMessageExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_foreign_message_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_foreign_message_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalForeignMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_foreign_message_extension)
  }

  var ProtobufUnittest_optionalImportMessageExtension: ProtobufUnittestImport_ImportMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_import_message_extension) ?? ProtobufUnittestImport_ImportMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_import_message_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_import_message_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalImportMessageExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_import_message_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_import_message_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalImportMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_import_message_extension)
  }

  var ProtobufUnittest_optionalNestedEnumExtension: ProtobufUnittest_TestAllTypes.NestedEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_nested_enum_extension) ?? .foo}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_nested_enum_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_nested_enum_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalNestedEnumExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_nested_enum_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_nested_enum_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalNestedEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_nested_enum_extension)
  }

  var ProtobufUnittest_optionalForeignEnumExtension: ProtobufUnittest_ForeignEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_foreign_enum_extension) ?? .foreignFoo}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_foreign_enum_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_foreign_enum_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalForeignEnumExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_foreign_enum_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_foreign_enum_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalForeignEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_foreign_enum_extension)
  }

  var ProtobufUnittest_optionalImportEnumExtension: ProtobufUnittestImport_ImportEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_import_enum_extension) ?? .importFoo}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_import_enum_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_import_enum_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalImportEnumExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_import_enum_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_import_enum_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalImportEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_import_enum_extension)
  }

  var ProtobufUnittest_optionalStringPieceExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_string_piece_extension) ?? String()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_string_piece_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_string_piece_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalStringPieceExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_string_piece_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_string_piece_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalStringPieceExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_string_piece_extension)
  }

  /// TODO: ctype=CORD is not supported for extension. Add
  /// ctype=CORD option back after it is supported.
  var ProtobufUnittest_optionalCordExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_cord_extension) ?? String()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_cord_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_cord_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalCordExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_cord_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_cord_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalCordExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_cord_extension)
  }

  var ProtobufUnittest_optionalPublicImportMessageExtension: ProtobufUnittestImport_PublicImportMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_public_import_message_extension) ?? ProtobufUnittestImport_PublicImportMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_public_import_message_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_public_import_message_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalPublicImportMessageExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_public_import_message_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_public_import_message_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalPublicImportMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_public_import_message_extension)
  }

  var ProtobufUnittest_optionalLazyMessageExtension: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_lazy_message_extension) ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_lazy_message_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_lazy_message_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalLazyMessageExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_lazy_message_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_lazy_message_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalLazyMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_lazy_message_extension)
  }

  var ProtobufUnittest_optionalUnverifiedLazyMessageExtension: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_unverified_lazy_message_extension) ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_unverified_lazy_message_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_unverified_lazy_message_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalUnverifiedLazyMessageExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_unverified_lazy_message_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_unverified_lazy_message_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalUnverifiedLazyMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_unverified_lazy_message_extension)
  }

  /// Repeated
  var ProtobufUnittest_repeatedInt32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_int32_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_int32_extension, value: newValue)}
  }

  var ProtobufUnittest_repeatedInt64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_int64_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_int64_extension, value: newValue)}
  }

  var ProtobufUnittest_repeatedUint32Extension: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_uint32_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_uint32_extension, value: newValue)}
  }

  var ProtobufUnittest_repeatedUint64Extension: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_uint64_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_uint64_extension, value: newValue)}
  }

  var ProtobufUnittest_repeatedSint32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sint32_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sint32_extension, value: newValue)}
  }

  var ProtobufUnittest_repeatedSint64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sint64_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sint64_extension, value: newValue)}
  }

  var ProtobufUnittest_repeatedFixed32Extension: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_fixed32_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_fixed32_extension, value: newValue)}
  }

  var ProtobufUnittest_repeatedFixed64Extension: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_fixed64_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_fixed64_extension, value: newValue)}
  }

  var ProtobufUnittest_repeatedSfixed32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sfixed32_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sfixed32_extension, value: newValue)}
  }

  var ProtobufUnittest_repeatedSfixed64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sfixed64_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sfixed64_extension, value: newValue)}
  }

  var ProtobufUnittest_repeatedFloatExtension: [Float] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_float_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_float_extension, value: newValue)}
  }

  var ProtobufUnittest_repeatedDoubleExtension: [Double] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_double_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_double_extension, value: newValue)}
  }

  var ProtobufUnittest_repeatedBoolExtension: [Boolean] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_bool_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_bool_extension, value: newValue)}
  }

  var ProtobufUnittest_repeatedStringExtension: [String] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_string_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_string_extension, value: newValue)}
  }

  var ProtobufUnittest_repeatedBytesExtension: [Data] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_bytes_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_bytes_extension, value: newValue)}
  }

  var ProtobufUnittest_repeatedGroupExtension: [ProtobufUnittest_RepeatedGroup_extension] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_RepeatedGroup_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_RepeatedGroup_extension, value: newValue)}
  }

  var ProtobufUnittest_repeatedNestedMessageExtension: [ProtobufUnittest_TestAllTypes.NestedMessage] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_nested_message_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_nested_message_extension, value: newValue)}
  }

  var ProtobufUnittest_repeatedForeignMessageExtension: [ProtobufUnittest_ForeignMessage] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_foreign_message_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_foreign_message_extension, value: newValue)}
  }

  var ProtobufUnittest_repeatedImportMessageExtension: [ProtobufUnittestImport_ImportMessage] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_import_message_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_import_message_extension, value: newValue)}
  }

  var ProtobufUnittest_repeatedNestedEnumExtension: [ProtobufUnittest_TestAllTypes.NestedEnum] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_nested_enum_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_nested_enum_extension, value: newValue)}
  }

  var ProtobufUnittest_repeatedForeignEnumExtension: [ProtobufUnittest_ForeignEnum] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_foreign_enum_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_foreign_enum_extension, value: newValue)}
  }

  var ProtobufUnittest_repeatedImportEnumExtension: [ProtobufUnittestImport_ImportEnum] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_import_enum_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_import_enum_extension, value: newValue)}
  }

  var ProtobufUnittest_repeatedStringPieceExtension: [String] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_string_piece_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_string_piece_extension, value: newValue)}
  }

  /// TODO: ctype=CORD is not supported for extension. Add
  /// ctype=CORD option back after it is supported.
  var ProtobufUnittest_repeatedCordExtension: [String] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_cord_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_cord_extension, value: newValue)}
  }

  var ProtobufUnittest_repeatedLazyMessageExtension: [ProtobufUnittest_TestAllTypes.NestedMessage] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_lazy_message_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_lazy_message_extension, value: newValue)}
  }

  /// Singular with defaults
  var ProtobufUnittest_defaultInt32Extension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_int32_extension) ?? 41}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_int32_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_int32_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultInt32Extension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_int32_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_int32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultInt32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_int32_extension)
  }

  var ProtobufUnittest_defaultInt64Extension: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_int64_extension) ?? 42}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_int64_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_int64_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultInt64Extension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_int64_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_int64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultInt64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_int64_extension)
  }

  var ProtobufUnittest_defaultUint32Extension: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_uint32_extension) ?? 43}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_uint32_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_uint32_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultUint32Extension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_uint32_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_uint32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultUint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_uint32_extension)
  }

  var ProtobufUnittest_defaultUint64Extension: UInt64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_uint64_extension) ?? 44}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_uint64_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_uint64_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultUint64Extension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_uint64_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_uint64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultUint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_uint64_extension)
  }

  var ProtobufUnittest_defaultSint32Extension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_sint32_extension) ?? -45}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_sint32_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_sint32_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultSint32Extension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_sint32_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_sint32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultSint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_sint32_extension)
  }

  var ProtobufUnittest_defaultSint64Extension: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_sint64_extension) ?? 46}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_sint64_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_sint64_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultSint64Extension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_sint64_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_sint64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultSint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_sint64_extension)
  }

  var ProtobufUnittest_defaultFixed32Extension: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_fixed32_extension) ?? 47}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_fixed32_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_fixed32_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultFixed32Extension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_fixed32_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_fixed32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultFixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_fixed32_extension)
  }

  var ProtobufUnittest_defaultFixed64Extension: UInt64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_fixed64_extension) ?? 48}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_fixed64_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_fixed64_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultFixed64Extension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_fixed64_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_fixed64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultFixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_fixed64_extension)
  }

  var ProtobufUnittest_defaultSfixed32Extension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_sfixed32_extension) ?? 49}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_sfixed32_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_sfixed32_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultSfixed32Extension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_sfixed32_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_sfixed32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultSfixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_sfixed32_extension)
  }

  var ProtobufUnittest_defaultSfixed64Extension: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_sfixed64_extension) ?? -50}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_sfixed64_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_sfixed64_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultSfixed64Extension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_sfixed64_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_sfixed64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultSfixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_sfixed64_extension)
  }

  var ProtobufUnittest_defaultFloatExtension: Float {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_float_extension) ?? 51.5}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_float_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_float_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultFloatExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_float_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_float_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultFloatExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_float_extension)
  }

  var ProtobufUnittest_defaultDoubleExtension: Double {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_double_extension) ?? 52000}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_double_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_double_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultDoubleExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_double_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_double_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultDoubleExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_double_extension)
  }

  var ProtobufUnittest_defaultBoolExtension: Boolean {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_bool_extension) ?? true}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_bool_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_bool_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultBoolExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_bool_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_bool_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultBoolExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_bool_extension)
  }

  var ProtobufUnittest_defaultStringExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_string_extension) ?? "hello"}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_string_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_string_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultStringExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_string_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_string_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultStringExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_string_extension)
  }

  var ProtobufUnittest_defaultBytesExtension: Data {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_bytes_extension) ?? Data([119, 111, 114, 108, 100])}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_bytes_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_bytes_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultBytesExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_bytes_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_bytes_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultBytesExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_bytes_extension)
  }

  var ProtobufUnittest_defaultNestedEnumExtension: ProtobufUnittest_TestAllTypes.NestedEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_nested_enum_extension) ?? .bar}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_nested_enum_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_nested_enum_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultNestedEnumExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_nested_enum_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_nested_enum_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultNestedEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_nested_enum_extension)
  }

  var ProtobufUnittest_defaultForeignEnumExtension: ProtobufUnittest_ForeignEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_foreign_enum_extension) ?? .foreignBar}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_foreign_enum_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_foreign_enum_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultForeignEnumExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_foreign_enum_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_foreign_enum_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultForeignEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_foreign_enum_extension)
  }

  var ProtobufUnittest_defaultImportEnumExtension: ProtobufUnittestImport_ImportEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_import_enum_extension) ?? .importBar}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_import_enum_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_import_enum_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultImportEnumExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_import_enum_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_import_enum_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultImportEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_import_enum_extension)
  }

  var ProtobufUnittest_defaultStringPieceExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_string_piece_extension) ?? "abc"}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_string_piece_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_string_piece_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultStringPieceExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_string_piece_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_string_piece_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultStringPieceExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_string_piece_extension)
  }

  /// TODO: ctype=CORD is not supported for extension. Add
  /// ctype=CORD option back after it is supported.
  var ProtobufUnittest_defaultCordExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_cord_extension) ?? "123"}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_cord_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_cord_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultCordExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_cord_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_cord_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultCordExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_cord_extension)
  }

  /// For oneof test
  var ProtobufUnittest_oneofUint32Extension: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_oneof_uint32_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_oneof_uint32_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_oneof_uint32_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_oneofUint32Extension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_oneof_uint32_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_oneof_uint32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_oneofUint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_oneof_uint32_extension)
  }

  var ProtobufUnittest_oneofNestedMessageExtension: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_oneof_nested_message_extension) ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_oneof_nested_message_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_oneof_nested_message_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_oneofNestedMessageExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_oneof_nested_message_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_oneof_nested_message_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_oneofNestedMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_oneof_nested_message_extension)
  }

  var ProtobufUnittest_oneofStringExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_oneof_string_extension) ?? String()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_oneof_string_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_oneof_string_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_oneofStringExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_oneof_string_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_oneof_string_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_oneofStringExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_oneof_string_extension)
  }

  var ProtobufUnittest_oneofBytesExtension: Data {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_oneof_bytes_extension) ?? Data()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_oneof_bytes_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_oneof_bytes_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_oneofBytesExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_oneof_bytes_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_oneof_bytes_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_oneofBytesExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_oneof_bytes_extension)
  }

  /// Check for bug where string extensions declared in tested scope did not
  /// compile.
  var ProtobufUnittest_TestNestedExtension_test: String {
    get {return getExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.test) ?? "test"}
    set {setExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.test, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_TestNestedExtension.Extensions.test`
  /// has been explicitly set.
  var hasProtobufUnittest_TestNestedExtension_test: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.test)
  }
  /// Clears the value of extension `ProtobufUnittest_TestNestedExtension.Extensions.test`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_TestNestedExtension_test() {
    clearExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.test)
  }

  /// Used to test if generated extension name is correct when there are
  /// underscores.
  var ProtobufUnittest_TestNestedExtension_nestedStringExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.nested_string_extension) ?? String()}
    set {setExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.nested_string_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_TestNestedExtension.Extensions.nested_string_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_TestNestedExtension_nestedStringExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.nested_string_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_TestNestedExtension.Extensions.nested_string_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_TestNestedExtension_nestedStringExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.nested_string_extension)
  }

  var ProtobufUnittest_TestRequired_single: ProtobufUnittest_TestRequired {
    get {return getExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.single) ?? ProtobufUnittest_TestRequired()}
    set {setExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.single, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_TestRequired.Extensions.single`
  /// has been explicitly set.
  var hasProtobufUnittest_TestRequired_single: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.single)
  }
  /// Clears the value of extension `ProtobufUnittest_TestRequired.Extensions.single`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_TestRequired_single() {
    clearExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.single)
  }

  var ProtobufUnittest_TestRequired_multi: [ProtobufUnittest_TestRequired] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.multi) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.multi, value: newValue)}
  }
}

extension ProtobufUnittest_TestExtensionInsideTable {

  var ProtobufUnittest_testExtensionInsideTableExtension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_test_extension_inside_table_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_test_extension_inside_table_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_test_extension_inside_table_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_testExtensionInsideTableExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_test_extension_inside_table_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_test_extension_inside_table_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_testExtensionInsideTableExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_test_extension_inside_table_extension)
  }
}

extension ProtobufUnittest_TestExtensionRangeSerialize {

  var ProtobufUnittest_TestExtensionRangeSerialize_barOne: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_one) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_one, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_one`
  /// has been explicitly set.
  var hasProtobufUnittest_TestExtensionRangeSerialize_barOne: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_one)
  }
  /// Clears the value of extension `ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_one`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_TestExtensionRangeSerialize_barOne() {
    clearExtensionValue(ext: ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_one)
  }

  var ProtobufUnittest_TestExtensionRangeSerialize_barTwo: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_two) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_two, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_two`
  /// has been explicitly set.
  var hasProtobufUnittest_TestExtensionRangeSerialize_barTwo: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_two)
  }
  /// Clears the value of extension `ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_two`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_TestExtensionRangeSerialize_barTwo() {
    clearExtensionValue(ext: ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_two)
  }

  var ProtobufUnittest_TestExtensionRangeSerialize_barThree: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_three) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_three, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_three`
  /// has been explicitly set.
  var hasProtobufUnittest_TestExtensionRangeSerialize_barThree: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_three)
  }
  /// Clears the value of extension `ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_three`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_TestExtensionRangeSerialize_barThree() {
    clearExtensionValue(ext: ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_three)
  }

  var ProtobufUnittest_TestExtensionRangeSerialize_barFour: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_four) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_four, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_four`
  /// has been explicitly set.
  var hasProtobufUnittest_TestExtensionRangeSerialize_barFour: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_four)
  }
  /// Clears the value of extension `ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_four`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_TestExtensionRangeSerialize_barFour() {
    clearExtensionValue(ext: ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_four)
  }

  var ProtobufUnittest_TestExtensionRangeSerialize_barFive: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_five) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_five, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_five`
  /// has been explicitly set.
  var hasProtobufUnittest_TestExtensionRangeSerialize_barFive: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_five)
  }
  /// Clears the value of extension `ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_five`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_TestExtensionRangeSerialize_barFive() {
    clearExtensionValue(ext: ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_five)
  }
}

extension ProtobufUnittest_TestFieldOrderings {

  var ProtobufUnittest_myExtensionString: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_my_extension_string) ?? String()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_my_extension_string, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_my_extension_string`
  /// has been explicitly set.
  var hasProtobufUnittest_myExtensionString: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_my_extension_string)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_my_extension_string`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_myExtensionString() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_my_extension_string)
  }

  var ProtobufUnittest_myExtensionInt: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_my_extension_int) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_my_extension_int, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_my_extension_int`
  /// has been explicitly set.
  var hasProtobufUnittest_myExtensionInt: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_my_extension_int)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_my_extension_int`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_myExtensionInt() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_my_extension_int)
  }

  var ProtobufUnittest_TestExtensionOrderings1_testExtOrderings1: ProtobufUnittest_TestExtensionOrderings1 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestExtensionOrderings1.Extensions.test_ext_orderings1) ?? ProtobufUnittest_TestExtensionOrderings1()}
    set {setExtensionValue(ext: ProtobufUnittest_TestExtensionOrderings1.Extensions.test_ext_orderings1, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_TestExtensionOrderings1.Extensions.test_ext_orderings1`
  /// has been explicitly set.
  var hasProtobufUnittest_TestExtensionOrderings1_testExtOrderings1: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_TestExtensionOrderings1.Extensions.test_ext_orderings1)
  }
  /// Clears the value of extension `ProtobufUnittest_TestExtensionOrderings1.Extensions.test_ext_orderings1`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_TestExtensionOrderings1_testExtOrderings1() {
    clearExtensionValue(ext: ProtobufUnittest_TestExtensionOrderings1.Extensions.test_ext_orderings1)
  }

  var ProtobufUnittest_TestExtensionOrderings2_testExtOrderings2: ProtobufUnittest_TestExtensionOrderings2 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestExtensionOrderings2.Extensions.test_ext_orderings2) ?? ProtobufUnittest_TestExtensionOrderings2()}
    set {setExtensionValue(ext: ProtobufUnittest_TestExtensionOrderings2.Extensions.test_ext_orderings2, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_TestExtensionOrderings2.Extensions.test_ext_orderings2`
  /// has been explicitly set.
  var hasProtobufUnittest_TestExtensionOrderings2_testExtOrderings2: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_TestExtensionOrderings2.Extensions.test_ext_orderings2)
  }
  /// Clears the value of extension `ProtobufUnittest_TestExtensionOrderings2.Extensions.test_ext_orderings2`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_TestExtensionOrderings2_testExtOrderings2() {
    clearExtensionValue(ext: ProtobufUnittest_TestExtensionOrderings2.Extensions.test_ext_orderings2)
  }

  var ProtobufUnittest_TestExtensionOrderings2_TestExtensionOrderings3_testExtOrderings3: ProtobufUnittest_TestExtensionOrderings2.TestExtensionOrderings3 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestExtensionOrderings2.TestExtensionOrderings3.Extensions.test_ext_orderings3) ?? ProtobufUnittest_TestExtensionOrderings2.TestExtensionOrderings3()}
    set {setExtensionValue(ext: ProtobufUnittest_TestExtensionOrderings2.TestExtensionOrderings3.Extensions.test_ext_orderings3, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_TestExtensionOrderings2.TestExtensionOrderings3.Extensions.test_ext_orderings3`
  /// has been explicitly set.
  var hasProtobufUnittest_TestExtensionOrderings2_TestExtensionOrderings3_testExtOrderings3: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_TestExtensionOrderings2.TestExtensionOrderings3.Extensions.test_ext_orderings3)
  }
  /// Clears the value of extension `ProtobufUnittest_TestExtensionOrderings2.TestExtensionOrderings3.Extensions.test_ext_orderings3`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_TestExtensionOrderings2_TestExtensionOrderings3_testExtOrderings3() {
    clearExtensionValue(ext: ProtobufUnittest_TestExtensionOrderings2.TestExtensionOrderings3.Extensions.test_ext_orderings3)
  }
}

extension ProtobufUnittest_TestGroupExtension {

  var ProtobufUnittest_TestNestedExtension_optionalGroupExtension: ProtobufUnittest_TestNestedExtension.OptionalGroup_extension {
    get {return getExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.OptionalGroup_extension) ?? ProtobufUnittest_TestNestedExtension.OptionalGroup_extension()}
    set {setExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.OptionalGroup_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_TestNestedExtension.Extensions.OptionalGroup_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_TestNestedExtension_optionalGroupExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.OptionalGroup_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_TestNestedExtension.Extensions.OptionalGroup_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_TestNestedExtension_optionalGroupExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.OptionalGroup_extension)
  }

  var ProtobufUnittest_TestNestedExtension_optionalForeignEnumExtension: ProtobufUnittest_ForeignEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.optional_foreign_enum_extension) ?? .foreignFoo}
    set {setExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.optional_foreign_enum_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_TestNestedExtension.Extensions.optional_foreign_enum_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_TestNestedExtension_optionalForeignEnumExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.optional_foreign_enum_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_TestNestedExtension.Extensions.optional_foreign_enum_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_TestNestedExtension_optionalForeignEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.optional_foreign_enum_extension)
  }
}

extension ProtobufUnittest_TestHugeFieldNumbers {

  var ProtobufUnittest_testAllTypes: ProtobufUnittest_TestAllTypes {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_test_all_types) ?? ProtobufUnittest_TestAllTypes()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_test_all_types, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_test_all_types`
  /// has been explicitly set.
  var hasProtobufUnittest_testAllTypes: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_test_all_types)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_test_all_types`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_testAllTypes() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_test_all_types)
  }
}

extension ProtobufUnittest_TestMixedFieldsAndExtensions {

  var ProtobufUnittest_TestMixedFieldsAndExtensions_c: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestMixedFieldsAndExtensions.Extensions.c) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_TestMixedFieldsAndExtensions.Extensions.c, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_TestMixedFieldsAndExtensions.Extensions.c`
  /// has been explicitly set.
  var hasProtobufUnittest_TestMixedFieldsAndExtensions_c: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_TestMixedFieldsAndExtensions.Extensions.c)
  }
  /// Clears the value of extension `ProtobufUnittest_TestMixedFieldsAndExtensions.Extensions.c`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_TestMixedFieldsAndExtensions_c() {
    clearExtensionValue(ext: ProtobufUnittest_TestMixedFieldsAndExtensions.Extensions.c)
  }

  var ProtobufUnittest_TestMixedFieldsAndExtensions_d: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestMixedFieldsAndExtensions.Extensions.d) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_TestMixedFieldsAndExtensions.Extensions.d, value: newValue)}
  }
}

extension ProtobufUnittest_TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup {

  var ProtobufUnittest_inner: ProtobufUnittest_TestNestedGroupExtensionInnerExtension {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_inner) ?? ProtobufUnittest_TestNestedGroupExtensionInnerExtension()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_inner, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_inner`
  /// has been explicitly set.
  var hasProtobufUnittest_inner: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_inner)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_inner`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_inner() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_inner)
  }
}

extension ProtobufUnittest_TestPackedExtensions {

  var ProtobufUnittest_packedInt32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_int32_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_int32_extension, value: newValue)}
  }

  var ProtobufUnittest_packedInt64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_int64_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_int64_extension, value: newValue)}
  }

  var ProtobufUnittest_packedUint32Extension: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_uint32_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_uint32_extension, value: newValue)}
  }

  var ProtobufUnittest_packedUint64Extension: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_uint64_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_uint64_extension, value: newValue)}
  }

  var ProtobufUnittest_packedSint32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_sint32_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_sint32_extension, value: newValue)}
  }

  var ProtobufUnittest_packedSint64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_sint64_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_sint64_extension, value: newValue)}
  }

  var ProtobufUnittest_packedFixed32Extension: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_fixed32_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_fixed32_extension, value: newValue)}
  }

  var ProtobufUnittest_packedFixed64Extension: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_fixed64_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_fixed64_extension, value: newValue)}
  }

  var ProtobufUnittest_packedSfixed32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_sfixed32_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_sfixed32_extension, value: newValue)}
  }

  var ProtobufUnittest_packedSfixed64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_sfixed64_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_sfixed64_extension, value: newValue)}
  }

  var ProtobufUnittest_packedFloatExtension: [Float] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_float_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_float_extension, value: newValue)}
  }

  var ProtobufUnittest_packedDoubleExtension: [Double] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_double_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_double_extension, value: newValue)}
  }

  var ProtobufUnittest_packedBoolExtension: [Boolean] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_bool_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_bool_extension, value: newValue)}
  }

  var ProtobufUnittest_packedEnumExtension: [ProtobufUnittest_ForeignEnum] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_enum_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_enum_extension, value: newValue)}
  }
}

extension ProtobufUnittest_TestParsingMerge {

  var ProtobufUnittest_TestParsingMerge_optionalExt: ProtobufUnittest_TestAllTypes {
    get {return getExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.optional_ext) ?? ProtobufUnittest_TestAllTypes()}
    set {setExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.optional_ext, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_TestParsingMerge.Extensions.optional_ext`
  /// has been explicitly set.
  var hasProtobufUnittest_TestParsingMerge_optionalExt: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.optional_ext)
  }
  /// Clears the value of extension `ProtobufUnittest_TestParsingMerge.Extensions.optional_ext`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_TestParsingMerge_optionalExt() {
    clearExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.optional_ext)
  }

  var ProtobufUnittest_TestParsingMerge_repeatedExt: [ProtobufUnittest_TestAllTypes] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.repeated_ext) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.repeated_ext, value: newValue)}
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {

  var ProtobufUnittest_unpackedInt32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_int32_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_int32_extension, value: newValue)}
  }

  var ProtobufUnittest_unpackedInt64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_int64_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_int64_extension, value: newValue)}
  }

  var ProtobufUnittest_unpackedUint32Extension: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_uint32_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_uint32_extension, value: newValue)}
  }

  var ProtobufUnittest_unpackedUint64Extension: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_uint64_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_uint64_extension, value: newValue)}
  }

  var ProtobufUnittest_unpackedSint32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_sint32_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_sint32_extension, value: newValue)}
  }

  var ProtobufUnittest_unpackedSint64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_sint64_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_sint64_extension, value: newValue)}
  }

  var ProtobufUnittest_unpackedFixed32Extension: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_fixed32_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_fixed32_extension, value: newValue)}
  }

  var ProtobufUnittest_unpackedFixed64Extension: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_fixed64_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_fixed64_extension, value: newValue)}
  }

  var ProtobufUnittest_unpackedSfixed32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_sfixed32_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_sfixed32_extension, value: newValue)}
  }

  var ProtobufUnittest_unpackedSfixed64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_sfixed64_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_sfixed64_extension, value: newValue)}
  }

  var ProtobufUnittest_unpackedFloatExtension: [Float] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_float_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_float_extension, value: newValue)}
  }

  var ProtobufUnittest_unpackedDoubleExtension: [Double] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_double_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_double_extension, value: newValue)}
  }

  var ProtobufUnittest_unpackedBoolExtension: [Boolean] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_bool_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_bool_extension, value: newValue)}
  }

  var ProtobufUnittest_unpackedEnumExtension: [ProtobufUnittest_ForeignEnum] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_enum_extension) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_enum_extension, value: newValue)}
  }

}

// MARK: - File's ExtensionMap: ProtobufUnittest_Unittest_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
immutable ProtobufUnittest_Unittest_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  ProtobufUnittest_Extensions_optional_int32_extension,
  ProtobufUnittest_Extensions_optional_int64_extension,
  ProtobufUnittest_Extensions_optional_uint32_extension,
  ProtobufUnittest_Extensions_optional_uint64_extension,
  ProtobufUnittest_Extensions_optional_sint32_extension,
  ProtobufUnittest_Extensions_optional_sint64_extension,
  ProtobufUnittest_Extensions_optional_fixed32_extension,
  ProtobufUnittest_Extensions_optional_fixed64_extension,
  ProtobufUnittest_Extensions_optional_sfixed32_extension,
  ProtobufUnittest_Extensions_optional_sfixed64_extension,
  ProtobufUnittest_Extensions_optional_float_extension,
  ProtobufUnittest_Extensions_optional_double_extension,
  ProtobufUnittest_Extensions_optional_bool_extension,
  ProtobufUnittest_Extensions_optional_string_extension,
  ProtobufUnittest_Extensions_optional_bytes_extension,
  ProtobufUnittest_Extensions_OptionalGroup_extension,
  ProtobufUnittest_Extensions_optional_nested_message_extension,
  ProtobufUnittest_Extensions_optional_foreign_message_extension,
  ProtobufUnittest_Extensions_optional_import_message_extension,
  ProtobufUnittest_Extensions_optional_nested_enum_extension,
  ProtobufUnittest_Extensions_optional_foreign_enum_extension,
  ProtobufUnittest_Extensions_optional_import_enum_extension,
  ProtobufUnittest_Extensions_optional_string_piece_extension,
  ProtobufUnittest_Extensions_optional_cord_extension,
  ProtobufUnittest_Extensions_optional_public_import_message_extension,
  ProtobufUnittest_Extensions_optional_lazy_message_extension,
  ProtobufUnittest_Extensions_optional_unverified_lazy_message_extension,
  ProtobufUnittest_Extensions_repeated_int32_extension,
  ProtobufUnittest_Extensions_repeated_int64_extension,
  ProtobufUnittest_Extensions_repeated_uint32_extension,
  ProtobufUnittest_Extensions_repeated_uint64_extension,
  ProtobufUnittest_Extensions_repeated_sint32_extension,
  ProtobufUnittest_Extensions_repeated_sint64_extension,
  ProtobufUnittest_Extensions_repeated_fixed32_extension,
  ProtobufUnittest_Extensions_repeated_fixed64_extension,
  ProtobufUnittest_Extensions_repeated_sfixed32_extension,
  ProtobufUnittest_Extensions_repeated_sfixed64_extension,
  ProtobufUnittest_Extensions_repeated_float_extension,
  ProtobufUnittest_Extensions_repeated_double_extension,
  ProtobufUnittest_Extensions_repeated_bool_extension,
  ProtobufUnittest_Extensions_repeated_string_extension,
  ProtobufUnittest_Extensions_repeated_bytes_extension,
  ProtobufUnittest_Extensions_RepeatedGroup_extension,
  ProtobufUnittest_Extensions_repeated_nested_message_extension,
  ProtobufUnittest_Extensions_repeated_foreign_message_extension,
  ProtobufUnittest_Extensions_repeated_import_message_extension,
  ProtobufUnittest_Extensions_repeated_nested_enum_extension,
  ProtobufUnittest_Extensions_repeated_foreign_enum_extension,
  ProtobufUnittest_Extensions_repeated_import_enum_extension,
  ProtobufUnittest_Extensions_repeated_string_piece_extension,
  ProtobufUnittest_Extensions_repeated_cord_extension,
  ProtobufUnittest_Extensions_repeated_lazy_message_extension,
  ProtobufUnittest_Extensions_default_int32_extension,
  ProtobufUnittest_Extensions_default_int64_extension,
  ProtobufUnittest_Extensions_default_uint32_extension,
  ProtobufUnittest_Extensions_default_uint64_extension,
  ProtobufUnittest_Extensions_default_sint32_extension,
  ProtobufUnittest_Extensions_default_sint64_extension,
  ProtobufUnittest_Extensions_default_fixed32_extension,
  ProtobufUnittest_Extensions_default_fixed64_extension,
  ProtobufUnittest_Extensions_default_sfixed32_extension,
  ProtobufUnittest_Extensions_default_sfixed64_extension,
  ProtobufUnittest_Extensions_default_float_extension,
  ProtobufUnittest_Extensions_default_double_extension,
  ProtobufUnittest_Extensions_default_bool_extension,
  ProtobufUnittest_Extensions_default_string_extension,
  ProtobufUnittest_Extensions_default_bytes_extension,
  ProtobufUnittest_Extensions_default_nested_enum_extension,
  ProtobufUnittest_Extensions_default_foreign_enum_extension,
  ProtobufUnittest_Extensions_default_import_enum_extension,
  ProtobufUnittest_Extensions_default_string_piece_extension,
  ProtobufUnittest_Extensions_default_cord_extension,
  ProtobufUnittest_Extensions_oneof_uint32_extension,
  ProtobufUnittest_Extensions_oneof_nested_message_extension,
  ProtobufUnittest_Extensions_oneof_string_extension,
  ProtobufUnittest_Extensions_oneof_bytes_extension,
  ProtobufUnittest_Extensions_my_extension_string,
  ProtobufUnittest_Extensions_my_extension_int,
  ProtobufUnittest_Extensions_packed_int32_extension,
  ProtobufUnittest_Extensions_packed_int64_extension,
  ProtobufUnittest_Extensions_packed_uint32_extension,
  ProtobufUnittest_Extensions_packed_uint64_extension,
  ProtobufUnittest_Extensions_packed_sint32_extension,
  ProtobufUnittest_Extensions_packed_sint64_extension,
  ProtobufUnittest_Extensions_packed_fixed32_extension,
  ProtobufUnittest_Extensions_packed_fixed64_extension,
  ProtobufUnittest_Extensions_packed_sfixed32_extension,
  ProtobufUnittest_Extensions_packed_sfixed64_extension,
  ProtobufUnittest_Extensions_packed_float_extension,
  ProtobufUnittest_Extensions_packed_double_extension,
  ProtobufUnittest_Extensions_packed_bool_extension,
  ProtobufUnittest_Extensions_packed_enum_extension,
  ProtobufUnittest_Extensions_unpacked_int32_extension,
  ProtobufUnittest_Extensions_unpacked_int64_extension,
  ProtobufUnittest_Extensions_unpacked_uint32_extension,
  ProtobufUnittest_Extensions_unpacked_uint64_extension,
  ProtobufUnittest_Extensions_unpacked_sint32_extension,
  ProtobufUnittest_Extensions_unpacked_sint64_extension,
  ProtobufUnittest_Extensions_unpacked_fixed32_extension,
  ProtobufUnittest_Extensions_unpacked_fixed64_extension,
  ProtobufUnittest_Extensions_unpacked_sfixed32_extension,
  ProtobufUnittest_Extensions_unpacked_sfixed64_extension,
  ProtobufUnittest_Extensions_unpacked_float_extension,
  ProtobufUnittest_Extensions_unpacked_double_extension,
  ProtobufUnittest_Extensions_unpacked_bool_extension,
  ProtobufUnittest_Extensions_unpacked_enum_extension,
  ProtobufUnittest_Extensions_test_all_types,
  ProtobufUnittest_Extensions_test_extension_inside_table_extension,
  ProtobufUnittest_Extensions_inner,
  ProtobufUnittest_Extensions_redacted_extension,
  ProtobufUnittest_TestMixedFieldsAndExtensions.Extensions.c,
  ProtobufUnittest_TestMixedFieldsAndExtensions.Extensions.d,
  ProtobufUnittest_TestNestedExtension.Extensions.test,
  ProtobufUnittest_TestNestedExtension.Extensions.nested_string_extension,
  ProtobufUnittest_TestNestedExtension.Extensions.OptionalGroup_extension,
  ProtobufUnittest_TestNestedExtension.Extensions.optional_foreign_enum_extension,
  ProtobufUnittest_TestRequired.Extensions.single,
  ProtobufUnittest_TestRequired.Extensions.multi,
  ProtobufUnittest_TestExtensionOrderings1.Extensions.test_ext_orderings1,
  ProtobufUnittest_TestExtensionOrderings2.Extensions.test_ext_orderings2,
  ProtobufUnittest_TestExtensionOrderings2.TestExtensionOrderings3.Extensions.test_ext_orderings3,
  ProtobufUnittest_TestParsingMerge.Extensions.optional_ext,
  ProtobufUnittest_TestParsingMerge.Extensions.repeated_ext,
  ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_one,
  ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_two,
  ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_three,
  ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_four,
  ProtobufUnittest_TestExtensionRangeSerialize.Extensions.bar_five,
  ProtobufUnittest_EnumParseTester.Extensions.optional_arbitrary_ext,
  ProtobufUnittest_EnumParseTester.Extensions.repeated_arbitrary_ext,
  ProtobufUnittest_EnumParseTester.Extensions.packed_arbitrary_ext,
  ProtobufUnittest_BoolParseTester.Extensions.optional_bool_ext,
  ProtobufUnittest_BoolParseTester.Extensions.repeated_bool_ext,
  ProtobufUnittest_BoolParseTester.Extensions.packed_bool_ext,
  ProtobufUnittest_Int32ParseTester.Extensions.optional_int32_ext,
  ProtobufUnittest_Int32ParseTester.Extensions.repeated_int32_ext,
  ProtobufUnittest_Int32ParseTester.Extensions.packed_int32_ext,
  ProtobufUnittest_Int64ParseTester.Extensions.optional_int64_ext,
  ProtobufUnittest_Int64ParseTester.Extensions.repeated_int64_ext,
  ProtobufUnittest_Int64ParseTester.Extensions.packed_int64_ext,
  ProtobufUnittest_StringParseTester.Extensions.optional_string_ext,
  ProtobufUnittest_StringParseTester.Extensions.repeated_string_ext
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

/// Singular
immutable ProtobufUnittest_Extensions_optional_int32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 1,
  fieldName: "protobuf_unittest.optional_int32_extension"
)

immutable ProtobufUnittest_Extensions_optional_int64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt64>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 2,
  fieldName: "protobuf_unittest.optional_int64_extension"
)

immutable ProtobufUnittest_Extensions_optional_uint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufUInt32>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 3,
  fieldName: "protobuf_unittest.optional_uint32_extension"
)

immutable ProtobufUnittest_Extensions_optional_uint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufUInt64>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 4,
  fieldName: "protobuf_unittest.optional_uint64_extension"
)

immutable ProtobufUnittest_Extensions_optional_sint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSInt32>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 5,
  fieldName: "protobuf_unittest.optional_sint32_extension"
)

immutable ProtobufUnittest_Extensions_optional_sint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSInt64>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 6,
  fieldName: "protobuf_unittest.optional_sint64_extension"
)

immutable ProtobufUnittest_Extensions_optional_fixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFixed32>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 7,
  fieldName: "protobuf_unittest.optional_fixed32_extension"
)

immutable ProtobufUnittest_Extensions_optional_fixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFixed64>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 8,
  fieldName: "protobuf_unittest.optional_fixed64_extension"
)

immutable ProtobufUnittest_Extensions_optional_sfixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSFixed32>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 9,
  fieldName: "protobuf_unittest.optional_sfixed32_extension"
)

immutable ProtobufUnittest_Extensions_optional_sfixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSFixed64>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 10,
  fieldName: "protobuf_unittest.optional_sfixed64_extension"
)

immutable ProtobufUnittest_Extensions_optional_float_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFloat>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 11,
  fieldName: "protobuf_unittest.optional_float_extension"
)

immutable ProtobufUnittest_Extensions_optional_double_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufDouble>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 12,
  fieldName: "protobuf_unittest.optional_double_extension"
)

immutable ProtobufUnittest_Extensions_optional_bool_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 13,
  fieldName: "protobuf_unittest.optional_bool_extension"
)

immutable ProtobufUnittest_Extensions_optional_string_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 14,
  fieldName: "protobuf_unittest.optional_string_extension"
)

immutable ProtobufUnittest_Extensions_optional_bytes_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBytes>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 15,
  fieldName: "protobuf_unittest.optional_bytes_extension"
)

immutable ProtobufUnittest_Extensions_OptionalGroup_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalGroupExtensionField<ProtobufUnittest_OptionalGroup_extension>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 16,
  fieldName: "protobuf_unittest.optionalgroup_extension"
)

immutable ProtobufUnittest_Extensions_optional_nested_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<ProtobufUnittest_TestAllTypes.NestedMessage>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 18,
  fieldName: "protobuf_unittest.optional_nested_message_extension"
)

immutable ProtobufUnittest_Extensions_optional_foreign_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<ProtobufUnittest_ForeignMessage>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 19,
  fieldName: "protobuf_unittest.optional_foreign_message_extension"
)

immutable ProtobufUnittest_Extensions_optional_import_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<ProtobufUnittestImport_ImportMessage>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 20,
  fieldName: "protobuf_unittest.optional_import_message_extension"
)

immutable ProtobufUnittest_Extensions_optional_nested_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<ProtobufUnittest_TestAllTypes.NestedEnum>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 21,
  fieldName: "protobuf_unittest.optional_nested_enum_extension"
)

immutable ProtobufUnittest_Extensions_optional_foreign_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<ProtobufUnittest_ForeignEnum>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 22,
  fieldName: "protobuf_unittest.optional_foreign_enum_extension"
)

immutable ProtobufUnittest_Extensions_optional_import_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<ProtobufUnittestImport_ImportEnum>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 23,
  fieldName: "protobuf_unittest.optional_import_enum_extension"
)

immutable ProtobufUnittest_Extensions_optional_string_piece_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 24,
  fieldName: "protobuf_unittest.optional_string_piece_extension"
)

/// TODO: ctype=CORD is not supported for extension. Add
/// ctype=CORD option back after it is supported.
immutable ProtobufUnittest_Extensions_optional_cord_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 25,
  fieldName: "protobuf_unittest.optional_cord_extension"
)

immutable ProtobufUnittest_Extensions_optional_public_import_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<ProtobufUnittestImport_PublicImportMessage>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 26,
  fieldName: "protobuf_unittest.optional_public_import_message_extension"
)

immutable ProtobufUnittest_Extensions_optional_lazy_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<ProtobufUnittest_TestAllTypes.NestedMessage>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 27,
  fieldName: "protobuf_unittest.optional_lazy_message_extension"
)

immutable ProtobufUnittest_Extensions_optional_unverified_lazy_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<ProtobufUnittest_TestAllTypes.NestedMessage>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 28,
  fieldName: "protobuf_unittest.optional_unverified_lazy_message_extension"
)

/// Repeated
immutable ProtobufUnittest_Extensions_repeated_int32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 31,
  fieldName: "protobuf_unittest.repeated_int32_extension"
)

immutable ProtobufUnittest_Extensions_repeated_int64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufInt64>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 32,
  fieldName: "protobuf_unittest.repeated_int64_extension"
)

immutable ProtobufUnittest_Extensions_repeated_uint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufUInt32>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 33,
  fieldName: "protobuf_unittest.repeated_uint32_extension"
)

immutable ProtobufUnittest_Extensions_repeated_uint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufUInt64>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 34,
  fieldName: "protobuf_unittest.repeated_uint64_extension"
)

immutable ProtobufUnittest_Extensions_repeated_sint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufSInt32>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 35,
  fieldName: "protobuf_unittest.repeated_sint32_extension"
)

immutable ProtobufUnittest_Extensions_repeated_sint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufSInt64>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 36,
  fieldName: "protobuf_unittest.repeated_sint64_extension"
)

immutable ProtobufUnittest_Extensions_repeated_fixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufFixed32>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 37,
  fieldName: "protobuf_unittest.repeated_fixed32_extension"
)

immutable ProtobufUnittest_Extensions_repeated_fixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufFixed64>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 38,
  fieldName: "protobuf_unittest.repeated_fixed64_extension"
)

immutable ProtobufUnittest_Extensions_repeated_sfixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufSFixed32>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 39,
  fieldName: "protobuf_unittest.repeated_sfixed32_extension"
)

immutable ProtobufUnittest_Extensions_repeated_sfixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufSFixed64>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 40,
  fieldName: "protobuf_unittest.repeated_sfixed64_extension"
)

immutable ProtobufUnittest_Extensions_repeated_float_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufFloat>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 41,
  fieldName: "protobuf_unittest.repeated_float_extension"
)

immutable ProtobufUnittest_Extensions_repeated_double_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufDouble>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 42,
  fieldName: "protobuf_unittest.repeated_double_extension"
)

immutable ProtobufUnittest_Extensions_repeated_bool_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufBool>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 43,
  fieldName: "protobuf_unittest.repeated_bool_extension"
)

immutable ProtobufUnittest_Extensions_repeated_string_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 44,
  fieldName: "protobuf_unittest.repeated_string_extension"
)

immutable ProtobufUnittest_Extensions_repeated_bytes_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufBytes>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 45,
  fieldName: "protobuf_unittest.repeated_bytes_extension"
)

immutable ProtobufUnittest_Extensions_RepeatedGroup_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedGroupExtensionField<ProtobufUnittest_RepeatedGroup_extension>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 46,
  fieldName: "protobuf_unittest.repeatedgroup_extension"
)

immutable ProtobufUnittest_Extensions_repeated_nested_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<ProtobufUnittest_TestAllTypes.NestedMessage>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 48,
  fieldName: "protobuf_unittest.repeated_nested_message_extension"
)

immutable ProtobufUnittest_Extensions_repeated_foreign_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<ProtobufUnittest_ForeignMessage>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 49,
  fieldName: "protobuf_unittest.repeated_foreign_message_extension"
)

immutable ProtobufUnittest_Extensions_repeated_import_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<ProtobufUnittestImport_ImportMessage>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 50,
  fieldName: "protobuf_unittest.repeated_import_message_extension"
)

immutable ProtobufUnittest_Extensions_repeated_nested_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedEnumExtensionField<ProtobufUnittest_TestAllTypes.NestedEnum>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 51,
  fieldName: "protobuf_unittest.repeated_nested_enum_extension"
)

immutable ProtobufUnittest_Extensions_repeated_foreign_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedEnumExtensionField<ProtobufUnittest_ForeignEnum>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 52,
  fieldName: "protobuf_unittest.repeated_foreign_enum_extension"
)

immutable ProtobufUnittest_Extensions_repeated_import_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedEnumExtensionField<ProtobufUnittestImport_ImportEnum>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 53,
  fieldName: "protobuf_unittest.repeated_import_enum_extension"
)

immutable ProtobufUnittest_Extensions_repeated_string_piece_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 54,
  fieldName: "protobuf_unittest.repeated_string_piece_extension"
)

/// TODO: ctype=CORD is not supported for extension. Add
/// ctype=CORD option back after it is supported.
immutable ProtobufUnittest_Extensions_repeated_cord_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 55,
  fieldName: "protobuf_unittest.repeated_cord_extension"
)

immutable ProtobufUnittest_Extensions_repeated_lazy_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<ProtobufUnittest_TestAllTypes.NestedMessage>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 57,
  fieldName: "protobuf_unittest.repeated_lazy_message_extension"
)

/// Singular with defaults
immutable ProtobufUnittest_Extensions_default_int32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 61,
  fieldName: "protobuf_unittest.default_int32_extension"
)

immutable ProtobufUnittest_Extensions_default_int64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt64>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 62,
  fieldName: "protobuf_unittest.default_int64_extension"
)

immutable ProtobufUnittest_Extensions_default_uint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufUInt32>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 63,
  fieldName: "protobuf_unittest.default_uint32_extension"
)

immutable ProtobufUnittest_Extensions_default_uint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufUInt64>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 64,
  fieldName: "protobuf_unittest.default_uint64_extension"
)

immutable ProtobufUnittest_Extensions_default_sint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSInt32>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 65,
  fieldName: "protobuf_unittest.default_sint32_extension"
)

immutable ProtobufUnittest_Extensions_default_sint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSInt64>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 66,
  fieldName: "protobuf_unittest.default_sint64_extension"
)

immutable ProtobufUnittest_Extensions_default_fixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFixed32>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 67,
  fieldName: "protobuf_unittest.default_fixed32_extension"
)

immutable ProtobufUnittest_Extensions_default_fixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFixed64>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 68,
  fieldName: "protobuf_unittest.default_fixed64_extension"
)

immutable ProtobufUnittest_Extensions_default_sfixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSFixed32>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 69,
  fieldName: "protobuf_unittest.default_sfixed32_extension"
)

immutable ProtobufUnittest_Extensions_default_sfixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSFixed64>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 70,
  fieldName: "protobuf_unittest.default_sfixed64_extension"
)

immutable ProtobufUnittest_Extensions_default_float_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFloat>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 71,
  fieldName: "protobuf_unittest.default_float_extension"
)

immutable ProtobufUnittest_Extensions_default_double_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufDouble>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 72,
  fieldName: "protobuf_unittest.default_double_extension"
)

immutable ProtobufUnittest_Extensions_default_bool_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 73,
  fieldName: "protobuf_unittest.default_bool_extension"
)

immutable ProtobufUnittest_Extensions_default_string_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 74,
  fieldName: "protobuf_unittest.default_string_extension"
)

immutable ProtobufUnittest_Extensions_default_bytes_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBytes>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 75,
  fieldName: "protobuf_unittest.default_bytes_extension"
)

immutable ProtobufUnittest_Extensions_default_nested_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<ProtobufUnittest_TestAllTypes.NestedEnum>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 81,
  fieldName: "protobuf_unittest.default_nested_enum_extension"
)

immutable ProtobufUnittest_Extensions_default_foreign_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<ProtobufUnittest_ForeignEnum>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 82,
  fieldName: "protobuf_unittest.default_foreign_enum_extension"
)

immutable ProtobufUnittest_Extensions_default_import_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<ProtobufUnittestImport_ImportEnum>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 83,
  fieldName: "protobuf_unittest.default_import_enum_extension"
)

immutable ProtobufUnittest_Extensions_default_string_piece_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 84,
  fieldName: "protobuf_unittest.default_string_piece_extension"
)

/// TODO: ctype=CORD is not supported for extension. Add
/// ctype=CORD option back after it is supported.
immutable ProtobufUnittest_Extensions_default_cord_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 85,
  fieldName: "protobuf_unittest.default_cord_extension"
)

/// For oneof test
immutable ProtobufUnittest_Extensions_oneof_uint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufUInt32>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 111,
  fieldName: "protobuf_unittest.oneof_uint32_extension"
)

immutable ProtobufUnittest_Extensions_oneof_nested_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<ProtobufUnittest_TestAllTypes.NestedMessage>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 112,
  fieldName: "protobuf_unittest.oneof_nested_message_extension"
)

immutable ProtobufUnittest_Extensions_oneof_string_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 113,
  fieldName: "protobuf_unittest.oneof_string_extension"
)

immutable ProtobufUnittest_Extensions_oneof_bytes_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBytes>, ProtobufUnittest_TestAllExtensions>(
  _protobuf_fieldNumber: 114,
  fieldName: "protobuf_unittest.oneof_bytes_extension"
)

immutable ProtobufUnittest_Extensions_my_extension_string = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestFieldOrderings>(
  _protobuf_fieldNumber: 50,
  fieldName: "protobuf_unittest.my_extension_string"
)

immutable ProtobufUnittest_Extensions_my_extension_int = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestFieldOrderings>(
  _protobuf_fieldNumber: 5,
  fieldName: "protobuf_unittest.my_extension_int"
)

immutable ProtobufUnittest_Extensions_packed_int32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestPackedExtensions>(
  _protobuf_fieldNumber: 90,
  fieldName: "protobuf_unittest.packed_int32_extension"
)

immutable ProtobufUnittest_Extensions_packed_int64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufInt64>, ProtobufUnittest_TestPackedExtensions>(
  _protobuf_fieldNumber: 91,
  fieldName: "protobuf_unittest.packed_int64_extension"
)

immutable ProtobufUnittest_Extensions_packed_uint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufUInt32>, ProtobufUnittest_TestPackedExtensions>(
  _protobuf_fieldNumber: 92,
  fieldName: "protobuf_unittest.packed_uint32_extension"
)

immutable ProtobufUnittest_Extensions_packed_uint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufUInt64>, ProtobufUnittest_TestPackedExtensions>(
  _protobuf_fieldNumber: 93,
  fieldName: "protobuf_unittest.packed_uint64_extension"
)

immutable ProtobufUnittest_Extensions_packed_sint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufSInt32>, ProtobufUnittest_TestPackedExtensions>(
  _protobuf_fieldNumber: 94,
  fieldName: "protobuf_unittest.packed_sint32_extension"
)

immutable ProtobufUnittest_Extensions_packed_sint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufSInt64>, ProtobufUnittest_TestPackedExtensions>(
  _protobuf_fieldNumber: 95,
  fieldName: "protobuf_unittest.packed_sint64_extension"
)

immutable ProtobufUnittest_Extensions_packed_fixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufFixed32>, ProtobufUnittest_TestPackedExtensions>(
  _protobuf_fieldNumber: 96,
  fieldName: "protobuf_unittest.packed_fixed32_extension"
)

immutable ProtobufUnittest_Extensions_packed_fixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufFixed64>, ProtobufUnittest_TestPackedExtensions>(
  _protobuf_fieldNumber: 97,
  fieldName: "protobuf_unittest.packed_fixed64_extension"
)

immutable ProtobufUnittest_Extensions_packed_sfixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufSFixed32>, ProtobufUnittest_TestPackedExtensions>(
  _protobuf_fieldNumber: 98,
  fieldName: "protobuf_unittest.packed_sfixed32_extension"
)

immutable ProtobufUnittest_Extensions_packed_sfixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufSFixed64>, ProtobufUnittest_TestPackedExtensions>(
  _protobuf_fieldNumber: 99,
  fieldName: "protobuf_unittest.packed_sfixed64_extension"
)

immutable ProtobufUnittest_Extensions_packed_float_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufFloat>, ProtobufUnittest_TestPackedExtensions>(
  _protobuf_fieldNumber: 100,
  fieldName: "protobuf_unittest.packed_float_extension"
)

immutable ProtobufUnittest_Extensions_packed_double_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufDouble>, ProtobufUnittest_TestPackedExtensions>(
  _protobuf_fieldNumber: 101,
  fieldName: "protobuf_unittest.packed_double_extension"
)

immutable ProtobufUnittest_Extensions_packed_bool_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufBool>, ProtobufUnittest_TestPackedExtensions>(
  _protobuf_fieldNumber: 102,
  fieldName: "protobuf_unittest.packed_bool_extension"
)

immutable ProtobufUnittest_Extensions_packed_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedEnumExtensionField<ProtobufUnittest_ForeignEnum>, ProtobufUnittest_TestPackedExtensions>(
  _protobuf_fieldNumber: 103,
  fieldName: "protobuf_unittest.packed_enum_extension"
)

immutable ProtobufUnittest_Extensions_unpacked_int32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestUnpackedExtensions>(
  _protobuf_fieldNumber: 90,
  fieldName: "protobuf_unittest.unpacked_int32_extension"
)

immutable ProtobufUnittest_Extensions_unpacked_int64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufInt64>, ProtobufUnittest_TestUnpackedExtensions>(
  _protobuf_fieldNumber: 91,
  fieldName: "protobuf_unittest.unpacked_int64_extension"
)

immutable ProtobufUnittest_Extensions_unpacked_uint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufUInt32>, ProtobufUnittest_TestUnpackedExtensions>(
  _protobuf_fieldNumber: 92,
  fieldName: "protobuf_unittest.unpacked_uint32_extension"
)

immutable ProtobufUnittest_Extensions_unpacked_uint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufUInt64>, ProtobufUnittest_TestUnpackedExtensions>(
  _protobuf_fieldNumber: 93,
  fieldName: "protobuf_unittest.unpacked_uint64_extension"
)

immutable ProtobufUnittest_Extensions_unpacked_sint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufSInt32>, ProtobufUnittest_TestUnpackedExtensions>(
  _protobuf_fieldNumber: 94,
  fieldName: "protobuf_unittest.unpacked_sint32_extension"
)

immutable ProtobufUnittest_Extensions_unpacked_sint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufSInt64>, ProtobufUnittest_TestUnpackedExtensions>(
  _protobuf_fieldNumber: 95,
  fieldName: "protobuf_unittest.unpacked_sint64_extension"
)

immutable ProtobufUnittest_Extensions_unpacked_fixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufFixed32>, ProtobufUnittest_TestUnpackedExtensions>(
  _protobuf_fieldNumber: 96,
  fieldName: "protobuf_unittest.unpacked_fixed32_extension"
)

immutable ProtobufUnittest_Extensions_unpacked_fixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufFixed64>, ProtobufUnittest_TestUnpackedExtensions>(
  _protobuf_fieldNumber: 97,
  fieldName: "protobuf_unittest.unpacked_fixed64_extension"
)

immutable ProtobufUnittest_Extensions_unpacked_sfixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufSFixed32>, ProtobufUnittest_TestUnpackedExtensions>(
  _protobuf_fieldNumber: 98,
  fieldName: "protobuf_unittest.unpacked_sfixed32_extension"
)

immutable ProtobufUnittest_Extensions_unpacked_sfixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufSFixed64>, ProtobufUnittest_TestUnpackedExtensions>(
  _protobuf_fieldNumber: 99,
  fieldName: "protobuf_unittest.unpacked_sfixed64_extension"
)

immutable ProtobufUnittest_Extensions_unpacked_float_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufFloat>, ProtobufUnittest_TestUnpackedExtensions>(
  _protobuf_fieldNumber: 100,
  fieldName: "protobuf_unittest.unpacked_float_extension"
)

immutable ProtobufUnittest_Extensions_unpacked_double_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufDouble>, ProtobufUnittest_TestUnpackedExtensions>(
  _protobuf_fieldNumber: 101,
  fieldName: "protobuf_unittest.unpacked_double_extension"
)

immutable ProtobufUnittest_Extensions_unpacked_bool_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufBool>, ProtobufUnittest_TestUnpackedExtensions>(
  _protobuf_fieldNumber: 102,
  fieldName: "protobuf_unittest.unpacked_bool_extension"
)

immutable ProtobufUnittest_Extensions_unpacked_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedEnumExtensionField<ProtobufUnittest_ForeignEnum>, ProtobufUnittest_TestUnpackedExtensions>(
  _protobuf_fieldNumber: 103,
  fieldName: "protobuf_unittest.unpacked_enum_extension"
)

immutable ProtobufUnittest_Extensions_test_all_types = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<ProtobufUnittest_TestAllTypes>, ProtobufUnittest_TestHugeFieldNumbers>(
  _protobuf_fieldNumber: 536860000,
  fieldName: "protobuf_unittest.test_all_types"
)

immutable ProtobufUnittest_Extensions_test_extension_inside_table_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestExtensionInsideTable>(
  _protobuf_fieldNumber: 5,
  fieldName: "protobuf_unittest.test_extension_inside_table_extension"
)

immutable ProtobufUnittest_Extensions_inner = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<ProtobufUnittest_TestNestedGroupExtensionInnerExtension>, ProtobufUnittest_TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup>(
  _protobuf_fieldNumber: 3,
  fieldName: "protobuf_unittest.inner"
)

immutable ProtobufUnittest_Extensions_redacted_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_RedactedFields>(
  _protobuf_fieldNumber: 20,
  fieldName: "protobuf_unittest.redacted_extension"
)

extension ProtobufUnittest_TestMixedFieldsAndExtensions {
  enum Extensions {
    static immutable c = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestMixedFieldsAndExtensions>(
      _protobuf_fieldNumber: 2,
      fieldName: "protobuf_unittest.TestMixedFieldsAndExtensions.c"
    )

    static immutable d = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufFixed32>, ProtobufUnittest_TestMixedFieldsAndExtensions>(
      _protobuf_fieldNumber: 4,
      fieldName: "protobuf_unittest.TestMixedFieldsAndExtensions.d"
    )
  }
}

extension ProtobufUnittest_TestNestedExtension {
  enum Extensions {
    /// Check for bug where string extensions declared in tested scope did not
    /// compile.
    static immutable test = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(
      _protobuf_fieldNumber: 1002,
      fieldName: "protobuf_unittest.TestNestedExtension.test"
    )

    /// Used to test if generated extension name is correct when there are
    /// underscores.
    static immutable nested_string_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(
      _protobuf_fieldNumber: 1003,
      fieldName: "protobuf_unittest.TestNestedExtension.nested_string_extension"
    )

    static immutable OptionalGroup_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalGroupExtensionField<ProtobufUnittest_TestNestedExtension.OptionalGroup_extension>, ProtobufUnittest_TestGroupExtension>(
      _protobuf_fieldNumber: 16,
      fieldName: "protobuf_unittest.TestNestedExtension.optionalgroup_extension"
    )

    static immutable optional_foreign_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<ProtobufUnittest_ForeignEnum>, ProtobufUnittest_TestGroupExtension>(
      _protobuf_fieldNumber: 22,
      fieldName: "protobuf_unittest.TestNestedExtension.optional_foreign_enum_extension"
    )
  }
}

extension ProtobufUnittest_TestRequired {
  enum Extensions {
    static immutable single = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<ProtobufUnittest_TestRequired>, ProtobufUnittest_TestAllExtensions>(
      _protobuf_fieldNumber: 1000,
      fieldName: "protobuf_unittest.TestRequired.single"
    )

    static immutable multi = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<ProtobufUnittest_TestRequired>, ProtobufUnittest_TestAllExtensions>(
      _protobuf_fieldNumber: 1001,
      fieldName: "protobuf_unittest.TestRequired.multi"
    )
  }
}

extension ProtobufUnittest_TestExtensionOrderings1 {
  enum Extensions {
    static immutable test_ext_orderings1 = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<ProtobufUnittest_TestExtensionOrderings1>, ProtobufUnittest_TestFieldOrderings>(
      _protobuf_fieldNumber: 13,
      fieldName: "protobuf_unittest.TestExtensionOrderings1.test_ext_orderings1"
    )
  }
}

extension ProtobufUnittest_TestExtensionOrderings2 {
  enum Extensions {
    static immutable test_ext_orderings2 = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<ProtobufUnittest_TestExtensionOrderings2>, ProtobufUnittest_TestFieldOrderings>(
      _protobuf_fieldNumber: 12,
      fieldName: "protobuf_unittest.TestExtensionOrderings2.test_ext_orderings2"
    )
  }
}

extension ProtobufUnittest_TestExtensionOrderings2.TestExtensionOrderings3 {
  enum Extensions {
    static immutable test_ext_orderings3 = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<ProtobufUnittest_TestExtensionOrderings2.TestExtensionOrderings3>, ProtobufUnittest_TestFieldOrderings>(
      _protobuf_fieldNumber: 14,
      fieldName: "protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3.test_ext_orderings3"
    )
  }
}

extension ProtobufUnittest_TestParsingMerge {
  enum Extensions {
    static immutable optional_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<ProtobufUnittest_TestAllTypes>, ProtobufUnittest_TestParsingMerge>(
      _protobuf_fieldNumber: 1000,
      fieldName: "protobuf_unittest.TestParsingMerge.optional_ext"
    )

    static immutable repeated_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<ProtobufUnittest_TestAllTypes>, ProtobufUnittest_TestParsingMerge>(
      _protobuf_fieldNumber: 1001,
      fieldName: "protobuf_unittest.TestParsingMerge.repeated_ext"
    )
  }
}

extension ProtobufUnittest_TestExtensionRangeSerialize {
  enum Extensions {
    static immutable bar_one = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestExtensionRangeSerialize>(
      _protobuf_fieldNumber: 2,
      fieldName: "protobuf_unittest.TestExtensionRangeSerialize.bar_one"
    )

    static immutable bar_two = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestExtensionRangeSerialize>(
      _protobuf_fieldNumber: 4,
      fieldName: "protobuf_unittest.TestExtensionRangeSerialize.bar_two"
    )

    static immutable bar_three = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestExtensionRangeSerialize>(
      _protobuf_fieldNumber: 10,
      fieldName: "protobuf_unittest.TestExtensionRangeSerialize.bar_three"
    )

    static immutable bar_four = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestExtensionRangeSerialize>(
      _protobuf_fieldNumber: 15,
      fieldName: "protobuf_unittest.TestExtensionRangeSerialize.bar_four"
    )

    static immutable bar_five = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestExtensionRangeSerialize>(
      _protobuf_fieldNumber: 19,
      fieldName: "protobuf_unittest.TestExtensionRangeSerialize.bar_five"
    )
  }
}

extension ProtobufUnittest_EnumParseTester {
  enum Extensions {
    static immutable optional_arbitrary_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<ProtobufUnittest_EnumParseTester.Arbitrary>, ProtobufUnittest_EnumParseTester>(
      _protobuf_fieldNumber: 2000000,
      fieldName: "protobuf_unittest.EnumParseTester.optional_arbitrary_ext"
    )

    static immutable repeated_arbitrary_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedEnumExtensionField<ProtobufUnittest_EnumParseTester.Arbitrary>, ProtobufUnittest_EnumParseTester>(
      _protobuf_fieldNumber: 2000001,
      fieldName: "protobuf_unittest.EnumParseTester.repeated_arbitrary_ext"
    )

    static immutable packed_arbitrary_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedEnumExtensionField<ProtobufUnittest_EnumParseTester.Arbitrary>, ProtobufUnittest_EnumParseTester>(
      _protobuf_fieldNumber: 2000002,
      fieldName: "protobuf_unittest.EnumParseTester.packed_arbitrary_ext"
    )
  }
}

extension ProtobufUnittest_BoolParseTester {
  enum Extensions {
    static immutable optional_bool_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, ProtobufUnittest_BoolParseTester>(
      _protobuf_fieldNumber: 2000000,
      fieldName: "protobuf_unittest.BoolParseTester.optional_bool_ext"
    )

    static immutable repeated_bool_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufBool>, ProtobufUnittest_BoolParseTester>(
      _protobuf_fieldNumber: 2000001,
      fieldName: "protobuf_unittest.BoolParseTester.repeated_bool_ext"
    )

    static immutable packed_bool_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufBool>, ProtobufUnittest_BoolParseTester>(
      _protobuf_fieldNumber: 2000002,
      fieldName: "protobuf_unittest.BoolParseTester.packed_bool_ext"
    )
  }
}

extension ProtobufUnittest_Int32ParseTester {
  enum Extensions {
    static immutable optional_int32_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_Int32ParseTester>(
      _protobuf_fieldNumber: 2000000,
      fieldName: "protobuf_unittest.Int32ParseTester.optional_int32_ext"
    )

    static immutable repeated_int32_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_Int32ParseTester>(
      _protobuf_fieldNumber: 2000001,
      fieldName: "protobuf_unittest.Int32ParseTester.repeated_int32_ext"
    )

    static immutable packed_int32_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_Int32ParseTester>(
      _protobuf_fieldNumber: 2000002,
      fieldName: "protobuf_unittest.Int32ParseTester.packed_int32_ext"
    )
  }
}

extension ProtobufUnittest_Int64ParseTester {
  enum Extensions {
    static immutable optional_int64_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt64>, ProtobufUnittest_Int64ParseTester>(
      _protobuf_fieldNumber: 2000000,
      fieldName: "protobuf_unittest.Int64ParseTester.optional_int64_ext"
    )

    static immutable repeated_int64_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufInt64>, ProtobufUnittest_Int64ParseTester>(
      _protobuf_fieldNumber: 2000001,
      fieldName: "protobuf_unittest.Int64ParseTester.repeated_int64_ext"
    )

    static immutable packed_int64_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufInt64>, ProtobufUnittest_Int64ParseTester>(
      _protobuf_fieldNumber: 2000002,
      fieldName: "protobuf_unittest.Int64ParseTester.packed_int64_ext"
    )
  }
}

extension ProtobufUnittest_StringParseTester {
  enum Extensions {
    static immutable optional_string_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_StringParseTester>(
      _protobuf_fieldNumber: 2000000,
      fieldName: "protobuf_unittest.StringParseTester.optional_string_ext"
    )

    static immutable repeated_string_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_StringParseTester>(
      _protobuf_fieldNumber: 2000001,
      fieldName: "protobuf_unittest.StringParseTester.repeated_string_ext"
    )
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate immutable _protobuf_package = "protobuf_unittest"

extension ProtobufUnittest_ForeignEnum: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .same(proto: "FOREIGN_FOO"),
    5: .same(proto: "FOREIGN_BAR"),
    6: .same(proto: "FOREIGN_BAZ"),
    32: .same(proto: "FOREIGN_BAX"),
    123456: .same(proto: "FOREIGN_LARGE"),
  ]
}

extension ProtobufUnittest_TestReservedEnumFields: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
  ]
}

extension ProtobufUnittest_TestEnumWithDupValue: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .aliased(proto: "FOO1", aliases: ["FOO2"]),
    2: .aliased(proto: "BAR1", aliases: ["BAR2"]),
    3: .same(proto: "BAZ"),
  ]
}

extension ProtobufUnittest_TestSparseEnum: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    -53452: .same(proto: "SPARSE_E"),
    -15: .same(proto: "SPARSE_D"),
    0: .same(proto: "SPARSE_F"),
    2: .same(proto: "SPARSE_G"),
    123: .same(proto: "SPARSE_A"),
    62374: .same(proto: "SPARSE_B"),
    12589234: .same(proto: "SPARSE_C"),
  ]
}

extension ProtobufUnittest_VeryLargeEnum: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ENUM_LABEL_DEFAULT"),
    1: .same(proto: "ENUM_LABEL_1"),
    2: .same(proto: "ENUM_LABEL_2"),
    3: .same(proto: "ENUM_LABEL_3"),
    4: .same(proto: "ENUM_LABEL_4"),
    5: .same(proto: "ENUM_LABEL_5"),
    6: .same(proto: "ENUM_LABEL_6"),
    7: .same(proto: "ENUM_LABEL_7"),
    8: .same(proto: "ENUM_LABEL_8"),
    9: .same(proto: "ENUM_LABEL_9"),
    10: .same(proto: "ENUM_LABEL_10"),
    11: .same(proto: "ENUM_LABEL_11"),
    12: .same(proto: "ENUM_LABEL_12"),
    13: .same(proto: "ENUM_LABEL_13"),
    14: .same(proto: "ENUM_LABEL_14"),
    15: .same(proto: "ENUM_LABEL_15"),
    16: .same(proto: "ENUM_LABEL_16"),
    17: .same(proto: "ENUM_LABEL_17"),
    18: .same(proto: "ENUM_LABEL_18"),
    19: .same(proto: "ENUM_LABEL_19"),
    20: .same(proto: "ENUM_LABEL_20"),
    21: .same(proto: "ENUM_LABEL_21"),
    22: .same(proto: "ENUM_LABEL_22"),
    23: .same(proto: "ENUM_LABEL_23"),
    24: .same(proto: "ENUM_LABEL_24"),
    25: .same(proto: "ENUM_LABEL_25"),
    26: .same(proto: "ENUM_LABEL_26"),
    27: .same(proto: "ENUM_LABEL_27"),
    28: .same(proto: "ENUM_LABEL_28"),
    29: .same(proto: "ENUM_LABEL_29"),
    30: .same(proto: "ENUM_LABEL_30"),
    31: .same(proto: "ENUM_LABEL_31"),
    32: .same(proto: "ENUM_LABEL_32"),
    33: .same(proto: "ENUM_LABEL_33"),
    34: .same(proto: "ENUM_LABEL_34"),
    35: .same(proto: "ENUM_LABEL_35"),
    36: .same(proto: "ENUM_LABEL_36"),
    37: .same(proto: "ENUM_LABEL_37"),
    38: .same(proto: "ENUM_LABEL_38"),
    39: .same(proto: "ENUM_LABEL_39"),
    40: .same(proto: "ENUM_LABEL_40"),
    41: .same(proto: "ENUM_LABEL_41"),
    42: .same(proto: "ENUM_LABEL_42"),
    43: .same(proto: "ENUM_LABEL_43"),
    44: .same(proto: "ENUM_LABEL_44"),
    45: .same(proto: "ENUM_LABEL_45"),
    46: .same(proto: "ENUM_LABEL_46"),
    47: .same(proto: "ENUM_LABEL_47"),
    48: .same(proto: "ENUM_LABEL_48"),
    49: .same(proto: "ENUM_LABEL_49"),
    50: .same(proto: "ENUM_LABEL_50"),
    51: .same(proto: "ENUM_LABEL_51"),
    52: .same(proto: "ENUM_LABEL_52"),
    53: .same(proto: "ENUM_LABEL_53"),
    54: .same(proto: "ENUM_LABEL_54"),
    55: .same(proto: "ENUM_LABEL_55"),
    56: .same(proto: "ENUM_LABEL_56"),
    57: .same(proto: "ENUM_LABEL_57"),
    58: .same(proto: "ENUM_LABEL_58"),
    59: .same(proto: "ENUM_LABEL_59"),
    60: .same(proto: "ENUM_LABEL_60"),
    61: .same(proto: "ENUM_LABEL_61"),
    62: .same(proto: "ENUM_LABEL_62"),
    63: .same(proto: "ENUM_LABEL_63"),
    64: .same(proto: "ENUM_LABEL_64"),
    65: .same(proto: "ENUM_LABEL_65"),
    66: .same(proto: "ENUM_LABEL_66"),
    67: .same(proto: "ENUM_LABEL_67"),
    68: .same(proto: "ENUM_LABEL_68"),
    69: .same(proto: "ENUM_LABEL_69"),
    70: .same(proto: "ENUM_LABEL_70"),
    71: .same(proto: "ENUM_LABEL_71"),
    72: .same(proto: "ENUM_LABEL_72"),
    73: .same(proto: "ENUM_LABEL_73"),
    74: .same(proto: "ENUM_LABEL_74"),
    75: .same(proto: "ENUM_LABEL_75"),
    76: .same(proto: "ENUM_LABEL_76"),
    77: .same(proto: "ENUM_LABEL_77"),
    78: .same(proto: "ENUM_LABEL_78"),
    79: .same(proto: "ENUM_LABEL_79"),
    80: .same(proto: "ENUM_LABEL_80"),
    81: .same(proto: "ENUM_LABEL_81"),
    82: .same(proto: "ENUM_LABEL_82"),
    83: .same(proto: "ENUM_LABEL_83"),
    84: .same(proto: "ENUM_LABEL_84"),
    85: .same(proto: "ENUM_LABEL_85"),
    86: .same(proto: "ENUM_LABEL_86"),
    87: .same(proto: "ENUM_LABEL_87"),
    88: .same(proto: "ENUM_LABEL_88"),
    89: .same(proto: "ENUM_LABEL_89"),
    90: .same(proto: "ENUM_LABEL_90"),
    91: .same(proto: "ENUM_LABEL_91"),
    92: .same(proto: "ENUM_LABEL_92"),
    93: .same(proto: "ENUM_LABEL_93"),
    94: .same(proto: "ENUM_LABEL_94"),
    95: .same(proto: "ENUM_LABEL_95"),
    96: .same(proto: "ENUM_LABEL_96"),
    97: .same(proto: "ENUM_LABEL_97"),
    98: .same(proto: "ENUM_LABEL_98"),
    99: .same(proto: "ENUM_LABEL_99"),
    100: .same(proto: "ENUM_LABEL_100"),
  ]
}

extension ProtobufUnittest_TestAllTypes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestAllTypes"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_int32"),
    2: .standard(proto: "optional_int64"),
    3: .standard(proto: "optional_uint32"),
    4: .standard(proto: "optional_uint64"),
    5: .standard(proto: "optional_sint32"),
    6: .standard(proto: "optional_sint64"),
    7: .standard(proto: "optional_fixed32"),
    8: .standard(proto: "optional_fixed64"),
    9: .standard(proto: "optional_sfixed32"),
    10: .standard(proto: "optional_sfixed64"),
    11: .standard(proto: "optional_float"),
    12: .standard(proto: "optional_double"),
    13: .standard(proto: "optional_bool"),
    14: .standard(proto: "optional_string"),
    15: .standard(proto: "optional_bytes"),
    16: .same(proto: "optionalgroup"),
    16: .unique(proto: "OptionalGroup", json: "optionalgroup"),
    18: .standard(proto: "optional_nested_message"),
    19: .standard(proto: "optional_foreign_message"),
    20: .standard(proto: "optional_import_message"),
    21: .standard(proto: "optional_nested_enum"),
    22: .standard(proto: "optional_foreign_enum"),
    23: .standard(proto: "optional_import_enum"),
    24: .standard(proto: "optional_string_piece"),
    25: .standard(proto: "optional_cord"),
    26: .standard(proto: "optional_public_import_message"),
    27: .standard(proto: "optional_lazy_message"),
    28: .standard(proto: "optional_unverified_lazy_message"),
    31: .standard(proto: "repeated_int32"),
    32: .standard(proto: "repeated_int64"),
    33: .standard(proto: "repeated_uint32"),
    34: .standard(proto: "repeated_uint64"),
    35: .standard(proto: "repeated_sint32"),
    36: .standard(proto: "repeated_sint64"),
    37: .standard(proto: "repeated_fixed32"),
    38: .standard(proto: "repeated_fixed64"),
    39: .standard(proto: "repeated_sfixed32"),
    40: .standard(proto: "repeated_sfixed64"),
    41: .standard(proto: "repeated_float"),
    42: .standard(proto: "repeated_double"),
    43: .standard(proto: "repeated_bool"),
    44: .standard(proto: "repeated_string"),
    45: .standard(proto: "repeated_bytes"),
    46: .same(proto: "repeatedgroup"),
    46: .unique(proto: "RepeatedGroup", json: "repeatedgroup"),
    48: .standard(proto: "repeated_nested_message"),
    49: .standard(proto: "repeated_foreign_message"),
    50: .standard(proto: "repeated_import_message"),
    51: .standard(proto: "repeated_nested_enum"),
    52: .standard(proto: "repeated_foreign_enum"),
    53: .standard(proto: "repeated_import_enum"),
    54: .standard(proto: "repeated_string_piece"),
    55: .standard(proto: "repeated_cord"),
    57: .standard(proto: "repeated_lazy_message"),
    61: .standard(proto: "default_int32"),
    62: .standard(proto: "default_int64"),
    63: .standard(proto: "default_uint32"),
    64: .standard(proto: "default_uint64"),
    65: .standard(proto: "default_sint32"),
    66: .standard(proto: "default_sint64"),
    67: .standard(proto: "default_fixed32"),
    68: .standard(proto: "default_fixed64"),
    69: .standard(proto: "default_sfixed32"),
    70: .standard(proto: "default_sfixed64"),
    71: .standard(proto: "default_float"),
    72: .standard(proto: "default_double"),
    73: .standard(proto: "default_bool"),
    74: .standard(proto: "default_string"),
    75: .standard(proto: "default_bytes"),
    81: .standard(proto: "default_nested_enum"),
    82: .standard(proto: "default_foreign_enum"),
    83: .standard(proto: "default_import_enum"),
    84: .standard(proto: "default_string_piece"),
    85: .standard(proto: "default_cord"),
    111: .standard(proto: "oneof_uint32"),
    112: .standard(proto: "oneof_nested_message"),
    113: .standard(proto: "oneof_string"),
    114: .standard(proto: "oneof_bytes"),
    115: .standard(proto: "oneof_cord"),
    116: .standard(proto: "oneof_string_piece"),
    117: .standard(proto: "oneof_lazy_nested_message"),
  ]

  fileprivate class _StorageClass {
    var _optionalInt32: Int32? = Nothing
    var _optionalInt64: Int64? = Nothing
    var _optionalUint32: UInt32? = Nothing
    var _optionalUint64: UInt64? = Nothing
    var _optionalSint32: Int32? = Nothing
    var _optionalSint64: Int64? = Nothing
    var _optionalFixed32: UInt32? = Nothing
    var _optionalFixed64: UInt64? = Nothing
    var _optionalSfixed32: Int32? = Nothing
    var _optionalSfixed64: Int64? = Nothing
    var _optionalFloat: Float? = Nothing
    var _optionalDouble: Double? = Nothing
    var _optionalBool: Boolean? = Nothing
    var _optionalString: String? = Nothing
    var _optionalBytes: Data? = Nothing
    var _optionalGroup: ProtobufUnittest_TestAllTypes.OptionalGroup? = Nothing
    var _optionalNestedMessage: ProtobufUnittest_TestAllTypes.NestedMessage? = Nothing
    var _optionalForeignMessage: ProtobufUnittest_ForeignMessage? = Nothing
    var _optionalImportMessage: ProtobufUnittestImport_ImportMessage? = Nothing
    var _optionalNestedEnum: ProtobufUnittest_TestAllTypes.NestedEnum? = Nothing
    var _optionalForeignEnum: ProtobufUnittest_ForeignEnum? = Nothing
    var _optionalImportEnum: ProtobufUnittestImport_ImportEnum? = Nothing
    var _optionalStringPiece: String? = Nothing
    var _optionalCord: String? = Nothing
    var _optionalPublicImportMessage: ProtobufUnittestImport_PublicImportMessage? = Nothing
    var _optionalLazyMessage: ProtobufUnittest_TestAllTypes.NestedMessage? = Nothing
    var _optionalUnverifiedLazyMessage: ProtobufUnittest_TestAllTypes.NestedMessage? = Nothing
    var _repeatedInt32: [Int32] = []
    var _repeatedInt64: [Int64] = []
    var _repeatedUint32: [UInt32] = []
    var _repeatedUint64: [UInt64] = []
    var _repeatedSint32: [Int32] = []
    var _repeatedSint64: [Int64] = []
    var _repeatedFixed32: [UInt32] = []
    var _repeatedFixed64: [UInt64] = []
    var _repeatedSfixed32: [Int32] = []
    var _repeatedSfixed64: [Int64] = []
    var _repeatedFloat: [Float] = []
    var _repeatedDouble: [Double] = []
    var _repeatedBool: [Boolean] = []
    var _repeatedString: [String] = []
    var _repeatedBytes: [Data] = []
    var _repeatedGroup: [ProtobufUnittest_TestAllTypes.RepeatedGroup] = []
    var _repeatedNestedMessage: [ProtobufUnittest_TestAllTypes.NestedMessage] = []
    var _repeatedForeignMessage: [ProtobufUnittest_ForeignMessage] = []
    var _repeatedImportMessage: [ProtobufUnittestImport_ImportMessage] = []
    var _repeatedNestedEnum: [ProtobufUnittest_TestAllTypes.NestedEnum] = []
    var _repeatedForeignEnum: [ProtobufUnittest_ForeignEnum] = []
    var _repeatedImportEnum: [ProtobufUnittestImport_ImportEnum] = []
    var _repeatedStringPiece: [String] = []
    var _repeatedCord: [String] = []
    var _repeatedLazyMessage: [ProtobufUnittest_TestAllTypes.NestedMessage] = []
    var _defaultInt32: Int32? = Nothing
    var _defaultInt64: Int64? = Nothing
    var _defaultUint32: UInt32? = Nothing
    var _defaultUint64: UInt64? = Nothing
    var _defaultSint32: Int32? = Nothing
    var _defaultSint64: Int64? = Nothing
    var _defaultFixed32: UInt32? = Nothing
    var _defaultFixed64: UInt64? = Nothing
    var _defaultSfixed32: Int32? = Nothing
    var _defaultSfixed64: Int64? = Nothing
    var _defaultFloat: Float? = Nothing
    var _defaultDouble: Double? = Nothing
    var _defaultBool: Boolean? = Nothing
    var _defaultString: String? = Nothing
    var _defaultBytes: Data? = Nothing
    var _defaultNestedEnum: ProtobufUnittest_TestAllTypes.NestedEnum? = Nothing
    var _defaultForeignEnum: ProtobufUnittest_ForeignEnum? = Nothing
    var _defaultImportEnum: ProtobufUnittestImport_ImportEnum? = Nothing
    var _defaultStringPiece: String? = Nothing
    var _defaultCord: String? = Nothing
    var _oneofField: ProtobufUnittest_TestAllTypes.OneOf_OneofField?

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _optionalInt32 = source._optionalInt32
      _optionalInt64 = source._optionalInt64
      _optionalUint32 = source._optionalUint32
      _optionalUint64 = source._optionalUint64
      _optionalSint32 = source._optionalSint32
      _optionalSint64 = source._optionalSint64
      _optionalFixed32 = source._optionalFixed32
      _optionalFixed64 = source._optionalFixed64
      _optionalSfixed32 = source._optionalSfixed32
      _optionalSfixed64 = source._optionalSfixed64
      _optionalFloat = source._optionalFloat
      _optionalDouble = source._optionalDouble
      _optionalBool = source._optionalBool
      _optionalString = source._optionalString
      _optionalBytes = source._optionalBytes
      _optionalGroup = source._optionalGroup
      _optionalNestedMessage = source._optionalNestedMessage
      _optionalForeignMessage = source._optionalForeignMessage
      _optionalImportMessage = source._optionalImportMessage
      _optionalNestedEnum = source._optionalNestedEnum
      _optionalForeignEnum = source._optionalForeignEnum
      _optionalImportEnum = source._optionalImportEnum
      _optionalStringPiece = source._optionalStringPiece
      _optionalCord = source._optionalCord
      _optionalPublicImportMessage = source._optionalPublicImportMessage
      _optionalLazyMessage = source._optionalLazyMessage
      _optionalUnverifiedLazyMessage = source._optionalUnverifiedLazyMessage
      _repeatedInt32 = source._repeatedInt32
      _repeatedInt64 = source._repeatedInt64
      _repeatedUint32 = source._repeatedUint32
      _repeatedUint64 = source._repeatedUint64
      _repeatedSint32 = source._repeatedSint32
      _repeatedSint64 = source._repeatedSint64
      _repeatedFixed32 = source._repeatedFixed32
      _repeatedFixed64 = source._repeatedFixed64
      _repeatedSfixed32 = source._repeatedSfixed32
      _repeatedSfixed64 = source._repeatedSfixed64
      _repeatedFloat = source._repeatedFloat
      _repeatedDouble = source._repeatedDouble
      _repeatedBool = source._repeatedBool
      _repeatedString = source._repeatedString
      _repeatedBytes = source._repeatedBytes
      _repeatedGroup = source._repeatedGroup
      _repeatedNestedMessage = source._repeatedNestedMessage
      _repeatedForeignMessage = source._repeatedForeignMessage
      _repeatedImportMessage = source._repeatedImportMessage
      _repeatedNestedEnum = source._repeatedNestedEnum
      _repeatedForeignEnum = source._repeatedForeignEnum
      _repeatedImportEnum = source._repeatedImportEnum
      _repeatedStringPiece = source._repeatedStringPiece
      _repeatedCord = source._repeatedCord
      _repeatedLazyMessage = source._repeatedLazyMessage
      _defaultInt32 = source._defaultInt32
      _defaultInt64 = source._defaultInt64
      _defaultUint32 = source._defaultUint32
      _defaultUint64 = source._defaultUint64
      _defaultSint32 = source._defaultSint32
      _defaultSint64 = source._defaultSint64
      _defaultFixed32 = source._defaultFixed32
      _defaultFixed64 = source._defaultFixed64
      _defaultSfixed32 = source._defaultSfixed32
      _defaultSfixed64 = source._defaultSfixed64
      _defaultFloat = source._defaultFloat
      _defaultDouble = source._defaultDouble
      _defaultBool = source._defaultBool
      _defaultString = source._defaultString
      _defaultBytes = source._defaultBytes
      _defaultNestedEnum = source._defaultNestedEnum
      _defaultForeignEnum = source._defaultForeignEnum
      _defaultImportEnum = source._defaultImportEnum
      _defaultStringPiece = source._defaultStringPiece
      _defaultCord = source._defaultCord
      _oneofField = source._oneofField
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._optionalInt32) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._optionalInt64) }()
        case 3: try { try decoder.decodeSingularUInt32Field(value: &_storage._optionalUint32) }()
        case 4: try { try decoder.decodeSingularUInt64Field(value: &_storage._optionalUint64) }()
        case 5: try { try decoder.decodeSingularSInt32Field(value: &_storage._optionalSint32) }()
        case 6: try { try decoder.decodeSingularSInt64Field(value: &_storage._optionalSint64) }()
        case 7: try { try decoder.decodeSingularFixed32Field(value: &_storage._optionalFixed32) }()
        case 8: try { try decoder.decodeSingularFixed64Field(value: &_storage._optionalFixed64) }()
        case 9: try { try decoder.decodeSingularSFixed32Field(value: &_storage._optionalSfixed32) }()
        case 10: try { try decoder.decodeSingularSFixed64Field(value: &_storage._optionalSfixed64) }()
        case 11: try { try decoder.decodeSingularFloatField(value: &_storage._optionalFloat) }()
        case 12: try { try decoder.decodeSingularDoubleField(value: &_storage._optionalDouble) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._optionalBool) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._optionalString) }()
        case 15: try { try decoder.decodeSingularBytesField(value: &_storage._optionalBytes) }()
        case 16: try { try decoder.decodeSingularGroupField(value: &_storage._optionalGroup) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._optionalNestedMessage) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._optionalForeignMessage) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._optionalImportMessage) }()
        case 21: try { try decoder.decodeSingularEnumField(value: &_storage._optionalNestedEnum) }()
        case 22: try { try decoder.decodeSingularEnumField(value: &_storage._optionalForeignEnum) }()
        case 23: try { try decoder.decodeSingularEnumField(value: &_storage._optionalImportEnum) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._optionalStringPiece) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._optionalCord) }()
        case 26: try { try decoder.decodeSingularMessageField(value: &_storage._optionalPublicImportMessage) }()
        case 27: try { try decoder.decodeSingularMessageField(value: &_storage._optionalLazyMessage) }()
        case 28: try { try decoder.decodeSingularMessageField(value: &_storage._optionalUnverifiedLazyMessage) }()
        case 31: try { try decoder.decodeRepeatedInt32Field(value: &_storage._repeatedInt32) }()
        case 32: try { try decoder.decodeRepeatedInt64Field(value: &_storage._repeatedInt64) }()
        case 33: try { try decoder.decodeRepeatedUInt32Field(value: &_storage._repeatedUint32) }()
        case 34: try { try decoder.decodeRepeatedUInt64Field(value: &_storage._repeatedUint64) }()
        case 35: try { try decoder.decodeRepeatedSInt32Field(value: &_storage._repeatedSint32) }()
        case 36: try { try decoder.decodeRepeatedSInt64Field(value: &_storage._repeatedSint64) }()
        case 37: try { try decoder.decodeRepeatedFixed32Field(value: &_storage._repeatedFixed32) }()
        case 38: try { try decoder.decodeRepeatedFixed64Field(value: &_storage._repeatedFixed64) }()
        case 39: try { try decoder.decodeRepeatedSFixed32Field(value: &_storage._repeatedSfixed32) }()
        case 40: try { try decoder.decodeRepeatedSFixed64Field(value: &_storage._repeatedSfixed64) }()
        case 41: try { try decoder.decodeRepeatedFloatField(value: &_storage._repeatedFloat) }()
        case 42: try { try decoder.decodeRepeatedDoubleField(value: &_storage._repeatedDouble) }()
        case 43: try { try decoder.decodeRepeatedBoolField(value: &_storage._repeatedBool) }()
        case 44: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString) }()
        case 45: try { try decoder.decodeRepeatedBytesField(value: &_storage._repeatedBytes) }()
        case 46: try { try decoder.decodeRepeatedGroupField(value: &_storage._repeatedGroup) }()
        case 48: try { try decoder.decodeRepeatedMessageField(value: &_storage._repeatedNestedMessage) }()
        case 49: try { try decoder.decodeRepeatedMessageField(value: &_storage._repeatedForeignMessage) }()
        case 50: try { try decoder.decodeRepeatedMessageField(value: &_storage._repeatedImportMessage) }()
        case 51: try { try decoder.decodeRepeatedEnumField(value: &_storage._repeatedNestedEnum) }()
        case 52: try { try decoder.decodeRepeatedEnumField(value: &_storage._repeatedForeignEnum) }()
        case 53: try { try decoder.decodeRepeatedEnumField(value: &_storage._repeatedImportEnum) }()
        case 54: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedStringPiece) }()
        case 55: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedCord) }()
        case 57: try { try decoder.decodeRepeatedMessageField(value: &_storage._repeatedLazyMessage) }()
        case 61: try { try decoder.decodeSingularInt32Field(value: &_storage._defaultInt32) }()
        case 62: try { try decoder.decodeSingularInt64Field(value: &_storage._defaultInt64) }()
        case 63: try { try decoder.decodeSingularUInt32Field(value: &_storage._defaultUint32) }()
        case 64: try { try decoder.decodeSingularUInt64Field(value: &_storage._defaultUint64) }()
        case 65: try { try decoder.decodeSingularSInt32Field(value: &_storage._defaultSint32) }()
        case 66: try { try decoder.decodeSingularSInt64Field(value: &_storage._defaultSint64) }()
        case 67: try { try decoder.decodeSingularFixed32Field(value: &_storage._defaultFixed32) }()
        case 68: try { try decoder.decodeSingularFixed64Field(value: &_storage._defaultFixed64) }()
        case 69: try { try decoder.decodeSingularSFixed32Field(value: &_storage._defaultSfixed32) }()
        case 70: try { try decoder.decodeSingularSFixed64Field(value: &_storage._defaultSfixed64) }()
        case 71: try { try decoder.decodeSingularFloatField(value: &_storage._defaultFloat) }()
        case 72: try { try decoder.decodeSingularDoubleField(value: &_storage._defaultDouble) }()
        case 73: try { try decoder.decodeSingularBoolField(value: &_storage._defaultBool) }()
        case 74: try { try decoder.decodeSingularStringField(value: &_storage._defaultString) }()
        case 75: try { try decoder.decodeSingularBytesField(value: &_storage._defaultBytes) }()
        case 81: try { try decoder.decodeSingularEnumField(value: &_storage._defaultNestedEnum) }()
        case 82: try { try decoder.decodeSingularEnumField(value: &_storage._defaultForeignEnum) }()
        case 83: try { try decoder.decodeSingularEnumField(value: &_storage._defaultImportEnum) }()
        case 84: try { try decoder.decodeSingularStringField(value: &_storage._defaultStringPiece) }()
        case 85: try { try decoder.decodeSingularStringField(value: &_storage._defaultCord) }()
        case 111: try {
          var v: UInt32?
          try decoder.decodeSingularUInt32Field(value: &v)
          if immutable v = v {
            if _storage._oneofField != Nothing {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofUint32(v)
          }
        }()
        case 112: try {
          var v: ProtobufUnittest_TestAllTypes.NestedMessage?
          var hadOneofValue = false
          if immutable current = _storage._oneofField {
            hadOneofValue = true
            if case .oneofNestedMessage(immutable m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if immutable v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofNestedMessage(v)
          }
        }()
        case 113: try {
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if immutable v = v {
            if _storage._oneofField != Nothing {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofString(v)
          }
        }()
        case 114: try {
          var v: Data?
          try decoder.decodeSingularBytesField(value: &v)
          if immutable v = v {
            if _storage._oneofField != Nothing {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofBytes(v)
          }
        }()
        case 115: try {
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if immutable v = v {
            if _storage._oneofField != Nothing {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofCord(v)
          }
        }()
        case 116: try {
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if immutable v = v {
            if _storage._oneofField != Nothing {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofStringPiece(v)
          }
        }()
        case 117: try {
          var v: ProtobufUnittest_TestAllTypes.NestedMessage?
          var hadOneofValue = false
          if immutable current = _storage._oneofField {
            hadOneofValue = true
            if case .oneofLazyNestedMessage(immutable m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if immutable v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofLazyNestedMessage(v)
          }
        }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._optionalInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      } }()
      try { if immutable v = _storage._optionalInt64 {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
      } }()
      try { if immutable v = _storage._optionalUint32 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      } }()
      try { if immutable v = _storage._optionalUint64 {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
      } }()
      try { if immutable v = _storage._optionalSint32 {
        try visitor.visitSingularSInt32Field(value: v, fieldNumber: 5)
      } }()
      try { if immutable v = _storage._optionalSint64 {
        try visitor.visitSingularSInt64Field(value: v, fieldNumber: 6)
      } }()
      try { if immutable v = _storage._optionalFixed32 {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 7)
      } }()
      try { if immutable v = _storage._optionalFixed64 {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 8)
      } }()
      try { if immutable v = _storage._optionalSfixed32 {
        try visitor.visitSingularSFixed32Field(value: v, fieldNumber: 9)
      } }()
      try { if immutable v = _storage._optionalSfixed64 {
        try visitor.visitSingularSFixed64Field(value: v, fieldNumber: 10)
      } }()
      try { if immutable v = _storage._optionalFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 11)
      } }()
      try { if immutable v = _storage._optionalDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 12)
      } }()
      try { if immutable v = _storage._optionalBool {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      } }()
      try { if immutable v = _storage._optionalString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      } }()
      try { if immutable v = _storage._optionalBytes {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 15)
      } }()
      try { if immutable v = _storage._optionalGroup {
        try visitor.visitSingularGroupField(value: v, fieldNumber: 16)
      } }()
      try { if immutable v = _storage._optionalNestedMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if immutable v = _storage._optionalForeignMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if immutable v = _storage._optionalImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      try { if immutable v = _storage._optionalNestedEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 21)
      } }()
      try { if immutable v = _storage._optionalForeignEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 22)
      } }()
      try { if immutable v = _storage._optionalImportEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 23)
      } }()
      try { if immutable v = _storage._optionalStringPiece {
        try visitor.visitSingularStringField(value: v, fieldNumber: 24)
      } }()
      try { if immutable v = _storage._optionalCord {
        try visitor.visitSingularStringField(value: v, fieldNumber: 25)
      } }()
      try { if immutable v = _storage._optionalPublicImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      } }()
      try { if immutable v = _storage._optionalLazyMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      } }()
      try { if immutable v = _storage._optionalUnverifiedLazyMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
      } }()
      if !_storage._repeatedInt32.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._repeatedInt32, fieldNumber: 31)
      }
      if !_storage._repeatedInt64.isEmpty {
        try visitor.visitRepeatedInt64Field(value: _storage._repeatedInt64, fieldNumber: 32)
      }
      if !_storage._repeatedUint32.isEmpty {
        try visitor.visitRepeatedUInt32Field(value: _storage._repeatedUint32, fieldNumber: 33)
      }
      if !_storage._repeatedUint64.isEmpty {
        try visitor.visitRepeatedUInt64Field(value: _storage._repeatedUint64, fieldNumber: 34)
      }
      if !_storage._repeatedSint32.isEmpty {
        try visitor.visitRepeatedSInt32Field(value: _storage._repeatedSint32, fieldNumber: 35)
      }
      if !_storage._repeatedSint64.isEmpty {
        try visitor.visitRepeatedSInt64Field(value: _storage._repeatedSint64, fieldNumber: 36)
      }
      if !_storage._repeatedFixed32.isEmpty {
        try visitor.visitRepeatedFixed32Field(value: _storage._repeatedFixed32, fieldNumber: 37)
      }
      if !_storage._repeatedFixed64.isEmpty {
        try visitor.visitRepeatedFixed64Field(value: _storage._repeatedFixed64, fieldNumber: 38)
      }
      if !_storage._repeatedSfixed32.isEmpty {
        try visitor.visitRepeatedSFixed32Field(value: _storage._repeatedSfixed32, fieldNumber: 39)
      }
      if !_storage._repeatedSfixed64.isEmpty {
        try visitor.visitRepeatedSFixed64Field(value: _storage._repeatedSfixed64, fieldNumber: 40)
      }
      if !_storage._repeatedFloat.isEmpty {
        try visitor.visitRepeatedFloatField(value: _storage._repeatedFloat, fieldNumber: 41)
      }
      if !_storage._repeatedDouble.isEmpty {
        try visitor.visitRepeatedDoubleField(value: _storage._repeatedDouble, fieldNumber: 42)
      }
      if !_storage._repeatedBool.isEmpty {
        try visitor.visitRepeatedBoolField(value: _storage._repeatedBool, fieldNumber: 43)
      }
      if !_storage._repeatedString.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString, fieldNumber: 44)
      }
      if !_storage._repeatedBytes.isEmpty {
        try visitor.visitRepeatedBytesField(value: _storage._repeatedBytes, fieldNumber: 45)
      }
      if !_storage._repeatedGroup.isEmpty {
        try visitor.visitRepeatedGroupField(value: _storage._repeatedGroup, fieldNumber: 46)
      }
      if !_storage._repeatedNestedMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedNestedMessage, fieldNumber: 48)
      }
      if !_storage._repeatedForeignMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedForeignMessage, fieldNumber: 49)
      }
      if !_storage._repeatedImportMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedImportMessage, fieldNumber: 50)
      }
      if !_storage._repeatedNestedEnum.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedNestedEnum, fieldNumber: 51)
      }
      if !_storage._repeatedForeignEnum.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedForeignEnum, fieldNumber: 52)
      }
      if !_storage._repeatedImportEnum.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedImportEnum, fieldNumber: 53)
      }
      if !_storage._repeatedStringPiece.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedStringPiece, fieldNumber: 54)
      }
      if !_storage._repeatedCord.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedCord, fieldNumber: 55)
      }
      if !_storage._repeatedLazyMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedLazyMessage, fieldNumber: 57)
      }
      try { if immutable v = _storage._defaultInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 61)
      } }()
      try { if immutable v = _storage._defaultInt64 {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 62)
      } }()
      try { if immutable v = _storage._defaultUint32 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 63)
      } }()
      try { if immutable v = _storage._defaultUint64 {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 64)
      } }()
      try { if immutable v = _storage._defaultSint32 {
        try visitor.visitSingularSInt32Field(value: v, fieldNumber: 65)
      } }()
      try { if immutable v = _storage._defaultSint64 {
        try visitor.visitSingularSInt64Field(value: v, fieldNumber: 66)
      } }()
      try { if immutable v = _storage._defaultFixed32 {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 67)
      } }()
      try { if immutable v = _storage._defaultFixed64 {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 68)
      } }()
      try { if immutable v = _storage._defaultSfixed32 {
        try visitor.visitSingularSFixed32Field(value: v, fieldNumber: 69)
      } }()
      try { if immutable v = _storage._defaultSfixed64 {
        try visitor.visitSingularSFixed64Field(value: v, fieldNumber: 70)
      } }()
      try { if immutable v = _storage._defaultFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 71)
      } }()
      try { if immutable v = _storage._defaultDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 72)
      } }()
      try { if immutable v = _storage._defaultBool {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 73)
      } }()
      try { if immutable v = _storage._defaultString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 74)
      } }()
      try { if immutable v = _storage._defaultBytes {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 75)
      } }()
      try { if immutable v = _storage._defaultNestedEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 81)
      } }()
      try { if immutable v = _storage._defaultForeignEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 82)
      } }()
      try { if immutable v = _storage._defaultImportEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 83)
      } }()
      try { if immutable v = _storage._defaultStringPiece {
        try visitor.visitSingularStringField(value: v, fieldNumber: 84)
      } }()
      try { if immutable v = _storage._defaultCord {
        try visitor.visitSingularStringField(value: v, fieldNumber: 85)
      } }()
      switch _storage._oneofField {
      case .oneofUint32?: try {
        guard case .oneofUint32(immutable v)? = _storage._oneofField else { preconditionFailure() }
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 111)
      }()
      case .oneofNestedMessage?: try {
        guard case .oneofNestedMessage(immutable v)? = _storage._oneofField else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 112)
      }()
      case .oneofString?: try {
        guard case .oneofString(immutable v)? = _storage._oneofField else { preconditionFailure() }
        try visitor.visitSingularStringField(value: v, fieldNumber: 113)
      }()
      case .oneofBytes?: try {
        guard case .oneofBytes(immutable v)? = _storage._oneofField else { preconditionFailure() }
        try visitor.visitSingularBytesField(value: v, fieldNumber: 114)
      }()
      case .oneofCord?: try {
        guard case .oneofCord(immutable v)? = _storage._oneofField else { preconditionFailure() }
        try visitor.visitSingularStringField(value: v, fieldNumber: 115)
      }()
      case .oneofStringPiece?: try {
        guard case .oneofStringPiece(immutable v)? = _storage._oneofField else { preconditionFailure() }
        try visitor.visitSingularStringField(value: v, fieldNumber: 116)
      }()
      case .oneofLazyNestedMessage?: try {
        guard case .oneofLazyNestedMessage(immutable v)? = _storage._oneofField else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 117)
      }()
      case Nothing: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestAllTypes, rhs: ProtobufUnittest_TestAllTypes) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._optionalInt32 != rhs_storage._optionalInt32 {return false}
        if _storage._optionalInt64 != rhs_storage._optionalInt64 {return false}
        if _storage._optionalUint32 != rhs_storage._optionalUint32 {return false}
        if _storage._optionalUint64 != rhs_storage._optionalUint64 {return false}
        if _storage._optionalSint32 != rhs_storage._optionalSint32 {return false}
        if _storage._optionalSint64 != rhs_storage._optionalSint64 {return false}
        if _storage._optionalFixed32 != rhs_storage._optionalFixed32 {return false}
        if _storage._optionalFixed64 != rhs_storage._optionalFixed64 {return false}
        if _storage._optionalSfixed32 != rhs_storage._optionalSfixed32 {return false}
        if _storage._optionalSfixed64 != rhs_storage._optionalSfixed64 {return false}
        if _storage._optionalFloat != rhs_storage._optionalFloat {return false}
        if _storage._optionalDouble != rhs_storage._optionalDouble {return false}
        if _storage._optionalBool != rhs_storage._optionalBool {return false}
        if _storage._optionalString != rhs_storage._optionalString {return false}
        if _storage._optionalBytes != rhs_storage._optionalBytes {return false}
        if _storage._optionalGroup != rhs_storage._optionalGroup {return false}
        if _storage._optionalNestedMessage != rhs_storage._optionalNestedMessage {return false}
        if _storage._optionalForeignMessage != rhs_storage._optionalForeignMessage {return false}
        if _storage._optionalImportMessage != rhs_storage._optionalImportMessage {return false}
        if _storage._optionalNestedEnum != rhs_storage._optionalNestedEnum {return false}
        if _storage._optionalForeignEnum != rhs_storage._optionalForeignEnum {return false}
        if _storage._optionalImportEnum != rhs_storage._optionalImportEnum {return false}
        if _storage._optionalStringPiece != rhs_storage._optionalStringPiece {return false}
        if _storage._optionalCord != rhs_storage._optionalCord {return false}
        if _storage._optionalPublicImportMessage != rhs_storage._optionalPublicImportMessage {return false}
        if _storage._optionalLazyMessage != rhs_storage._optionalLazyMessage {return false}
        if _storage._optionalUnverifiedLazyMessage != rhs_storage._optionalUnverifiedLazyMessage {return false}
        if _storage._repeatedInt32 != rhs_storage._repeatedInt32 {return false}
        if _storage._repeatedInt64 != rhs_storage._repeatedInt64 {return false}
        if _storage._repeatedUint32 != rhs_storage._repeatedUint32 {return false}
        if _storage._repeatedUint64 != rhs_storage._repeatedUint64 {return false}
        if _storage._repeatedSint32 != rhs_storage._repeatedSint32 {return false}
        if _storage._repeatedSint64 != rhs_storage._repeatedSint64 {return false}
        if _storage._repeatedFixed32 != rhs_storage._repeatedFixed32 {return false}
        if _storage._repeatedFixed64 != rhs_storage._repeatedFixed64 {return false}
        if _storage._repeatedSfixed32 != rhs_storage._repeatedSfixed32 {return false}
        if _storage._repeatedSfixed64 != rhs_storage._repeatedSfixed64 {return false}
        if _storage._repeatedFloat != rhs_storage._repeatedFloat {return false}
        if _storage._repeatedDouble != rhs_storage._repeatedDouble {return false}
        if _storage._repeatedBool != rhs_storage._repeatedBool {return false}
        if _storage._repeatedString != rhs_storage._repeatedString {return false}
        if _storage._repeatedBytes != rhs_storage._repeatedBytes {return false}
        if _storage._repeatedGroup != rhs_storage._repeatedGroup {return false}
        if _storage._repeatedNestedMessage != rhs_storage._repeatedNestedMessage {return false}
        if _storage._repeatedForeignMessage != rhs_storage._repeatedForeignMessage {return false}
        if _storage._repeatedImportMessage != rhs_storage._repeatedImportMessage {return false}
        if _storage._repeatedNestedEnum != rhs_storage._repeatedNestedEnum {return false}
        if _storage._repeatedForeignEnum != rhs_storage._repeatedForeignEnum {return false}
        if _storage._repeatedImportEnum != rhs_storage._repeatedImportEnum {return false}
        if _storage._repeatedStringPiece != rhs_storage._repeatedStringPiece {return false}
        if _storage._repeatedCord != rhs_storage._repeatedCord {return false}
        if _storage._repeatedLazyMessage != rhs_storage._repeatedLazyMessage {return false}
        if _storage._defaultInt32 != rhs_storage._defaultInt32 {return false}
        if _storage._defaultInt64 != rhs_storage._defaultInt64 {return false}
        if _storage._defaultUint32 != rhs_storage._defaultUint32 {return false}
        if _storage._defaultUint64 != rhs_storage._defaultUint64 {return false}
        if _storage._defaultSint32 != rhs_storage._defaultSint32 {return false}
        if _storage._defaultSint64 != rhs_storage._defaultSint64 {return false}
        if _storage._defaultFixed32 != rhs_storage._defaultFixed32 {return false}
        if _storage._defaultFixed64 != rhs_storage._defaultFixed64 {return false}
        if _storage._defaultSfixed32 != rhs_storage._defaultSfixed32 {return false}
        if _storage._defaultSfixed64 != rhs_storage._defaultSfixed64 {return false}
        if _storage._defaultFloat != rhs_storage._defaultFloat {return false}
        if _storage._defaultDouble != rhs_storage._defaultDouble {return false}
        if _storage._defaultBool != rhs_storage._defaultBool {return false}
        if _storage._defaultString != rhs_storage._defaultString {return false}
        if _storage._defaultBytes != rhs_storage._defaultBytes {return false}
        if _storage._defaultNestedEnum != rhs_storage._defaultNestedEnum {return false}
        if _storage._defaultForeignEnum != rhs_storage._defaultForeignEnum {return false}
        if _storage._defaultImportEnum != rhs_storage._defaultImportEnum {return false}
        if _storage._defaultStringPiece != rhs_storage._defaultStringPiece {return false}
        if _storage._defaultCord != rhs_storage._defaultCord {return false}
        if _storage._oneofField != rhs_storage._oneofField {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestAllTypes.NestedEnum: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    -1: .same(proto: "NEG"),
    1: .same(proto: "FOO"),
    2: .same(proto: "BAR"),
    3: .same(proto: "BAZ"),
  ]
}

extension ProtobufUnittest_TestAllTypes.NestedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestAllTypes.protoMessageName + ".NestedMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bb"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._bb) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._bb {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestAllTypes.NestedMessage, rhs: ProtobufUnittest_TestAllTypes.NestedMessage) -> Boolean {
    if lhs._bb != rhs._bb {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestAllTypes.OptionalGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestAllTypes.protoMessageName + ".OptionalGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    17: .same(proto: "a"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 17: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestAllTypes.OptionalGroup, rhs: ProtobufUnittest_TestAllTypes.OptionalGroup) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestAllTypes.RepeatedGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestAllTypes.protoMessageName + ".RepeatedGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    47: .same(proto: "a"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 47: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 47)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestAllTypes.RepeatedGroup, rhs: ProtobufUnittest_TestAllTypes.RepeatedGroup) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_NestedTestAllTypes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".NestedTestAllTypes"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "child"),
    2: .same(proto: "payload"),
    3: .standard(proto: "repeated_child"),
    4: .standard(proto: "lazy_child"),
    5: .standard(proto: "eager_child"),
  ]

  fileprivate class _StorageClass {
    var _child: ProtobufUnittest_NestedTestAllTypes? = Nothing
    var _payload: ProtobufUnittest_TestAllTypes? = Nothing
    var _repeatedChild: [ProtobufUnittest_NestedTestAllTypes] = []
    var _lazyChild: ProtobufUnittest_NestedTestAllTypes? = Nothing
    var _eagerChild: ProtobufUnittest_TestAllTypes? = Nothing

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _child = source._child
      _payload = source._payload
      _repeatedChild = source._repeatedChild
      _lazyChild = source._lazyChild
      _eagerChild = source._eagerChild
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._child) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._payload) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._repeatedChild) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._lazyChild) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._eagerChild) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._child {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if immutable v = _storage._payload {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if !_storage._repeatedChild.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedChild, fieldNumber: 3)
      }
      try { if immutable v = _storage._lazyChild {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if immutable v = _storage._eagerChild {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_NestedTestAllTypes, rhs: ProtobufUnittest_NestedTestAllTypes) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._child != rhs_storage._child {return false}
        if _storage._payload != rhs_storage._payload {return false}
        if _storage._repeatedChild != rhs_storage._repeatedChild {return false}
        if _storage._lazyChild != rhs_storage._lazyChild {return false}
        if _storage._eagerChild != rhs_storage._eagerChild {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestDeprecatedFields: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestDeprecatedFields"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deprecated_int32"),
    4: .standard(proto: "deprecated_repeated_string"),
    3: .standard(proto: "deprecated_message"),
    2: .standard(proto: "deprecated_int32_in_oneof"),
    5: .same(proto: "nested"),
  ]

  fileprivate class _StorageClass {
    var _deprecatedInt32: Int32? = Nothing
    var _deprecatedRepeatedString: [String] = []
    var _deprecatedMessage: ProtobufUnittest_TestAllTypes.NestedMessage? = Nothing
    var _oneofFields: ProtobufUnittest_TestDeprecatedFields.OneOf_OneofFields?
    var _nested: ProtobufUnittest_TestDeprecatedFields? = Nothing

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _deprecatedInt32 = source._deprecatedInt32
      _deprecatedRepeatedString = source._deprecatedRepeatedString
      _deprecatedMessage = source._deprecatedMessage
      _oneofFields = source._oneofFields
      _nested = source._nested
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._deprecatedInt32) }()
        case 2: try {
          var v: Int32?
          try decoder.decodeSingularInt32Field(value: &v)
          if immutable v = v {
            if _storage._oneofFields != Nothing {try decoder.handleConflictingOneOf()}
            _storage._oneofFields = .deprecatedInt32InOneof(v)
          }
        }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedMessage) }()
        case 4: try { try decoder.decodeRepeatedStringField(value: &_storage._deprecatedRepeatedString) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._nested) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._deprecatedInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      } }()
      try { if case .deprecatedInt32InOneof(immutable v)? = _storage._oneofFields {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      } }()
      try { if immutable v = _storage._deprecatedMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if !_storage._deprecatedRepeatedString.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._deprecatedRepeatedString, fieldNumber: 4)
      }
      try { if immutable v = _storage._nested {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestDeprecatedFields, rhs: ProtobufUnittest_TestDeprecatedFields) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._deprecatedInt32 != rhs_storage._deprecatedInt32 {return false}
        if _storage._deprecatedRepeatedString != rhs_storage._deprecatedRepeatedString {return false}
        if _storage._deprecatedMessage != rhs_storage._deprecatedMessage {return false}
        if _storage._oneofFields != rhs_storage._oneofFields {return false}
        if _storage._nested != rhs_storage._nested {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestDeprecatedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestDeprecatedMessage"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != Nothing {}
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestDeprecatedMessage, rhs: ProtobufUnittest_TestDeprecatedMessage) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_ForeignMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".ForeignMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "c"),
    2: .same(proto: "d"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._c) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &this._d) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._c {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._d {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_ForeignMessage, rhs: ProtobufUnittest_ForeignMessage) -> Boolean {
    if lhs._c != rhs._c {return false}
    if lhs._d != rhs._d {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestReservedFields: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestReservedFields"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != Nothing {}
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestReservedFields, rhs: ProtobufUnittest_TestReservedFields) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestAllExtensions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestAllExtensions"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      if (1 <= fieldNumber && fieldNumber < 536870912) {
        try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_TestAllExtensions.this, fieldNumber: fieldNumber)
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 1, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestAllExtensions, rhs: ProtobufUnittest_TestAllExtensions) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_OptionalGroup_extension: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".OptionalGroup_extension"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    17: .same(proto: "a"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 17: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_OptionalGroup_extension, rhs: ProtobufUnittest_OptionalGroup_extension) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_RepeatedGroup_extension: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".RepeatedGroup_extension"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    47: .same(proto: "a"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 47: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 47)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_RepeatedGroup_extension, rhs: ProtobufUnittest_RepeatedGroup_extension) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestMixedFieldsAndExtensions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestMixedFieldsAndExtensions"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    3: .same(proto: "b"),
  ]

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      case 3: try { try decoder.decodeRepeatedFixed32Field(value: &this.b) }()
      case 2, 4:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_TestMixedFieldsAndExtensions.this, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 2, end: 3)
    if !this.b.isEmpty {
      try visitor.visitRepeatedFixed32Field(value: this.b, fieldNumber: 3)
    }
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 4, end: 5)
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestMixedFieldsAndExtensions, rhs: ProtobufUnittest_TestMixedFieldsAndExtensions) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs.b != rhs.b {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_TestGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    16: .same(proto: "optionalgroup"),
    16: .unique(proto: "OptionalGroup", json: "optionalgroup"),
    22: .standard(proto: "optional_foreign_enum"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 16: try { try decoder.decodeSingularGroupField(value: &this._optionalGroup) }()
      case 22: try { try decoder.decodeSingularEnumField(value: &this._optionalForeignEnum) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalGroup {
      try visitor.visitSingularGroupField(value: v, fieldNumber: 16)
    } }()
    try { if immutable v = this._optionalForeignEnum {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 22)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestGroup, rhs: ProtobufUnittest_TestGroup) -> Boolean {
    if lhs._optionalGroup != rhs._optionalGroup {return false}
    if lhs._optionalForeignEnum != rhs._optionalForeignEnum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestGroup.OptionalGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestGroup.protoMessageName + ".OptionalGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    17: .same(proto: "a"),
    89: .same(proto: "zz"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 17: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      case 89: try { try decoder.decodeSingularInt32Field(value: &this._zz) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
    } }()
    try { if immutable v = this._zz {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 89)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestGroup.OptionalGroup, rhs: ProtobufUnittest_TestGroup.OptionalGroup) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs._zz != rhs._zz {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestGroupExtension: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestGroupExtension"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      if (1 <= fieldNumber && fieldNumber < 536870912) {
        try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_TestGroupExtension.this, fieldNumber: fieldNumber)
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 1, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestGroupExtension, rhs: ProtobufUnittest_TestGroupExtension) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_TestNestedExtension: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestNestedExtension"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != Nothing {}
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestNestedExtension, rhs: ProtobufUnittest_TestNestedExtension) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestNestedExtension.OptionalGroup_extension: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestNestedExtension.protoMessageName + ".OptionalGroup_extension"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    17: .same(proto: "a"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 17: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestNestedExtension.OptionalGroup_extension, rhs: ProtobufUnittest_TestNestedExtension.OptionalGroup_extension) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestChildExtension: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestChildExtension"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "b"),
    3: .standard(proto: "optional_extension"),
  ]

  public var isInitialized: Boolean {
    if immutable v = this._optionalExtension, !v.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &this._a) }()
      case 2: try { try decoder.decodeSingularStringField(value: &this._b) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &this._optionalExtension) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._b {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if immutable v = this._optionalExtension {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestChildExtension, rhs: ProtobufUnittest_TestChildExtension) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs._b != rhs._b {return false}
    if lhs._optionalExtension != rhs._optionalExtension {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestChildExtensionData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestChildExtensionData"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "b"),
    3: .standard(proto: "optional_extension"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &this._a) }()
      case 2: try { try decoder.decodeSingularStringField(value: &this._b) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &this._optionalExtension) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._b {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if immutable v = this._optionalExtension {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestChildExtensionData, rhs: ProtobufUnittest_TestChildExtensionData) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs._b != rhs._b {return false}
    if lhs._optionalExtension != rhs._optionalExtension {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestChildExtensionData.NestedTestAllExtensionsData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestChildExtensionData.protoMessageName + ".NestedTestAllExtensionsData"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    409707008: .same(proto: "dynamic"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 409707008: try { try decoder.decodeSingularMessageField(value: &this._dynamic) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._dynamic {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 409707008)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestChildExtensionData.NestedTestAllExtensionsData, rhs: ProtobufUnittest_TestChildExtensionData.NestedTestAllExtensionsData) -> Boolean {
    if lhs._dynamic != rhs._dynamic {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestChildExtensionData.NestedTestAllExtensionsData.protoMessageName + ".NestedDynamicExtensions"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "b"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &this._b) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._b {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions, rhs: ProtobufUnittest_TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs._b != rhs._b {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestNestedChildExtension: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestNestedChildExtension"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "child"),
  ]

  public var isInitialized: Boolean {
    if immutable v = this._child, !v.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &this._child) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._child {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestNestedChildExtension, rhs: ProtobufUnittest_TestNestedChildExtension) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs._child != rhs._child {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestNestedChildExtensionData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestNestedChildExtensionData"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "child"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &this._child) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._child {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestNestedChildExtensionData, rhs: ProtobufUnittest_TestNestedChildExtensionData) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs._child != rhs._child {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestRequiredEnum: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestRequiredEnum"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "required_enum"),
    2: .same(proto: "a"),
  ]

  public var isInitialized: Boolean {
    if this._requiredEnum == Nothing {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &this._requiredEnum) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._requiredEnum {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestRequiredEnum, rhs: ProtobufUnittest_TestRequiredEnum) -> Boolean {
    if lhs._requiredEnum != rhs._requiredEnum {return false}
    if lhs._a != rhs._a {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestRequiredEnumNoMask: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestRequiredEnumNoMask"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "required_enum"),
    2: .same(proto: "a"),
  ]

  public var isInitialized: Boolean {
    if this._requiredEnum == Nothing {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &this._requiredEnum) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._requiredEnum {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestRequiredEnumNoMask, rhs: ProtobufUnittest_TestRequiredEnumNoMask) -> Boolean {
    if lhs._requiredEnum != rhs._requiredEnum {return false}
    if lhs._a != rhs._a {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestRequiredEnumNoMask.NestedEnum: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    -1: .same(proto: "BAZ"),
    0: .same(proto: "UNSPECIFIED"),
    2: .same(proto: "FOO"),
    100: .same(proto: "BAR"),
  ]
}

extension ProtobufUnittest_TestRequiredEnumMulti: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestRequiredEnumMulti"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .standard(proto: "required_enum_4"),
    3: .standard(proto: "a_3"),
    2: .standard(proto: "required_enum_2"),
    1: .standard(proto: "required_enum_1"),
  ]

  public var isInitialized: Boolean {
    if this._requiredEnum4 == Nothing {return false}
    if this._requiredEnum2 == Nothing {return false}
    if this._requiredEnum1 == Nothing {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &this._requiredEnum1) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &this._requiredEnum2) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &this._a3) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &this._requiredEnum4) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._requiredEnum1 {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._requiredEnum2 {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try { if immutable v = this._a3 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if immutable v = this._requiredEnum4 {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestRequiredEnumMulti, rhs: ProtobufUnittest_TestRequiredEnumMulti) -> Boolean {
    if lhs._requiredEnum4 != rhs._requiredEnum4 {return false}
    if lhs._a3 != rhs._a3 {return false}
    if lhs._requiredEnum2 != rhs._requiredEnum2 {return false}
    if lhs._requiredEnum1 != rhs._requiredEnum1 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestRequiredEnumMulti.NestedEnum: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED"),
    1: .same(proto: "FOO"),
    2: .same(proto: "BAR"),
    100: .same(proto: "BAZ"),
  ]
}

extension ProtobufUnittest_TestRequiredNoMaskMulti: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestRequiredNoMaskMulti"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    80: .standard(proto: "required_fixed32_80"),
    70: .standard(proto: "required_fixed32_70"),
    64: .standard(proto: "required_enum_64"),
    4: .standard(proto: "required_enum_4"),
    3: .standard(proto: "a_3"),
    2: .standard(proto: "required_enum_2"),
    1: .standard(proto: "required_enum_1"),
  ]

  public var isInitialized: Boolean {
    if this._requiredFixed3280 == Nothing {return false}
    if this._requiredFixed3270 == Nothing {return false}
    if this._requiredEnum64 == Nothing {return false}
    if this._requiredEnum4 == Nothing {return false}
    if this._requiredEnum2 == Nothing {return false}
    if this._requiredEnum1 == Nothing {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &this._requiredEnum1) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &this._requiredEnum2) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &this._a3) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &this._requiredEnum4) }()
      case 64: try { try decoder.decodeSingularEnumField(value: &this._requiredEnum64) }()
      case 70: try { try decoder.decodeSingularFixed32Field(value: &this._requiredFixed3270) }()
      case 80: try { try decoder.decodeSingularFixed32Field(value: &this._requiredFixed3280) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._requiredEnum1 {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._requiredEnum2 {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try { if immutable v = this._a3 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if immutable v = this._requiredEnum4 {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    } }()
    try { if immutable v = this._requiredEnum64 {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 64)
    } }()
    try { if immutable v = this._requiredFixed3270 {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 70)
    } }()
    try { if immutable v = this._requiredFixed3280 {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 80)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestRequiredNoMaskMulti, rhs: ProtobufUnittest_TestRequiredNoMaskMulti) -> Boolean {
    if lhs._requiredFixed3280 != rhs._requiredFixed3280 {return false}
    if lhs._requiredFixed3270 != rhs._requiredFixed3270 {return false}
    if lhs._requiredEnum64 != rhs._requiredEnum64 {return false}
    if lhs._requiredEnum4 != rhs._requiredEnum4 {return false}
    if lhs._a3 != rhs._a3 {return false}
    if lhs._requiredEnum2 != rhs._requiredEnum2 {return false}
    if lhs._requiredEnum1 != rhs._requiredEnum1 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestRequiredNoMaskMulti.NestedEnum: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED"),
    1: .same(proto: "FOO"),
    2: .same(proto: "BAR"),
    100: .same(proto: "BAZ"),
  ]
}

extension ProtobufUnittest_TestRequired: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestRequired"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "dummy2"),
    3: .same(proto: "b"),
    4: .same(proto: "dummy4"),
    5: .same(proto: "dummy5"),
    6: .same(proto: "dummy6"),
    7: .same(proto: "dummy7"),
    8: .same(proto: "dummy8"),
    9: .same(proto: "dummy9"),
    10: .same(proto: "dummy10"),
    11: .same(proto: "dummy11"),
    12: .same(proto: "dummy12"),
    13: .same(proto: "dummy13"),
    14: .same(proto: "dummy14"),
    15: .same(proto: "dummy15"),
    16: .same(proto: "dummy16"),
    17: .same(proto: "dummy17"),
    18: .same(proto: "dummy18"),
    19: .same(proto: "dummy19"),
    20: .same(proto: "dummy20"),
    21: .same(proto: "dummy21"),
    22: .same(proto: "dummy22"),
    23: .same(proto: "dummy23"),
    24: .same(proto: "dummy24"),
    25: .same(proto: "dummy25"),
    26: .same(proto: "dummy26"),
    27: .same(proto: "dummy27"),
    28: .same(proto: "dummy28"),
    29: .same(proto: "dummy29"),
    30: .same(proto: "dummy30"),
    31: .same(proto: "dummy31"),
    32: .same(proto: "dummy32"),
    33: .same(proto: "c"),
    34: .standard(proto: "optional_foreign"),
  ]

  fileprivate class _StorageClass {
    var _a: Int32? = Nothing
    var _dummy2: Int32? = Nothing
    var _b: Int32? = Nothing
    var _dummy4: Int32? = Nothing
    var _dummy5: Int32? = Nothing
    var _dummy6: Int32? = Nothing
    var _dummy7: Int32? = Nothing
    var _dummy8: Int32? = Nothing
    var _dummy9: Int32? = Nothing
    var _dummy10: Int32? = Nothing
    var _dummy11: Int32? = Nothing
    var _dummy12: Int32? = Nothing
    var _dummy13: Int32? = Nothing
    var _dummy14: Int32? = Nothing
    var _dummy15: Int32? = Nothing
    var _dummy16: Int32? = Nothing
    var _dummy17: Int32? = Nothing
    var _dummy18: Int32? = Nothing
    var _dummy19: Int32? = Nothing
    var _dummy20: Int32? = Nothing
    var _dummy21: Int32? = Nothing
    var _dummy22: Int32? = Nothing
    var _dummy23: Int32? = Nothing
    var _dummy24: Int32? = Nothing
    var _dummy25: Int32? = Nothing
    var _dummy26: Int32? = Nothing
    var _dummy27: Int32? = Nothing
    var _dummy28: Int32? = Nothing
    var _dummy29: Int32? = Nothing
    var _dummy30: Int32? = Nothing
    var _dummy31: Int32? = Nothing
    var _dummy32: Int32? = Nothing
    var _c: Int32? = Nothing
    var _optionalForeign: ProtobufUnittest_ForeignMessage? = Nothing

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _a = source._a
      _dummy2 = source._dummy2
      _b = source._b
      _dummy4 = source._dummy4
      _dummy5 = source._dummy5
      _dummy6 = source._dummy6
      _dummy7 = source._dummy7
      _dummy8 = source._dummy8
      _dummy9 = source._dummy9
      _dummy10 = source._dummy10
      _dummy11 = source._dummy11
      _dummy12 = source._dummy12
      _dummy13 = source._dummy13
      _dummy14 = source._dummy14
      _dummy15 = source._dummy15
      _dummy16 = source._dummy16
      _dummy17 = source._dummy17
      _dummy18 = source._dummy18
      _dummy19 = source._dummy19
      _dummy20 = source._dummy20
      _dummy21 = source._dummy21
      _dummy22 = source._dummy22
      _dummy23 = source._dummy23
      _dummy24 = source._dummy24
      _dummy25 = source._dummy25
      _dummy26 = source._dummy26
      _dummy27 = source._dummy27
      _dummy28 = source._dummy28
      _dummy29 = source._dummy29
      _dummy30 = source._dummy30
      _dummy31 = source._dummy31
      _dummy32 = source._dummy32
      _c = source._c
      _optionalForeign = source._optionalForeign
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Boolean {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._a == Nothing {return false}
      if _storage._b == Nothing {return false}
      if _storage._c == Nothing {return false}
      return true
    }
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._a) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy2) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._b) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy4) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy5) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy6) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy7) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy8) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy9) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy10) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy11) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy12) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy13) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy14) }()
        case 15: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy15) }()
        case 16: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy16) }()
        case 17: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy17) }()
        case 18: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy18) }()
        case 19: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy19) }()
        case 20: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy20) }()
        case 21: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy21) }()
        case 22: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy22) }()
        case 23: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy23) }()
        case 24: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy24) }()
        case 25: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy25) }()
        case 26: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy26) }()
        case 27: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy27) }()
        case 28: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy28) }()
        case 29: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy29) }()
        case 30: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy30) }()
        case 31: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy31) }()
        case 32: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy32) }()
        case 33: try { try decoder.decodeSingularInt32Field(value: &_storage._c) }()
        case 34: try { try decoder.decodeSingularMessageField(value: &_storage._optionalForeign) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._a {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      } }()
      try { if immutable v = _storage._dummy2 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      } }()
      try { if immutable v = _storage._b {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      } }()
      try { if immutable v = _storage._dummy4 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      } }()
      try { if immutable v = _storage._dummy5 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
      } }()
      try { if immutable v = _storage._dummy6 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
      } }()
      try { if immutable v = _storage._dummy7 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
      } }()
      try { if immutable v = _storage._dummy8 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
      } }()
      try { if immutable v = _storage._dummy9 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
      } }()
      try { if immutable v = _storage._dummy10 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
      } }()
      try { if immutable v = _storage._dummy11 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
      } }()
      try { if immutable v = _storage._dummy12 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
      } }()
      try { if immutable v = _storage._dummy13 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
      } }()
      try { if immutable v = _storage._dummy14 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 14)
      } }()
      try { if immutable v = _storage._dummy15 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 15)
      } }()
      try { if immutable v = _storage._dummy16 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 16)
      } }()
      try { if immutable v = _storage._dummy17 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
      } }()
      try { if immutable v = _storage._dummy18 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 18)
      } }()
      try { if immutable v = _storage._dummy19 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 19)
      } }()
      try { if immutable v = _storage._dummy20 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 20)
      } }()
      try { if immutable v = _storage._dummy21 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 21)
      } }()
      try { if immutable v = _storage._dummy22 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 22)
      } }()
      try { if immutable v = _storage._dummy23 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 23)
      } }()
      try { if immutable v = _storage._dummy24 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 24)
      } }()
      try { if immutable v = _storage._dummy25 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 25)
      } }()
      try { if immutable v = _storage._dummy26 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 26)
      } }()
      try { if immutable v = _storage._dummy27 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 27)
      } }()
      try { if immutable v = _storage._dummy28 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 28)
      } }()
      try { if immutable v = _storage._dummy29 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 29)
      } }()
      try { if immutable v = _storage._dummy30 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 30)
      } }()
      try { if immutable v = _storage._dummy31 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 31)
      } }()
      try { if immutable v = _storage._dummy32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 32)
      } }()
      try { if immutable v = _storage._c {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 33)
      } }()
      try { if immutable v = _storage._optionalForeign {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 34)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestRequired, rhs: ProtobufUnittest_TestRequired) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._a != rhs_storage._a {return false}
        if _storage._dummy2 != rhs_storage._dummy2 {return false}
        if _storage._b != rhs_storage._b {return false}
        if _storage._dummy4 != rhs_storage._dummy4 {return false}
        if _storage._dummy5 != rhs_storage._dummy5 {return false}
        if _storage._dummy6 != rhs_storage._dummy6 {return false}
        if _storage._dummy7 != rhs_storage._dummy7 {return false}
        if _storage._dummy8 != rhs_storage._dummy8 {return false}
        if _storage._dummy9 != rhs_storage._dummy9 {return false}
        if _storage._dummy10 != rhs_storage._dummy10 {return false}
        if _storage._dummy11 != rhs_storage._dummy11 {return false}
        if _storage._dummy12 != rhs_storage._dummy12 {return false}
        if _storage._dummy13 != rhs_storage._dummy13 {return false}
        if _storage._dummy14 != rhs_storage._dummy14 {return false}
        if _storage._dummy15 != rhs_storage._dummy15 {return false}
        if _storage._dummy16 != rhs_storage._dummy16 {return false}
        if _storage._dummy17 != rhs_storage._dummy17 {return false}
        if _storage._dummy18 != rhs_storage._dummy18 {return false}
        if _storage._dummy19 != rhs_storage._dummy19 {return false}
        if _storage._dummy20 != rhs_storage._dummy20 {return false}
        if _storage._dummy21 != rhs_storage._dummy21 {return false}
        if _storage._dummy22 != rhs_storage._dummy22 {return false}
        if _storage._dummy23 != rhs_storage._dummy23 {return false}
        if _storage._dummy24 != rhs_storage._dummy24 {return false}
        if _storage._dummy25 != rhs_storage._dummy25 {return false}
        if _storage._dummy26 != rhs_storage._dummy26 {return false}
        if _storage._dummy27 != rhs_storage._dummy27 {return false}
        if _storage._dummy28 != rhs_storage._dummy28 {return false}
        if _storage._dummy29 != rhs_storage._dummy29 {return false}
        if _storage._dummy30 != rhs_storage._dummy30 {return false}
        if _storage._dummy31 != rhs_storage._dummy31 {return false}
        if _storage._dummy32 != rhs_storage._dummy32 {return false}
        if _storage._c != rhs_storage._c {return false}
        if _storage._optionalForeign != rhs_storage._optionalForeign {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestRequiredForeign: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestRequiredForeign"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_message"),
    2: .standard(proto: "repeated_message"),
    3: .same(proto: "dummy"),
    4: .standard(proto: "optional_lazy_message"),
  ]

  public var isInitialized: Boolean {
    if immutable v = this._optionalMessage, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(this.repeatedMessage) {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &this._optionalMessage) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &this.repeatedMessage) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &this._dummy) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &this._optionalLazyMessage) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !this.repeatedMessage.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.repeatedMessage, fieldNumber: 2)
    }
    try { if immutable v = this._dummy {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if immutable v = this._optionalLazyMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestRequiredForeign, rhs: ProtobufUnittest_TestRequiredForeign) -> Boolean {
    if lhs._optionalMessage != rhs._optionalMessage {return false}
    if lhs.repeatedMessage != rhs.repeatedMessage {return false}
    if lhs._dummy != rhs._dummy {return false}
    if lhs._optionalLazyMessage != rhs._optionalLazyMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestRequiredMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestRequiredMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_message"),
    2: .standard(proto: "repeated_message"),
    3: .standard(proto: "required_message"),
  ]

  public var isInitialized: Boolean {
    if this._requiredMessage == Nothing {return false}
    if immutable v = this._optionalMessage, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(this.repeatedMessage) {return false}
    if immutable v = this._requiredMessage, !v.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &this._optionalMessage) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &this.repeatedMessage) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &this._requiredMessage) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !this.repeatedMessage.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.repeatedMessage, fieldNumber: 2)
    }
    try { if immutable v = this._requiredMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestRequiredMessage, rhs: ProtobufUnittest_TestRequiredMessage) -> Boolean {
    if lhs._optionalMessage != rhs._optionalMessage {return false}
    if lhs.repeatedMessage != rhs.repeatedMessage {return false}
    if lhs._requiredMessage != rhs._requiredMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestNestedRequiredForeign: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestNestedRequiredForeign"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "child"),
    2: .same(proto: "payload"),
    3: .same(proto: "dummy"),
    5: .standard(proto: "required_enum"),
    6: .standard(proto: "required_enum_no_mask"),
    7: .standard(proto: "required_enum_multi"),
    9: .standard(proto: "required_no_mask"),
  ]

  fileprivate class _StorageClass {
    var _child: ProtobufUnittest_TestNestedRequiredForeign? = Nothing
    var _payload: ProtobufUnittest_TestRequiredForeign? = Nothing
    var _dummy: Int32? = Nothing
    var _requiredEnum: ProtobufUnittest_TestRequiredEnum? = Nothing
    var _requiredEnumNoMask: ProtobufUnittest_TestRequiredEnumNoMask? = Nothing
    var _requiredEnumMulti: ProtobufUnittest_TestRequiredEnumMulti? = Nothing
    var _requiredNoMask: ProtobufUnittest_TestRequiredNoMaskMulti? = Nothing

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _child = source._child
      _payload = source._payload
      _dummy = source._dummy
      _requiredEnum = source._requiredEnum
      _requiredEnumNoMask = source._requiredEnumNoMask
      _requiredEnumMulti = source._requiredEnumMulti
      _requiredNoMask = source._requiredNoMask
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Boolean {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if immutable v = _storage._child, !v.isInitialized {return false}
      if immutable v = _storage._payload, !v.isInitialized {return false}
      if immutable v = _storage._requiredEnum, !v.isInitialized {return false}
      if immutable v = _storage._requiredEnumNoMask, !v.isInitialized {return false}
      if immutable v = _storage._requiredEnumMulti, !v.isInitialized {return false}
      if immutable v = _storage._requiredNoMask, !v.isInitialized {return false}
      return true
    }
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._child) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._payload) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._dummy) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._requiredEnum) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._requiredEnumNoMask) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._requiredEnumMulti) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._requiredNoMask) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._child {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if immutable v = _storage._payload {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if immutable v = _storage._dummy {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      } }()
      try { if immutable v = _storage._requiredEnum {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if immutable v = _storage._requiredEnumNoMask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if immutable v = _storage._requiredEnumMulti {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if immutable v = _storage._requiredNoMask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestNestedRequiredForeign, rhs: ProtobufUnittest_TestNestedRequiredForeign) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._child != rhs_storage._child {return false}
        if _storage._payload != rhs_storage._payload {return false}
        if _storage._dummy != rhs_storage._dummy {return false}
        if _storage._requiredEnum != rhs_storage._requiredEnum {return false}
        if _storage._requiredEnumNoMask != rhs_storage._requiredEnumNoMask {return false}
        if _storage._requiredEnumMulti != rhs_storage._requiredEnumMulti {return false}
        if _storage._requiredNoMask != rhs_storage._requiredNoMask {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestForeignNested: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestForeignNested"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "foreign_nested"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &this._foreignNested) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._foreignNested {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestForeignNested, rhs: ProtobufUnittest_TestForeignNested) -> Boolean {
    if lhs._foreignNested != rhs._foreignNested {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestEmptyMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestEmptyMessage"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != Nothing {}
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestEmptyMessage, rhs: ProtobufUnittest_TestEmptyMessage) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestEmptyMessageWithExtensions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestEmptyMessageWithExtensions"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      if (1 <= fieldNumber && fieldNumber < 536870912) {
        try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_TestEmptyMessageWithExtensions.this, fieldNumber: fieldNumber)
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 1, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestEmptyMessageWithExtensions, rhs: ProtobufUnittest_TestEmptyMessageWithExtensions) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_TestPickleNestedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestPickleNestedMessage"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != Nothing {}
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestPickleNestedMessage, rhs: ProtobufUnittest_TestPickleNestedMessage) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestPickleNestedMessage.NestedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestPickleNestedMessage.protoMessageName + ".NestedMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bb"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._bb) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._bb {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestPickleNestedMessage.NestedMessage, rhs: ProtobufUnittest_TestPickleNestedMessage.NestedMessage) -> Boolean {
    if lhs._bb != rhs._bb {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestPickleNestedMessage.NestedMessage.NestedNestedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestPickleNestedMessage.NestedMessage.protoMessageName + ".NestedNestedMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cc"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._cc) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._cc {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestPickleNestedMessage.NestedMessage.NestedNestedMessage, rhs: ProtobufUnittest_TestPickleNestedMessage.NestedMessage.NestedNestedMessage) -> Boolean {
    if lhs._cc != rhs._cc {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestMultipleExtensionRanges: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestMultipleExtensionRanges"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      if (42 == fieldNumber) || (4143 <= fieldNumber && fieldNumber < 4244) || (65536 <= fieldNumber && fieldNumber < 536870912) {
        try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_TestMultipleExtensionRanges.this, fieldNumber: fieldNumber)
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 42, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestMultipleExtensionRanges, rhs: ProtobufUnittest_TestMultipleExtensionRanges) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_TestReallyLargeTagNumber: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestReallyLargeTagNumber"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    268435455: .same(proto: "bb"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      case 268435455: try { try decoder.decodeSingularInt32Field(value: &this._bb) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._bb {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 268435455)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestReallyLargeTagNumber, rhs: ProtobufUnittest_TestReallyLargeTagNumber) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs._bb != rhs._bb {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestRecursiveMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestRecursiveMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "i"),
  ]

  fileprivate class _StorageClass {
    var _a: ProtobufUnittest_TestRecursiveMessage? = Nothing
    var _i: Int32? = Nothing

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _a = source._a
      _i = source._i
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._a) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._i) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._a {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if immutable v = _storage._i {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestRecursiveMessage, rhs: ProtobufUnittest_TestRecursiveMessage) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._a != rhs_storage._a {return false}
        if _storage._i != rhs_storage._i {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestMutualRecursionA: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestMutualRecursionA"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bb"),
    2: .same(proto: "subgroup"),
    2: .unique(proto: "SubGroup", json: "subgroup"),
    5: .same(proto: "subgroupr"),
    5: .unique(proto: "SubGroupR", json: "subgroupr"),
  ]

  fileprivate class _StorageClass {
    var _bb: ProtobufUnittest_TestMutualRecursionB? = Nothing
    var _subGroup: ProtobufUnittest_TestMutualRecursionA.SubGroup? = Nothing
    var _subGroupR: [ProtobufUnittest_TestMutualRecursionA.SubGroupR] = []

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _bb = source._bb
      _subGroup = source._subGroup
      _subGroupR = source._subGroupR
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._bb) }()
        case 2: try { try decoder.decodeSingularGroupField(value: &_storage._subGroup) }()
        case 5: try { try decoder.decodeRepeatedGroupField(value: &_storage._subGroupR) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._bb {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if immutable v = _storage._subGroup {
        try visitor.visitSingularGroupField(value: v, fieldNumber: 2)
      } }()
      if !_storage._subGroupR.isEmpty {
        try visitor.visitRepeatedGroupField(value: _storage._subGroupR, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestMutualRecursionA, rhs: ProtobufUnittest_TestMutualRecursionA) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._bb != rhs_storage._bb {return false}
        if _storage._subGroup != rhs_storage._subGroup {return false}
        if _storage._subGroupR != rhs_storage._subGroupR {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestMutualRecursionA.SubMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestMutualRecursionA.protoMessageName + ".SubMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "b"),
  ]

  fileprivate class _StorageClass {
    var _b: ProtobufUnittest_TestMutualRecursionB? = Nothing

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _b = source._b
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._b) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._b {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestMutualRecursionA.SubMessage, rhs: ProtobufUnittest_TestMutualRecursionA.SubMessage) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._b != rhs_storage._b {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestMutualRecursionA.SubGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestMutualRecursionA.protoMessageName + ".SubGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "sub_message"),
    4: .standard(proto: "not_in_this_scc"),
  ]

  fileprivate class _StorageClass {
    var _subMessage: ProtobufUnittest_TestMutualRecursionA.SubMessage? = Nothing
    var _notInThisScc: ProtobufUnittest_TestAllTypes? = Nothing

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _subMessage = source._subMessage
      _notInThisScc = source._notInThisScc
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._subMessage) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._notInThisScc) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._subMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if immutable v = _storage._notInThisScc {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestMutualRecursionA.SubGroup, rhs: ProtobufUnittest_TestMutualRecursionA.SubGroup) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._subMessage != rhs_storage._subMessage {return false}
        if _storage._notInThisScc != rhs_storage._notInThisScc {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestMutualRecursionA.SubGroupR: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestMutualRecursionA.protoMessageName + ".SubGroupR"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    6: .same(proto: "payload"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 6: try { try decoder.decodeSingularMessageField(value: &this._payload) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._payload {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestMutualRecursionA.SubGroupR, rhs: ProtobufUnittest_TestMutualRecursionA.SubGroupR) -> Boolean {
    if lhs._payload != rhs._payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestMutualRecursionB: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestMutualRecursionB"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .standard(proto: "optional_int32"),
  ]

  fileprivate class _StorageClass {
    var _a: ProtobufUnittest_TestMutualRecursionA? = Nothing
    var _optionalInt32: Int32? = Nothing

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _a = source._a
      _optionalInt32 = source._optionalInt32
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._a) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._optionalInt32) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._a {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if immutable v = _storage._optionalInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestMutualRecursionB, rhs: ProtobufUnittest_TestMutualRecursionB) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._a != rhs_storage._a {return false}
        if _storage._optionalInt32 != rhs_storage._optionalInt32 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestIsInitialized: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestIsInitialized"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sub_message"),
  ]

  public var isInitialized: Boolean {
    if immutable v = this._subMessage, !v.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &this._subMessage) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._subMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestIsInitialized, rhs: ProtobufUnittest_TestIsInitialized) -> Boolean {
    if lhs._subMessage != rhs._subMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestIsInitialized.SubMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestIsInitialized.protoMessageName + ".SubMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "subgroup"),
    1: .unique(proto: "SubGroup", json: "subgroup"),
  ]

  public var isInitialized: Boolean {
    if immutable v = this._subGroup, !v.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularGroupField(value: &this._subGroup) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._subGroup {
      try visitor.visitSingularGroupField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestIsInitialized.SubMessage, rhs: ProtobufUnittest_TestIsInitialized.SubMessage) -> Boolean {
    if lhs._subGroup != rhs._subGroup {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestIsInitialized.SubMessage.SubGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestIsInitialized.SubMessage.protoMessageName + ".SubGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "i"),
  ]

  public var isInitialized: Boolean {
    if this._i == Nothing {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularInt32Field(value: &this._i) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._i {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestIsInitialized.SubMessage.SubGroup, rhs: ProtobufUnittest_TestIsInitialized.SubMessage.SubGroup) -> Boolean {
    if lhs._i != rhs._i {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestDupFieldNumber: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestDupFieldNumber"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "foo"),
    2: .unique(proto: "Foo", json: "foo"),
    3: .same(proto: "bar"),
    3: .unique(proto: "Bar", json: "bar"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      case 2: try { try decoder.decodeSingularGroupField(value: &this._foo) }()
      case 3: try { try decoder.decodeSingularGroupField(value: &this._bar) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._foo {
      try visitor.visitSingularGroupField(value: v, fieldNumber: 2)
    } }()
    try { if immutable v = this._bar {
      try visitor.visitSingularGroupField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestDupFieldNumber, rhs: ProtobufUnittest_TestDupFieldNumber) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs._foo != rhs._foo {return false}
    if lhs._bar != rhs._bar {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestDupFieldNumber.Foo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestDupFieldNumber.protoMessageName + ".Foo"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestDupFieldNumber.Foo, rhs: ProtobufUnittest_TestDupFieldNumber.Foo) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestDupFieldNumber.Bar: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestDupFieldNumber.protoMessageName + ".Bar"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestDupFieldNumber.Bar, rhs: ProtobufUnittest_TestDupFieldNumber.Bar) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestEagerMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestEagerMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sub_message"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &this._subMessage) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._subMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestEagerMessage, rhs: ProtobufUnittest_TestEagerMessage) -> Boolean {
    if lhs._subMessage != rhs._subMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestLazyMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestLazyMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sub_message"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &this._subMessage) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._subMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestLazyMessage, rhs: ProtobufUnittest_TestLazyMessage) -> Boolean {
    if lhs._subMessage != rhs._subMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestLazyMessageRepeated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestLazyMessageRepeated"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "repeated_message"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &this.repeatedMessage) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.repeatedMessage.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.repeatedMessage, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestLazyMessageRepeated, rhs: ProtobufUnittest_TestLazyMessageRepeated) -> Boolean {
    if lhs.repeatedMessage != rhs.repeatedMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestEagerMaybeLazy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestEagerMaybeLazy"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "message_foo"),
    2: .standard(proto: "message_bar"),
    3: .standard(proto: "message_baz"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &this._messageFoo) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &this._messageBar) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &this._messageBaz) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._messageFoo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._messageBar {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if immutable v = this._messageBaz {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestEagerMaybeLazy, rhs: ProtobufUnittest_TestEagerMaybeLazy) -> Boolean {
    if lhs._messageFoo != rhs._messageFoo {return false}
    if lhs._messageBar != rhs._messageBar {return false}
    if lhs._messageBaz != rhs._messageBaz {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestEagerMaybeLazy.NestedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestEagerMaybeLazy.protoMessageName + ".NestedMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "packed"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &this._packed) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._packed {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestEagerMaybeLazy.NestedMessage, rhs: ProtobufUnittest_TestEagerMaybeLazy.NestedMessage) -> Boolean {
    if lhs._packed != rhs._packed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestNestedMessageHasBits: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestNestedMessageHasBits"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_nested_message"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &this._optionalNestedMessage) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalNestedMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestNestedMessageHasBits, rhs: ProtobufUnittest_TestNestedMessageHasBits) -> Boolean {
    if lhs._optionalNestedMessage != rhs._optionalNestedMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestNestedMessageHasBits.NestedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestNestedMessageHasBits.protoMessageName + ".NestedMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "nestedmessage_repeated_int32"),
    2: .standard(proto: "nestedmessage_repeated_foreignmessage"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedInt32Field(value: &this.nestedmessageRepeatedInt32) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &this.nestedmessageRepeatedForeignmessage) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.nestedmessageRepeatedInt32.isEmpty {
      try visitor.visitRepeatedInt32Field(value: this.nestedmessageRepeatedInt32, fieldNumber: 1)
    }
    if !this.nestedmessageRepeatedForeignmessage.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.nestedmessageRepeatedForeignmessage, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestNestedMessageHasBits.NestedMessage, rhs: ProtobufUnittest_TestNestedMessageHasBits.NestedMessage) -> Boolean {
    if lhs.nestedmessageRepeatedInt32 != rhs.nestedmessageRepeatedInt32 {return false}
    if lhs.nestedmessageRepeatedForeignmessage != rhs.nestedmessageRepeatedForeignmessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestCamelCaseFieldNames: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestCamelCaseFieldNames"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "PrimitiveField"),
    2: .same(proto: "StringField"),
    3: .same(proto: "EnumField"),
    4: .same(proto: "MessageField"),
    5: .same(proto: "StringPieceField"),
    6: .same(proto: "CordField"),
    7: .same(proto: "RepeatedPrimitiveField"),
    8: .same(proto: "RepeatedStringField"),
    9: .same(proto: "RepeatedEnumField"),
    10: .same(proto: "RepeatedMessageField"),
    11: .same(proto: "RepeatedStringPieceField"),
    12: .same(proto: "RepeatedCordField"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._primitiveField) }()
      case 2: try { try decoder.decodeSingularStringField(value: &this._stringField) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &this._enumField) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &this._messageField) }()
      case 5: try { try decoder.decodeSingularStringField(value: &this._stringPieceField) }()
      case 6: try { try decoder.decodeSingularStringField(value: &this._cordField) }()
      case 7: try { try decoder.decodeRepeatedInt32Field(value: &this.repeatedPrimitiveField) }()
      case 8: try { try decoder.decodeRepeatedStringField(value: &this.repeatedStringField) }()
      case 9: try { try decoder.decodeRepeatedEnumField(value: &this.repeatedEnumField) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &this.repeatedMessageField) }()
      case 11: try { try decoder.decodeRepeatedStringField(value: &this.repeatedStringPieceField) }()
      case 12: try { try decoder.decodeRepeatedStringField(value: &this.repeatedCordField) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._primitiveField {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._stringField {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if immutable v = this._enumField {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try { if immutable v = this._messageField {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if immutable v = this._stringPieceField {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if immutable v = this._cordField {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    if !this.repeatedPrimitiveField.isEmpty {
      try visitor.visitRepeatedInt32Field(value: this.repeatedPrimitiveField, fieldNumber: 7)
    }
    if !this.repeatedStringField.isEmpty {
      try visitor.visitRepeatedStringField(value: this.repeatedStringField, fieldNumber: 8)
    }
    if !this.repeatedEnumField.isEmpty {
      try visitor.visitRepeatedEnumField(value: this.repeatedEnumField, fieldNumber: 9)
    }
    if !this.repeatedMessageField.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.repeatedMessageField, fieldNumber: 10)
    }
    if !this.repeatedStringPieceField.isEmpty {
      try visitor.visitRepeatedStringField(value: this.repeatedStringPieceField, fieldNumber: 11)
    }
    if !this.repeatedCordField.isEmpty {
      try visitor.visitRepeatedStringField(value: this.repeatedCordField, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestCamelCaseFieldNames, rhs: ProtobufUnittest_TestCamelCaseFieldNames) -> Boolean {
    if lhs._primitiveField != rhs._primitiveField {return false}
    if lhs._stringField != rhs._stringField {return false}
    if lhs._enumField != rhs._enumField {return false}
    if lhs._messageField != rhs._messageField {return false}
    if lhs._stringPieceField != rhs._stringPieceField {return false}
    if lhs._cordField != rhs._cordField {return false}
    if lhs.repeatedPrimitiveField != rhs.repeatedPrimitiveField {return false}
    if lhs.repeatedStringField != rhs.repeatedStringField {return false}
    if lhs.repeatedEnumField != rhs.repeatedEnumField {return false}
    if lhs.repeatedMessageField != rhs.repeatedMessageField {return false}
    if lhs.repeatedStringPieceField != rhs.repeatedStringPieceField {return false}
    if lhs.repeatedCordField != rhs.repeatedCordField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestFieldOrderings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestFieldOrderings"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    11: .standard(proto: "my_string"),
    1: .standard(proto: "my_int"),
    101: .standard(proto: "my_float"),
    200: .standard(proto: "optional_nested_message"),
  ]

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &this._myInt) }()
      case 11: try { try decoder.decodeSingularStringField(value: &this._myString) }()
      case 101: try { try decoder.decodeSingularFloatField(value: &this._myFloat) }()
      case 200: try { try decoder.decodeSingularMessageField(value: &this._optionalNestedMessage) }()
      case 2..<11, 12..<101:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_TestFieldOrderings.this, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._myInt {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 2, end: 11)
    try { if immutable v = this._myString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 11)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 12, end: 101)
    try { if immutable v = this._myFloat {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 101)
    } }()
    try { if immutable v = this._optionalNestedMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 200)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestFieldOrderings, rhs: ProtobufUnittest_TestFieldOrderings) -> Boolean {
    if lhs._myString != rhs._myString {return false}
    if lhs._myInt != rhs._myInt {return false}
    if lhs._myFloat != rhs._myFloat {return false}
    if lhs._optionalNestedMessage != rhs._optionalNestedMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_TestFieldOrderings.NestedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestFieldOrderings.protoMessageName + ".NestedMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "oo"),
    1: .same(proto: "bb"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._bb) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &this._oo) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._bb {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._oo {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestFieldOrderings.NestedMessage, rhs: ProtobufUnittest_TestFieldOrderings.NestedMessage) -> Boolean {
    if lhs._oo != rhs._oo {return false}
    if lhs._bb != rhs._bb {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestExtensionOrderings1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestExtensionOrderings1"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "my_string"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &this._myString) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._myString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestExtensionOrderings1, rhs: ProtobufUnittest_TestExtensionOrderings1) -> Boolean {
    if lhs._myString != rhs._myString {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestExtensionOrderings2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestExtensionOrderings2"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "my_string"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &this._myString) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._myString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestExtensionOrderings2, rhs: ProtobufUnittest_TestExtensionOrderings2) -> Boolean {
    if lhs._myString != rhs._myString {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestExtensionOrderings2.TestExtensionOrderings3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestExtensionOrderings2.protoMessageName + ".TestExtensionOrderings3"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "my_string"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &this._myString) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._myString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestExtensionOrderings2.TestExtensionOrderings3, rhs: ProtobufUnittest_TestExtensionOrderings2.TestExtensionOrderings3) -> Boolean {
    if lhs._myString != rhs._myString {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestExtremeDefaultValues: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestExtremeDefaultValues"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "escaped_bytes"),
    2: .standard(proto: "large_uint32"),
    3: .standard(proto: "large_uint64"),
    4: .standard(proto: "small_int32"),
    5: .standard(proto: "small_int64"),
    21: .standard(proto: "really_small_int32"),
    22: .standard(proto: "really_small_int64"),
    6: .standard(proto: "utf8_string"),
    7: .standard(proto: "zero_float"),
    8: .standard(proto: "one_float"),
    9: .standard(proto: "small_float"),
    10: .standard(proto: "negative_one_float"),
    11: .standard(proto: "negative_float"),
    12: .standard(proto: "large_float"),
    13: .standard(proto: "small_negative_float"),
    14: .standard(proto: "inf_double"),
    15: .standard(proto: "neg_inf_double"),
    16: .standard(proto: "nan_double"),
    17: .standard(proto: "inf_float"),
    18: .standard(proto: "neg_inf_float"),
    19: .standard(proto: "nan_float"),
    20: .standard(proto: "cpp_trigraph"),
    23: .standard(proto: "string_with_zero"),
    24: .standard(proto: "bytes_with_zero"),
    25: .standard(proto: "string_piece_with_zero"),
    26: .standard(proto: "cord_with_zero"),
    27: .standard(proto: "replacement_string"),
  ]

  fileprivate class _StorageClass {
    var _escapedBytes: Data? = Nothing
    var _largeUint32: UInt32? = Nothing
    var _largeUint64: UInt64? = Nothing
    var _smallInt32: Int32? = Nothing
    var _smallInt64: Int64? = Nothing
    var _reallySmallInt32: Int32? = Nothing
    var _reallySmallInt64: Int64? = Nothing
    var _utf8String: String? = Nothing
    var _zeroFloat: Float? = Nothing
    var _oneFloat: Float? = Nothing
    var _smallFloat: Float? = Nothing
    var _negativeOneFloat: Float? = Nothing
    var _negativeFloat: Float? = Nothing
    var _largeFloat: Float? = Nothing
    var _smallNegativeFloat: Float? = Nothing
    var _infDouble: Double? = Nothing
    var _negInfDouble: Double? = Nothing
    var _nanDouble: Double? = Nothing
    var _infFloat: Float? = Nothing
    var _negInfFloat: Float? = Nothing
    var _nanFloat: Float? = Nothing
    var _cppTrigraph: String? = Nothing
    var _stringWithZero: String? = Nothing
    var _bytesWithZero: Data? = Nothing
    var _stringPieceWithZero: String? = Nothing
    var _cordWithZero: String? = Nothing
    var _replacementString: String? = Nothing

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _escapedBytes = source._escapedBytes
      _largeUint32 = source._largeUint32
      _largeUint64 = source._largeUint64
      _smallInt32 = source._smallInt32
      _smallInt64 = source._smallInt64
      _reallySmallInt32 = source._reallySmallInt32
      _reallySmallInt64 = source._reallySmallInt64
      _utf8String = source._utf8String
      _zeroFloat = source._zeroFloat
      _oneFloat = source._oneFloat
      _smallFloat = source._smallFloat
      _negativeOneFloat = source._negativeOneFloat
      _negativeFloat = source._negativeFloat
      _largeFloat = source._largeFloat
      _smallNegativeFloat = source._smallNegativeFloat
      _infDouble = source._infDouble
      _negInfDouble = source._negInfDouble
      _nanDouble = source._nanDouble
      _infFloat = source._infFloat
      _negInfFloat = source._negInfFloat
      _nanFloat = source._nanFloat
      _cppTrigraph = source._cppTrigraph
      _stringWithZero = source._stringWithZero
      _bytesWithZero = source._bytesWithZero
      _stringPieceWithZero = source._stringPieceWithZero
      _cordWithZero = source._cordWithZero
      _replacementString = source._replacementString
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBytesField(value: &_storage._escapedBytes) }()
        case 2: try { try decoder.decodeSingularUInt32Field(value: &_storage._largeUint32) }()
        case 3: try { try decoder.decodeSingularUInt64Field(value: &_storage._largeUint64) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._smallInt32) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._smallInt64) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._utf8String) }()
        case 7: try { try decoder.decodeSingularFloatField(value: &_storage._zeroFloat) }()
        case 8: try { try decoder.decodeSingularFloatField(value: &_storage._oneFloat) }()
        case 9: try { try decoder.decodeSingularFloatField(value: &_storage._smallFloat) }()
        case 10: try { try decoder.decodeSingularFloatField(value: &_storage._negativeOneFloat) }()
        case 11: try { try decoder.decodeSingularFloatField(value: &_storage._negativeFloat) }()
        case 12: try { try decoder.decodeSingularFloatField(value: &_storage._largeFloat) }()
        case 13: try { try decoder.decodeSingularFloatField(value: &_storage._smallNegativeFloat) }()
        case 14: try { try decoder.decodeSingularDoubleField(value: &_storage._infDouble) }()
        case 15: try { try decoder.decodeSingularDoubleField(value: &_storage._negInfDouble) }()
        case 16: try { try decoder.decodeSingularDoubleField(value: &_storage._nanDouble) }()
        case 17: try { try decoder.decodeSingularFloatField(value: &_storage._infFloat) }()
        case 18: try { try decoder.decodeSingularFloatField(value: &_storage._negInfFloat) }()
        case 19: try { try decoder.decodeSingularFloatField(value: &_storage._nanFloat) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._cppTrigraph) }()
        case 21: try { try decoder.decodeSingularInt32Field(value: &_storage._reallySmallInt32) }()
        case 22: try { try decoder.decodeSingularInt64Field(value: &_storage._reallySmallInt64) }()
        case 23: try { try decoder.decodeSingularStringField(value: &_storage._stringWithZero) }()
        case 24: try { try decoder.decodeSingularBytesField(value: &_storage._bytesWithZero) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._stringPieceWithZero) }()
        case 26: try { try decoder.decodeSingularStringField(value: &_storage._cordWithZero) }()
        case 27: try { try decoder.decodeSingularStringField(value: &_storage._replacementString) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._escapedBytes {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
      } }()
      try { if immutable v = _storage._largeUint32 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
      } }()
      try { if immutable v = _storage._largeUint64 {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      } }()
      try { if immutable v = _storage._smallInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      } }()
      try { if immutable v = _storage._smallInt64 {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
      } }()
      try { if immutable v = _storage._utf8String {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      } }()
      try { if immutable v = _storage._zeroFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 7)
      } }()
      try { if immutable v = _storage._oneFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 8)
      } }()
      try { if immutable v = _storage._smallFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 9)
      } }()
      try { if immutable v = _storage._negativeOneFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 10)
      } }()
      try { if immutable v = _storage._negativeFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 11)
      } }()
      try { if immutable v = _storage._largeFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 12)
      } }()
      try { if immutable v = _storage._smallNegativeFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 13)
      } }()
      try { if immutable v = _storage._infDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 14)
      } }()
      try { if immutable v = _storage._negInfDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 15)
      } }()
      try { if immutable v = _storage._nanDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 16)
      } }()
      try { if immutable v = _storage._infFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 17)
      } }()
      try { if immutable v = _storage._negInfFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 18)
      } }()
      try { if immutable v = _storage._nanFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 19)
      } }()
      try { if immutable v = _storage._cppTrigraph {
        try visitor.visitSingularStringField(value: v, fieldNumber: 20)
      } }()
      try { if immutable v = _storage._reallySmallInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 21)
      } }()
      try { if immutable v = _storage._reallySmallInt64 {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 22)
      } }()
      try { if immutable v = _storage._stringWithZero {
        try visitor.visitSingularStringField(value: v, fieldNumber: 23)
      } }()
      try { if immutable v = _storage._bytesWithZero {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 24)
      } }()
      try { if immutable v = _storage._stringPieceWithZero {
        try visitor.visitSingularStringField(value: v, fieldNumber: 25)
      } }()
      try { if immutable v = _storage._cordWithZero {
        try visitor.visitSingularStringField(value: v, fieldNumber: 26)
      } }()
      try { if immutable v = _storage._replacementString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 27)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestExtremeDefaultValues, rhs: ProtobufUnittest_TestExtremeDefaultValues) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._escapedBytes != rhs_storage._escapedBytes {return false}
        if _storage._largeUint32 != rhs_storage._largeUint32 {return false}
        if _storage._largeUint64 != rhs_storage._largeUint64 {return false}
        if _storage._smallInt32 != rhs_storage._smallInt32 {return false}
        if _storage._smallInt64 != rhs_storage._smallInt64 {return false}
        if _storage._reallySmallInt32 != rhs_storage._reallySmallInt32 {return false}
        if _storage._reallySmallInt64 != rhs_storage._reallySmallInt64 {return false}
        if _storage._utf8String != rhs_storage._utf8String {return false}
        if _storage._zeroFloat != rhs_storage._zeroFloat {return false}
        if _storage._oneFloat != rhs_storage._oneFloat {return false}
        if _storage._smallFloat != rhs_storage._smallFloat {return false}
        if _storage._negativeOneFloat != rhs_storage._negativeOneFloat {return false}
        if _storage._negativeFloat != rhs_storage._negativeFloat {return false}
        if _storage._largeFloat != rhs_storage._largeFloat {return false}
        if _storage._smallNegativeFloat != rhs_storage._smallNegativeFloat {return false}
        if _storage._infDouble != rhs_storage._infDouble {return false}
        if _storage._negInfDouble != rhs_storage._negInfDouble {return false}
        if _storage._nanDouble != rhs_storage._nanDouble {return false}
        if _storage._infFloat != rhs_storage._infFloat {return false}
        if _storage._negInfFloat != rhs_storage._negInfFloat {return false}
        if _storage._nanFloat != rhs_storage._nanFloat {return false}
        if _storage._cppTrigraph != rhs_storage._cppTrigraph {return false}
        if _storage._stringWithZero != rhs_storage._stringWithZero {return false}
        if _storage._bytesWithZero != rhs_storage._bytesWithZero {return false}
        if _storage._stringPieceWithZero != rhs_storage._stringPieceWithZero {return false}
        if _storage._cordWithZero != rhs_storage._cordWithZero {return false}
        if _storage._replacementString != rhs_storage._replacementString {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_SparseEnumMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".SparseEnumMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sparse_enum"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &this._sparseEnum) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._sparseEnum {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_SparseEnumMessage, rhs: ProtobufUnittest_SparseEnumMessage) -> Boolean {
    if lhs._sparseEnum != rhs._sparseEnum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_OneString: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".OneString"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &this._data) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._data {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_OneString, rhs: ProtobufUnittest_OneString) -> Boolean {
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_MoreString: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".MoreString"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &this.data) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.data.isEmpty {
      try visitor.visitRepeatedStringField(value: this.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_MoreString, rhs: ProtobufUnittest_MoreString) -> Boolean {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_OneBytes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".OneBytes"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &this._data) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._data {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_OneBytes, rhs: ProtobufUnittest_OneBytes) -> Boolean {
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_MoreBytes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".MoreBytes"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedBytesField(value: &this.data) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.data.isEmpty {
      try visitor.visitRepeatedBytesField(value: this.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_MoreBytes, rhs: ProtobufUnittest_MoreBytes) -> Boolean {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_ManyOptionalString: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".ManyOptionalString"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "str1"),
    2: .same(proto: "str2"),
    3: .same(proto: "str3"),
    4: .same(proto: "str4"),
    5: .same(proto: "str5"),
    6: .same(proto: "str6"),
    7: .same(proto: "str7"),
    8: .same(proto: "str8"),
    9: .same(proto: "str9"),
    10: .same(proto: "str10"),
    11: .same(proto: "str11"),
    12: .same(proto: "str12"),
    13: .same(proto: "str13"),
    14: .same(proto: "str14"),
    15: .same(proto: "str15"),
    16: .same(proto: "str16"),
    17: .same(proto: "str17"),
    18: .same(proto: "str18"),
    19: .same(proto: "str19"),
    20: .same(proto: "str20"),
    21: .same(proto: "str21"),
    22: .same(proto: "str22"),
    23: .same(proto: "str23"),
    24: .same(proto: "str24"),
    25: .same(proto: "str25"),
    26: .same(proto: "str26"),
    27: .same(proto: "str27"),
    28: .same(proto: "str28"),
    29: .same(proto: "str29"),
    30: .same(proto: "str30"),
    31: .same(proto: "str31"),
    32: .same(proto: "str32"),
  ]

  fileprivate class _StorageClass {
    var _str1: String? = Nothing
    var _str2: String? = Nothing
    var _str3: String? = Nothing
    var _str4: String? = Nothing
    var _str5: String? = Nothing
    var _str6: String? = Nothing
    var _str7: String? = Nothing
    var _str8: String? = Nothing
    var _str9: String? = Nothing
    var _str10: String? = Nothing
    var _str11: String? = Nothing
    var _str12: String? = Nothing
    var _str13: String? = Nothing
    var _str14: String? = Nothing
    var _str15: String? = Nothing
    var _str16: String? = Nothing
    var _str17: String? = Nothing
    var _str18: String? = Nothing
    var _str19: String? = Nothing
    var _str20: String? = Nothing
    var _str21: String? = Nothing
    var _str22: String? = Nothing
    var _str23: String? = Nothing
    var _str24: String? = Nothing
    var _str25: String? = Nothing
    var _str26: String? = Nothing
    var _str27: String? = Nothing
    var _str28: String? = Nothing
    var _str29: String? = Nothing
    var _str30: String? = Nothing
    var _str31: String? = Nothing
    var _str32: String? = Nothing

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _str1 = source._str1
      _str2 = source._str2
      _str3 = source._str3
      _str4 = source._str4
      _str5 = source._str5
      _str6 = source._str6
      _str7 = source._str7
      _str8 = source._str8
      _str9 = source._str9
      _str10 = source._str10
      _str11 = source._str11
      _str12 = source._str12
      _str13 = source._str13
      _str14 = source._str14
      _str15 = source._str15
      _str16 = source._str16
      _str17 = source._str17
      _str18 = source._str18
      _str19 = source._str19
      _str20 = source._str20
      _str21 = source._str21
      _str22 = source._str22
      _str23 = source._str23
      _str24 = source._str24
      _str25 = source._str25
      _str26 = source._str26
      _str27 = source._str27
      _str28 = source._str28
      _str29 = source._str29
      _str30 = source._str30
      _str31 = source._str31
      _str32 = source._str32
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._str1) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._str2) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._str3) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._str4) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._str5) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._str6) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._str7) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._str8) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._str9) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._str10) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._str11) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._str12) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._str13) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._str14) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._str15) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._str16) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._str17) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._str18) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._str19) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._str20) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._str21) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._str22) }()
        case 23: try { try decoder.decodeSingularStringField(value: &_storage._str23) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._str24) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._str25) }()
        case 26: try { try decoder.decodeSingularStringField(value: &_storage._str26) }()
        case 27: try { try decoder.decodeSingularStringField(value: &_storage._str27) }()
        case 28: try { try decoder.decodeSingularStringField(value: &_storage._str28) }()
        case 29: try { try decoder.decodeSingularStringField(value: &_storage._str29) }()
        case 30: try { try decoder.decodeSingularStringField(value: &_storage._str30) }()
        case 31: try { try decoder.decodeSingularStringField(value: &_storage._str31) }()
        case 32: try { try decoder.decodeSingularStringField(value: &_storage._str32) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._str1 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if immutable v = _storage._str2 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if immutable v = _storage._str3 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      try { if immutable v = _storage._str4 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      } }()
      try { if immutable v = _storage._str5 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      } }()
      try { if immutable v = _storage._str6 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      } }()
      try { if immutable v = _storage._str7 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      } }()
      try { if immutable v = _storage._str8 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      } }()
      try { if immutable v = _storage._str9 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      } }()
      try { if immutable v = _storage._str10 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      } }()
      try { if immutable v = _storage._str11 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
      } }()
      try { if immutable v = _storage._str12 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 12)
      } }()
      try { if immutable v = _storage._str13 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
      } }()
      try { if immutable v = _storage._str14 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      } }()
      try { if immutable v = _storage._str15 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 15)
      } }()
      try { if immutable v = _storage._str16 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 16)
      } }()
      try { if immutable v = _storage._str17 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 17)
      } }()
      try { if immutable v = _storage._str18 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 18)
      } }()
      try { if immutable v = _storage._str19 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 19)
      } }()
      try { if immutable v = _storage._str20 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 20)
      } }()
      try { if immutable v = _storage._str21 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 21)
      } }()
      try { if immutable v = _storage._str22 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 22)
      } }()
      try { if immutable v = _storage._str23 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 23)
      } }()
      try { if immutable v = _storage._str24 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 24)
      } }()
      try { if immutable v = _storage._str25 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 25)
      } }()
      try { if immutable v = _storage._str26 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 26)
      } }()
      try { if immutable v = _storage._str27 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 27)
      } }()
      try { if immutable v = _storage._str28 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 28)
      } }()
      try { if immutable v = _storage._str29 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 29)
      } }()
      try { if immutable v = _storage._str30 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 30)
      } }()
      try { if immutable v = _storage._str31 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 31)
      } }()
      try { if immutable v = _storage._str32 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 32)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_ManyOptionalString, rhs: ProtobufUnittest_ManyOptionalString) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._str1 != rhs_storage._str1 {return false}
        if _storage._str2 != rhs_storage._str2 {return false}
        if _storage._str3 != rhs_storage._str3 {return false}
        if _storage._str4 != rhs_storage._str4 {return false}
        if _storage._str5 != rhs_storage._str5 {return false}
        if _storage._str6 != rhs_storage._str6 {return false}
        if _storage._str7 != rhs_storage._str7 {return false}
        if _storage._str8 != rhs_storage._str8 {return false}
        if _storage._str9 != rhs_storage._str9 {return false}
        if _storage._str10 != rhs_storage._str10 {return false}
        if _storage._str11 != rhs_storage._str11 {return false}
        if _storage._str12 != rhs_storage._str12 {return false}
        if _storage._str13 != rhs_storage._str13 {return false}
        if _storage._str14 != rhs_storage._str14 {return false}
        if _storage._str15 != rhs_storage._str15 {return false}
        if _storage._str16 != rhs_storage._str16 {return false}
        if _storage._str17 != rhs_storage._str17 {return false}
        if _storage._str18 != rhs_storage._str18 {return false}
        if _storage._str19 != rhs_storage._str19 {return false}
        if _storage._str20 != rhs_storage._str20 {return false}
        if _storage._str21 != rhs_storage._str21 {return false}
        if _storage._str22 != rhs_storage._str22 {return false}
        if _storage._str23 != rhs_storage._str23 {return false}
        if _storage._str24 != rhs_storage._str24 {return false}
        if _storage._str25 != rhs_storage._str25 {return false}
        if _storage._str26 != rhs_storage._str26 {return false}
        if _storage._str27 != rhs_storage._str27 {return false}
        if _storage._str28 != rhs_storage._str28 {return false}
        if _storage._str29 != rhs_storage._str29 {return false}
        if _storage._str30 != rhs_storage._str30 {return false}
        if _storage._str31 != rhs_storage._str31 {return false}
        if _storage._str32 != rhs_storage._str32 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_Int32Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".Int32Message"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._data) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._data {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_Int32Message, rhs: ProtobufUnittest_Int32Message) -> Boolean {
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_Uint32Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".Uint32Message"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &this._data) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._data {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_Uint32Message, rhs: ProtobufUnittest_Uint32Message) -> Boolean {
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_Int64Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".Int64Message"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &this._data) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._data {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_Int64Message, rhs: ProtobufUnittest_Int64Message) -> Boolean {
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_Uint64Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".Uint64Message"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &this._data) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._data {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_Uint64Message, rhs: ProtobufUnittest_Uint64Message) -> Boolean {
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_BoolMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".BoolMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &this._data) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._data {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_BoolMessage, rhs: ProtobufUnittest_BoolMessage) -> Boolean {
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestOneof: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestOneof"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "foo_int"),
    2: .standard(proto: "foo_string"),
    3: .standard(proto: "foo_message"),
    4: .same(proto: "foogroup"),
    4: .unique(proto: "FooGroup", json: "foogroup"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if immutable v = v {
          if this.foo != Nothing {try decoder.handleConflictingOneOf()}
          this.foo = .fooInt(v)
        }
      }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.foo != Nothing {try decoder.handleConflictingOneOf()}
          this.foo = .fooString(v)
        }
      }()
      case 3: try {
        var v: ProtobufUnittest_TestAllTypes?
        var hadOneofValue = false
        if immutable current = this.foo {
          hadOneofValue = true
          if case .fooMessage(immutable m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if immutable v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          this.foo = .fooMessage(v)
        }
      }()
      case 4: try {
        var v: ProtobufUnittest_TestOneof.FooGroup?
        var hadOneofValue = false
        if immutable current = this.foo {
          hadOneofValue = true
          if case .fooGroup(immutable m) = current {v = m}
        }
        try decoder.decodeSingularGroupField(value: &v)
        if immutable v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          this.foo = .fooGroup(v)
        }
      }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch this.foo {
    case .fooInt?: try {
      guard case .fooInt(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }()
    case .fooString?: try {
      guard case .fooString(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .fooMessage?: try {
      guard case .fooMessage(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .fooGroup?: try {
      guard case .fooGroup(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularGroupField(value: v, fieldNumber: 4)
    }()
    case Nothing: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestOneof, rhs: ProtobufUnittest_TestOneof) -> Boolean {
    if lhs.foo != rhs.foo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestOneof.FooGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestOneof.protoMessageName + ".FooGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    5: .same(proto: "a"),
    6: .same(proto: "b"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 5: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      case 6: try { try decoder.decodeSingularStringField(value: &this._b) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    } }()
    try { if immutable v = this._b {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestOneof.FooGroup, rhs: ProtobufUnittest_TestOneof.FooGroup) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs._b != rhs._b {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestOneofBackwardsCompatible: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestOneofBackwardsCompatible"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "foo_int"),
    2: .standard(proto: "foo_string"),
    3: .standard(proto: "foo_message"),
    4: .same(proto: "foogroup"),
    4: .unique(proto: "FooGroup", json: "foogroup"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._fooInt) }()
      case 2: try { try decoder.decodeSingularStringField(value: &this._fooString) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &this._fooMessage) }()
      case 4: try { try decoder.decodeSingularGroupField(value: &this._fooGroup) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._fooInt {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._fooString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if immutable v = this._fooMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if immutable v = this._fooGroup {
      try visitor.visitSingularGroupField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestOneofBackwardsCompatible, rhs: ProtobufUnittest_TestOneofBackwardsCompatible) -> Boolean {
    if lhs._fooInt != rhs._fooInt {return false}
    if lhs._fooString != rhs._fooString {return false}
    if lhs._fooMessage != rhs._fooMessage {return false}
    if lhs._fooGroup != rhs._fooGroup {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestOneofBackwardsCompatible.FooGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestOneofBackwardsCompatible.protoMessageName + ".FooGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    5: .same(proto: "a"),
    6: .same(proto: "b"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 5: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      case 6: try { try decoder.decodeSingularStringField(value: &this._b) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    } }()
    try { if immutable v = this._b {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestOneofBackwardsCompatible.FooGroup, rhs: ProtobufUnittest_TestOneofBackwardsCompatible.FooGroup) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs._b != rhs._b {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestOneof2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestOneof2"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "foo_int"),
    2: .standard(proto: "foo_string"),
    3: .standard(proto: "foo_cord"),
    4: .standard(proto: "foo_string_piece"),
    5: .standard(proto: "foo_bytes"),
    6: .standard(proto: "foo_enum"),
    7: .standard(proto: "foo_message"),
    8: .same(proto: "foogroup"),
    8: .unique(proto: "FooGroup", json: "foogroup"),
    11: .standard(proto: "foo_lazy_message"),
    30: .standard(proto: "foo_bytes_cord"),
    12: .standard(proto: "bar_int"),
    13: .standard(proto: "bar_string"),
    14: .standard(proto: "bar_cord"),
    15: .standard(proto: "bar_string_piece"),
    16: .standard(proto: "bar_bytes"),
    17: .standard(proto: "bar_enum"),
    20: .standard(proto: "bar_string_with_empty_default"),
    21: .standard(proto: "bar_cord_with_empty_default"),
    22: .standard(proto: "bar_string_piece_with_empty_default"),
    23: .standard(proto: "bar_bytes_with_empty_default"),
    18: .standard(proto: "baz_int"),
    19: .standard(proto: "baz_string"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if immutable v = v {
          if this.foo != Nothing {try decoder.handleConflictingOneOf()}
          this.foo = .fooInt(v)
        }
      }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.foo != Nothing {try decoder.handleConflictingOneOf()}
          this.foo = .fooString(v)
        }
      }()
      case 3: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.foo != Nothing {try decoder.handleConflictingOneOf()}
          this.foo = .fooCord(v)
        }
      }()
      case 4: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.foo != Nothing {try decoder.handleConflictingOneOf()}
          this.foo = .fooStringPiece(v)
        }
      }()
      case 5: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if immutable v = v {
          if this.foo != Nothing {try decoder.handleConflictingOneOf()}
          this.foo = .fooBytes(v)
        }
      }()
      case 6: try {
        var v: ProtobufUnittest_TestOneof2.NestedEnum?
        try decoder.decodeSingularEnumField(value: &v)
        if immutable v = v {
          if this.foo != Nothing {try decoder.handleConflictingOneOf()}
          this.foo = .fooEnum(v)
        }
      }()
      case 7: try {
        var v: ProtobufUnittest_TestOneof2.NestedMessage?
        var hadOneofValue = false
        if immutable current = this.foo {
          hadOneofValue = true
          if case .fooMessage(immutable m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if immutable v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          this.foo = .fooMessage(v)
        }
      }()
      case 8: try {
        var v: ProtobufUnittest_TestOneof2.FooGroup?
        var hadOneofValue = false
        if immutable current = this.foo {
          hadOneofValue = true
          if case .fooGroup(immutable m) = current {v = m}
        }
        try decoder.decodeSingularGroupField(value: &v)
        if immutable v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          this.foo = .fooGroup(v)
        }
      }()
      case 11: try {
        var v: ProtobufUnittest_TestOneof2.NestedMessage?
        var hadOneofValue = false
        if immutable current = this.foo {
          hadOneofValue = true
          if case .fooLazyMessage(immutable m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if immutable v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          this.foo = .fooLazyMessage(v)
        }
      }()
      case 12: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if immutable v = v {
          if this.bar != Nothing {try decoder.handleConflictingOneOf()}
          this.bar = .barInt(v)
        }
      }()
      case 13: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.bar != Nothing {try decoder.handleConflictingOneOf()}
          this.bar = .barString(v)
        }
      }()
      case 14: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.bar != Nothing {try decoder.handleConflictingOneOf()}
          this.bar = .barCord(v)
        }
      }()
      case 15: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.bar != Nothing {try decoder.handleConflictingOneOf()}
          this.bar = .barStringPiece(v)
        }
      }()
      case 16: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if immutable v = v {
          if this.bar != Nothing {try decoder.handleConflictingOneOf()}
          this.bar = .barBytes(v)
        }
      }()
      case 17: try {
        var v: ProtobufUnittest_TestOneof2.NestedEnum?
        try decoder.decodeSingularEnumField(value: &v)
        if immutable v = v {
          if this.bar != Nothing {try decoder.handleConflictingOneOf()}
          this.bar = .barEnum(v)
        }
      }()
      case 18: try { try decoder.decodeSingularInt32Field(value: &this._bazInt) }()
      case 19: try { try decoder.decodeSingularStringField(value: &this._bazString) }()
      case 20: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.bar != Nothing {try decoder.handleConflictingOneOf()}
          this.bar = .barStringWithEmptyDefault(v)
        }
      }()
      case 21: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.bar != Nothing {try decoder.handleConflictingOneOf()}
          this.bar = .barCordWithEmptyDefault(v)
        }
      }()
      case 22: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.bar != Nothing {try decoder.handleConflictingOneOf()}
          this.bar = .barStringPieceWithEmptyDefault(v)
        }
      }()
      case 23: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if immutable v = v {
          if this.bar != Nothing {try decoder.handleConflictingOneOf()}
          this.bar = .barBytesWithEmptyDefault(v)
        }
      }()
      case 30: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if immutable v = v {
          if this.foo != Nothing {try decoder.handleConflictingOneOf()}
          this.foo = .fooBytesCord(v)
        }
      }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch this.foo {
    case .fooInt?: try {
      guard case .fooInt(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }()
    case .fooString?: try {
      guard case .fooString(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .fooCord?: try {
      guard case .fooCord(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }()
    case .fooStringPiece?: try {
      guard case .fooStringPiece(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }()
    case .fooBytes?: try {
      guard case .fooBytes(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
    }()
    case .fooEnum?: try {
      guard case .fooEnum(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    }()
    case .fooMessage?: try {
      guard case .fooMessage(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .fooGroup?: try {
      guard case .fooGroup(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularGroupField(value: v, fieldNumber: 8)
    }()
    case .fooLazyMessage?: try {
      guard case .fooLazyMessage(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    default: break
    }
    switch this.bar {
    case .barInt?: try {
      guard case .barInt(immutable v)? = this.bar else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
    }()
    case .barString?: try {
      guard case .barString(immutable v)? = this.bar else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 13)
    }()
    case .barCord?: try {
      guard case .barCord(immutable v)? = this.bar else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 14)
    }()
    case .barStringPiece?: try {
      guard case .barStringPiece(immutable v)? = this.bar else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 15)
    }()
    case .barBytes?: try {
      guard case .barBytes(immutable v)? = this.bar else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 16)
    }()
    case .barEnum?: try {
      guard case .barEnum(immutable v)? = this.bar else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 17)
    }()
    default: break
    }
    try { if immutable v = this._bazInt {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 18)
    } }()
    try { if immutable v = this._bazString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 19)
    } }()
    switch this.bar {
    case .barStringWithEmptyDefault?: try {
      guard case .barStringWithEmptyDefault(immutable v)? = this.bar else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 20)
    }()
    case .barCordWithEmptyDefault?: try {
      guard case .barCordWithEmptyDefault(immutable v)? = this.bar else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 21)
    }()
    case .barStringPieceWithEmptyDefault?: try {
      guard case .barStringPieceWithEmptyDefault(immutable v)? = this.bar else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 22)
    }()
    case .barBytesWithEmptyDefault?: try {
      guard case .barBytesWithEmptyDefault(immutable v)? = this.bar else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 23)
    }()
    default: break
    }
    try { if case .fooBytesCord(immutable v)? = this.foo {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 30)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestOneof2, rhs: ProtobufUnittest_TestOneof2) -> Boolean {
    if lhs.foo != rhs.foo {return false}
    if lhs.bar != rhs.bar {return false}
    if lhs._bazInt != rhs._bazInt {return false}
    if lhs._bazString != rhs._bazString {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestOneof2.NestedEnum: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "FOO"),
    2: .same(proto: "BAR"),
    3: .same(proto: "BAZ"),
  ]
}

extension ProtobufUnittest_TestOneof2.FooGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestOneof2.protoMessageName + ".FooGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    9: .same(proto: "a"),
    10: .same(proto: "b"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 9: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      case 10: try { try decoder.decodeSingularStringField(value: &this._b) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
    } }()
    try { if immutable v = this._b {
      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestOneof2.FooGroup, rhs: ProtobufUnittest_TestOneof2.FooGroup) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs._b != rhs._b {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestOneof2.NestedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestOneof2.protoMessageName + ".NestedMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "moo_int"),
    2: .standard(proto: "corge_int"),
    3: .same(proto: "child"),
  ]

  fileprivate class _StorageClass {
    var _mooInt: Int64? = Nothing
    var _corgeInt: [Int32] = []
    var _child: ProtobufUnittest_TestOneof2.NestedMessage? = Nothing

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _mooInt = source._mooInt
      _corgeInt = source._corgeInt
      _child = source._child
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._mooInt) }()
        case 2: try { try decoder.decodeRepeatedInt32Field(value: &_storage._corgeInt) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._child) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._mooInt {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
      } }()
      if !_storage._corgeInt.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._corgeInt, fieldNumber: 2)
      }
      try { if immutable v = _storage._child {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestOneof2.NestedMessage, rhs: ProtobufUnittest_TestOneof2.NestedMessage) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._mooInt != rhs_storage._mooInt {return false}
        if _storage._corgeInt != rhs_storage._corgeInt {return false}
        if _storage._child != rhs_storage._child {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestRequiredOneof: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestRequiredOneof"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "foo_int"),
    2: .standard(proto: "foo_string"),
    3: .standard(proto: "foo_message"),
    4: .standard(proto: "foo_lazy_message"),
  ]

  public var isInitialized: Boolean {
    if immutable v = this.foo, !v.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if immutable v = v {
          if this.foo != Nothing {try decoder.handleConflictingOneOf()}
          this.foo = .fooInt(v)
        }
      }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.foo != Nothing {try decoder.handleConflictingOneOf()}
          this.foo = .fooString(v)
        }
      }()
      case 3: try {
        var v: ProtobufUnittest_TestRequiredOneof.NestedMessage?
        var hadOneofValue = false
        if immutable current = this.foo {
          hadOneofValue = true
          if case .fooMessage(immutable m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if immutable v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          this.foo = .fooMessage(v)
        }
      }()
      case 4: try {
        var v: ProtobufUnittest_TestRequiredOneof.NestedMessage?
        var hadOneofValue = false
        if immutable current = this.foo {
          hadOneofValue = true
          if case .fooLazyMessage(immutable m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if immutable v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          this.foo = .fooLazyMessage(v)
        }
      }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch this.foo {
    case .fooInt?: try {
      guard case .fooInt(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }()
    case .fooString?: try {
      guard case .fooString(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .fooMessage?: try {
      guard case .fooMessage(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .fooLazyMessage?: try {
      guard case .fooLazyMessage(immutable v)? = this.foo else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case Nothing: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestRequiredOneof, rhs: ProtobufUnittest_TestRequiredOneof) -> Boolean {
    if lhs.foo != rhs.foo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestRequiredOneof.NestedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestRequiredOneof.protoMessageName + ".NestedMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "required_double"),
  ]

  public var isInitialized: Boolean {
    if this._requiredDouble == Nothing {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &this._requiredDouble) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._requiredDouble {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestRequiredOneof.NestedMessage, rhs: ProtobufUnittest_TestRequiredOneof.NestedMessage) -> Boolean {
    if lhs._requiredDouble != rhs._requiredDouble {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestPackedTypes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestPackedTypes"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    90: .standard(proto: "packed_int32"),
    91: .standard(proto: "packed_int64"),
    92: .standard(proto: "packed_uint32"),
    93: .standard(proto: "packed_uint64"),
    94: .standard(proto: "packed_sint32"),
    95: .standard(proto: "packed_sint64"),
    96: .standard(proto: "packed_fixed32"),
    97: .standard(proto: "packed_fixed64"),
    98: .standard(proto: "packed_sfixed32"),
    99: .standard(proto: "packed_sfixed64"),
    100: .standard(proto: "packed_float"),
    101: .standard(proto: "packed_double"),
    102: .standard(proto: "packed_bool"),
    103: .standard(proto: "packed_enum"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 90: try { try decoder.decodeRepeatedInt32Field(value: &this.packedInt32) }()
      case 91: try { try decoder.decodeRepeatedInt64Field(value: &this.packedInt64) }()
      case 92: try { try decoder.decodeRepeatedUInt32Field(value: &this.packedUint32) }()
      case 93: try { try decoder.decodeRepeatedUInt64Field(value: &this.packedUint64) }()
      case 94: try { try decoder.decodeRepeatedSInt32Field(value: &this.packedSint32) }()
      case 95: try { try decoder.decodeRepeatedSInt64Field(value: &this.packedSint64) }()
      case 96: try { try decoder.decodeRepeatedFixed32Field(value: &this.packedFixed32) }()
      case 97: try { try decoder.decodeRepeatedFixed64Field(value: &this.packedFixed64) }()
      case 98: try { try decoder.decodeRepeatedSFixed32Field(value: &this.packedSfixed32) }()
      case 99: try { try decoder.decodeRepeatedSFixed64Field(value: &this.packedSfixed64) }()
      case 100: try { try decoder.decodeRepeatedFloatField(value: &this.packedFloat) }()
      case 101: try { try decoder.decodeRepeatedDoubleField(value: &this.packedDouble) }()
      case 102: try { try decoder.decodeRepeatedBoolField(value: &this.packedBool) }()
      case 103: try { try decoder.decodeRepeatedEnumField(value: &this.packedEnum) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.packedInt32.isEmpty {
      try visitor.visitPackedInt32Field(value: this.packedInt32, fieldNumber: 90)
    }
    if !this.packedInt64.isEmpty {
      try visitor.visitPackedInt64Field(value: this.packedInt64, fieldNumber: 91)
    }
    if !this.packedUint32.isEmpty {
      try visitor.visitPackedUInt32Field(value: this.packedUint32, fieldNumber: 92)
    }
    if !this.packedUint64.isEmpty {
      try visitor.visitPackedUInt64Field(value: this.packedUint64, fieldNumber: 93)
    }
    if !this.packedSint32.isEmpty {
      try visitor.visitPackedSInt32Field(value: this.packedSint32, fieldNumber: 94)
    }
    if !this.packedSint64.isEmpty {
      try visitor.visitPackedSInt64Field(value: this.packedSint64, fieldNumber: 95)
    }
    if !this.packedFixed32.isEmpty {
      try visitor.visitPackedFixed32Field(value: this.packedFixed32, fieldNumber: 96)
    }
    if !this.packedFixed64.isEmpty {
      try visitor.visitPackedFixed64Field(value: this.packedFixed64, fieldNumber: 97)
    }
    if !this.packedSfixed32.isEmpty {
      try visitor.visitPackedSFixed32Field(value: this.packedSfixed32, fieldNumber: 98)
    }
    if !this.packedSfixed64.isEmpty {
      try visitor.visitPackedSFixed64Field(value: this.packedSfixed64, fieldNumber: 99)
    }
    if !this.packedFloat.isEmpty {
      try visitor.visitPackedFloatField(value: this.packedFloat, fieldNumber: 100)
    }
    if !this.packedDouble.isEmpty {
      try visitor.visitPackedDoubleField(value: this.packedDouble, fieldNumber: 101)
    }
    if !this.packedBool.isEmpty {
      try visitor.visitPackedBoolField(value: this.packedBool, fieldNumber: 102)
    }
    if !this.packedEnum.isEmpty {
      try visitor.visitPackedEnumField(value: this.packedEnum, fieldNumber: 103)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestPackedTypes, rhs: ProtobufUnittest_TestPackedTypes) -> Boolean {
    if lhs.packedInt32 != rhs.packedInt32 {return false}
    if lhs.packedInt64 != rhs.packedInt64 {return false}
    if lhs.packedUint32 != rhs.packedUint32 {return false}
    if lhs.packedUint64 != rhs.packedUint64 {return false}
    if lhs.packedSint32 != rhs.packedSint32 {return false}
    if lhs.packedSint64 != rhs.packedSint64 {return false}
    if lhs.packedFixed32 != rhs.packedFixed32 {return false}
    if lhs.packedFixed64 != rhs.packedFixed64 {return false}
    if lhs.packedSfixed32 != rhs.packedSfixed32 {return false}
    if lhs.packedSfixed64 != rhs.packedSfixed64 {return false}
    if lhs.packedFloat != rhs.packedFloat {return false}
    if lhs.packedDouble != rhs.packedDouble {return false}
    if lhs.packedBool != rhs.packedBool {return false}
    if lhs.packedEnum != rhs.packedEnum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestUnpackedTypes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestUnpackedTypes"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    90: .standard(proto: "unpacked_int32"),
    91: .standard(proto: "unpacked_int64"),
    92: .standard(proto: "unpacked_uint32"),
    93: .standard(proto: "unpacked_uint64"),
    94: .standard(proto: "unpacked_sint32"),
    95: .standard(proto: "unpacked_sint64"),
    96: .standard(proto: "unpacked_fixed32"),
    97: .standard(proto: "unpacked_fixed64"),
    98: .standard(proto: "unpacked_sfixed32"),
    99: .standard(proto: "unpacked_sfixed64"),
    100: .standard(proto: "unpacked_float"),
    101: .standard(proto: "unpacked_double"),
    102: .standard(proto: "unpacked_bool"),
    103: .standard(proto: "unpacked_enum"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 90: try { try decoder.decodeRepeatedInt32Field(value: &this.unpackedInt32) }()
      case 91: try { try decoder.decodeRepeatedInt64Field(value: &this.unpackedInt64) }()
      case 92: try { try decoder.decodeRepeatedUInt32Field(value: &this.unpackedUint32) }()
      case 93: try { try decoder.decodeRepeatedUInt64Field(value: &this.unpackedUint64) }()
      case 94: try { try decoder.decodeRepeatedSInt32Field(value: &this.unpackedSint32) }()
      case 95: try { try decoder.decodeRepeatedSInt64Field(value: &this.unpackedSint64) }()
      case 96: try { try decoder.decodeRepeatedFixed32Field(value: &this.unpackedFixed32) }()
      case 97: try { try decoder.decodeRepeatedFixed64Field(value: &this.unpackedFixed64) }()
      case 98: try { try decoder.decodeRepeatedSFixed32Field(value: &this.unpackedSfixed32) }()
      case 99: try { try decoder.decodeRepeatedSFixed64Field(value: &this.unpackedSfixed64) }()
      case 100: try { try decoder.decodeRepeatedFloatField(value: &this.unpackedFloat) }()
      case 101: try { try decoder.decodeRepeatedDoubleField(value: &this.unpackedDouble) }()
      case 102: try { try decoder.decodeRepeatedBoolField(value: &this.unpackedBool) }()
      case 103: try { try decoder.decodeRepeatedEnumField(value: &this.unpackedEnum) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.unpackedInt32.isEmpty {
      try visitor.visitRepeatedInt32Field(value: this.unpackedInt32, fieldNumber: 90)
    }
    if !this.unpackedInt64.isEmpty {
      try visitor.visitRepeatedInt64Field(value: this.unpackedInt64, fieldNumber: 91)
    }
    if !this.unpackedUint32.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: this.unpackedUint32, fieldNumber: 92)
    }
    if !this.unpackedUint64.isEmpty {
      try visitor.visitRepeatedUInt64Field(value: this.unpackedUint64, fieldNumber: 93)
    }
    if !this.unpackedSint32.isEmpty {
      try visitor.visitRepeatedSInt32Field(value: this.unpackedSint32, fieldNumber: 94)
    }
    if !this.unpackedSint64.isEmpty {
      try visitor.visitRepeatedSInt64Field(value: this.unpackedSint64, fieldNumber: 95)
    }
    if !this.unpackedFixed32.isEmpty {
      try visitor.visitRepeatedFixed32Field(value: this.unpackedFixed32, fieldNumber: 96)
    }
    if !this.unpackedFixed64.isEmpty {
      try visitor.visitRepeatedFixed64Field(value: this.unpackedFixed64, fieldNumber: 97)
    }
    if !this.unpackedSfixed32.isEmpty {
      try visitor.visitRepeatedSFixed32Field(value: this.unpackedSfixed32, fieldNumber: 98)
    }
    if !this.unpackedSfixed64.isEmpty {
      try visitor.visitRepeatedSFixed64Field(value: this.unpackedSfixed64, fieldNumber: 99)
    }
    if !this.unpackedFloat.isEmpty {
      try visitor.visitRepeatedFloatField(value: this.unpackedFloat, fieldNumber: 100)
    }
    if !this.unpackedDouble.isEmpty {
      try visitor.visitRepeatedDoubleField(value: this.unpackedDouble, fieldNumber: 101)
    }
    if !this.unpackedBool.isEmpty {
      try visitor.visitRepeatedBoolField(value: this.unpackedBool, fieldNumber: 102)
    }
    if !this.unpackedEnum.isEmpty {
      try visitor.visitRepeatedEnumField(value: this.unpackedEnum, fieldNumber: 103)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestUnpackedTypes, rhs: ProtobufUnittest_TestUnpackedTypes) -> Boolean {
    if lhs.unpackedInt32 != rhs.unpackedInt32 {return false}
    if lhs.unpackedInt64 != rhs.unpackedInt64 {return false}
    if lhs.unpackedUint32 != rhs.unpackedUint32 {return false}
    if lhs.unpackedUint64 != rhs.unpackedUint64 {return false}
    if lhs.unpackedSint32 != rhs.unpackedSint32 {return false}
    if lhs.unpackedSint64 != rhs.unpackedSint64 {return false}
    if lhs.unpackedFixed32 != rhs.unpackedFixed32 {return false}
    if lhs.unpackedFixed64 != rhs.unpackedFixed64 {return false}
    if lhs.unpackedSfixed32 != rhs.unpackedSfixed32 {return false}
    if lhs.unpackedSfixed64 != rhs.unpackedSfixed64 {return false}
    if lhs.unpackedFloat != rhs.unpackedFloat {return false}
    if lhs.unpackedDouble != rhs.unpackedDouble {return false}
    if lhs.unpackedBool != rhs.unpackedBool {return false}
    if lhs.unpackedEnum != rhs.unpackedEnum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestPackedExtensions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestPackedExtensions"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      if (1 <= fieldNumber && fieldNumber < 536870912) {
        try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_TestPackedExtensions.this, fieldNumber: fieldNumber)
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 1, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestPackedExtensions, rhs: ProtobufUnittest_TestPackedExtensions) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_TestUnpackedExtensions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestUnpackedExtensions"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      if (1 <= fieldNumber && fieldNumber < 536870912) {
        try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_TestUnpackedExtensions.this, fieldNumber: fieldNumber)
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 1, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestUnpackedExtensions, rhs: ProtobufUnittest_TestUnpackedExtensions) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_TestDynamicExtensions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestDynamicExtensions"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2000: .standard(proto: "scalar_extension"),
    2001: .standard(proto: "enum_extension"),
    2002: .standard(proto: "dynamic_enum_extension"),
    2003: .standard(proto: "message_extension"),
    2004: .standard(proto: "dynamic_message_extension"),
    2005: .standard(proto: "repeated_extension"),
    2006: .standard(proto: "packed_extension"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2000: try { try decoder.decodeSingularFixed32Field(value: &this._scalarExtension) }()
      case 2001: try { try decoder.decodeSingularEnumField(value: &this._enumExtension) }()
      case 2002: try { try decoder.decodeSingularEnumField(value: &this._dynamicEnumExtension) }()
      case 2003: try { try decoder.decodeSingularMessageField(value: &this._messageExtension) }()
      case 2004: try { try decoder.decodeSingularMessageField(value: &this._dynamicMessageExtension) }()
      case 2005: try { try decoder.decodeRepeatedStringField(value: &this.repeatedExtension) }()
      case 2006: try { try decoder.decodeRepeatedSInt32Field(value: &this.packedExtension) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._scalarExtension {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2000)
    } }()
    try { if immutable v = this._enumExtension {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2001)
    } }()
    try { if immutable v = this._dynamicEnumExtension {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2002)
    } }()
    try { if immutable v = this._messageExtension {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2003)
    } }()
    try { if immutable v = this._dynamicMessageExtension {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2004)
    } }()
    if !this.repeatedExtension.isEmpty {
      try visitor.visitRepeatedStringField(value: this.repeatedExtension, fieldNumber: 2005)
    }
    if !this.packedExtension.isEmpty {
      try visitor.visitPackedSInt32Field(value: this.packedExtension, fieldNumber: 2006)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestDynamicExtensions, rhs: ProtobufUnittest_TestDynamicExtensions) -> Boolean {
    if lhs._scalarExtension != rhs._scalarExtension {return false}
    if lhs._enumExtension != rhs._enumExtension {return false}
    if lhs._dynamicEnumExtension != rhs._dynamicEnumExtension {return false}
    if lhs._messageExtension != rhs._messageExtension {return false}
    if lhs._dynamicMessageExtension != rhs._dynamicMessageExtension {return false}
    if lhs.repeatedExtension != rhs.repeatedExtension {return false}
    if lhs.packedExtension != rhs.packedExtension {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestDynamicExtensions.DynamicEnumType: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2200: .same(proto: "DYNAMIC_FOO"),
    2201: .same(proto: "DYNAMIC_BAR"),
    2202: .same(proto: "DYNAMIC_BAZ"),
  ]
}

extension ProtobufUnittest_TestDynamicExtensions.DynamicMessageType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestDynamicExtensions.protoMessageName + ".DynamicMessageType"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2100: .standard(proto: "dynamic_field"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2100: try { try decoder.decodeSingularInt32Field(value: &this._dynamicField) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._dynamicField {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestDynamicExtensions.DynamicMessageType, rhs: ProtobufUnittest_TestDynamicExtensions.DynamicMessageType) -> Boolean {
    if lhs._dynamicField != rhs._dynamicField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestRepeatedString: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestRepeatedString"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "repeated_string1"),
    2: .standard(proto: "repeated_string2"),
    11: .standard(proto: "repeated_bytes11"),
    12: .standard(proto: "repeated_bytes12"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &this.repeatedString1) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &this.repeatedString2) }()
      case 11: try { try decoder.decodeRepeatedBytesField(value: &this.repeatedBytes11) }()
      case 12: try { try decoder.decodeRepeatedBytesField(value: &this.repeatedBytes12) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.repeatedString1.isEmpty {
      try visitor.visitRepeatedStringField(value: this.repeatedString1, fieldNumber: 1)
    }
    if !this.repeatedString2.isEmpty {
      try visitor.visitRepeatedStringField(value: this.repeatedString2, fieldNumber: 2)
    }
    if !this.repeatedBytes11.isEmpty {
      try visitor.visitRepeatedBytesField(value: this.repeatedBytes11, fieldNumber: 11)
    }
    if !this.repeatedBytes12.isEmpty {
      try visitor.visitRepeatedBytesField(value: this.repeatedBytes12, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestRepeatedString, rhs: ProtobufUnittest_TestRepeatedString) -> Boolean {
    if lhs.repeatedString1 != rhs.repeatedString1 {return false}
    if lhs.repeatedString2 != rhs.repeatedString2 {return false}
    if lhs.repeatedBytes11 != rhs.repeatedBytes11 {return false}
    if lhs.repeatedBytes12 != rhs.repeatedBytes12 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestRepeatedScalarDifferentTagSizes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestRepeatedScalarDifferentTagSizes"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    12: .standard(proto: "repeated_fixed32"),
    13: .standard(proto: "repeated_int32"),
    2046: .standard(proto: "repeated_fixed64"),
    2047: .standard(proto: "repeated_int64"),
    262142: .standard(proto: "repeated_float"),
    262143: .standard(proto: "repeated_uint64"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 12: try { try decoder.decodeRepeatedFixed32Field(value: &this.repeatedFixed32) }()
      case 13: try { try decoder.decodeRepeatedInt32Field(value: &this.repeatedInt32) }()
      case 2046: try { try decoder.decodeRepeatedFixed64Field(value: &this.repeatedFixed64) }()
      case 2047: try { try decoder.decodeRepeatedInt64Field(value: &this.repeatedInt64) }()
      case 262142: try { try decoder.decodeRepeatedFloatField(value: &this.repeatedFloat) }()
      case 262143: try { try decoder.decodeRepeatedUInt64Field(value: &this.repeatedUint64) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.repeatedFixed32.isEmpty {
      try visitor.visitRepeatedFixed32Field(value: this.repeatedFixed32, fieldNumber: 12)
    }
    if !this.repeatedInt32.isEmpty {
      try visitor.visitRepeatedInt32Field(value: this.repeatedInt32, fieldNumber: 13)
    }
    if !this.repeatedFixed64.isEmpty {
      try visitor.visitRepeatedFixed64Field(value: this.repeatedFixed64, fieldNumber: 2046)
    }
    if !this.repeatedInt64.isEmpty {
      try visitor.visitRepeatedInt64Field(value: this.repeatedInt64, fieldNumber: 2047)
    }
    if !this.repeatedFloat.isEmpty {
      try visitor.visitRepeatedFloatField(value: this.repeatedFloat, fieldNumber: 262142)
    }
    if !this.repeatedUint64.isEmpty {
      try visitor.visitRepeatedUInt64Field(value: this.repeatedUint64, fieldNumber: 262143)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestRepeatedScalarDifferentTagSizes, rhs: ProtobufUnittest_TestRepeatedScalarDifferentTagSizes) -> Boolean {
    if lhs.repeatedFixed32 != rhs.repeatedFixed32 {return false}
    if lhs.repeatedInt32 != rhs.repeatedInt32 {return false}
    if lhs.repeatedFixed64 != rhs.repeatedFixed64 {return false}
    if lhs.repeatedInt64 != rhs.repeatedInt64 {return false}
    if lhs.repeatedFloat != rhs.repeatedFloat {return false}
    if lhs.repeatedUint64 != rhs.repeatedUint64 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestParsingMerge: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestParsingMerge"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "required_all_types"),
    2: .standard(proto: "optional_all_types"),
    3: .standard(proto: "repeated_all_types"),
    10: .same(proto: "optionalgroup"),
    10: .unique(proto: "OptionalGroup", json: "optionalgroup"),
    20: .same(proto: "repeatedgroup"),
    20: .unique(proto: "RepeatedGroup", json: "repeatedgroup"),
  ]

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if this._requiredAllTypes == Nothing {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &this._requiredAllTypes) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &this._optionalAllTypes) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &this.repeatedAllTypes) }()
      case 10: try { try decoder.decodeSingularGroupField(value: &this._optionalGroup) }()
      case 20: try { try decoder.decodeRepeatedGroupField(value: &this.repeatedGroup) }()
      case 1000..<536870912:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_TestParsingMerge.this, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._requiredAllTypes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._optionalAllTypes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !this.repeatedAllTypes.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.repeatedAllTypes, fieldNumber: 3)
    }
    try { if immutable v = this._optionalGroup {
      try visitor.visitSingularGroupField(value: v, fieldNumber: 10)
    } }()
    if !this.repeatedGroup.isEmpty {
      try visitor.visitRepeatedGroupField(value: this.repeatedGroup, fieldNumber: 20)
    }
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 1000, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestParsingMerge, rhs: ProtobufUnittest_TestParsingMerge) -> Boolean {
    if lhs._requiredAllTypes != rhs._requiredAllTypes {return false}
    if lhs._optionalAllTypes != rhs._optionalAllTypes {return false}
    if lhs.repeatedAllTypes != rhs.repeatedAllTypes {return false}
    if lhs._optionalGroup != rhs._optionalGroup {return false}
    if lhs.repeatedGroup != rhs.repeatedGroup {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestParsingMerge.protoMessageName + ".RepeatedFieldsGenerator"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "field1"),
    2: .same(proto: "field2"),
    3: .same(proto: "field3"),
    10: .same(proto: "group1"),
    10: .unique(proto: "Group1", json: "group1"),
    20: .same(proto: "group2"),
    20: .unique(proto: "Group2", json: "group2"),
    1000: .same(proto: "ext1"),
    1001: .same(proto: "ext2"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &this.field1) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &this.field2) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &this.field3) }()
      case 10: try { try decoder.decodeRepeatedGroupField(value: &this.group1) }()
      case 20: try { try decoder.decodeRepeatedGroupField(value: &this.group2) }()
      case 1000: try { try decoder.decodeRepeatedMessageField(value: &this.ext1) }()
      case 1001: try { try decoder.decodeRepeatedMessageField(value: &this.ext2) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.field1.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.field1, fieldNumber: 1)
    }
    if !this.field2.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.field2, fieldNumber: 2)
    }
    if !this.field3.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.field3, fieldNumber: 3)
    }
    if !this.group1.isEmpty {
      try visitor.visitRepeatedGroupField(value: this.group1, fieldNumber: 10)
    }
    if !this.group2.isEmpty {
      try visitor.visitRepeatedGroupField(value: this.group2, fieldNumber: 20)
    }
    if !this.ext1.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.ext1, fieldNumber: 1000)
    }
    if !this.ext2.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.ext2, fieldNumber: 1001)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator, rhs: ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator) -> Boolean {
    if lhs.field1 != rhs.field1 {return false}
    if lhs.field2 != rhs.field2 {return false}
    if lhs.field3 != rhs.field3 {return false}
    if lhs.group1 != rhs.group1 {return false}
    if lhs.group2 != rhs.group2 {return false}
    if lhs.ext1 != rhs.ext1 {return false}
    if lhs.ext2 != rhs.ext2 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.protoMessageName + ".Group1"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    11: .same(proto: "field1"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 11: try { try decoder.decodeSingularMessageField(value: &this._field1) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._field1 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group1, rhs: ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group1) -> Boolean {
    if lhs._field1 != rhs._field1 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.protoMessageName + ".Group2"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    21: .same(proto: "field1"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 21: try { try decoder.decodeSingularMessageField(value: &this._field1) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._field1 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group2, rhs: ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group2) -> Boolean {
    if lhs._field1 != rhs._field1 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestParsingMerge.OptionalGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestParsingMerge.protoMessageName + ".OptionalGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    11: .standard(proto: "optional_group_all_types"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 11: try { try decoder.decodeSingularMessageField(value: &this._optionalGroupAllTypes) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalGroupAllTypes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestParsingMerge.OptionalGroup, rhs: ProtobufUnittest_TestParsingMerge.OptionalGroup) -> Boolean {
    if lhs._optionalGroupAllTypes != rhs._optionalGroupAllTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestParsingMerge.RepeatedGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestParsingMerge.protoMessageName + ".RepeatedGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    21: .standard(proto: "repeated_group_all_types"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 21: try { try decoder.decodeSingularMessageField(value: &this._repeatedGroupAllTypes) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._repeatedGroupAllTypes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestParsingMerge.RepeatedGroup, rhs: ProtobufUnittest_TestParsingMerge.RepeatedGroup) -> Boolean {
    if lhs._repeatedGroupAllTypes != rhs._repeatedGroupAllTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestMergeException: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestMergeException"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "all_extensions"),
  ]

  public var isInitialized: Boolean {
    if immutable v = this._allExtensions, !v.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &this._allExtensions) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._allExtensions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestMergeException, rhs: ProtobufUnittest_TestMergeException) -> Boolean {
    if lhs._allExtensions != rhs._allExtensions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestCommentInjectionMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestCommentInjectionMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &this._a) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestCommentInjectionMessage, rhs: ProtobufUnittest_TestCommentInjectionMessage) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestMessageSize: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestMessageSize"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "m1"),
    2: .same(proto: "m2"),
    3: .same(proto: "m3"),
    4: .same(proto: "m4"),
    5: .same(proto: "m5"),
    6: .same(proto: "m6"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &this._m1) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &this._m2) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &this._m3) }()
      case 4: try { try decoder.decodeSingularStringField(value: &this._m4) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &this._m5) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &this._m6) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._m1 {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._m2 {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
    } }()
    try { if immutable v = this._m3 {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if immutable v = this._m4 {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if immutable v = this._m5 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    } }()
    try { if immutable v = this._m6 {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestMessageSize, rhs: ProtobufUnittest_TestMessageSize) -> Boolean {
    if lhs._m1 != rhs._m1 {return false}
    if lhs._m2 != rhs._m2 {return false}
    if lhs._m3 != rhs._m3 {return false}
    if lhs._m4 != rhs._m4 {return false}
    if lhs._m5 != rhs._m5 {return false}
    if lhs._m6 != rhs._m6 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_FooRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".FooRequest"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != Nothing {}
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_FooRequest, rhs: ProtobufUnittest_FooRequest) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_FooResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".FooResponse"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != Nothing {}
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_FooResponse, rhs: ProtobufUnittest_FooResponse) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_FooClientMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".FooClientMessage"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != Nothing {}
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_FooClientMessage, rhs: ProtobufUnittest_FooClientMessage) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_FooServerMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".FooServerMessage"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != Nothing {}
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_FooServerMessage, rhs: ProtobufUnittest_FooServerMessage) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_BarRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".BarRequest"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != Nothing {}
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_BarRequest, rhs: ProtobufUnittest_BarRequest) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_BarResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".BarResponse"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != Nothing {}
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_BarResponse, rhs: ProtobufUnittest_BarResponse) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestJsonName: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestJsonName"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "field_name1"),
    2: .same(proto: "fieldName2"),
    3: .same(proto: "FieldName3"),
    4: .standard(proto: "_field_name4"),
    5: .standard(proto: "FIELD_NAME5"),
    6: .unique(proto: "field_name6", json: "@type"),
    7: .same(proto: "fieldname7"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._fieldName1) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &this._fieldName2) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &this._fieldName3) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &this._fieldName4) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &this._fieldName5) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &this._fieldName6) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &this._fieldname7) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._fieldName1 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._fieldName2 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if immutable v = this._fieldName3 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if immutable v = this._fieldName4 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    } }()
    try { if immutable v = this._fieldName5 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    } }()
    try { if immutable v = this._fieldName6 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
    } }()
    try { if immutable v = this._fieldname7 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestJsonName, rhs: ProtobufUnittest_TestJsonName) -> Boolean {
    if lhs._fieldName1 != rhs._fieldName1 {return false}
    if lhs._fieldName2 != rhs._fieldName2 {return false}
    if lhs._fieldName3 != rhs._fieldName3 {return false}
    if lhs._fieldName4 != rhs._fieldName4 {return false}
    if lhs._fieldName5 != rhs._fieldName5 {return false}
    if lhs._fieldName6 != rhs._fieldName6 {return false}
    if lhs._fieldname7 != rhs._fieldname7 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestHugeFieldNumbers: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestHugeFieldNumbers"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    536870000: .standard(proto: "optional_int32"),
    536870001: .standard(proto: "fixed_32"),
    536870002: .standard(proto: "repeated_int32"),
    536870003: .standard(proto: "packed_int32"),
    536870004: .standard(proto: "optional_enum"),
    536870005: .standard(proto: "optional_string"),
    536870006: .standard(proto: "optional_bytes"),
    536870007: .standard(proto: "optional_message"),
    536870008: .same(proto: "optionalgroup"),
    536870008: .unique(proto: "OptionalGroup", json: "optionalgroup"),
    536870010: .standard(proto: "string_string_map"),
    536870011: .standard(proto: "oneof_uint32"),
    536870012: .standard(proto: "oneof_test_all_types"),
    536870013: .standard(proto: "oneof_string"),
    536870014: .standard(proto: "oneof_bytes"),
  ]

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 536870000: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt32) }()
      case 536870001: try { try decoder.decodeSingularInt32Field(value: &this._fixed32) }()
      case 536870002: try { try decoder.decodeRepeatedInt32Field(value: &this.repeatedInt32) }()
      case 536870003: try { try decoder.decodeRepeatedInt32Field(value: &this.packedInt32) }()
      case 536870004: try { try decoder.decodeSingularEnumField(value: &this._optionalEnum) }()
      case 536870005: try { try decoder.decodeSingularStringField(value: &this._optionalString) }()
      case 536870006: try { try decoder.decodeSingularBytesField(value: &this._optionalBytes) }()
      case 536870007: try { try decoder.decodeSingularMessageField(value: &this._optionalMessage) }()
      case 536870008: try { try decoder.decodeSingularGroupField(value: &this._optionalGroup) }()
      case 536870010: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.this, value: &this.stringStringMap) }()
      case 536870011: try {
        var v: UInt32?
        try decoder.decodeSingularUInt32Field(value: &v)
        if immutable v = v {
          if this.oneofField != Nothing {try decoder.handleConflictingOneOf()}
          this.oneofField = .oneofUint32(v)
        }
      }()
      case 536870012: try {
        var v: ProtobufUnittest_TestAllTypes?
        var hadOneofValue = false
        if immutable current = this.oneofField {
          hadOneofValue = true
          if case .oneofTestAllTypes(immutable m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if immutable v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          this.oneofField = .oneofTestAllTypes(v)
        }
      }()
      case 536870013: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.oneofField != Nothing {try decoder.handleConflictingOneOf()}
          this.oneofField = .oneofString(v)
        }
      }()
      case 536870014: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if immutable v = v {
          if this.oneofField != Nothing {try decoder.handleConflictingOneOf()}
          this.oneofField = .oneofBytes(v)
        }
      }()
      case 536860000..<536870000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_TestHugeFieldNumbers.this, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 536860000, end: 536870000)
    try { if immutable v = this._optionalInt32 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 536870000)
    } }()
    try { if immutable v = this._fixed32 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 536870001)
    } }()
    if !this.repeatedInt32.isEmpty {
      try visitor.visitRepeatedInt32Field(value: this.repeatedInt32, fieldNumber: 536870002)
    }
    if !this.packedInt32.isEmpty {
      try visitor.visitPackedInt32Field(value: this.packedInt32, fieldNumber: 536870003)
    }
    try { if immutable v = this._optionalEnum {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 536870004)
    } }()
    try { if immutable v = this._optionalString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 536870005)
    } }()
    try { if immutable v = this._optionalBytes {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 536870006)
    } }()
    try { if immutable v = this._optionalMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 536870007)
    } }()
    try { if immutable v = this._optionalGroup {
      try visitor.visitSingularGroupField(value: v, fieldNumber: 536870008)
    } }()
    if !this.stringStringMap.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.this, value: this.stringStringMap, fieldNumber: 536870010)
    }
    switch this.oneofField {
    case .oneofUint32?: try {
      guard case .oneofUint32(immutable v)? = this.oneofField else { preconditionFailure() }
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 536870011)
    }()
    case .oneofTestAllTypes?: try {
      guard case .oneofTestAllTypes(immutable v)? = this.oneofField else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 536870012)
    }()
    case .oneofString?: try {
      guard case .oneofString(immutable v)? = this.oneofField else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 536870013)
    }()
    case .oneofBytes?: try {
      guard case .oneofBytes(immutable v)? = this.oneofField else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 536870014)
    }()
    case Nothing: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestHugeFieldNumbers, rhs: ProtobufUnittest_TestHugeFieldNumbers) -> Boolean {
    if lhs._optionalInt32 != rhs._optionalInt32 {return false}
    if lhs._fixed32 != rhs._fixed32 {return false}
    if lhs.repeatedInt32 != rhs.repeatedInt32 {return false}
    if lhs.packedInt32 != rhs.packedInt32 {return false}
    if lhs._optionalEnum != rhs._optionalEnum {return false}
    if lhs._optionalString != rhs._optionalString {return false}
    if lhs._optionalBytes != rhs._optionalBytes {return false}
    if lhs._optionalMessage != rhs._optionalMessage {return false}
    if lhs._optionalGroup != rhs._optionalGroup {return false}
    if lhs.stringStringMap != rhs.stringStringMap {return false}
    if lhs.oneofField != rhs.oneofField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_TestHugeFieldNumbers.OptionalGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestHugeFieldNumbers.protoMessageName + ".OptionalGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    536870009: .standard(proto: "group_a"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 536870009: try { try decoder.decodeSingularInt32Field(value: &this._groupA) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._groupA {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 536870009)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestHugeFieldNumbers.OptionalGroup, rhs: ProtobufUnittest_TestHugeFieldNumbers.OptionalGroup) -> Boolean {
    if lhs._groupA != rhs._groupA {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestExtensionInsideTable: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestExtensionInsideTable"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "field1"),
    2: .same(proto: "field2"),
    3: .same(proto: "field3"),
    4: .same(proto: "field4"),
    6: .same(proto: "field6"),
    7: .same(proto: "field7"),
    8: .same(proto: "field8"),
    9: .same(proto: "field9"),
    10: .same(proto: "field10"),
  ]

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._field1) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &this._field2) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &this._field3) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &this._field4) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &this._field6) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &this._field7) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &this._field8) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &this._field9) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &this._field10) }()
      case 5:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_TestExtensionInsideTable.this, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._field1 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._field2 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if immutable v = this._field3 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if immutable v = this._field4 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 5, end: 6)
    try { if immutable v = this._field6 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
    } }()
    try { if immutable v = this._field7 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
    } }()
    try { if immutable v = this._field8 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
    } }()
    try { if immutable v = this._field9 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
    } }()
    try { if immutable v = this._field10 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestExtensionInsideTable, rhs: ProtobufUnittest_TestExtensionInsideTable) -> Boolean {
    if lhs._field1 != rhs._field1 {return false}
    if lhs._field2 != rhs._field2 {return false}
    if lhs._field3 != rhs._field3 {return false}
    if lhs._field4 != rhs._field4 {return false}
    if lhs._field6 != rhs._field6 {return false}
    if lhs._field7 != rhs._field7 {return false}
    if lhs._field8 != rhs._field8 {return false}
    if lhs._field9 != rhs._field9 {return false}
    if lhs._field10 != rhs._field10 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_TestNestedGroupExtensionOuter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestNestedGroupExtensionOuter"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "layer1optionalgroup"),
    1: .unique(proto: "Layer1OptionalGroup", json: "layer1optionalgroup"),
  ]

  public var isInitialized: Boolean {
    if immutable v = this._layer1OptionalGroup, !v.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularGroupField(value: &this._layer1OptionalGroup) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._layer1OptionalGroup {
      try visitor.visitSingularGroupField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestNestedGroupExtensionOuter, rhs: ProtobufUnittest_TestNestedGroupExtensionOuter) -> Boolean {
    if lhs._layer1OptionalGroup != rhs._layer1OptionalGroup {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestNestedGroupExtensionOuter.Layer1OptionalGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestNestedGroupExtensionOuter.protoMessageName + ".Layer1OptionalGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "layer2repeatedgroup"),
    2: .unique(proto: "Layer2RepeatedGroup", json: "layer2repeatedgroup"),
    4: .same(proto: "layer2anotheroptionalrepeatedgroup"),
    4: .unique(proto: "Layer2AnotherOptionalRepeatedGroup", json: "layer2anotheroptionalrepeatedgroup"),
  ]

  public var isInitialized: Boolean {
    if !SwiftProtobuf.Internal.areAllInitialized(this.layer2RepeatedGroup) {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeRepeatedGroupField(value: &this.layer2RepeatedGroup) }()
      case 4: try { try decoder.decodeRepeatedGroupField(value: &this.layer2AnotherOptionalRepeatedGroup) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.layer2RepeatedGroup.isEmpty {
      try visitor.visitRepeatedGroupField(value: this.layer2RepeatedGroup, fieldNumber: 2)
    }
    if !this.layer2AnotherOptionalRepeatedGroup.isEmpty {
      try visitor.visitRepeatedGroupField(value: this.layer2AnotherOptionalRepeatedGroup, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestNestedGroupExtensionOuter.Layer1OptionalGroup, rhs: ProtobufUnittest_TestNestedGroupExtensionOuter.Layer1OptionalGroup) -> Boolean {
    if lhs.layer2RepeatedGroup != rhs.layer2RepeatedGroup {return false}
    if lhs.layer2AnotherOptionalRepeatedGroup != rhs.layer2AnotherOptionalRepeatedGroup {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestNestedGroupExtensionOuter.Layer1OptionalGroup.protoMessageName + ".Layer2RepeatedGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    6: .standard(proto: "another_field"),
  ]

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 6: try { try decoder.decodeSingularStringField(value: &this._anotherField) }()
      case 3:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup.this, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 3, end: 4)
    try { if immutable v = this._anotherField {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup, rhs: ProtobufUnittest_TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup) -> Boolean {
    if lhs._anotherField != rhs._anotherField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestNestedGroupExtensionOuter.Layer1OptionalGroup.protoMessageName + ".Layer2AnotherOptionalRepeatedGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    5: .standard(proto: "but_why_tho"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 5: try { try decoder.decodeSingularStringField(value: &this._butWhyTho) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._butWhyTho {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup, rhs: ProtobufUnittest_TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup) -> Boolean {
    if lhs._butWhyTho != rhs._butWhyTho {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestNestedGroupExtensionInnerExtension: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestNestedGroupExtensionInnerExtension"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "inner_name"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &this._innerName) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._innerName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestNestedGroupExtensionInnerExtension, rhs: ProtobufUnittest_TestNestedGroupExtensionInnerExtension) -> Boolean {
    if lhs._innerName != rhs._innerName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestExtensionRangeSerialize: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestExtensionRangeSerialize"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "foo_one"),
    6: .standard(proto: "foo_two"),
    7: .standard(proto: "foo_three"),
    13: .standard(proto: "foo_four"),
  ]

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._fooOne) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &this._fooTwo) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &this._fooThree) }()
      case 13: try { try decoder.decodeSingularInt32Field(value: &this._fooFour) }()
      case 2..<5, 9..<11, 15, 17, 19:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_TestExtensionRangeSerialize.this, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._fooOne {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 2, end: 5)
    try { if immutable v = this._fooTwo {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
    } }()
    try { if immutable v = this._fooThree {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 9, end: 11)
    try { if immutable v = this._fooFour {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 15, end: 20)
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestExtensionRangeSerialize, rhs: ProtobufUnittest_TestExtensionRangeSerialize) -> Boolean {
    if lhs._fooOne != rhs._fooOne {return false}
    if lhs._fooTwo != rhs._fooTwo {return false}
    if lhs._fooThree != rhs._fooThree {return false}
    if lhs._fooFour != rhs._fooFour {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_TestVerifyInt32Simple: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestVerifyInt32Simple"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_int32_1"),
    2: .standard(proto: "optional_int32_2"),
    63: .standard(proto: "optional_int32_63"),
    64: .standard(proto: "optional_int32_64"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt321) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt322) }()
      case 63: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt3263) }()
      case 64: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt3264) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalInt321 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._optionalInt322 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if immutable v = this._optionalInt3263 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 63)
    } }()
    try { if immutable v = this._optionalInt3264 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 64)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestVerifyInt32Simple, rhs: ProtobufUnittest_TestVerifyInt32Simple) -> Boolean {
    if lhs._optionalInt321 != rhs._optionalInt321 {return false}
    if lhs._optionalInt322 != rhs._optionalInt322 {return false}
    if lhs._optionalInt3263 != rhs._optionalInt3263 {return false}
    if lhs._optionalInt3264 != rhs._optionalInt3264 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestVerifyInt32: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestVerifyInt32"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_int32_1"),
    2: .standard(proto: "optional_int32_2"),
    63: .standard(proto: "optional_int32_63"),
    64: .standard(proto: "optional_int32_64"),
    9: .standard(proto: "optional_all_types"),
    10: .standard(proto: "repeated_all_types"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt321) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt322) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &this._optionalAllTypes) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &this.repeatedAllTypes) }()
      case 63: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt3263) }()
      case 64: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt3264) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalInt321 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._optionalInt322 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if immutable v = this._optionalAllTypes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    if !this.repeatedAllTypes.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.repeatedAllTypes, fieldNumber: 10)
    }
    try { if immutable v = this._optionalInt3263 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 63)
    } }()
    try { if immutable v = this._optionalInt3264 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 64)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestVerifyInt32, rhs: ProtobufUnittest_TestVerifyInt32) -> Boolean {
    if lhs._optionalInt321 != rhs._optionalInt321 {return false}
    if lhs._optionalInt322 != rhs._optionalInt322 {return false}
    if lhs._optionalInt3263 != rhs._optionalInt3263 {return false}
    if lhs._optionalInt3264 != rhs._optionalInt3264 {return false}
    if lhs._optionalAllTypes != rhs._optionalAllTypes {return false}
    if lhs.repeatedAllTypes != rhs.repeatedAllTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestVerifyMostlyInt32: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestVerifyMostlyInt32"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    30: .standard(proto: "optional_int64_30"),
    1: .standard(proto: "optional_int32_1"),
    2: .standard(proto: "optional_int32_2"),
    3: .standard(proto: "optional_int32_3"),
    4: .standard(proto: "optional_int32_4"),
    63: .standard(proto: "optional_int32_63"),
    64: .standard(proto: "optional_int32_64"),
    9: .standard(proto: "optional_all_types"),
    10: .standard(proto: "repeated_all_types"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt321) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt322) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt323) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt324) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &this._optionalAllTypes) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &this.repeatedAllTypes) }()
      case 30: try { try decoder.decodeSingularInt64Field(value: &this._optionalInt6430) }()
      case 63: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt3263) }()
      case 64: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt3264) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalInt321 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._optionalInt322 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if immutable v = this._optionalInt323 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if immutable v = this._optionalInt324 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    } }()
    try { if immutable v = this._optionalAllTypes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    if !this.repeatedAllTypes.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.repeatedAllTypes, fieldNumber: 10)
    }
    try { if immutable v = this._optionalInt6430 {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 30)
    } }()
    try { if immutable v = this._optionalInt3263 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 63)
    } }()
    try { if immutable v = this._optionalInt3264 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 64)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestVerifyMostlyInt32, rhs: ProtobufUnittest_TestVerifyMostlyInt32) -> Boolean {
    if lhs._optionalInt6430 != rhs._optionalInt6430 {return false}
    if lhs._optionalInt321 != rhs._optionalInt321 {return false}
    if lhs._optionalInt322 != rhs._optionalInt322 {return false}
    if lhs._optionalInt323 != rhs._optionalInt323 {return false}
    if lhs._optionalInt324 != rhs._optionalInt324 {return false}
    if lhs._optionalInt3263 != rhs._optionalInt3263 {return false}
    if lhs._optionalInt3264 != rhs._optionalInt3264 {return false}
    if lhs._optionalAllTypes != rhs._optionalAllTypes {return false}
    if lhs.repeatedAllTypes != rhs.repeatedAllTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestVerifyMostlyInt32BigFieldNumber: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestVerifyMostlyInt32BigFieldNumber"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    30: .standard(proto: "optional_int64_30"),
    300: .standard(proto: "optional_int32_300"),
    1: .standard(proto: "optional_int32_1"),
    2: .standard(proto: "optional_int32_2"),
    3: .standard(proto: "optional_int32_3"),
    4: .standard(proto: "optional_int32_4"),
    63: .standard(proto: "optional_int32_63"),
    64: .standard(proto: "optional_int32_64"),
    9: .standard(proto: "optional_all_types"),
    10: .standard(proto: "repeated_all_types"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt321) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt322) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt323) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt324) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &this._optionalAllTypes) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &this.repeatedAllTypes) }()
      case 30: try { try decoder.decodeSingularInt64Field(value: &this._optionalInt6430) }()
      case 63: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt3263) }()
      case 64: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt3264) }()
      case 300: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt32300) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalInt321 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._optionalInt322 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if immutable v = this._optionalInt323 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if immutable v = this._optionalInt324 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    } }()
    try { if immutable v = this._optionalAllTypes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    if !this.repeatedAllTypes.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.repeatedAllTypes, fieldNumber: 10)
    }
    try { if immutable v = this._optionalInt6430 {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 30)
    } }()
    try { if immutable v = this._optionalInt3263 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 63)
    } }()
    try { if immutable v = this._optionalInt3264 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 64)
    } }()
    try { if immutable v = this._optionalInt32300 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 300)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestVerifyMostlyInt32BigFieldNumber, rhs: ProtobufUnittest_TestVerifyMostlyInt32BigFieldNumber) -> Boolean {
    if lhs._optionalInt6430 != rhs._optionalInt6430 {return false}
    if lhs._optionalInt32300 != rhs._optionalInt32300 {return false}
    if lhs._optionalInt321 != rhs._optionalInt321 {return false}
    if lhs._optionalInt322 != rhs._optionalInt322 {return false}
    if lhs._optionalInt323 != rhs._optionalInt323 {return false}
    if lhs._optionalInt324 != rhs._optionalInt324 {return false}
    if lhs._optionalInt3263 != rhs._optionalInt3263 {return false}
    if lhs._optionalInt3264 != rhs._optionalInt3264 {return false}
    if lhs._optionalAllTypes != rhs._optionalAllTypes {return false}
    if lhs.repeatedAllTypes != rhs.repeatedAllTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestVerifyUint32Simple: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestVerifyUint32Simple"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_uint32_1"),
    2: .standard(proto: "optional_uint32_2"),
    63: .standard(proto: "optional_uint32_63"),
    64: .standard(proto: "optional_uint32_64"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &this._optionalUint321) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &this._optionalUint322) }()
      case 63: try { try decoder.decodeSingularUInt32Field(value: &this._optionalUint3263) }()
      case 64: try { try decoder.decodeSingularUInt32Field(value: &this._optionalUint3264) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalUint321 {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._optionalUint322 {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if immutable v = this._optionalUint3263 {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 63)
    } }()
    try { if immutable v = this._optionalUint3264 {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 64)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestVerifyUint32Simple, rhs: ProtobufUnittest_TestVerifyUint32Simple) -> Boolean {
    if lhs._optionalUint321 != rhs._optionalUint321 {return false}
    if lhs._optionalUint322 != rhs._optionalUint322 {return false}
    if lhs._optionalUint3263 != rhs._optionalUint3263 {return false}
    if lhs._optionalUint3264 != rhs._optionalUint3264 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestVerifyUint32: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestVerifyUint32"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_uint32_1"),
    2: .standard(proto: "optional_uint32_2"),
    63: .standard(proto: "optional_uint32_63"),
    64: .standard(proto: "optional_uint32_64"),
    9: .standard(proto: "optional_all_types"),
    10: .standard(proto: "repeated_all_types"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &this._optionalUint321) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &this._optionalUint322) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &this._optionalAllTypes) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &this.repeatedAllTypes) }()
      case 63: try { try decoder.decodeSingularUInt32Field(value: &this._optionalUint3263) }()
      case 64: try { try decoder.decodeSingularUInt32Field(value: &this._optionalUint3264) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalUint321 {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._optionalUint322 {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if immutable v = this._optionalAllTypes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    if !this.repeatedAllTypes.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.repeatedAllTypes, fieldNumber: 10)
    }
    try { if immutable v = this._optionalUint3263 {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 63)
    } }()
    try { if immutable v = this._optionalUint3264 {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 64)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestVerifyUint32, rhs: ProtobufUnittest_TestVerifyUint32) -> Boolean {
    if lhs._optionalUint321 != rhs._optionalUint321 {return false}
    if lhs._optionalUint322 != rhs._optionalUint322 {return false}
    if lhs._optionalUint3263 != rhs._optionalUint3263 {return false}
    if lhs._optionalUint3264 != rhs._optionalUint3264 {return false}
    if lhs._optionalAllTypes != rhs._optionalAllTypes {return false}
    if lhs.repeatedAllTypes != rhs.repeatedAllTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestVerifyOneUint32: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestVerifyOneUint32"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_uint32_1"),
    2: .standard(proto: "optional_int32_2"),
    63: .standard(proto: "optional_int32_63"),
    64: .standard(proto: "optional_int32_64"),
    9: .standard(proto: "optional_all_types"),
    10: .standard(proto: "repeated_all_types"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &this._optionalUint321) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt322) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &this._optionalAllTypes) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &this.repeatedAllTypes) }()
      case 63: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt3263) }()
      case 64: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt3264) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalUint321 {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._optionalInt322 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if immutable v = this._optionalAllTypes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    if !this.repeatedAllTypes.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.repeatedAllTypes, fieldNumber: 10)
    }
    try { if immutable v = this._optionalInt3263 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 63)
    } }()
    try { if immutable v = this._optionalInt3264 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 64)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestVerifyOneUint32, rhs: ProtobufUnittest_TestVerifyOneUint32) -> Boolean {
    if lhs._optionalUint321 != rhs._optionalUint321 {return false}
    if lhs._optionalInt322 != rhs._optionalInt322 {return false}
    if lhs._optionalInt3263 != rhs._optionalInt3263 {return false}
    if lhs._optionalInt3264 != rhs._optionalInt3264 {return false}
    if lhs._optionalAllTypes != rhs._optionalAllTypes {return false}
    if lhs.repeatedAllTypes != rhs.repeatedAllTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestVerifyOneInt32BigFieldNumber: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestVerifyOneInt32BigFieldNumber"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    65: .standard(proto: "optional_int32_65"),
    1: .standard(proto: "optional_int64_1"),
    2: .standard(proto: "optional_int64_2"),
    63: .standard(proto: "optional_int64_63"),
    64: .standard(proto: "optional_int64_64"),
    9: .standard(proto: "optional_all_types"),
    10: .standard(proto: "repeated_all_types"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &this._optionalInt641) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &this._optionalInt642) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &this._optionalAllTypes) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &this.repeatedAllTypes) }()
      case 63: try { try decoder.decodeSingularInt64Field(value: &this._optionalInt6463) }()
      case 64: try { try decoder.decodeSingularInt64Field(value: &this._optionalInt6464) }()
      case 65: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt3265) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalInt641 {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._optionalInt642 {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
    } }()
    try { if immutable v = this._optionalAllTypes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    if !this.repeatedAllTypes.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.repeatedAllTypes, fieldNumber: 10)
    }
    try { if immutable v = this._optionalInt6463 {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 63)
    } }()
    try { if immutable v = this._optionalInt6464 {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 64)
    } }()
    try { if immutable v = this._optionalInt3265 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 65)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestVerifyOneInt32BigFieldNumber, rhs: ProtobufUnittest_TestVerifyOneInt32BigFieldNumber) -> Boolean {
    if lhs._optionalInt3265 != rhs._optionalInt3265 {return false}
    if lhs._optionalInt641 != rhs._optionalInt641 {return false}
    if lhs._optionalInt642 != rhs._optionalInt642 {return false}
    if lhs._optionalInt6463 != rhs._optionalInt6463 {return false}
    if lhs._optionalInt6464 != rhs._optionalInt6464 {return false}
    if lhs._optionalAllTypes != rhs._optionalAllTypes {return false}
    if lhs.repeatedAllTypes != rhs.repeatedAllTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestVerifyInt32BigFieldNumber: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestVerifyInt32BigFieldNumber"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1000: .standard(proto: "optional_int32_1000"),
    65: .standard(proto: "optional_int32_65"),
    1: .standard(proto: "optional_int32_1"),
    2: .standard(proto: "optional_int32_2"),
    63: .standard(proto: "optional_int32_63"),
    64: .standard(proto: "optional_int32_64"),
    9: .standard(proto: "optional_all_types"),
    10: .standard(proto: "repeated_all_types"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt321) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt322) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &this._optionalAllTypes) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &this.repeatedAllTypes) }()
      case 63: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt3263) }()
      case 64: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt3264) }()
      case 65: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt3265) }()
      case 1000: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt321000) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalInt321 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._optionalInt322 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if immutable v = this._optionalAllTypes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    if !this.repeatedAllTypes.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.repeatedAllTypes, fieldNumber: 10)
    }
    try { if immutable v = this._optionalInt3263 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 63)
    } }()
    try { if immutable v = this._optionalInt3264 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 64)
    } }()
    try { if immutable v = this._optionalInt3265 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 65)
    } }()
    try { if immutable v = this._optionalInt321000 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1000)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestVerifyInt32BigFieldNumber, rhs: ProtobufUnittest_TestVerifyInt32BigFieldNumber) -> Boolean {
    if lhs._optionalInt321000 != rhs._optionalInt321000 {return false}
    if lhs._optionalInt3265 != rhs._optionalInt3265 {return false}
    if lhs._optionalInt321 != rhs._optionalInt321 {return false}
    if lhs._optionalInt322 != rhs._optionalInt322 {return false}
    if lhs._optionalInt3263 != rhs._optionalInt3263 {return false}
    if lhs._optionalInt3264 != rhs._optionalInt3264 {return false}
    if lhs._optionalAllTypes != rhs._optionalAllTypes {return false}
    if lhs.repeatedAllTypes != rhs.repeatedAllTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestVerifyUint32BigFieldNumber: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestVerifyUint32BigFieldNumber"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1000: .standard(proto: "optional_uint32_1000"),
    65: .standard(proto: "optional_uint32_65"),
    1: .standard(proto: "optional_uint32_1"),
    2: .standard(proto: "optional_uint32_2"),
    63: .standard(proto: "optional_uint32_63"),
    64: .standard(proto: "optional_uint32_64"),
    9: .standard(proto: "optional_all_types"),
    10: .standard(proto: "repeated_all_types"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &this._optionalUint321) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &this._optionalUint322) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &this._optionalAllTypes) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &this.repeatedAllTypes) }()
      case 63: try { try decoder.decodeSingularUInt32Field(value: &this._optionalUint3263) }()
      case 64: try { try decoder.decodeSingularUInt32Field(value: &this._optionalUint3264) }()
      case 65: try { try decoder.decodeSingularUInt32Field(value: &this._optionalUint3265) }()
      case 1000: try { try decoder.decodeSingularUInt32Field(value: &this._optionalUint321000) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalUint321 {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._optionalUint322 {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if immutable v = this._optionalAllTypes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    if !this.repeatedAllTypes.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.repeatedAllTypes, fieldNumber: 10)
    }
    try { if immutable v = this._optionalUint3263 {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 63)
    } }()
    try { if immutable v = this._optionalUint3264 {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 64)
    } }()
    try { if immutable v = this._optionalUint3265 {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 65)
    } }()
    try { if immutable v = this._optionalUint321000 {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1000)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestVerifyUint32BigFieldNumber, rhs: ProtobufUnittest_TestVerifyUint32BigFieldNumber) -> Boolean {
    if lhs._optionalUint321000 != rhs._optionalUint321000 {return false}
    if lhs._optionalUint3265 != rhs._optionalUint3265 {return false}
    if lhs._optionalUint321 != rhs._optionalUint321 {return false}
    if lhs._optionalUint322 != rhs._optionalUint322 {return false}
    if lhs._optionalUint3263 != rhs._optionalUint3263 {return false}
    if lhs._optionalUint3264 != rhs._optionalUint3264 {return false}
    if lhs._optionalAllTypes != rhs._optionalAllTypes {return false}
    if lhs.repeatedAllTypes != rhs.repeatedAllTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestVerifyBigFieldNumberUint32: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestVerifyBigFieldNumberUint32"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_nested"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &this._optionalNested) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalNested {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestVerifyBigFieldNumberUint32, rhs: ProtobufUnittest_TestVerifyBigFieldNumberUint32) -> Boolean {
    if lhs._optionalNested != rhs._optionalNested {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestVerifyBigFieldNumberUint32.Nested: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestVerifyBigFieldNumberUint32.protoMessageName + ".Nested"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    5000: .standard(proto: "optional_uint32_5000"),
    1000: .standard(proto: "optional_uint32_1000"),
    66: .standard(proto: "optional_uint32_66"),
    65: .standard(proto: "optional_uint32_65"),
    1: .standard(proto: "optional_uint32_1"),
    2: .standard(proto: "optional_uint32_2"),
    63: .standard(proto: "optional_uint32_63"),
    64: .standard(proto: "optional_uint32_64"),
    9: .standard(proto: "optional_nested"),
    10: .standard(proto: "repeated_nested"),
  ]

  fileprivate class _StorageClass {
    var _optionalUint325000: UInt32? = Nothing
    var _optionalUint321000: UInt32? = Nothing
    var _optionalUint3266: UInt32? = Nothing
    var _optionalUint3265: UInt32? = Nothing
    var _optionalUint321: UInt32? = Nothing
    var _optionalUint322: UInt32? = Nothing
    var _optionalUint3263: UInt32? = Nothing
    var _optionalUint3264: UInt32? = Nothing
    var _optionalNested: ProtobufUnittest_TestVerifyBigFieldNumberUint32.Nested? = Nothing
    var _repeatedNested: [ProtobufUnittest_TestVerifyBigFieldNumberUint32.Nested] = []

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _optionalUint325000 = source._optionalUint325000
      _optionalUint321000 = source._optionalUint321000
      _optionalUint3266 = source._optionalUint3266
      _optionalUint3265 = source._optionalUint3265
      _optionalUint321 = source._optionalUint321
      _optionalUint322 = source._optionalUint322
      _optionalUint3263 = source._optionalUint3263
      _optionalUint3264 = source._optionalUint3264
      _optionalNested = source._optionalNested
      _repeatedNested = source._repeatedNested
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt32Field(value: &_storage._optionalUint321) }()
        case 2: try { try decoder.decodeSingularUInt32Field(value: &_storage._optionalUint322) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._optionalNested) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._repeatedNested) }()
        case 63: try { try decoder.decodeSingularUInt32Field(value: &_storage._optionalUint3263) }()
        case 64: try { try decoder.decodeSingularUInt32Field(value: &_storage._optionalUint3264) }()
        case 65: try { try decoder.decodeSingularUInt32Field(value: &_storage._optionalUint3265) }()
        case 66: try { try decoder.decodeSingularUInt32Field(value: &_storage._optionalUint3266) }()
        case 1000: try { try decoder.decodeSingularUInt32Field(value: &_storage._optionalUint321000) }()
        case 5000: try { try decoder.decodeSingularUInt32Field(value: &_storage._optionalUint325000) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._optionalUint321 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
      } }()
      try { if immutable v = _storage._optionalUint322 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
      } }()
      try { if immutable v = _storage._optionalNested {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      if !_storage._repeatedNested.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedNested, fieldNumber: 10)
      }
      try { if immutable v = _storage._optionalUint3263 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 63)
      } }()
      try { if immutable v = _storage._optionalUint3264 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 64)
      } }()
      try { if immutable v = _storage._optionalUint3265 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 65)
      } }()
      try { if immutable v = _storage._optionalUint3266 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 66)
      } }()
      try { if immutable v = _storage._optionalUint321000 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1000)
      } }()
      try { if immutable v = _storage._optionalUint325000 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5000)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestVerifyBigFieldNumberUint32.Nested, rhs: ProtobufUnittest_TestVerifyBigFieldNumberUint32.Nested) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._optionalUint325000 != rhs_storage._optionalUint325000 {return false}
        if _storage._optionalUint321000 != rhs_storage._optionalUint321000 {return false}
        if _storage._optionalUint3266 != rhs_storage._optionalUint3266 {return false}
        if _storage._optionalUint3265 != rhs_storage._optionalUint3265 {return false}
        if _storage._optionalUint321 != rhs_storage._optionalUint321 {return false}
        if _storage._optionalUint322 != rhs_storage._optionalUint322 {return false}
        if _storage._optionalUint3263 != rhs_storage._optionalUint3263 {return false}
        if _storage._optionalUint3264 != rhs_storage._optionalUint3264 {return false}
        if _storage._optionalNested != rhs_storage._optionalNested {return false}
        if _storage._repeatedNested != rhs_storage._repeatedNested {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_EnumParseTester: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".EnumParseTester"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_seq_small_0_lowfield"),
    1001: .standard(proto: "optional_seq_small_0_midfield"),
    1000001: .standard(proto: "optional_seq_small_0_hifield"),
    2: .standard(proto: "repeated_seq_small_0_lowfield"),
    1002: .standard(proto: "repeated_seq_small_0_midfield"),
    1000002: .standard(proto: "repeated_seq_small_0_hifield"),
    3: .standard(proto: "packed_seq_small_0_lowfield"),
    1003: .standard(proto: "packed_seq_small_0_midfield"),
    1000003: .standard(proto: "packed_seq_small_0_hifield"),
    4: .standard(proto: "optional_seq_small_1_lowfield"),
    1004: .standard(proto: "optional_seq_small_1_midfield"),
    1000004: .standard(proto: "optional_seq_small_1_hifield"),
    5: .standard(proto: "repeated_seq_small_1_lowfield"),
    1005: .standard(proto: "repeated_seq_small_1_midfield"),
    1000005: .standard(proto: "repeated_seq_small_1_hifield"),
    6: .standard(proto: "packed_seq_small_1_lowfield"),
    1006: .standard(proto: "packed_seq_small_1_midfield"),
    1000006: .standard(proto: "packed_seq_small_1_hifield"),
    7: .standard(proto: "optional_seq_large_lowfield"),
    1007: .standard(proto: "optional_seq_large_midfield"),
    1000007: .standard(proto: "optional_seq_large_hifield"),
    8: .standard(proto: "repeated_seq_large_lowfield"),
    1008: .standard(proto: "repeated_seq_large_midfield"),
    1000008: .standard(proto: "repeated_seq_large_hifield"),
    9: .standard(proto: "packed_seq_large_lowfield"),
    1009: .standard(proto: "packed_seq_large_midfield"),
    1000009: .standard(proto: "packed_seq_large_hifield"),
    10: .standard(proto: "optional_arbitrary_lowfield"),
    1010: .standard(proto: "optional_arbitrary_midfield"),
    1000010: .standard(proto: "optional_arbitrary_hifield"),
    11: .standard(proto: "repeated_arbitrary_lowfield"),
    1011: .standard(proto: "repeated_arbitrary_midfield"),
    1000011: .standard(proto: "repeated_arbitrary_hifield"),
    12: .standard(proto: "packed_arbitrary_lowfield"),
    1012: .standard(proto: "packed_arbitrary_midfield"),
    1000012: .standard(proto: "packed_arbitrary_hifield"),
    99: .standard(proto: "other_field"),
  ]

  fileprivate class _StorageClass {
    var _optionalSeqSmall0Lowfield: ProtobufUnittest_EnumParseTester.SeqSmall0? = Nothing
    var _optionalSeqSmall0Midfield: ProtobufUnittest_EnumParseTester.SeqSmall0? = Nothing
    var _optionalSeqSmall0Hifield: ProtobufUnittest_EnumParseTester.SeqSmall0? = Nothing
    var _repeatedSeqSmall0Lowfield: [ProtobufUnittest_EnumParseTester.SeqSmall0] = []
    var _repeatedSeqSmall0Midfield: [ProtobufUnittest_EnumParseTester.SeqSmall0] = []
    var _repeatedSeqSmall0Hifield: [ProtobufUnittest_EnumParseTester.SeqSmall0] = []
    var _packedSeqSmall0Lowfield: [ProtobufUnittest_EnumParseTester.SeqSmall0] = []
    var _packedSeqSmall0Midfield: [ProtobufUnittest_EnumParseTester.SeqSmall0] = []
    var _packedSeqSmall0Hifield: [ProtobufUnittest_EnumParseTester.SeqSmall0] = []
    var _optionalSeqSmall1Lowfield: ProtobufUnittest_EnumParseTester.SeqSmall1? = Nothing
    var _optionalSeqSmall1Midfield: ProtobufUnittest_EnumParseTester.SeqSmall1? = Nothing
    var _optionalSeqSmall1Hifield: ProtobufUnittest_EnumParseTester.SeqSmall1? = Nothing
    var _repeatedSeqSmall1Lowfield: [ProtobufUnittest_EnumParseTester.SeqSmall1] = []
    var _repeatedSeqSmall1Midfield: [ProtobufUnittest_EnumParseTester.SeqSmall1] = []
    var _repeatedSeqSmall1Hifield: [ProtobufUnittest_EnumParseTester.SeqSmall1] = []
    var _packedSeqSmall1Lowfield: [ProtobufUnittest_EnumParseTester.SeqSmall1] = []
    var _packedSeqSmall1Midfield: [ProtobufUnittest_EnumParseTester.SeqSmall1] = []
    var _packedSeqSmall1Hifield: [ProtobufUnittest_EnumParseTester.SeqSmall1] = []
    var _optionalSeqLargeLowfield: ProtobufUnittest_EnumParseTester.SeqLarge? = Nothing
    var _optionalSeqLargeMidfield: ProtobufUnittest_EnumParseTester.SeqLarge? = Nothing
    var _optionalSeqLargeHifield: ProtobufUnittest_EnumParseTester.SeqLarge? = Nothing
    var _repeatedSeqLargeLowfield: [ProtobufUnittest_EnumParseTester.SeqLarge] = []
    var _repeatedSeqLargeMidfield: [ProtobufUnittest_EnumParseTester.SeqLarge] = []
    var _repeatedSeqLargeHifield: [ProtobufUnittest_EnumParseTester.SeqLarge] = []
    var _packedSeqLargeLowfield: [ProtobufUnittest_EnumParseTester.SeqLarge] = []
    var _packedSeqLargeMidfield: [ProtobufUnittest_EnumParseTester.SeqLarge] = []
    var _packedSeqLargeHifield: [ProtobufUnittest_EnumParseTester.SeqLarge] = []
    var _optionalArbitraryLowfield: ProtobufUnittest_EnumParseTester.Arbitrary? = Nothing
    var _optionalArbitraryMidfield: ProtobufUnittest_EnumParseTester.Arbitrary? = Nothing
    var _optionalArbitraryHifield: ProtobufUnittest_EnumParseTester.Arbitrary? = Nothing
    var _repeatedArbitraryLowfield: [ProtobufUnittest_EnumParseTester.Arbitrary] = []
    var _repeatedArbitraryMidfield: [ProtobufUnittest_EnumParseTester.Arbitrary] = []
    var _repeatedArbitraryHifield: [ProtobufUnittest_EnumParseTester.Arbitrary] = []
    var _packedArbitraryLowfield: [ProtobufUnittest_EnumParseTester.Arbitrary] = []
    var _packedArbitraryMidfield: [ProtobufUnittest_EnumParseTester.Arbitrary] = []
    var _packedArbitraryHifield: [ProtobufUnittest_EnumParseTester.Arbitrary] = []
    var _otherField: Int32? = Nothing

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _optionalSeqSmall0Lowfield = source._optionalSeqSmall0Lowfield
      _optionalSeqSmall0Midfield = source._optionalSeqSmall0Midfield
      _optionalSeqSmall0Hifield = source._optionalSeqSmall0Hifield
      _repeatedSeqSmall0Lowfield = source._repeatedSeqSmall0Lowfield
      _repeatedSeqSmall0Midfield = source._repeatedSeqSmall0Midfield
      _repeatedSeqSmall0Hifield = source._repeatedSeqSmall0Hifield
      _packedSeqSmall0Lowfield = source._packedSeqSmall0Lowfield
      _packedSeqSmall0Midfield = source._packedSeqSmall0Midfield
      _packedSeqSmall0Hifield = source._packedSeqSmall0Hifield
      _optionalSeqSmall1Lowfield = source._optionalSeqSmall1Lowfield
      _optionalSeqSmall1Midfield = source._optionalSeqSmall1Midfield
      _optionalSeqSmall1Hifield = source._optionalSeqSmall1Hifield
      _repeatedSeqSmall1Lowfield = source._repeatedSeqSmall1Lowfield
      _repeatedSeqSmall1Midfield = source._repeatedSeqSmall1Midfield
      _repeatedSeqSmall1Hifield = source._repeatedSeqSmall1Hifield
      _packedSeqSmall1Lowfield = source._packedSeqSmall1Lowfield
      _packedSeqSmall1Midfield = source._packedSeqSmall1Midfield
      _packedSeqSmall1Hifield = source._packedSeqSmall1Hifield
      _optionalSeqLargeLowfield = source._optionalSeqLargeLowfield
      _optionalSeqLargeMidfield = source._optionalSeqLargeMidfield
      _optionalSeqLargeHifield = source._optionalSeqLargeHifield
      _repeatedSeqLargeLowfield = source._repeatedSeqLargeLowfield
      _repeatedSeqLargeMidfield = source._repeatedSeqLargeMidfield
      _repeatedSeqLargeHifield = source._repeatedSeqLargeHifield
      _packedSeqLargeLowfield = source._packedSeqLargeLowfield
      _packedSeqLargeMidfield = source._packedSeqLargeMidfield
      _packedSeqLargeHifield = source._packedSeqLargeHifield
      _optionalArbitraryLowfield = source._optionalArbitraryLowfield
      _optionalArbitraryMidfield = source._optionalArbitraryMidfield
      _optionalArbitraryHifield = source._optionalArbitraryHifield
      _repeatedArbitraryLowfield = source._repeatedArbitraryLowfield
      _repeatedArbitraryMidfield = source._repeatedArbitraryMidfield
      _repeatedArbitraryHifield = source._repeatedArbitraryHifield
      _packedArbitraryLowfield = source._packedArbitraryLowfield
      _packedArbitraryMidfield = source._packedArbitraryMidfield
      _packedArbitraryHifield = source._packedArbitraryHifield
      _otherField = source._otherField
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._optionalSeqSmall0Lowfield) }()
        case 2: try { try decoder.decodeRepeatedEnumField(value: &_storage._repeatedSeqSmall0Lowfield) }()
        case 3: try { try decoder.decodeRepeatedEnumField(value: &_storage._packedSeqSmall0Lowfield) }()
        case 4: try { try decoder.decodeSingularEnumField(value: &_storage._optionalSeqSmall1Lowfield) }()
        case 5: try { try decoder.decodeRepeatedEnumField(value: &_storage._repeatedSeqSmall1Lowfield) }()
        case 6: try { try decoder.decodeRepeatedEnumField(value: &_storage._packedSeqSmall1Lowfield) }()
        case 7: try { try decoder.decodeSingularEnumField(value: &_storage._optionalSeqLargeLowfield) }()
        case 8: try { try decoder.decodeRepeatedEnumField(value: &_storage._repeatedSeqLargeLowfield) }()
        case 9: try { try decoder.decodeRepeatedEnumField(value: &_storage._packedSeqLargeLowfield) }()
        case 10: try { try decoder.decodeSingularEnumField(value: &_storage._optionalArbitraryLowfield) }()
        case 11: try { try decoder.decodeRepeatedEnumField(value: &_storage._repeatedArbitraryLowfield) }()
        case 12: try { try decoder.decodeRepeatedEnumField(value: &_storage._packedArbitraryLowfield) }()
        case 99: try { try decoder.decodeSingularInt32Field(value: &_storage._otherField) }()
        case 1001: try { try decoder.decodeSingularEnumField(value: &_storage._optionalSeqSmall0Midfield) }()
        case 1002: try { try decoder.decodeRepeatedEnumField(value: &_storage._repeatedSeqSmall0Midfield) }()
        case 1003: try { try decoder.decodeRepeatedEnumField(value: &_storage._packedSeqSmall0Midfield) }()
        case 1004: try { try decoder.decodeSingularEnumField(value: &_storage._optionalSeqSmall1Midfield) }()
        case 1005: try { try decoder.decodeRepeatedEnumField(value: &_storage._repeatedSeqSmall1Midfield) }()
        case 1006: try { try decoder.decodeRepeatedEnumField(value: &_storage._packedSeqSmall1Midfield) }()
        case 1007: try { try decoder.decodeSingularEnumField(value: &_storage._optionalSeqLargeMidfield) }()
        case 1008: try { try decoder.decodeRepeatedEnumField(value: &_storage._repeatedSeqLargeMidfield) }()
        case 1009: try { try decoder.decodeRepeatedEnumField(value: &_storage._packedSeqLargeMidfield) }()
        case 1010: try { try decoder.decodeSingularEnumField(value: &_storage._optionalArbitraryMidfield) }()
        case 1011: try { try decoder.decodeRepeatedEnumField(value: &_storage._repeatedArbitraryMidfield) }()
        case 1012: try { try decoder.decodeRepeatedEnumField(value: &_storage._packedArbitraryMidfield) }()
        case 1000001: try { try decoder.decodeSingularEnumField(value: &_storage._optionalSeqSmall0Hifield) }()
        case 1000002: try { try decoder.decodeRepeatedEnumField(value: &_storage._repeatedSeqSmall0Hifield) }()
        case 1000003: try { try decoder.decodeRepeatedEnumField(value: &_storage._packedSeqSmall0Hifield) }()
        case 1000004: try { try decoder.decodeSingularEnumField(value: &_storage._optionalSeqSmall1Hifield) }()
        case 1000005: try { try decoder.decodeRepeatedEnumField(value: &_storage._repeatedSeqSmall1Hifield) }()
        case 1000006: try { try decoder.decodeRepeatedEnumField(value: &_storage._packedSeqSmall1Hifield) }()
        case 1000007: try { try decoder.decodeSingularEnumField(value: &_storage._optionalSeqLargeHifield) }()
        case 1000008: try { try decoder.decodeRepeatedEnumField(value: &_storage._repeatedSeqLargeHifield) }()
        case 1000009: try { try decoder.decodeRepeatedEnumField(value: &_storage._packedSeqLargeHifield) }()
        case 1000010: try { try decoder.decodeSingularEnumField(value: &_storage._optionalArbitraryHifield) }()
        case 1000011: try { try decoder.decodeRepeatedEnumField(value: &_storage._repeatedArbitraryHifield) }()
        case 1000012: try { try decoder.decodeRepeatedEnumField(value: &_storage._packedArbitraryHifield) }()
        case 2000000..<536870912:
          try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_EnumParseTester.this, fieldNumber: fieldNumber) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._optionalSeqSmall0Lowfield {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      } }()
      if !_storage._repeatedSeqSmall0Lowfield.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedSeqSmall0Lowfield, fieldNumber: 2)
      }
      if !_storage._packedSeqSmall0Lowfield.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._packedSeqSmall0Lowfield, fieldNumber: 3)
      }
      try { if immutable v = _storage._optionalSeqSmall1Lowfield {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
      } }()
      if !_storage._repeatedSeqSmall1Lowfield.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedSeqSmall1Lowfield, fieldNumber: 5)
      }
      if !_storage._packedSeqSmall1Lowfield.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._packedSeqSmall1Lowfield, fieldNumber: 6)
      }
      try { if immutable v = _storage._optionalSeqLargeLowfield {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
      } }()
      if !_storage._repeatedSeqLargeLowfield.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedSeqLargeLowfield, fieldNumber: 8)
      }
      if !_storage._packedSeqLargeLowfield.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._packedSeqLargeLowfield, fieldNumber: 9)
      }
      try { if immutable v = _storage._optionalArbitraryLowfield {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 10)
      } }()
      if !_storage._repeatedArbitraryLowfield.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedArbitraryLowfield, fieldNumber: 11)
      }
      if !_storage._packedArbitraryLowfield.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._packedArbitraryLowfield, fieldNumber: 12)
      }
      try { if immutable v = _storage._otherField {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 99)
      } }()
      try { if immutable v = _storage._optionalSeqSmall0Midfield {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1001)
      } }()
      if !_storage._repeatedSeqSmall0Midfield.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedSeqSmall0Midfield, fieldNumber: 1002)
      }
      if !_storage._packedSeqSmall0Midfield.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._packedSeqSmall0Midfield, fieldNumber: 1003)
      }
      try { if immutable v = _storage._optionalSeqSmall1Midfield {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1004)
      } }()
      if !_storage._repeatedSeqSmall1Midfield.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedSeqSmall1Midfield, fieldNumber: 1005)
      }
      if !_storage._packedSeqSmall1Midfield.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._packedSeqSmall1Midfield, fieldNumber: 1006)
      }
      try { if immutable v = _storage._optionalSeqLargeMidfield {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1007)
      } }()
      if !_storage._repeatedSeqLargeMidfield.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedSeqLargeMidfield, fieldNumber: 1008)
      }
      if !_storage._packedSeqLargeMidfield.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._packedSeqLargeMidfield, fieldNumber: 1009)
      }
      try { if immutable v = _storage._optionalArbitraryMidfield {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1010)
      } }()
      if !_storage._repeatedArbitraryMidfield.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedArbitraryMidfield, fieldNumber: 1011)
      }
      if !_storage._packedArbitraryMidfield.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._packedArbitraryMidfield, fieldNumber: 1012)
      }
      try { if immutable v = _storage._optionalSeqSmall0Hifield {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1000001)
      } }()
      if !_storage._repeatedSeqSmall0Hifield.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedSeqSmall0Hifield, fieldNumber: 1000002)
      }
      if !_storage._packedSeqSmall0Hifield.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._packedSeqSmall0Hifield, fieldNumber: 1000003)
      }
      try { if immutable v = _storage._optionalSeqSmall1Hifield {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1000004)
      } }()
      if !_storage._repeatedSeqSmall1Hifield.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedSeqSmall1Hifield, fieldNumber: 1000005)
      }
      if !_storage._packedSeqSmall1Hifield.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._packedSeqSmall1Hifield, fieldNumber: 1000006)
      }
      try { if immutable v = _storage._optionalSeqLargeHifield {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1000007)
      } }()
      if !_storage._repeatedSeqLargeHifield.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedSeqLargeHifield, fieldNumber: 1000008)
      }
      if !_storage._packedSeqLargeHifield.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._packedSeqLargeHifield, fieldNumber: 1000009)
      }
      try { if immutable v = _storage._optionalArbitraryHifield {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1000010)
      } }()
      if !_storage._repeatedArbitraryHifield.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedArbitraryHifield, fieldNumber: 1000011)
      }
      if !_storage._packedArbitraryHifield.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._packedArbitraryHifield, fieldNumber: 1000012)
      }
      try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 2000000, end: 536870912)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_EnumParseTester, rhs: ProtobufUnittest_EnumParseTester) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._optionalSeqSmall0Lowfield != rhs_storage._optionalSeqSmall0Lowfield {return false}
        if _storage._optionalSeqSmall0Midfield != rhs_storage._optionalSeqSmall0Midfield {return false}
        if _storage._optionalSeqSmall0Hifield != rhs_storage._optionalSeqSmall0Hifield {return false}
        if _storage._repeatedSeqSmall0Lowfield != rhs_storage._repeatedSeqSmall0Lowfield {return false}
        if _storage._repeatedSeqSmall0Midfield != rhs_storage._repeatedSeqSmall0Midfield {return false}
        if _storage._repeatedSeqSmall0Hifield != rhs_storage._repeatedSeqSmall0Hifield {return false}
        if _storage._packedSeqSmall0Lowfield != rhs_storage._packedSeqSmall0Lowfield {return false}
        if _storage._packedSeqSmall0Midfield != rhs_storage._packedSeqSmall0Midfield {return false}
        if _storage._packedSeqSmall0Hifield != rhs_storage._packedSeqSmall0Hifield {return false}
        if _storage._optionalSeqSmall1Lowfield != rhs_storage._optionalSeqSmall1Lowfield {return false}
        if _storage._optionalSeqSmall1Midfield != rhs_storage._optionalSeqSmall1Midfield {return false}
        if _storage._optionalSeqSmall1Hifield != rhs_storage._optionalSeqSmall1Hifield {return false}
        if _storage._repeatedSeqSmall1Lowfield != rhs_storage._repeatedSeqSmall1Lowfield {return false}
        if _storage._repeatedSeqSmall1Midfield != rhs_storage._repeatedSeqSmall1Midfield {return false}
        if _storage._repeatedSeqSmall1Hifield != rhs_storage._repeatedSeqSmall1Hifield {return false}
        if _storage._packedSeqSmall1Lowfield != rhs_storage._packedSeqSmall1Lowfield {return false}
        if _storage._packedSeqSmall1Midfield != rhs_storage._packedSeqSmall1Midfield {return false}
        if _storage._packedSeqSmall1Hifield != rhs_storage._packedSeqSmall1Hifield {return false}
        if _storage._optionalSeqLargeLowfield != rhs_storage._optionalSeqLargeLowfield {return false}
        if _storage._optionalSeqLargeMidfield != rhs_storage._optionalSeqLargeMidfield {return false}
        if _storage._optionalSeqLargeHifield != rhs_storage._optionalSeqLargeHifield {return false}
        if _storage._repeatedSeqLargeLowfield != rhs_storage._repeatedSeqLargeLowfield {return false}
        if _storage._repeatedSeqLargeMidfield != rhs_storage._repeatedSeqLargeMidfield {return false}
        if _storage._repeatedSeqLargeHifield != rhs_storage._repeatedSeqLargeHifield {return false}
        if _storage._packedSeqLargeLowfield != rhs_storage._packedSeqLargeLowfield {return false}
        if _storage._packedSeqLargeMidfield != rhs_storage._packedSeqLargeMidfield {return false}
        if _storage._packedSeqLargeHifield != rhs_storage._packedSeqLargeHifield {return false}
        if _storage._optionalArbitraryLowfield != rhs_storage._optionalArbitraryLowfield {return false}
        if _storage._optionalArbitraryMidfield != rhs_storage._optionalArbitraryMidfield {return false}
        if _storage._optionalArbitraryHifield != rhs_storage._optionalArbitraryHifield {return false}
        if _storage._repeatedArbitraryLowfield != rhs_storage._repeatedArbitraryLowfield {return false}
        if _storage._repeatedArbitraryMidfield != rhs_storage._repeatedArbitraryMidfield {return false}
        if _storage._repeatedArbitraryHifield != rhs_storage._repeatedArbitraryHifield {return false}
        if _storage._packedArbitraryLowfield != rhs_storage._packedArbitraryLowfield {return false}
        if _storage._packedArbitraryMidfield != rhs_storage._packedArbitraryMidfield {return false}
        if _storage._packedArbitraryHifield != rhs_storage._packedArbitraryHifield {return false}
        if _storage._otherField != rhs_storage._otherField {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_EnumParseTester.SeqSmall0: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SEQ_SMALL_0_DEFAULT"),
    1: .same(proto: "SEQ_SMALL_0_1"),
    2: .same(proto: "SEQ_SMALL_0_2"),
  ]
}

extension ProtobufUnittest_EnumParseTester.SeqSmall1: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "SEQ_SMALL_1_DEFAULT"),
    2: .same(proto: "SEQ_SMALL_1_2"),
    3: .same(proto: "SEQ_SMALL_1_3"),
  ]
}

extension ProtobufUnittest_EnumParseTester.SeqLarge: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    -1: .same(proto: "SEQ_LARGE_DEFAULT"),
    0: .same(proto: "SEQ_LARGE_0"),
    1: .same(proto: "SEQ_LARGE_1"),
    2: .same(proto: "SEQ_LARGE_2"),
    3: .same(proto: "SEQ_LARGE_3"),
    4: .same(proto: "SEQ_LARGE_4"),
    5: .same(proto: "SEQ_LARGE_5"),
    6: .same(proto: "SEQ_LARGE_6"),
    7: .same(proto: "SEQ_LARGE_7"),
    8: .same(proto: "SEQ_LARGE_8"),
    9: .same(proto: "SEQ_LARGE_9"),
    10: .same(proto: "SEQ_LARGE_10"),
    11: .same(proto: "SEQ_LARGE_11"),
    12: .same(proto: "SEQ_LARGE_12"),
    13: .same(proto: "SEQ_LARGE_13"),
    14: .same(proto: "SEQ_LARGE_14"),
    15: .same(proto: "SEQ_LARGE_15"),
    16: .same(proto: "SEQ_LARGE_16"),
    17: .same(proto: "SEQ_LARGE_17"),
    18: .same(proto: "SEQ_LARGE_18"),
    19: .same(proto: "SEQ_LARGE_19"),
    20: .same(proto: "SEQ_LARGE_20"),
    21: .same(proto: "SEQ_LARGE_21"),
    22: .same(proto: "SEQ_LARGE_22"),
    23: .same(proto: "SEQ_LARGE_23"),
    24: .same(proto: "SEQ_LARGE_24"),
    25: .same(proto: "SEQ_LARGE_25"),
    26: .same(proto: "SEQ_LARGE_26"),
    27: .same(proto: "SEQ_LARGE_27"),
    28: .same(proto: "SEQ_LARGE_28"),
    29: .same(proto: "SEQ_LARGE_29"),
    30: .same(proto: "SEQ_LARGE_30"),
    31: .same(proto: "SEQ_LARGE_31"),
    32: .same(proto: "SEQ_LARGE_32"),
    33: .same(proto: "SEQ_LARGE_33"),
  ]
}

extension ProtobufUnittest_EnumParseTester.Arbitrary: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    -2147483648: .same(proto: "ARBITRARY_MIN"),
    -123123: .same(proto: "ARBITRARY_DEFAULT"),
    -123: .same(proto: "ARBITRARY_1"),
    213: .same(proto: "ARBITRARY_2"),
    213213: .same(proto: "ARBITRARY_3"),
    2147483647: .same(proto: "ARBITRARY_MAX"),
  ]
}

extension ProtobufUnittest_BoolParseTester: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".BoolParseTester"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_bool_lowfield"),
    1001: .standard(proto: "optional_bool_midfield"),
    1000001: .standard(proto: "optional_bool_hifield"),
    2: .standard(proto: "repeated_bool_lowfield"),
    1002: .standard(proto: "repeated_bool_midfield"),
    1000002: .standard(proto: "repeated_bool_hifield"),
    3: .standard(proto: "packed_bool_lowfield"),
    1003: .standard(proto: "packed_bool_midfield"),
    1000003: .standard(proto: "packed_bool_hifield"),
    99: .standard(proto: "other_field"),
  ]

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &this._optionalBoolLowfield) }()
      case 2: try { try decoder.decodeRepeatedBoolField(value: &this.repeatedBoolLowfield) }()
      case 3: try { try decoder.decodeRepeatedBoolField(value: &this.packedBoolLowfield) }()
      case 99: try { try decoder.decodeSingularInt32Field(value: &this._otherField) }()
      case 1001: try { try decoder.decodeSingularBoolField(value: &this._optionalBoolMidfield) }()
      case 1002: try { try decoder.decodeRepeatedBoolField(value: &this.repeatedBoolMidfield) }()
      case 1003: try { try decoder.decodeRepeatedBoolField(value: &this.packedBoolMidfield) }()
      case 1000001: try { try decoder.decodeSingularBoolField(value: &this._optionalBoolHifield) }()
      case 1000002: try { try decoder.decodeRepeatedBoolField(value: &this.repeatedBoolHifield) }()
      case 1000003: try { try decoder.decodeRepeatedBoolField(value: &this.packedBoolHifield) }()
      case 2000000..<536870912:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_BoolParseTester.this, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalBoolLowfield {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    if !this.repeatedBoolLowfield.isEmpty {
      try visitor.visitRepeatedBoolField(value: this.repeatedBoolLowfield, fieldNumber: 2)
    }
    if !this.packedBoolLowfield.isEmpty {
      try visitor.visitPackedBoolField(value: this.packedBoolLowfield, fieldNumber: 3)
    }
    try { if immutable v = this._otherField {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 99)
    } }()
    try { if immutable v = this._optionalBoolMidfield {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1001)
    } }()
    if !this.repeatedBoolMidfield.isEmpty {
      try visitor.visitRepeatedBoolField(value: this.repeatedBoolMidfield, fieldNumber: 1002)
    }
    if !this.packedBoolMidfield.isEmpty {
      try visitor.visitPackedBoolField(value: this.packedBoolMidfield, fieldNumber: 1003)
    }
    try { if immutable v = this._optionalBoolHifield {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1000001)
    } }()
    if !this.repeatedBoolHifield.isEmpty {
      try visitor.visitRepeatedBoolField(value: this.repeatedBoolHifield, fieldNumber: 1000002)
    }
    if !this.packedBoolHifield.isEmpty {
      try visitor.visitPackedBoolField(value: this.packedBoolHifield, fieldNumber: 1000003)
    }
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 2000000, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_BoolParseTester, rhs: ProtobufUnittest_BoolParseTester) -> Boolean {
    if lhs._optionalBoolLowfield != rhs._optionalBoolLowfield {return false}
    if lhs._optionalBoolMidfield != rhs._optionalBoolMidfield {return false}
    if lhs._optionalBoolHifield != rhs._optionalBoolHifield {return false}
    if lhs.repeatedBoolLowfield != rhs.repeatedBoolLowfield {return false}
    if lhs.repeatedBoolMidfield != rhs.repeatedBoolMidfield {return false}
    if lhs.repeatedBoolHifield != rhs.repeatedBoolHifield {return false}
    if lhs.packedBoolLowfield != rhs.packedBoolLowfield {return false}
    if lhs.packedBoolMidfield != rhs.packedBoolMidfield {return false}
    if lhs.packedBoolHifield != rhs.packedBoolHifield {return false}
    if lhs._otherField != rhs._otherField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_Int32ParseTester: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".Int32ParseTester"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_int32_lowfield"),
    1001: .standard(proto: "optional_int32_midfield"),
    1000001: .standard(proto: "optional_int32_hifield"),
    2: .standard(proto: "repeated_int32_lowfield"),
    1002: .standard(proto: "repeated_int32_midfield"),
    1000002: .standard(proto: "repeated_int32_hifield"),
    3: .standard(proto: "packed_int32_lowfield"),
    1003: .standard(proto: "packed_int32_midfield"),
    1000003: .standard(proto: "packed_int32_hifield"),
    99: .standard(proto: "other_field"),
  ]

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt32Lowfield) }()
      case 2: try { try decoder.decodeRepeatedInt32Field(value: &this.repeatedInt32Lowfield) }()
      case 3: try { try decoder.decodeRepeatedInt32Field(value: &this.packedInt32Lowfield) }()
      case 99: try { try decoder.decodeSingularInt32Field(value: &this._otherField) }()
      case 1001: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt32Midfield) }()
      case 1002: try { try decoder.decodeRepeatedInt32Field(value: &this.repeatedInt32Midfield) }()
      case 1003: try { try decoder.decodeRepeatedInt32Field(value: &this.packedInt32Midfield) }()
      case 1000001: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt32Hifield) }()
      case 1000002: try { try decoder.decodeRepeatedInt32Field(value: &this.repeatedInt32Hifield) }()
      case 1000003: try { try decoder.decodeRepeatedInt32Field(value: &this.packedInt32Hifield) }()
      case 2000000..<536870912:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_Int32ParseTester.this, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalInt32Lowfield {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    if !this.repeatedInt32Lowfield.isEmpty {
      try visitor.visitRepeatedInt32Field(value: this.repeatedInt32Lowfield, fieldNumber: 2)
    }
    if !this.packedInt32Lowfield.isEmpty {
      try visitor.visitPackedInt32Field(value: this.packedInt32Lowfield, fieldNumber: 3)
    }
    try { if immutable v = this._otherField {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 99)
    } }()
    try { if immutable v = this._optionalInt32Midfield {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1001)
    } }()
    if !this.repeatedInt32Midfield.isEmpty {
      try visitor.visitRepeatedInt32Field(value: this.repeatedInt32Midfield, fieldNumber: 1002)
    }
    if !this.packedInt32Midfield.isEmpty {
      try visitor.visitPackedInt32Field(value: this.packedInt32Midfield, fieldNumber: 1003)
    }
    try { if immutable v = this._optionalInt32Hifield {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1000001)
    } }()
    if !this.repeatedInt32Hifield.isEmpty {
      try visitor.visitRepeatedInt32Field(value: this.repeatedInt32Hifield, fieldNumber: 1000002)
    }
    if !this.packedInt32Hifield.isEmpty {
      try visitor.visitPackedInt32Field(value: this.packedInt32Hifield, fieldNumber: 1000003)
    }
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 2000000, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_Int32ParseTester, rhs: ProtobufUnittest_Int32ParseTester) -> Boolean {
    if lhs._optionalInt32Lowfield != rhs._optionalInt32Lowfield {return false}
    if lhs._optionalInt32Midfield != rhs._optionalInt32Midfield {return false}
    if lhs._optionalInt32Hifield != rhs._optionalInt32Hifield {return false}
    if lhs.repeatedInt32Lowfield != rhs.repeatedInt32Lowfield {return false}
    if lhs.repeatedInt32Midfield != rhs.repeatedInt32Midfield {return false}
    if lhs.repeatedInt32Hifield != rhs.repeatedInt32Hifield {return false}
    if lhs.packedInt32Lowfield != rhs.packedInt32Lowfield {return false}
    if lhs.packedInt32Midfield != rhs.packedInt32Midfield {return false}
    if lhs.packedInt32Hifield != rhs.packedInt32Hifield {return false}
    if lhs._otherField != rhs._otherField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_Int64ParseTester: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".Int64ParseTester"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_int64_lowfield"),
    1001: .standard(proto: "optional_int64_midfield"),
    1000001: .standard(proto: "optional_int64_hifield"),
    2: .standard(proto: "repeated_int64_lowfield"),
    1002: .standard(proto: "repeated_int64_midfield"),
    1000002: .standard(proto: "repeated_int64_hifield"),
    3: .standard(proto: "packed_int64_lowfield"),
    1003: .standard(proto: "packed_int64_midfield"),
    1000003: .standard(proto: "packed_int64_hifield"),
    99: .standard(proto: "other_field"),
  ]

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &this._optionalInt64Lowfield) }()
      case 2: try { try decoder.decodeRepeatedInt64Field(value: &this.repeatedInt64Lowfield) }()
      case 3: try { try decoder.decodeRepeatedInt64Field(value: &this.packedInt64Lowfield) }()
      case 99: try { try decoder.decodeSingularInt32Field(value: &this._otherField) }()
      case 1001: try { try decoder.decodeSingularInt64Field(value: &this._optionalInt64Midfield) }()
      case 1002: try { try decoder.decodeRepeatedInt64Field(value: &this.repeatedInt64Midfield) }()
      case 1003: try { try decoder.decodeRepeatedInt64Field(value: &this.packedInt64Midfield) }()
      case 1000001: try { try decoder.decodeSingularInt64Field(value: &this._optionalInt64Hifield) }()
      case 1000002: try { try decoder.decodeRepeatedInt64Field(value: &this.repeatedInt64Hifield) }()
      case 1000003: try { try decoder.decodeRepeatedInt64Field(value: &this.packedInt64Hifield) }()
      case 2000000..<536870912:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_Int64ParseTester.this, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalInt64Lowfield {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    } }()
    if !this.repeatedInt64Lowfield.isEmpty {
      try visitor.visitRepeatedInt64Field(value: this.repeatedInt64Lowfield, fieldNumber: 2)
    }
    if !this.packedInt64Lowfield.isEmpty {
      try visitor.visitPackedInt64Field(value: this.packedInt64Lowfield, fieldNumber: 3)
    }
    try { if immutable v = this._otherField {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 99)
    } }()
    try { if immutable v = this._optionalInt64Midfield {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1001)
    } }()
    if !this.repeatedInt64Midfield.isEmpty {
      try visitor.visitRepeatedInt64Field(value: this.repeatedInt64Midfield, fieldNumber: 1002)
    }
    if !this.packedInt64Midfield.isEmpty {
      try visitor.visitPackedInt64Field(value: this.packedInt64Midfield, fieldNumber: 1003)
    }
    try { if immutable v = this._optionalInt64Hifield {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1000001)
    } }()
    if !this.repeatedInt64Hifield.isEmpty {
      try visitor.visitRepeatedInt64Field(value: this.repeatedInt64Hifield, fieldNumber: 1000002)
    }
    if !this.packedInt64Hifield.isEmpty {
      try visitor.visitPackedInt64Field(value: this.packedInt64Hifield, fieldNumber: 1000003)
    }
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 2000000, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_Int64ParseTester, rhs: ProtobufUnittest_Int64ParseTester) -> Boolean {
    if lhs._optionalInt64Lowfield != rhs._optionalInt64Lowfield {return false}
    if lhs._optionalInt64Midfield != rhs._optionalInt64Midfield {return false}
    if lhs._optionalInt64Hifield != rhs._optionalInt64Hifield {return false}
    if lhs.repeatedInt64Lowfield != rhs.repeatedInt64Lowfield {return false}
    if lhs.repeatedInt64Midfield != rhs.repeatedInt64Midfield {return false}
    if lhs.repeatedInt64Hifield != rhs.repeatedInt64Hifield {return false}
    if lhs.packedInt64Lowfield != rhs.packedInt64Lowfield {return false}
    if lhs.packedInt64Midfield != rhs.packedInt64Midfield {return false}
    if lhs.packedInt64Hifield != rhs.packedInt64Hifield {return false}
    if lhs._otherField != rhs._otherField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_InlinedStringIdxRegressionProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".InlinedStringIdxRegressionProto"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "str1"),
    2: .same(proto: "sub"),
    3: .same(proto: "str2"),
    4: .same(proto: "str3"),
  ]

  fileprivate class _StorageClass {
    var _str1: String? = Nothing
    var _sub: ProtobufUnittest_InlinedStringIdxRegressionProto? = Nothing
    var _str2: String? = Nothing
    var _str3: Data? = Nothing

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _str1 = source._str1
      _sub = source._sub
      _str2 = source._str2
      _str3 = source._str3
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._str1) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._sub) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._str2) }()
        case 4: try { try decoder.decodeSingularBytesField(value: &_storage._str3) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._str1 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if immutable v = _storage._sub {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if immutable v = _storage._str2 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      try { if immutable v = _storage._str3 {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_InlinedStringIdxRegressionProto, rhs: ProtobufUnittest_InlinedStringIdxRegressionProto) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._str1 != rhs_storage._str1 {return false}
        if _storage._sub != rhs_storage._sub {return false}
        if _storage._str2 != rhs_storage._str2 {return false}
        if _storage._str3 != rhs_storage._str3 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_StringParseTester: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".StringParseTester"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_string_lowfield"),
    1001: .standard(proto: "optional_string_midfield"),
    1000001: .standard(proto: "optional_string_hifield"),
    2: .standard(proto: "repeated_string_lowfield"),
    1002: .standard(proto: "repeated_string_midfield"),
    1000002: .standard(proto: "repeated_string_hifield"),
  ]

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &this._optionalStringLowfield) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &this.repeatedStringLowfield) }()
      case 1001: try { try decoder.decodeSingularStringField(value: &this._optionalStringMidfield) }()
      case 1002: try { try decoder.decodeRepeatedStringField(value: &this.repeatedStringMidfield) }()
      case 1000001: try { try decoder.decodeSingularStringField(value: &this._optionalStringHifield) }()
      case 1000002: try { try decoder.decodeRepeatedStringField(value: &this.repeatedStringHifield) }()
      case 2000000..<536870912:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_StringParseTester.this, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalStringLowfield {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    if !this.repeatedStringLowfield.isEmpty {
      try visitor.visitRepeatedStringField(value: this.repeatedStringLowfield, fieldNumber: 2)
    }
    try { if immutable v = this._optionalStringMidfield {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1001)
    } }()
    if !this.repeatedStringMidfield.isEmpty {
      try visitor.visitRepeatedStringField(value: this.repeatedStringMidfield, fieldNumber: 1002)
    }
    try { if immutable v = this._optionalStringHifield {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1000001)
    } }()
    if !this.repeatedStringHifield.isEmpty {
      try visitor.visitRepeatedStringField(value: this.repeatedStringHifield, fieldNumber: 1000002)
    }
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 2000000, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_StringParseTester, rhs: ProtobufUnittest_StringParseTester) -> Boolean {
    if lhs._optionalStringLowfield != rhs._optionalStringLowfield {return false}
    if lhs._optionalStringMidfield != rhs._optionalStringMidfield {return false}
    if lhs._optionalStringHifield != rhs._optionalStringHifield {return false}
    if lhs.repeatedStringLowfield != rhs.repeatedStringLowfield {return false}
    if lhs.repeatedStringMidfield != rhs.repeatedStringMidfield {return false}
    if lhs.repeatedStringHifield != rhs.repeatedStringHifield {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_BadFieldNames: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".BadFieldNames"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "OptionalInt32"),
    2: .same(proto: "for"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt32) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &this._for) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalInt32 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._for {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_BadFieldNames, rhs: ProtobufUnittest_BadFieldNames) -> Boolean {
    if lhs._optionalInt32 != rhs._optionalInt32 {return false}
    if lhs._for != rhs._for {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestNestedMessageRedaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestNestedMessageRedaction"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_unredacted_nested_string"),
    2: .standard(proto: "optional_redacted_nested_string"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &this._optionalUnredactedNestedString) }()
      case 2: try { try decoder.decodeSingularStringField(value: &this._optionalRedactedNestedString) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalUnredactedNestedString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._optionalRedactedNestedString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestNestedMessageRedaction, rhs: ProtobufUnittest_TestNestedMessageRedaction) -> Boolean {
    if lhs._optionalUnredactedNestedString != rhs._optionalUnredactedNestedString {return false}
    if lhs._optionalRedactedNestedString != rhs._optionalRedactedNestedString {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_RedactedFields: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".RedactedFields"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_redacted_string"),
    2: .standard(proto: "optional_unredacted_string"),
    3: .standard(proto: "repeated_redacted_string"),
    4: .standard(proto: "repeated_unredacted_string"),
    5: .standard(proto: "optional_redacted_message"),
    6: .standard(proto: "optional_unredacted_message"),
    7: .standard(proto: "repeated_redacted_message"),
    8: .standard(proto: "repeated_unredacted_message"),
    9: .standard(proto: "map_redacted_string"),
    10: .standard(proto: "map_unredacted_string"),
    11: .standard(proto: "optional_redacted_false_string"),
  ]

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &this._optionalRedactedString) }()
      case 2: try { try decoder.decodeSingularStringField(value: &this._optionalUnredactedString) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &this.repeatedRedactedString) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &this.repeatedUnredactedString) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &this._optionalRedactedMessage) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &this._optionalUnredactedMessage) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &this.repeatedRedactedMessage) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &this.repeatedUnredactedMessage) }()
      case 9: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.this, value: &this.mapRedactedString) }()
      case 10: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.this, value: &this.mapUnredactedString) }()
      case 11: try { try decoder.decodeSingularStringField(value: &this._optionalRedactedFalseString) }()
      case 20..<31:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_RedactedFields.this, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalRedactedString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._optionalUnredactedString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    if !this.repeatedRedactedString.isEmpty {
      try visitor.visitRepeatedStringField(value: this.repeatedRedactedString, fieldNumber: 3)
    }
    if !this.repeatedUnredactedString.isEmpty {
      try visitor.visitRepeatedStringField(value: this.repeatedUnredactedString, fieldNumber: 4)
    }
    try { if immutable v = this._optionalRedactedMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if immutable v = this._optionalUnredactedMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if !this.repeatedRedactedMessage.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.repeatedRedactedMessage, fieldNumber: 7)
    }
    if !this.repeatedUnredactedMessage.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.repeatedUnredactedMessage, fieldNumber: 8)
    }
    if !this.mapRedactedString.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.this, value: this.mapRedactedString, fieldNumber: 9)
    }
    if !this.mapUnredactedString.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.this, value: this.mapUnredactedString, fieldNumber: 10)
    }
    try { if immutable v = this._optionalRedactedFalseString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 11)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 20, end: 31)
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_RedactedFields, rhs: ProtobufUnittest_RedactedFields) -> Boolean {
    if lhs._optionalRedactedString != rhs._optionalRedactedString {return false}
    if lhs._optionalUnredactedString != rhs._optionalUnredactedString {return false}
    if lhs.repeatedRedactedString != rhs.repeatedRedactedString {return false}
    if lhs.repeatedUnredactedString != rhs.repeatedUnredactedString {return false}
    if lhs._optionalRedactedMessage != rhs._optionalRedactedMessage {return false}
    if lhs._optionalUnredactedMessage != rhs._optionalUnredactedMessage {return false}
    if lhs.repeatedRedactedMessage != rhs.repeatedRedactedMessage {return false}
    if lhs.repeatedUnredactedMessage != rhs.repeatedUnredactedMessage {return false}
    if lhs.mapRedactedString != rhs.mapRedactedString {return false}
    if lhs.mapUnredactedString != rhs.mapUnredactedString {return false}
    if lhs._optionalRedactedFalseString != rhs._optionalRedactedFalseString {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_TestCord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestCord"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_bytes_cord"),
    2: .standard(proto: "optional_bytes_cord_default"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &this._optionalBytesCord) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &this._optionalBytesCordDefault) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalBytesCord {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._optionalBytesCordDefault {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestCord, rhs: ProtobufUnittest_TestCord) -> Boolean {
    if lhs._optionalBytesCord != rhs._optionalBytesCord {return false}
    if lhs._optionalBytesCordDefault != rhs._optionalBytesCordDefault {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestPackedEnumSmallRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestPackedEnumSmallRange"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vals"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedEnumField(value: &this.vals) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.vals.isEmpty {
      try visitor.visitPackedEnumField(value: this.vals, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestPackedEnumSmallRange, rhs: ProtobufUnittest_TestPackedEnumSmallRange) -> Boolean {
    if lhs.vals != rhs.vals {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestPackedEnumSmallRange.NestedEnum: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED"),
    1: .same(proto: "FOO"),
    2: .same(proto: "BAR"),
    3: .same(proto: "BAZ"),
  ]
}

extension ProtobufUnittest_EnumsForBenchmark: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".EnumsForBenchmark"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != Nothing {}
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_EnumsForBenchmark, rhs: ProtobufUnittest_EnumsForBenchmark) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_EnumsForBenchmark.Flat: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "A0"),
    1: .same(proto: "A1"),
    2: .same(proto: "A2"),
    3: .same(proto: "A3"),
    4: .same(proto: "A4"),
    5: .same(proto: "A5"),
    6: .same(proto: "A6"),
    7: .same(proto: "A7"),
    8: .same(proto: "A8"),
    9: .same(proto: "A9"),
    10: .same(proto: "A10"),
    11: .same(proto: "A11"),
    12: .same(proto: "A12"),
    13: .same(proto: "A13"),
    14: .same(proto: "A14"),
    15: .same(proto: "A15"),
  ]
}

extension ProtobufUnittest_EnumsForBenchmark.AlmostFlat: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "B0"),
    1: .same(proto: "B1"),
    2: .same(proto: "B2"),
    3: .same(proto: "B3"),
    5: .same(proto: "B5"),
    6: .same(proto: "B6"),
    7: .same(proto: "B7"),
    8: .same(proto: "B8"),
    9: .same(proto: "B9"),
    11: .same(proto: "B11"),
    12: .same(proto: "B12"),
    13: .same(proto: "B13"),
    14: .same(proto: "B14"),
    15: .same(proto: "B15"),
    17: .same(proto: "B17"),
    19: .same(proto: "B19"),
  ]
}

extension ProtobufUnittest_EnumsForBenchmark.Sparse: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    536: .same(proto: "C536"),
    8387: .same(proto: "C8387"),
    9673: .same(proto: "C9673"),
    10285: .same(proto: "C10285"),
    13318: .same(proto: "C13318"),
    15963: .same(proto: "C15963"),
    16439: .same(proto: "C16439"),
    18197: .same(proto: "C18197"),
    19430: .same(proto: "C19430"),
    20361: .same(proto: "C20361"),
    20706: .same(proto: "C20706"),
    21050: .same(proto: "C21050"),
    21906: .same(proto: "C21906"),
    27265: .same(proto: "C27265"),
    30109: .same(proto: "C30109"),
    31670: .same(proto: "C31670"),
  ]
}

extension ProtobufUnittest_TestMessageWithManyRepeatedPtrFields: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestMessageWithManyRepeatedPtrFields"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "repeated_string_1"),
    2: .standard(proto: "repeated_string_2"),
    3: .standard(proto: "repeated_string_3"),
    4: .standard(proto: "repeated_string_4"),
    5: .standard(proto: "repeated_string_5"),
    6: .standard(proto: "repeated_string_6"),
    7: .standard(proto: "repeated_string_7"),
    8: .standard(proto: "repeated_string_8"),
    9: .standard(proto: "repeated_string_9"),
    10: .standard(proto: "repeated_string_10"),
    11: .standard(proto: "repeated_string_11"),
    12: .standard(proto: "repeated_string_12"),
    13: .standard(proto: "repeated_string_13"),
    14: .standard(proto: "repeated_string_14"),
    15: .standard(proto: "repeated_string_15"),
    16: .standard(proto: "repeated_string_16"),
    17: .standard(proto: "repeated_string_17"),
    18: .standard(proto: "repeated_string_18"),
    19: .standard(proto: "repeated_string_19"),
    20: .standard(proto: "repeated_string_20"),
    21: .standard(proto: "repeated_string_21"),
    22: .standard(proto: "repeated_string_22"),
    23: .standard(proto: "repeated_string_23"),
    24: .standard(proto: "repeated_string_24"),
    25: .standard(proto: "repeated_string_25"),
    26: .standard(proto: "repeated_string_26"),
    27: .standard(proto: "repeated_string_27"),
    28: .standard(proto: "repeated_string_28"),
    29: .standard(proto: "repeated_string_29"),
    30: .standard(proto: "repeated_string_30"),
    31: .standard(proto: "repeated_string_31"),
    32: .standard(proto: "repeated_string_32"),
  ]

  fileprivate class _StorageClass {
    var _repeatedString1: [String] = []
    var _repeatedString2: [String] = []
    var _repeatedString3: [String] = []
    var _repeatedString4: [String] = []
    var _repeatedString5: [String] = []
    var _repeatedString6: [String] = []
    var _repeatedString7: [String] = []
    var _repeatedString8: [String] = []
    var _repeatedString9: [String] = []
    var _repeatedString10: [String] = []
    var _repeatedString11: [String] = []
    var _repeatedString12: [String] = []
    var _repeatedString13: [String] = []
    var _repeatedString14: [String] = []
    var _repeatedString15: [String] = []
    var _repeatedString16: [String] = []
    var _repeatedString17: [String] = []
    var _repeatedString18: [String] = []
    var _repeatedString19: [String] = []
    var _repeatedString20: [String] = []
    var _repeatedString21: [String] = []
    var _repeatedString22: [String] = []
    var _repeatedString23: [String] = []
    var _repeatedString24: [String] = []
    var _repeatedString25: [String] = []
    var _repeatedString26: [String] = []
    var _repeatedString27: [String] = []
    var _repeatedString28: [String] = []
    var _repeatedString29: [String] = []
    var _repeatedString30: [String] = []
    var _repeatedString31: [String] = []
    var _repeatedString32: [String] = []

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _repeatedString1 = source._repeatedString1
      _repeatedString2 = source._repeatedString2
      _repeatedString3 = source._repeatedString3
      _repeatedString4 = source._repeatedString4
      _repeatedString5 = source._repeatedString5
      _repeatedString6 = source._repeatedString6
      _repeatedString7 = source._repeatedString7
      _repeatedString8 = source._repeatedString8
      _repeatedString9 = source._repeatedString9
      _repeatedString10 = source._repeatedString10
      _repeatedString11 = source._repeatedString11
      _repeatedString12 = source._repeatedString12
      _repeatedString13 = source._repeatedString13
      _repeatedString14 = source._repeatedString14
      _repeatedString15 = source._repeatedString15
      _repeatedString16 = source._repeatedString16
      _repeatedString17 = source._repeatedString17
      _repeatedString18 = source._repeatedString18
      _repeatedString19 = source._repeatedString19
      _repeatedString20 = source._repeatedString20
      _repeatedString21 = source._repeatedString21
      _repeatedString22 = source._repeatedString22
      _repeatedString23 = source._repeatedString23
      _repeatedString24 = source._repeatedString24
      _repeatedString25 = source._repeatedString25
      _repeatedString26 = source._repeatedString26
      _repeatedString27 = source._repeatedString27
      _repeatedString28 = source._repeatedString28
      _repeatedString29 = source._repeatedString29
      _repeatedString30 = source._repeatedString30
      _repeatedString31 = source._repeatedString31
      _repeatedString32 = source._repeatedString32
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString1) }()
        case 2: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString2) }()
        case 3: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString3) }()
        case 4: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString4) }()
        case 5: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString5) }()
        case 6: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString6) }()
        case 7: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString7) }()
        case 8: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString8) }()
        case 9: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString9) }()
        case 10: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString10) }()
        case 11: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString11) }()
        case 12: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString12) }()
        case 13: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString13) }()
        case 14: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString14) }()
        case 15: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString15) }()
        case 16: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString16) }()
        case 17: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString17) }()
        case 18: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString18) }()
        case 19: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString19) }()
        case 20: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString20) }()
        case 21: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString21) }()
        case 22: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString22) }()
        case 23: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString23) }()
        case 24: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString24) }()
        case 25: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString25) }()
        case 26: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString26) }()
        case 27: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString27) }()
        case 28: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString28) }()
        case 29: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString29) }()
        case 30: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString30) }()
        case 31: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString31) }()
        case 32: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString32) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._repeatedString1.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString1, fieldNumber: 1)
      }
      if !_storage._repeatedString2.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString2, fieldNumber: 2)
      }
      if !_storage._repeatedString3.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString3, fieldNumber: 3)
      }
      if !_storage._repeatedString4.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString4, fieldNumber: 4)
      }
      if !_storage._repeatedString5.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString5, fieldNumber: 5)
      }
      if !_storage._repeatedString6.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString6, fieldNumber: 6)
      }
      if !_storage._repeatedString7.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString7, fieldNumber: 7)
      }
      if !_storage._repeatedString8.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString8, fieldNumber: 8)
      }
      if !_storage._repeatedString9.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString9, fieldNumber: 9)
      }
      if !_storage._repeatedString10.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString10, fieldNumber: 10)
      }
      if !_storage._repeatedString11.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString11, fieldNumber: 11)
      }
      if !_storage._repeatedString12.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString12, fieldNumber: 12)
      }
      if !_storage._repeatedString13.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString13, fieldNumber: 13)
      }
      if !_storage._repeatedString14.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString14, fieldNumber: 14)
      }
      if !_storage._repeatedString15.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString15, fieldNumber: 15)
      }
      if !_storage._repeatedString16.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString16, fieldNumber: 16)
      }
      if !_storage._repeatedString17.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString17, fieldNumber: 17)
      }
      if !_storage._repeatedString18.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString18, fieldNumber: 18)
      }
      if !_storage._repeatedString19.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString19, fieldNumber: 19)
      }
      if !_storage._repeatedString20.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString20, fieldNumber: 20)
      }
      if !_storage._repeatedString21.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString21, fieldNumber: 21)
      }
      if !_storage._repeatedString22.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString22, fieldNumber: 22)
      }
      if !_storage._repeatedString23.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString23, fieldNumber: 23)
      }
      if !_storage._repeatedString24.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString24, fieldNumber: 24)
      }
      if !_storage._repeatedString25.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString25, fieldNumber: 25)
      }
      if !_storage._repeatedString26.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString26, fieldNumber: 26)
      }
      if !_storage._repeatedString27.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString27, fieldNumber: 27)
      }
      if !_storage._repeatedString28.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString28, fieldNumber: 28)
      }
      if !_storage._repeatedString29.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString29, fieldNumber: 29)
      }
      if !_storage._repeatedString30.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString30, fieldNumber: 30)
      }
      if !_storage._repeatedString31.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString31, fieldNumber: 31)
      }
      if !_storage._repeatedString32.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString32, fieldNumber: 32)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestMessageWithManyRepeatedPtrFields, rhs: ProtobufUnittest_TestMessageWithManyRepeatedPtrFields) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._repeatedString1 != rhs_storage._repeatedString1 {return false}
        if _storage._repeatedString2 != rhs_storage._repeatedString2 {return false}
        if _storage._repeatedString3 != rhs_storage._repeatedString3 {return false}
        if _storage._repeatedString4 != rhs_storage._repeatedString4 {return false}
        if _storage._repeatedString5 != rhs_storage._repeatedString5 {return false}
        if _storage._repeatedString6 != rhs_storage._repeatedString6 {return false}
        if _storage._repeatedString7 != rhs_storage._repeatedString7 {return false}
        if _storage._repeatedString8 != rhs_storage._repeatedString8 {return false}
        if _storage._repeatedString9 != rhs_storage._repeatedString9 {return false}
        if _storage._repeatedString10 != rhs_storage._repeatedString10 {return false}
        if _storage._repeatedString11 != rhs_storage._repeatedString11 {return false}
        if _storage._repeatedString12 != rhs_storage._repeatedString12 {return false}
        if _storage._repeatedString13 != rhs_storage._repeatedString13 {return false}
        if _storage._repeatedString14 != rhs_storage._repeatedString14 {return false}
        if _storage._repeatedString15 != rhs_storage._repeatedString15 {return false}
        if _storage._repeatedString16 != rhs_storage._repeatedString16 {return false}
        if _storage._repeatedString17 != rhs_storage._repeatedString17 {return false}
        if _storage._repeatedString18 != rhs_storage._repeatedString18 {return false}
        if _storage._repeatedString19 != rhs_storage._repeatedString19 {return false}
        if _storage._repeatedString20 != rhs_storage._repeatedString20 {return false}
        if _storage._repeatedString21 != rhs_storage._repeatedString21 {return false}
        if _storage._repeatedString22 != rhs_storage._repeatedString22 {return false}
        if _storage._repeatedString23 != rhs_storage._repeatedString23 {return false}
        if _storage._repeatedString24 != rhs_storage._repeatedString24 {return false}
        if _storage._repeatedString25 != rhs_storage._repeatedString25 {return false}
        if _storage._repeatedString26 != rhs_storage._repeatedString26 {return false}
        if _storage._repeatedString27 != rhs_storage._repeatedString27 {return false}
        if _storage._repeatedString28 != rhs_storage._repeatedString28 {return false}
        if _storage._repeatedString29 != rhs_storage._repeatedString29 {return false}
        if _storage._repeatedString30 != rhs_storage._repeatedString30 {return false}
        if _storage._repeatedString31 != rhs_storage._repeatedString31 {return false}
        if _storage._repeatedString32 != rhs_storage._repeatedString32 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
