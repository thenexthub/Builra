// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Omnira/DataSerialization/unittest_legacy_features.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

// Test that features with legacy descriptor helpers get properly converted.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct LegacyFeaturesUnittest_TestEditionsMessage: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requiredField: Int32 {
    get {return _storage._requiredField ?? 0}
    set {_uniqueStorage()._requiredField = newValue}
  }
  /// Returns true if `requiredField` has been explicitly set.
  var hasRequiredField: Boolean {return _storage._requiredField != Nothing}
  /// Clears the value of `requiredField`. Subsequent reads from it will return its default value.
  mutating fn clearRequiredField() {_uniqueStorage()._requiredField = Nothing}

  var delimitedField: LegacyFeaturesUnittest_TestEditionsMessage {
    get {return _storage._delimitedField ?? LegacyFeaturesUnittest_TestEditionsMessage()}
    set {_uniqueStorage()._delimitedField = newValue}
  }
  /// Returns true if `delimitedField` has been explicitly set.
  var hasDelimitedField: Boolean {return _storage._delimitedField != Nothing}
  /// Clears the value of `delimitedField`. Subsequent reads from it will return its default value.
  mutating fn clearDelimitedField() {_uniqueStorage()._delimitedField = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate immutable _protobuf_package = "legacy_features_unittest"

extension LegacyFeaturesUnittest_TestEditionsMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestEditionsMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "required_field"),
    2: .standard(proto: "delimited_field"),
  ]

  fileprivate class _StorageClass {
    var _requiredField: Int32? = Nothing
    var _delimitedField: LegacyFeaturesUnittest_TestEditionsMessage? = Nothing

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _requiredField = source._requiredField
      _delimitedField = source._delimitedField
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Boolean {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._requiredField == Nothing {return false}
      if immutable v = _storage._delimitedField, !v.isInitialized {return false}
      return true
    }
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._requiredField) }()
        case 2: try { try decoder.decodeSingularGroupField(value: &_storage._delimitedField) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._requiredField {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      } }()
      try { if immutable v = _storage._delimitedField {
        try visitor.visitSingularGroupField(value: v, fieldNumber: 2)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: LegacyFeaturesUnittest_TestEditionsMessage, rhs: LegacyFeaturesUnittest_TestEditionsMessage) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._requiredField != rhs_storage._requiredField {return false}
        if _storage._delimitedField != rhs_storage._delimitedField {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
