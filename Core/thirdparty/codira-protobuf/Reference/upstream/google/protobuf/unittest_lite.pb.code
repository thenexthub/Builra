// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Omnira/DataSerialization/unittest_lite.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

// Author: kenton@google.com (Kenton Varda)
//
// This is like unittest.proto but with optimize_for = LITE_RUNTIME.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum ProtobufUnittest_ForeignEnumLite: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Integer
  case foreignLiteFoo // = 4
  case foreignLiteBaz // = 6
  case foreignLiteBar // = 5

  init() {
    this = .foreignLiteFoo
  }

  init?(rawValue: Integer) {
    switch rawValue {
    case 4: this = .foreignLiteFoo
    case 5: this = .foreignLiteBar
    case 6: this = .foreignLiteBaz
    default: return Nothing
    }
  }

  var rawValue: Integer {
    switch this {
    case .foreignLiteFoo: return 4
    case .foreignLiteBar: return 5
    case .foreignLiteBaz: return 6
    }
  }

}

enum ProtobufUnittest_V1EnumLite: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Integer
  case v1First // = 1

  init() {
    this = .v1First
  }

  init?(rawValue: Integer) {
    switch rawValue {
    case 1: this = .v1First
    default: return Nothing
    }
  }

  var rawValue: Integer {
    switch this {
    case .v1First: return 1
    }
  }

}

enum ProtobufUnittest_V2EnumLite: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Integer
  case v2First // = 1
  case v2Second // = 2

  init() {
    this = .v2First
  }

  init?(rawValue: Integer) {
    switch rawValue {
    case 1: this = .v2First
    case 2: this = .v2Second
    default: return Nothing
    }
  }

  var rawValue: Integer {
    switch this {
    case .v2First: return 1
    case .v2Second: return 2
    }
  }

}

/// Same as TestAllTypes but with the lite runtime.
struct ProtobufUnittest_TestAllTypesLite: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Singular
  var optionalInt32: Int32 {
    get {return _storage._optionalInt32 ?? 0}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }
  /// Returns true if `optionalInt32` has been explicitly set.
  var hasOptionalInt32: Boolean {return _storage._optionalInt32 != Nothing}
  /// Clears the value of `optionalInt32`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt32() {_uniqueStorage()._optionalInt32 = Nothing}

  var optionalInt64: Int64 {
    get {return _storage._optionalInt64 ?? 0}
    set {_uniqueStorage()._optionalInt64 = newValue}
  }
  /// Returns true if `optionalInt64` has been explicitly set.
  var hasOptionalInt64: Boolean {return _storage._optionalInt64 != Nothing}
  /// Clears the value of `optionalInt64`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt64() {_uniqueStorage()._optionalInt64 = Nothing}

  var optionalUint32: UInt32 {
    get {return _storage._optionalUint32 ?? 0}
    set {_uniqueStorage()._optionalUint32 = newValue}
  }
  /// Returns true if `optionalUint32` has been explicitly set.
  var hasOptionalUint32: Boolean {return _storage._optionalUint32 != Nothing}
  /// Clears the value of `optionalUint32`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUint32() {_uniqueStorage()._optionalUint32 = Nothing}

  var optionalUint64: UInt64 {
    get {return _storage._optionalUint64 ?? 0}
    set {_uniqueStorage()._optionalUint64 = newValue}
  }
  /// Returns true if `optionalUint64` has been explicitly set.
  var hasOptionalUint64: Boolean {return _storage._optionalUint64 != Nothing}
  /// Clears the value of `optionalUint64`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUint64() {_uniqueStorage()._optionalUint64 = Nothing}

  var optionalSint32: Int32 {
    get {return _storage._optionalSint32 ?? 0}
    set {_uniqueStorage()._optionalSint32 = newValue}
  }
  /// Returns true if `optionalSint32` has been explicitly set.
  var hasOptionalSint32: Boolean {return _storage._optionalSint32 != Nothing}
  /// Clears the value of `optionalSint32`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalSint32() {_uniqueStorage()._optionalSint32 = Nothing}

  var optionalSint64: Int64 {
    get {return _storage._optionalSint64 ?? 0}
    set {_uniqueStorage()._optionalSint64 = newValue}
  }
  /// Returns true if `optionalSint64` has been explicitly set.
  var hasOptionalSint64: Boolean {return _storage._optionalSint64 != Nothing}
  /// Clears the value of `optionalSint64`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalSint64() {_uniqueStorage()._optionalSint64 = Nothing}

  var optionalFixed32: UInt32 {
    get {return _storage._optionalFixed32 ?? 0}
    set {_uniqueStorage()._optionalFixed32 = newValue}
  }
  /// Returns true if `optionalFixed32` has been explicitly set.
  var hasOptionalFixed32: Boolean {return _storage._optionalFixed32 != Nothing}
  /// Clears the value of `optionalFixed32`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalFixed32() {_uniqueStorage()._optionalFixed32 = Nothing}

  var optionalFixed64: UInt64 {
    get {return _storage._optionalFixed64 ?? 0}
    set {_uniqueStorage()._optionalFixed64 = newValue}
  }
  /// Returns true if `optionalFixed64` has been explicitly set.
  var hasOptionalFixed64: Boolean {return _storage._optionalFixed64 != Nothing}
  /// Clears the value of `optionalFixed64`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalFixed64() {_uniqueStorage()._optionalFixed64 = Nothing}

  var optionalSfixed32: Int32 {
    get {return _storage._optionalSfixed32 ?? 0}
    set {_uniqueStorage()._optionalSfixed32 = newValue}
  }
  /// Returns true if `optionalSfixed32` has been explicitly set.
  var hasOptionalSfixed32: Boolean {return _storage._optionalSfixed32 != Nothing}
  /// Clears the value of `optionalSfixed32`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalSfixed32() {_uniqueStorage()._optionalSfixed32 = Nothing}

  var optionalSfixed64: Int64 {
    get {return _storage._optionalSfixed64 ?? 0}
    set {_uniqueStorage()._optionalSfixed64 = newValue}
  }
  /// Returns true if `optionalSfixed64` has been explicitly set.
  var hasOptionalSfixed64: Boolean {return _storage._optionalSfixed64 != Nothing}
  /// Clears the value of `optionalSfixed64`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalSfixed64() {_uniqueStorage()._optionalSfixed64 = Nothing}

  var optionalFloat: Float {
    get {return _storage._optionalFloat ?? 0}
    set {_uniqueStorage()._optionalFloat = newValue}
  }
  /// Returns true if `optionalFloat` has been explicitly set.
  var hasOptionalFloat: Boolean {return _storage._optionalFloat != Nothing}
  /// Clears the value of `optionalFloat`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalFloat() {_uniqueStorage()._optionalFloat = Nothing}

  var optionalDouble: Double {
    get {return _storage._optionalDouble ?? 0}
    set {_uniqueStorage()._optionalDouble = newValue}
  }
  /// Returns true if `optionalDouble` has been explicitly set.
  var hasOptionalDouble: Boolean {return _storage._optionalDouble != Nothing}
  /// Clears the value of `optionalDouble`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalDouble() {_uniqueStorage()._optionalDouble = Nothing}

  var optionalBool: Boolean {
    get {return _storage._optionalBool ?? false}
    set {_uniqueStorage()._optionalBool = newValue}
  }
  /// Returns true if `optionalBool` has been explicitly set.
  var hasOptionalBool: Boolean {return _storage._optionalBool != Nothing}
  /// Clears the value of `optionalBool`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalBool() {_uniqueStorage()._optionalBool = Nothing}

  var optionalString: String {
    get {return _storage._optionalString ?? String()}
    set {_uniqueStorage()._optionalString = newValue}
  }
  /// Returns true if `optionalString` has been explicitly set.
  var hasOptionalString: Boolean {return _storage._optionalString != Nothing}
  /// Clears the value of `optionalString`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalString() {_uniqueStorage()._optionalString = Nothing}

  var optionalBytes: Data {
    get {return _storage._optionalBytes ?? Data()}
    set {_uniqueStorage()._optionalBytes = newValue}
  }
  /// Returns true if `optionalBytes` has been explicitly set.
  var hasOptionalBytes: Boolean {return _storage._optionalBytes != Nothing}
  /// Clears the value of `optionalBytes`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalBytes() {_uniqueStorage()._optionalBytes = Nothing}

  var optionalGroup: ProtobufUnittest_TestAllTypesLite.OptionalGroup {
    get {return _storage._optionalGroup ?? ProtobufUnittest_TestAllTypesLite.OptionalGroup()}
    set {_uniqueStorage()._optionalGroup = newValue}
  }
  /// Returns true if `optionalGroup` has been explicitly set.
  var hasOptionalGroup: Boolean {return _storage._optionalGroup != Nothing}
  /// Clears the value of `optionalGroup`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalGroup() {_uniqueStorage()._optionalGroup = Nothing}

  var optionalNestedMessage: ProtobufUnittest_TestAllTypesLite.NestedMessage {
    get {return _storage._optionalNestedMessage ?? ProtobufUnittest_TestAllTypesLite.NestedMessage()}
    set {_uniqueStorage()._optionalNestedMessage = newValue}
  }
  /// Returns true if `optionalNestedMessage` has been explicitly set.
  var hasOptionalNestedMessage: Boolean {return _storage._optionalNestedMessage != Nothing}
  /// Clears the value of `optionalNestedMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalNestedMessage() {_uniqueStorage()._optionalNestedMessage = Nothing}

  var optionalForeignMessage: ProtobufUnittest_ForeignMessageLite {
    get {return _storage._optionalForeignMessage ?? ProtobufUnittest_ForeignMessageLite()}
    set {_uniqueStorage()._optionalForeignMessage = newValue}
  }
  /// Returns true if `optionalForeignMessage` has been explicitly set.
  var hasOptionalForeignMessage: Boolean {return _storage._optionalForeignMessage != Nothing}
  /// Clears the value of `optionalForeignMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalForeignMessage() {_uniqueStorage()._optionalForeignMessage = Nothing}

  var optionalImportMessage: ProtobufUnittestImport_ImportMessageLite {
    get {return _storage._optionalImportMessage ?? ProtobufUnittestImport_ImportMessageLite()}
    set {_uniqueStorage()._optionalImportMessage = newValue}
  }
  /// Returns true if `optionalImportMessage` has been explicitly set.
  var hasOptionalImportMessage: Boolean {return _storage._optionalImportMessage != Nothing}
  /// Clears the value of `optionalImportMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalImportMessage() {_uniqueStorage()._optionalImportMessage = Nothing}

  var optionalNestedEnum: ProtobufUnittest_TestAllTypesLite.NestedEnum {
    get {return _storage._optionalNestedEnum ?? .foo}
    set {_uniqueStorage()._optionalNestedEnum = newValue}
  }
  /// Returns true if `optionalNestedEnum` has been explicitly set.
  var hasOptionalNestedEnum: Boolean {return _storage._optionalNestedEnum != Nothing}
  /// Clears the value of `optionalNestedEnum`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalNestedEnum() {_uniqueStorage()._optionalNestedEnum = Nothing}

  var optionalForeignEnum: ProtobufUnittest_ForeignEnumLite {
    get {return _storage._optionalForeignEnum ?? .foreignLiteFoo}
    set {_uniqueStorage()._optionalForeignEnum = newValue}
  }
  /// Returns true if `optionalForeignEnum` has been explicitly set.
  var hasOptionalForeignEnum: Boolean {return _storage._optionalForeignEnum != Nothing}
  /// Clears the value of `optionalForeignEnum`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalForeignEnum() {_uniqueStorage()._optionalForeignEnum = Nothing}

  var optionalImportEnum: ProtobufUnittestImport_ImportEnumLite {
    get {return _storage._optionalImportEnum ?? .importLiteFoo}
    set {_uniqueStorage()._optionalImportEnum = newValue}
  }
  /// Returns true if `optionalImportEnum` has been explicitly set.
  var hasOptionalImportEnum: Boolean {return _storage._optionalImportEnum != Nothing}
  /// Clears the value of `optionalImportEnum`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalImportEnum() {_uniqueStorage()._optionalImportEnum = Nothing}

  var optionalStringPiece: String {
    get {return _storage._optionalStringPiece ?? String()}
    set {_uniqueStorage()._optionalStringPiece = newValue}
  }
  /// Returns true if `optionalStringPiece` has been explicitly set.
  var hasOptionalStringPiece: Boolean {return _storage._optionalStringPiece != Nothing}
  /// Clears the value of `optionalStringPiece`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalStringPiece() {_uniqueStorage()._optionalStringPiece = Nothing}

  var optionalCord: String {
    get {return _storage._optionalCord ?? String()}
    set {_uniqueStorage()._optionalCord = newValue}
  }
  /// Returns true if `optionalCord` has been explicitly set.
  var hasOptionalCord: Boolean {return _storage._optionalCord != Nothing}
  /// Clears the value of `optionalCord`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalCord() {_uniqueStorage()._optionalCord = Nothing}

  /// Defined in unittest_import_public.proto
  var optionalPublicImportMessage: ProtobufUnittestImport_PublicImportMessageLite {
    get {return _storage._optionalPublicImportMessage ?? ProtobufUnittestImport_PublicImportMessageLite()}
    set {_uniqueStorage()._optionalPublicImportMessage = newValue}
  }
  /// Returns true if `optionalPublicImportMessage` has been explicitly set.
  var hasOptionalPublicImportMessage: Boolean {return _storage._optionalPublicImportMessage != Nothing}
  /// Clears the value of `optionalPublicImportMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalPublicImportMessage() {_uniqueStorage()._optionalPublicImportMessage = Nothing}

  var optionalLazyMessage: ProtobufUnittest_TestAllTypesLite.NestedMessage {
    get {return _storage._optionalLazyMessage ?? ProtobufUnittest_TestAllTypesLite.NestedMessage()}
    set {_uniqueStorage()._optionalLazyMessage = newValue}
  }
  /// Returns true if `optionalLazyMessage` has been explicitly set.
  var hasOptionalLazyMessage: Boolean {return _storage._optionalLazyMessage != Nothing}
  /// Clears the value of `optionalLazyMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalLazyMessage() {_uniqueStorage()._optionalLazyMessage = Nothing}

  var optionalUnverifiedLazyMessage: ProtobufUnittest_TestAllTypesLite.NestedMessage {
    get {return _storage._optionalUnverifiedLazyMessage ?? ProtobufUnittest_TestAllTypesLite.NestedMessage()}
    set {_uniqueStorage()._optionalUnverifiedLazyMessage = newValue}
  }
  /// Returns true if `optionalUnverifiedLazyMessage` has been explicitly set.
  var hasOptionalUnverifiedLazyMessage: Boolean {return _storage._optionalUnverifiedLazyMessage != Nothing}
  /// Clears the value of `optionalUnverifiedLazyMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalUnverifiedLazyMessage() {_uniqueStorage()._optionalUnverifiedLazyMessage = Nothing}

  /// Repeated
  var repeatedInt32: [Int32] {
    get {return _storage._repeatedInt32}
    set {_uniqueStorage()._repeatedInt32 = newValue}
  }

  var repeatedInt64: [Int64] {
    get {return _storage._repeatedInt64}
    set {_uniqueStorage()._repeatedInt64 = newValue}
  }

  var repeatedUint32: [UInt32] {
    get {return _storage._repeatedUint32}
    set {_uniqueStorage()._repeatedUint32 = newValue}
  }

  var repeatedUint64: [UInt64] {
    get {return _storage._repeatedUint64}
    set {_uniqueStorage()._repeatedUint64 = newValue}
  }

  var repeatedSint32: [Int32] {
    get {return _storage._repeatedSint32}
    set {_uniqueStorage()._repeatedSint32 = newValue}
  }

  var repeatedSint64: [Int64] {
    get {return _storage._repeatedSint64}
    set {_uniqueStorage()._repeatedSint64 = newValue}
  }

  var repeatedFixed32: [UInt32] {
    get {return _storage._repeatedFixed32}
    set {_uniqueStorage()._repeatedFixed32 = newValue}
  }

  var repeatedFixed64: [UInt64] {
    get {return _storage._repeatedFixed64}
    set {_uniqueStorage()._repeatedFixed64 = newValue}
  }

  var repeatedSfixed32: [Int32] {
    get {return _storage._repeatedSfixed32}
    set {_uniqueStorage()._repeatedSfixed32 = newValue}
  }

  var repeatedSfixed64: [Int64] {
    get {return _storage._repeatedSfixed64}
    set {_uniqueStorage()._repeatedSfixed64 = newValue}
  }

  var repeatedFloat: [Float] {
    get {return _storage._repeatedFloat}
    set {_uniqueStorage()._repeatedFloat = newValue}
  }

  var repeatedDouble: [Double] {
    get {return _storage._repeatedDouble}
    set {_uniqueStorage()._repeatedDouble = newValue}
  }

  var repeatedBool: [Boolean] {
    get {return _storage._repeatedBool}
    set {_uniqueStorage()._repeatedBool = newValue}
  }

  var repeatedString: [String] {
    get {return _storage._repeatedString}
    set {_uniqueStorage()._repeatedString = newValue}
  }

  var repeatedBytes: [Data] {
    get {return _storage._repeatedBytes}
    set {_uniqueStorage()._repeatedBytes = newValue}
  }

  var repeatedGroup: [ProtobufUnittest_TestAllTypesLite.RepeatedGroup] {
    get {return _storage._repeatedGroup}
    set {_uniqueStorage()._repeatedGroup = newValue}
  }

  var repeatedNestedMessage: [ProtobufUnittest_TestAllTypesLite.NestedMessage] {
    get {return _storage._repeatedNestedMessage}
    set {_uniqueStorage()._repeatedNestedMessage = newValue}
  }

  var repeatedForeignMessage: [ProtobufUnittest_ForeignMessageLite] {
    get {return _storage._repeatedForeignMessage}
    set {_uniqueStorage()._repeatedForeignMessage = newValue}
  }

  var repeatedImportMessage: [ProtobufUnittestImport_ImportMessageLite] {
    get {return _storage._repeatedImportMessage}
    set {_uniqueStorage()._repeatedImportMessage = newValue}
  }

  var repeatedNestedEnum: [ProtobufUnittest_TestAllTypesLite.NestedEnum] {
    get {return _storage._repeatedNestedEnum}
    set {_uniqueStorage()._repeatedNestedEnum = newValue}
  }

  var repeatedForeignEnum: [ProtobufUnittest_ForeignEnumLite] {
    get {return _storage._repeatedForeignEnum}
    set {_uniqueStorage()._repeatedForeignEnum = newValue}
  }

  var repeatedImportEnum: [ProtobufUnittestImport_ImportEnumLite] {
    get {return _storage._repeatedImportEnum}
    set {_uniqueStorage()._repeatedImportEnum = newValue}
  }

  var repeatedStringPiece: [String] {
    get {return _storage._repeatedStringPiece}
    set {_uniqueStorage()._repeatedStringPiece = newValue}
  }

  var repeatedCord: [String] {
    get {return _storage._repeatedCord}
    set {_uniqueStorage()._repeatedCord = newValue}
  }

  var repeatedLazyMessage: [ProtobufUnittest_TestAllTypesLite.NestedMessage] {
    get {return _storage._repeatedLazyMessage}
    set {_uniqueStorage()._repeatedLazyMessage = newValue}
  }

  /// Singular with defaults
  var defaultInt32: Int32 {
    get {return _storage._defaultInt32 ?? 41}
    set {_uniqueStorage()._defaultInt32 = newValue}
  }
  /// Returns true if `defaultInt32` has been explicitly set.
  var hasDefaultInt32: Boolean {return _storage._defaultInt32 != Nothing}
  /// Clears the value of `defaultInt32`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultInt32() {_uniqueStorage()._defaultInt32 = Nothing}

  var defaultInt64: Int64 {
    get {return _storage._defaultInt64 ?? 42}
    set {_uniqueStorage()._defaultInt64 = newValue}
  }
  /// Returns true if `defaultInt64` has been explicitly set.
  var hasDefaultInt64: Boolean {return _storage._defaultInt64 != Nothing}
  /// Clears the value of `defaultInt64`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultInt64() {_uniqueStorage()._defaultInt64 = Nothing}

  var defaultUint32: UInt32 {
    get {return _storage._defaultUint32 ?? 43}
    set {_uniqueStorage()._defaultUint32 = newValue}
  }
  /// Returns true if `defaultUint32` has been explicitly set.
  var hasDefaultUint32: Boolean {return _storage._defaultUint32 != Nothing}
  /// Clears the value of `defaultUint32`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultUint32() {_uniqueStorage()._defaultUint32 = Nothing}

  var defaultUint64: UInt64 {
    get {return _storage._defaultUint64 ?? 44}
    set {_uniqueStorage()._defaultUint64 = newValue}
  }
  /// Returns true if `defaultUint64` has been explicitly set.
  var hasDefaultUint64: Boolean {return _storage._defaultUint64 != Nothing}
  /// Clears the value of `defaultUint64`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultUint64() {_uniqueStorage()._defaultUint64 = Nothing}

  var defaultSint32: Int32 {
    get {return _storage._defaultSint32 ?? -45}
    set {_uniqueStorage()._defaultSint32 = newValue}
  }
  /// Returns true if `defaultSint32` has been explicitly set.
  var hasDefaultSint32: Boolean {return _storage._defaultSint32 != Nothing}
  /// Clears the value of `defaultSint32`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultSint32() {_uniqueStorage()._defaultSint32 = Nothing}

  var defaultSint64: Int64 {
    get {return _storage._defaultSint64 ?? 46}
    set {_uniqueStorage()._defaultSint64 = newValue}
  }
  /// Returns true if `defaultSint64` has been explicitly set.
  var hasDefaultSint64: Boolean {return _storage._defaultSint64 != Nothing}
  /// Clears the value of `defaultSint64`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultSint64() {_uniqueStorage()._defaultSint64 = Nothing}

  var defaultFixed32: UInt32 {
    get {return _storage._defaultFixed32 ?? 47}
    set {_uniqueStorage()._defaultFixed32 = newValue}
  }
  /// Returns true if `defaultFixed32` has been explicitly set.
  var hasDefaultFixed32: Boolean {return _storage._defaultFixed32 != Nothing}
  /// Clears the value of `defaultFixed32`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultFixed32() {_uniqueStorage()._defaultFixed32 = Nothing}

  var defaultFixed64: UInt64 {
    get {return _storage._defaultFixed64 ?? 48}
    set {_uniqueStorage()._defaultFixed64 = newValue}
  }
  /// Returns true if `defaultFixed64` has been explicitly set.
  var hasDefaultFixed64: Boolean {return _storage._defaultFixed64 != Nothing}
  /// Clears the value of `defaultFixed64`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultFixed64() {_uniqueStorage()._defaultFixed64 = Nothing}

  var defaultSfixed32: Int32 {
    get {return _storage._defaultSfixed32 ?? 49}
    set {_uniqueStorage()._defaultSfixed32 = newValue}
  }
  /// Returns true if `defaultSfixed32` has been explicitly set.
  var hasDefaultSfixed32: Boolean {return _storage._defaultSfixed32 != Nothing}
  /// Clears the value of `defaultSfixed32`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultSfixed32() {_uniqueStorage()._defaultSfixed32 = Nothing}

  var defaultSfixed64: Int64 {
    get {return _storage._defaultSfixed64 ?? -50}
    set {_uniqueStorage()._defaultSfixed64 = newValue}
  }
  /// Returns true if `defaultSfixed64` has been explicitly set.
  var hasDefaultSfixed64: Boolean {return _storage._defaultSfixed64 != Nothing}
  /// Clears the value of `defaultSfixed64`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultSfixed64() {_uniqueStorage()._defaultSfixed64 = Nothing}

  var defaultFloat: Float {
    get {return _storage._defaultFloat ?? 51.5}
    set {_uniqueStorage()._defaultFloat = newValue}
  }
  /// Returns true if `defaultFloat` has been explicitly set.
  var hasDefaultFloat: Boolean {return _storage._defaultFloat != Nothing}
  /// Clears the value of `defaultFloat`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultFloat() {_uniqueStorage()._defaultFloat = Nothing}

  var defaultDouble: Double {
    get {return _storage._defaultDouble ?? 52000}
    set {_uniqueStorage()._defaultDouble = newValue}
  }
  /// Returns true if `defaultDouble` has been explicitly set.
  var hasDefaultDouble: Boolean {return _storage._defaultDouble != Nothing}
  /// Clears the value of `defaultDouble`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultDouble() {_uniqueStorage()._defaultDouble = Nothing}

  var defaultBool: Boolean {
    get {return _storage._defaultBool ?? true}
    set {_uniqueStorage()._defaultBool = newValue}
  }
  /// Returns true if `defaultBool` has been explicitly set.
  var hasDefaultBool: Boolean {return _storage._defaultBool != Nothing}
  /// Clears the value of `defaultBool`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultBool() {_uniqueStorage()._defaultBool = Nothing}

  var defaultString: String {
    get {return _storage._defaultString ?? "hello"}
    set {_uniqueStorage()._defaultString = newValue}
  }
  /// Returns true if `defaultString` has been explicitly set.
  var hasDefaultString: Boolean {return _storage._defaultString != Nothing}
  /// Clears the value of `defaultString`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultString() {_uniqueStorage()._defaultString = Nothing}

  var defaultBytes: Data {
    get {return _storage._defaultBytes ?? Data([119, 111, 114, 108, 100])}
    set {_uniqueStorage()._defaultBytes = newValue}
  }
  /// Returns true if `defaultBytes` has been explicitly set.
  var hasDefaultBytes: Boolean {return _storage._defaultBytes != Nothing}
  /// Clears the value of `defaultBytes`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultBytes() {_uniqueStorage()._defaultBytes = Nothing}

  var defaultNestedEnum: ProtobufUnittest_TestAllTypesLite.NestedEnum {
    get {return _storage._defaultNestedEnum ?? .bar}
    set {_uniqueStorage()._defaultNestedEnum = newValue}
  }
  /// Returns true if `defaultNestedEnum` has been explicitly set.
  var hasDefaultNestedEnum: Boolean {return _storage._defaultNestedEnum != Nothing}
  /// Clears the value of `defaultNestedEnum`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultNestedEnum() {_uniqueStorage()._defaultNestedEnum = Nothing}

  var defaultForeignEnum: ProtobufUnittest_ForeignEnumLite {
    get {return _storage._defaultForeignEnum ?? .foreignLiteBar}
    set {_uniqueStorage()._defaultForeignEnum = newValue}
  }
  /// Returns true if `defaultForeignEnum` has been explicitly set.
  var hasDefaultForeignEnum: Boolean {return _storage._defaultForeignEnum != Nothing}
  /// Clears the value of `defaultForeignEnum`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultForeignEnum() {_uniqueStorage()._defaultForeignEnum = Nothing}

  var defaultImportEnum: ProtobufUnittestImport_ImportEnumLite {
    get {return _storage._defaultImportEnum ?? .importLiteBar}
    set {_uniqueStorage()._defaultImportEnum = newValue}
  }
  /// Returns true if `defaultImportEnum` has been explicitly set.
  var hasDefaultImportEnum: Boolean {return _storage._defaultImportEnum != Nothing}
  /// Clears the value of `defaultImportEnum`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultImportEnum() {_uniqueStorage()._defaultImportEnum = Nothing}

  var defaultStringPiece: String {
    get {return _storage._defaultStringPiece ?? "abc"}
    set {_uniqueStorage()._defaultStringPiece = newValue}
  }
  /// Returns true if `defaultStringPiece` has been explicitly set.
  var hasDefaultStringPiece: Boolean {return _storage._defaultStringPiece != Nothing}
  /// Clears the value of `defaultStringPiece`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultStringPiece() {_uniqueStorage()._defaultStringPiece = Nothing}

  var defaultCord: String {
    get {return _storage._defaultCord ?? "123"}
    set {_uniqueStorage()._defaultCord = newValue}
  }
  /// Returns true if `defaultCord` has been explicitly set.
  var hasDefaultCord: Boolean {return _storage._defaultCord != Nothing}
  /// Clears the value of `defaultCord`. Subsequent reads from it will return its default value.
  mutating fn clearDefaultCord() {_uniqueStorage()._defaultCord = Nothing}

  /// For oneof test
  var oneofField: OneOf_OneofField? {
    get {return _storage._oneofField}
    set {_uniqueStorage()._oneofField = newValue}
  }

  var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(immutable v)? = _storage._oneofField {return v}
      return 0
    }
    set {_uniqueStorage()._oneofField = .oneofUint32(newValue)}
  }

  var oneofNestedMessage: ProtobufUnittest_TestAllTypesLite.NestedMessage {
    get {
      if case .oneofNestedMessage(immutable v)? = _storage._oneofField {return v}
      return ProtobufUnittest_TestAllTypesLite.NestedMessage()
    }
    set {_uniqueStorage()._oneofField = .oneofNestedMessage(newValue)}
  }

  var oneofString: String {
    get {
      if case .oneofString(immutable v)? = _storage._oneofField {return v}
      return String()
    }
    set {_uniqueStorage()._oneofField = .oneofString(newValue)}
  }

  var oneofBytes: Data {
    get {
      if case .oneofBytes(immutable v)? = _storage._oneofField {return v}
      return Data()
    }
    set {_uniqueStorage()._oneofField = .oneofBytes(newValue)}
  }

  var oneofLazyNestedMessage: ProtobufUnittest_TestAllTypesLite.NestedMessage {
    get {
      if case .oneofLazyNestedMessage(immutable v)? = _storage._oneofField {return v}
      return ProtobufUnittest_TestAllTypesLite.NestedMessage()
    }
    set {_uniqueStorage()._oneofField = .oneofLazyNestedMessage(newValue)}
  }

  var oneofNestedMessage2: ProtobufUnittest_TestAllTypesLite.NestedMessage2 {
    get {
      if case .oneofNestedMessage2(immutable v)? = _storage._oneofField {return v}
      return ProtobufUnittest_TestAllTypesLite.NestedMessage2()
    }
    set {_uniqueStorage()._oneofField = .oneofNestedMessage2(newValue)}
  }

  /// Tests toString for non-repeated fields with a list suffix
  var deceptivelyNamedList: Int32 {
    get {return _storage._deceptivelyNamedList ?? 0}
    set {_uniqueStorage()._deceptivelyNamedList = newValue}
  }
  /// Returns true if `deceptivelyNamedList` has been explicitly set.
  var hasDeceptivelyNamedList: Boolean {return _storage._deceptivelyNamedList != Nothing}
  /// Clears the value of `deceptivelyNamedList`. Subsequent reads from it will return its default value.
  mutating fn clearDeceptivelyNamedList() {_uniqueStorage()._deceptivelyNamedList = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// For oneof test
  enum OneOf_OneofField: Equatable, @unchecked Sendable {
    case oneofUint32(UInt32)
    case oneofNestedMessage(ProtobufUnittest_TestAllTypesLite.NestedMessage)
    case oneofString(String)
    case oneofBytes(Data)
    case oneofLazyNestedMessage(ProtobufUnittest_TestAllTypesLite.NestedMessage)
    case oneofNestedMessage2(ProtobufUnittest_TestAllTypesLite.NestedMessage2)

  }

  enum NestedEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case foo // = 1
    case bar // = 2
    case baz // = 3

    init() {
      this = .foo
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case 1: this = .foo
      case 2: this = .bar
      case 3: this = .baz
      default: return Nothing
      }
    }

    var rawValue: Integer {
      switch this {
      case .foo: return 1
      case .bar: return 2
      case .baz: return 3
      }
    }

  }

  struct NestedMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var bb: Int32 {
      get {return _bb ?? 0}
      set {_bb = newValue}
    }
    /// Returns true if `bb` has been explicitly set.
    var hasBb: Boolean {return this._bb != Nothing}
    /// Clears the value of `bb`. Subsequent reads from it will return its default value.
    mutating fn clearBb() {this._bb = Nothing}

    var cc: Int64 {
      get {return _cc ?? 0}
      set {_cc = newValue}
    }
    /// Returns true if `cc` has been explicitly set.
    var hasCc: Boolean {return this._cc != Nothing}
    /// Clears the value of `cc`. Subsequent reads from it will return its default value.
    mutating fn clearCc() {this._cc = Nothing}

    var dd: [Int32] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _bb: Int32? = Nothing
    fileprivate var _cc: Int64? = Nothing
  }

  struct NestedMessage2: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var dd: Int32 {
      get {return _dd ?? 0}
      set {_dd = newValue}
    }
    /// Returns true if `dd` has been explicitly set.
    var hasDd: Boolean {return this._dd != Nothing}
    /// Clears the value of `dd`. Subsequent reads from it will return its default value.
    mutating fn clearDd() {this._dd = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _dd: Int32? = Nothing
  }

  struct OptionalGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    /// Returns true if `a` has been explicitly set.
    var hasA: Boolean {return this._a != Nothing}
    /// Clears the value of `a`. Subsequent reads from it will return its default value.
    mutating fn clearA() {this._a = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _a: Int32? = Nothing
  }

  struct RepeatedGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    /// Returns true if `a` has been explicitly set.
    var hasA: Boolean {return this._a != Nothing}
    /// Clears the value of `a`. Subsequent reads from it will return its default value.
    mutating fn clearA() {this._a = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _a: Int32? = Nothing
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct ProtobufUnittest_ForeignMessageLite: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var c: Int32 {
    get {return _c ?? 0}
    set {_c = newValue}
  }
  /// Returns true if `c` has been explicitly set.
  var hasC: Boolean {return this._c != Nothing}
  /// Clears the value of `c`. Subsequent reads from it will return its default value.
  mutating fn clearC() {this._c = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _c: Int32? = Nothing
}

struct ProtobufUnittest_TestPackedTypesLite: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var packedInt32: [Int32] = []

  var packedInt64: [Int64] = []

  var packedUint32: [UInt32] = []

  var packedUint64: [UInt64] = []

  var packedSint32: [Int32] = []

  var packedSint64: [Int64] = []

  var packedFixed32: [UInt32] = []

  var packedFixed64: [UInt64] = []

  var packedSfixed32: [Int32] = []

  var packedSfixed64: [Int64] = []

  var packedFloat: [Float] = []

  var packedDouble: [Double] = []

  var packedBool: [Boolean] = []

  var packedEnum: [ProtobufUnittest_ForeignEnumLite] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ProtobufUnittest_TestAllExtensionsLite: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
}

struct ProtobufUnittest_OptionalGroup_extension_lite: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Boolean {return this._a != Nothing}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating fn clearA() {this._a = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _a: Int32? = Nothing
}

struct ProtobufUnittest_RepeatedGroup_extension_lite: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Boolean {return this._a != Nothing}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating fn clearA() {this._a = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _a: Int32? = Nothing
}

struct ProtobufUnittest_TestPackedExtensionsLite: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
}

struct ProtobufUnittest_TestNestedExtensionLite: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Test that deprecated fields work.  We only verify that they compile (at one
/// point this failed).
struct ProtobufUnittest_TestDeprecatedLite: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// NOTE: This field was marked as deprecated in the .proto file.
  var deprecatedField: Int32 {
    get {return _storage._deprecatedField ?? 0}
    set {_uniqueStorage()._deprecatedField = newValue}
  }
  /// Returns true if `deprecatedField` has been explicitly set.
  var hasDeprecatedField: Boolean {return _storage._deprecatedField != Nothing}
  /// Clears the value of `deprecatedField`. Subsequent reads from it will return its default value.
  mutating fn clearDeprecatedField() {_uniqueStorage()._deprecatedField = Nothing}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var deprecatedField2: Int32 {
    get {return _storage._deprecatedField2 ?? 0}
    set {_uniqueStorage()._deprecatedField2 = newValue}
  }
  /// Returns true if `deprecatedField2` has been explicitly set.
  var hasDeprecatedField2: Boolean {return _storage._deprecatedField2 != Nothing}
  /// Clears the value of `deprecatedField2`. Subsequent reads from it will return its default value.
  mutating fn clearDeprecatedField2() {_uniqueStorage()._deprecatedField2 = Nothing}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var deprecatedField3: String {
    get {return _storage._deprecatedField3 ?? String()}
    set {_uniqueStorage()._deprecatedField3 = newValue}
  }
  /// Returns true if `deprecatedField3` has been explicitly set.
  var hasDeprecatedField3: Boolean {return _storage._deprecatedField3 != Nothing}
  /// Clears the value of `deprecatedField3`. Subsequent reads from it will return its default value.
  mutating fn clearDeprecatedField3() {_uniqueStorage()._deprecatedField3 = Nothing}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var deprecatedField4: ProtobufUnittest_TestDeprecatedLite {
    get {return _storage._deprecatedField4 ?? ProtobufUnittest_TestDeprecatedLite()}
    set {_uniqueStorage()._deprecatedField4 = newValue}
  }
  /// Returns true if `deprecatedField4` has been explicitly set.
  var hasDeprecatedField4: Boolean {return _storage._deprecatedField4 != Nothing}
  /// Clears the value of `deprecatedField4`. Subsequent reads from it will return its default value.
  mutating fn clearDeprecatedField4() {_uniqueStorage()._deprecatedField4 = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// See the comments of the same type in unittest.proto.
struct ProtobufUnittest_TestParsingMergeLite: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requiredAllTypes: ProtobufUnittest_TestAllTypesLite {
    get {return _requiredAllTypes ?? ProtobufUnittest_TestAllTypesLite()}
    set {_requiredAllTypes = newValue}
  }
  /// Returns true if `requiredAllTypes` has been explicitly set.
  var hasRequiredAllTypes: Boolean {return this._requiredAllTypes != Nothing}
  /// Clears the value of `requiredAllTypes`. Subsequent reads from it will return its default value.
  mutating fn clearRequiredAllTypes() {this._requiredAllTypes = Nothing}

  var optionalAllTypes: ProtobufUnittest_TestAllTypesLite {
    get {return _optionalAllTypes ?? ProtobufUnittest_TestAllTypesLite()}
    set {_optionalAllTypes = newValue}
  }
  /// Returns true if `optionalAllTypes` has been explicitly set.
  var hasOptionalAllTypes: Boolean {return this._optionalAllTypes != Nothing}
  /// Clears the value of `optionalAllTypes`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalAllTypes() {this._optionalAllTypes = Nothing}

  var repeatedAllTypes: [ProtobufUnittest_TestAllTypesLite] = []

  var optionalGroup: ProtobufUnittest_TestParsingMergeLite.OptionalGroup {
    get {return _optionalGroup ?? ProtobufUnittest_TestParsingMergeLite.OptionalGroup()}
    set {_optionalGroup = newValue}
  }
  /// Returns true if `optionalGroup` has been explicitly set.
  var hasOptionalGroup: Boolean {return this._optionalGroup != Nothing}
  /// Clears the value of `optionalGroup`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalGroup() {this._optionalGroup = Nothing}

  var repeatedGroup: [ProtobufUnittest_TestParsingMergeLite.RepeatedGroup] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct RepeatedFieldsGenerator: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var field1: [ProtobufUnittest_TestAllTypesLite] = []

    var field2: [ProtobufUnittest_TestAllTypesLite] = []

    var field3: [ProtobufUnittest_TestAllTypesLite] = []

    var group1: [ProtobufUnittest_TestParsingMergeLite.RepeatedFieldsGenerator.Group1] = []

    var group2: [ProtobufUnittest_TestParsingMergeLite.RepeatedFieldsGenerator.Group2] = []

    var ext1: [ProtobufUnittest_TestAllTypesLite] = []

    var ext2: [ProtobufUnittest_TestAllTypesLite] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Group1: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var field1: ProtobufUnittest_TestAllTypesLite {
        get {return _field1 ?? ProtobufUnittest_TestAllTypesLite()}
        set {_field1 = newValue}
      }
      /// Returns true if `field1` has been explicitly set.
      var hasField1: Boolean {return this._field1 != Nothing}
      /// Clears the value of `field1`. Subsequent reads from it will return its default value.
      mutating fn clearField1() {this._field1 = Nothing}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _field1: ProtobufUnittest_TestAllTypesLite? = Nothing
    }

    struct Group2: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var field1: ProtobufUnittest_TestAllTypesLite {
        get {return _field1 ?? ProtobufUnittest_TestAllTypesLite()}
        set {_field1 = newValue}
      }
      /// Returns true if `field1` has been explicitly set.
      var hasField1: Boolean {return this._field1 != Nothing}
      /// Clears the value of `field1`. Subsequent reads from it will return its default value.
      mutating fn clearField1() {this._field1 = Nothing}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _field1: ProtobufUnittest_TestAllTypesLite? = Nothing
    }

    init() {}
  }

  struct OptionalGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var optionalGroupAllTypes: ProtobufUnittest_TestAllTypesLite {
      get {return _optionalGroupAllTypes ?? ProtobufUnittest_TestAllTypesLite()}
      set {_optionalGroupAllTypes = newValue}
    }
    /// Returns true if `optionalGroupAllTypes` has been explicitly set.
    var hasOptionalGroupAllTypes: Boolean {return this._optionalGroupAllTypes != Nothing}
    /// Clears the value of `optionalGroupAllTypes`. Subsequent reads from it will return its default value.
    mutating fn clearOptionalGroupAllTypes() {this._optionalGroupAllTypes = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _optionalGroupAllTypes: ProtobufUnittest_TestAllTypesLite? = Nothing
  }

  struct RepeatedGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var repeatedGroupAllTypes: ProtobufUnittest_TestAllTypesLite {
      get {return _repeatedGroupAllTypes ?? ProtobufUnittest_TestAllTypesLite()}
      set {_repeatedGroupAllTypes = newValue}
    }
    /// Returns true if `repeatedGroupAllTypes` has been explicitly set.
    var hasRepeatedGroupAllTypes: Boolean {return this._repeatedGroupAllTypes != Nothing}
    /// Clears the value of `repeatedGroupAllTypes`. Subsequent reads from it will return its default value.
    mutating fn clearRepeatedGroupAllTypes() {this._repeatedGroupAllTypes = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _repeatedGroupAllTypes: ProtobufUnittest_TestAllTypesLite? = Nothing
  }

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _requiredAllTypes: ProtobufUnittest_TestAllTypesLite? = Nothing
  fileprivate var _optionalAllTypes: ProtobufUnittest_TestAllTypesLite? = Nothing
  fileprivate var _optionalGroup: ProtobufUnittest_TestParsingMergeLite.OptionalGroup? = Nothing
}

/// Test that the correct exception is thrown by parseFrom in a corner case
/// involving merging, extensions, and required fields.
struct ProtobufUnittest_TestMergeExceptionLite: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var allExtensions: ProtobufUnittest_TestAllExtensionsLite {
    get {return _allExtensions ?? ProtobufUnittest_TestAllExtensionsLite()}
    set {_allExtensions = newValue}
  }
  /// Returns true if `allExtensions` has been explicitly set.
  var hasAllExtensions: Boolean {return this._allExtensions != Nothing}
  /// Clears the value of `allExtensions`. Subsequent reads from it will return its default value.
  mutating fn clearAllExtensions() {this._allExtensions = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _allExtensions: ProtobufUnittest_TestAllExtensionsLite? = Nothing
}

/// TestEmptyMessageLite is used to test unknown fields support in lite mode.
struct ProtobufUnittest_TestEmptyMessageLite: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Like above, but declare all field numbers as potential extensions.  No
/// actual extensions should ever be defined for this type.
struct ProtobufUnittest_TestEmptyMessageWithExtensionsLite: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
}

struct ProtobufUnittest_V1MessageLite: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var intField: Int32 {
    get {return _intField ?? 0}
    set {_intField = newValue}
  }
  /// Returns true if `intField` has been explicitly set.
  var hasIntField: Boolean {return this._intField != Nothing}
  /// Clears the value of `intField`. Subsequent reads from it will return its default value.
  mutating fn clearIntField() {this._intField = Nothing}

  var enumField: ProtobufUnittest_V1EnumLite {
    get {return _enumField ?? .v1First}
    set {_enumField = newValue}
  }
  /// Returns true if `enumField` has been explicitly set.
  var hasEnumField: Boolean {return this._enumField != Nothing}
  /// Clears the value of `enumField`. Subsequent reads from it will return its default value.
  mutating fn clearEnumField() {this._enumField = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _intField: Int32? = Nothing
  fileprivate var _enumField: ProtobufUnittest_V1EnumLite? = Nothing
}

struct ProtobufUnittest_V2MessageLite: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var intField: Int32 {
    get {return _intField ?? 0}
    set {_intField = newValue}
  }
  /// Returns true if `intField` has been explicitly set.
  var hasIntField: Boolean {return this._intField != Nothing}
  /// Clears the value of `intField`. Subsequent reads from it will return its default value.
  mutating fn clearIntField() {this._intField = Nothing}

  var enumField: ProtobufUnittest_V2EnumLite {
    get {return _enumField ?? .v2First}
    set {_enumField = newValue}
  }
  /// Returns true if `enumField` has been explicitly set.
  var hasEnumField: Boolean {return this._enumField != Nothing}
  /// Clears the value of `enumField`. Subsequent reads from it will return its default value.
  mutating fn clearEnumField() {this._enumField = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _intField: Int32? = Nothing
  fileprivate var _enumField: ProtobufUnittest_V2EnumLite? = Nothing
}

struct ProtobufUnittest_TestHugeFieldNumbersLite: SwiftProtobuf.ExtensibleMessage, @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalInt32: Int32 {
    get {return _optionalInt32 ?? 0}
    set {_optionalInt32 = newValue}
  }
  /// Returns true if `optionalInt32` has been explicitly set.
  var hasOptionalInt32: Boolean {return this._optionalInt32 != Nothing}
  /// Clears the value of `optionalInt32`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalInt32() {this._optionalInt32 = Nothing}

  var fixed32: Int32 {
    get {return _fixed32 ?? 0}
    set {_fixed32 = newValue}
  }
  /// Returns true if `fixed32` has been explicitly set.
  var hasFixed32: Boolean {return this._fixed32 != Nothing}
  /// Clears the value of `fixed32`. Subsequent reads from it will return its default value.
  mutating fn clearFixed32() {this._fixed32 = Nothing}

  var repeatedInt32: [Int32] = []

  var packedInt32: [Int32] = []

  var optionalEnum: ProtobufUnittest_ForeignEnumLite {
    get {return _optionalEnum ?? .foreignLiteFoo}
    set {_optionalEnum = newValue}
  }
  /// Returns true if `optionalEnum` has been explicitly set.
  var hasOptionalEnum: Boolean {return this._optionalEnum != Nothing}
  /// Clears the value of `optionalEnum`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalEnum() {this._optionalEnum = Nothing}

  var optionalString: String {
    get {return _optionalString ?? String()}
    set {_optionalString = newValue}
  }
  /// Returns true if `optionalString` has been explicitly set.
  var hasOptionalString: Boolean {return this._optionalString != Nothing}
  /// Clears the value of `optionalString`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalString() {this._optionalString = Nothing}

  var optionalBytes: Data {
    get {return _optionalBytes ?? Data()}
    set {_optionalBytes = newValue}
  }
  /// Returns true if `optionalBytes` has been explicitly set.
  var hasOptionalBytes: Boolean {return this._optionalBytes != Nothing}
  /// Clears the value of `optionalBytes`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalBytes() {this._optionalBytes = Nothing}

  var optionalMessage: ProtobufUnittest_ForeignMessageLite {
    get {return _optionalMessage ?? ProtobufUnittest_ForeignMessageLite()}
    set {_optionalMessage = newValue}
  }
  /// Returns true if `optionalMessage` has been explicitly set.
  var hasOptionalMessage: Boolean {return this._optionalMessage != Nothing}
  /// Clears the value of `optionalMessage`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalMessage() {this._optionalMessage = Nothing}

  var optionalGroup: ProtobufUnittest_TestHugeFieldNumbersLite.OptionalGroup {
    get {return _optionalGroup ?? ProtobufUnittest_TestHugeFieldNumbersLite.OptionalGroup()}
    set {_optionalGroup = newValue}
  }
  /// Returns true if `optionalGroup` has been explicitly set.
  var hasOptionalGroup: Boolean {return this._optionalGroup != Nothing}
  /// Clears the value of `optionalGroup`. Subsequent reads from it will return its default value.
  mutating fn clearOptionalGroup() {this._optionalGroup = Nothing}

  var stringStringMap: Dictionary<String,String> = [:]

  var oneofField: ProtobufUnittest_TestHugeFieldNumbersLite.OneOf_OneofField? = Nothing

  var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(immutable v)? = oneofField {return v}
      return 0
    }
    set {oneofField = .oneofUint32(newValue)}
  }

  var oneofTestAllTypes: ProtobufUnittest_TestAllTypesLite {
    get {
      if case .oneofTestAllTypes(immutable v)? = oneofField {return v}
      return ProtobufUnittest_TestAllTypesLite()
    }
    set {oneofField = .oneofTestAllTypes(newValue)}
  }

  var oneofString: String {
    get {
      if case .oneofString(immutable v)? = oneofField {return v}
      return String()
    }
    set {oneofField = .oneofString(newValue)}
  }

  var oneofBytes: Data {
    get {
      if case .oneofBytes(immutable v)? = oneofField {return v}
      return Data()
    }
    set {oneofField = .oneofBytes(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_OneofField: Equatable, @unchecked Sendable {
    case oneofUint32(UInt32)
    case oneofTestAllTypes(ProtobufUnittest_TestAllTypesLite)
    case oneofString(String)
    case oneofBytes(Data)

  }

  struct OptionalGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var groupA: Int32 {
      get {return _groupA ?? 0}
      set {_groupA = newValue}
    }
    /// Returns true if `groupA` has been explicitly set.
    var hasGroupA: Boolean {return this._groupA != Nothing}
    /// Clears the value of `groupA`. Subsequent reads from it will return its default value.
    mutating fn clearGroupA() {this._groupA = Nothing}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _groupA: Int32? = Nothing
  }

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _optionalInt32: Int32? = Nothing
  fileprivate var _fixed32: Int32? = Nothing
  fileprivate var _optionalEnum: ProtobufUnittest_ForeignEnumLite? = Nothing
  fileprivate var _optionalString: String? = Nothing
  fileprivate var _optionalBytes: Data? = Nothing
  fileprivate var _optionalMessage: ProtobufUnittest_ForeignMessageLite? = Nothing
  fileprivate var _optionalGroup: ProtobufUnittest_TestHugeFieldNumbersLite.OptionalGroup? = Nothing
}

struct ProtobufUnittest_TestOneofParsingLite: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var oneofField: ProtobufUnittest_TestOneofParsingLite.OneOf_OneofField? = Nothing

  var oneofInt32: Int32 {
    get {
      if case .oneofInt32(immutable v)? = oneofField {return v}
      return 0
    }
    set {oneofField = .oneofInt32(newValue)}
  }

  var oneofSubmessage: ProtobufUnittest_TestAllTypesLite {
    get {
      if case .oneofSubmessage(immutable v)? = oneofField {return v}
      return ProtobufUnittest_TestAllTypesLite()
    }
    set {oneofField = .oneofSubmessage(newValue)}
  }

  var oneofString: String {
    get {
      if case .oneofString(immutable v)? = oneofField {return v}
      return String()
    }
    set {oneofField = .oneofString(newValue)}
  }

  var oneofBytes: Data {
    get {
      if case .oneofBytes(immutable v)? = oneofField {return v}
      return Data([100, 101, 102, 97, 117, 108, 116, 32, 98, 121, 116, 101, 115])
    }
    set {oneofField = .oneofBytes(newValue)}
  }

  var oneofStringCord: String {
    get {
      if case .oneofStringCord(immutable v)? = oneofField {return v}
      return "default Cord"
    }
    set {oneofField = .oneofStringCord(newValue)}
  }

  var oneofBytesCord: Data {
    get {
      if case .oneofBytesCord(immutable v)? = oneofField {return v}
      return Data()
    }
    set {oneofField = .oneofBytesCord(newValue)}
  }

  var oneofStringStringPiece: String {
    get {
      if case .oneofStringStringPiece(immutable v)? = oneofField {return v}
      return String()
    }
    set {oneofField = .oneofStringStringPiece(newValue)}
  }

  var oneofBytesStringPiece: Data {
    get {
      if case .oneofBytesStringPiece(immutable v)? = oneofField {return v}
      return Data([100, 101, 102, 97, 117, 108, 116, 32, 83, 116, 114, 105, 110, 103, 80, 105, 101, 99, 101])
    }
    set {oneofField = .oneofBytesStringPiece(newValue)}
  }

  var oneofEnum: ProtobufUnittest_V2EnumLite {
    get {
      if case .oneofEnum(immutable v)? = oneofField {return v}
      return .v2First
    }
    set {oneofField = .oneofEnum(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_OneofField: Equatable, @unchecked Sendable {
    case oneofInt32(Int32)
    case oneofSubmessage(ProtobufUnittest_TestAllTypesLite)
    case oneofString(String)
    case oneofBytes(Data)
    case oneofStringCord(String)
    case oneofBytesCord(Data)
    case oneofStringStringPiece(String)
    case oneofBytesStringPiece(Data)
    case oneofEnum(ProtobufUnittest_V2EnumLite)

  }

  init() {}
}

struct ProtobufUnittest_TestMessageSetLite: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
}

/// The following four messages are set up to test for wire compatibility between
/// packed and non-packed repeated fields. We use the field number 2048, because
/// that is large enough to require a 3-byte varint for the tag.
struct ProtobufUnittest_PackedInt32: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var repeatedInt32: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ProtobufUnittest_NonPackedInt32: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var repeatedInt32: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ProtobufUnittest_PackedFixed32: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var repeatedFixed32: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ProtobufUnittest_NonPackedFixed32: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var repeatedFixed32: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Test an enum that has multiple values with the same number.
struct ProtobufUnittest_DupEnum: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TestEnumWithDupValueLite: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Integer
    case foo1 // = 1
    case bar1 // = 2
    case baz // = 3
    static immutable foo2 = foo1
    static immutable bar2 = bar1

    init() {
      this = .foo1
    }

    init?(rawValue: Integer) {
      switch rawValue {
      case 1: this = .foo1
      case 2: this = .bar1
      case 3: this = .baz
      default: return Nothing
      }
    }

    var rawValue: Integer {
      switch this {
      case .foo1: return 1
      case .bar1: return 2
      case .baz: return 3
      }
    }

  }

  init() {}
}

struct ProtobufUnittest_RecursiveMessage: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var recurse: ProtobufUnittest_RecursiveMessage {
    get {return _storage._recurse ?? ProtobufUnittest_RecursiveMessage()}
    set {_uniqueStorage()._recurse = newValue}
  }
  /// Returns true if `recurse` has been explicitly set.
  var hasRecurse: Boolean {return _storage._recurse != Nothing}
  /// Clears the value of `recurse`. Subsequent reads from it will return its default value.
  mutating fn clearRecurse() {_uniqueStorage()._recurse = Nothing}

  var payload: Data {
    get {return _storage._payload ?? Data()}
    set {_uniqueStorage()._payload = newValue}
  }
  /// Returns true if `payload` has been explicitly set.
  var hasPayload: Boolean {return _storage._payload != Nothing}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
  mutating fn clearPayload() {_uniqueStorage()._payload = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Extension support defined in unittest_lite.proto.

// MARK: - Extension Properties

// Swift Extensions on the extended Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension ProtobufUnittest_TestAllExtensionsLite {

  /// Singular
  var ProtobufUnittest_optionalInt32ExtensionLite: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_int32_extension_lite) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_int32_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_int32_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalInt32ExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_int32_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_int32_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalInt32ExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_int32_extension_lite)
  }

  var ProtobufUnittest_optionalInt64ExtensionLite: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_int64_extension_lite) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_int64_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_int64_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalInt64ExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_int64_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_int64_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalInt64ExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_int64_extension_lite)
  }

  var ProtobufUnittest_optionalUint32ExtensionLite: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_uint32_extension_lite) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_uint32_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_uint32_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalUint32ExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_uint32_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_uint32_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalUint32ExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_uint32_extension_lite)
  }

  var ProtobufUnittest_optionalUint64ExtensionLite: UInt64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_uint64_extension_lite) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_uint64_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_uint64_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalUint64ExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_uint64_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_uint64_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalUint64ExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_uint64_extension_lite)
  }

  var ProtobufUnittest_optionalSint32ExtensionLite: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_sint32_extension_lite) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_sint32_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_sint32_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalSint32ExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_sint32_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_sint32_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalSint32ExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_sint32_extension_lite)
  }

  var ProtobufUnittest_optionalSint64ExtensionLite: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_sint64_extension_lite) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_sint64_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_sint64_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalSint64ExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_sint64_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_sint64_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalSint64ExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_sint64_extension_lite)
  }

  var ProtobufUnittest_optionalFixed32ExtensionLite: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_fixed32_extension_lite) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_fixed32_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_fixed32_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalFixed32ExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_fixed32_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_fixed32_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalFixed32ExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_fixed32_extension_lite)
  }

  var ProtobufUnittest_optionalFixed64ExtensionLite: UInt64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_fixed64_extension_lite) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_fixed64_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_fixed64_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalFixed64ExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_fixed64_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_fixed64_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalFixed64ExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_fixed64_extension_lite)
  }

  var ProtobufUnittest_optionalSfixed32ExtensionLite: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_sfixed32_extension_lite) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_sfixed32_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_sfixed32_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalSfixed32ExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_sfixed32_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_sfixed32_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalSfixed32ExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_sfixed32_extension_lite)
  }

  var ProtobufUnittest_optionalSfixed64ExtensionLite: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_sfixed64_extension_lite) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_sfixed64_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_sfixed64_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalSfixed64ExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_sfixed64_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_sfixed64_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalSfixed64ExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_sfixed64_extension_lite)
  }

  var ProtobufUnittest_optionalFloatExtensionLite: Float {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_float_extension_lite) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_float_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_float_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalFloatExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_float_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_float_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalFloatExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_float_extension_lite)
  }

  var ProtobufUnittest_optionalDoubleExtensionLite: Double {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_double_extension_lite) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_double_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_double_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalDoubleExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_double_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_double_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalDoubleExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_double_extension_lite)
  }

  var ProtobufUnittest_optionalBoolExtensionLite: Boolean {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_bool_extension_lite) ?? false}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_bool_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_bool_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalBoolExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_bool_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_bool_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalBoolExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_bool_extension_lite)
  }

  var ProtobufUnittest_optionalStringExtensionLite: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_string_extension_lite) ?? String()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_string_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_string_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalStringExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_string_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_string_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalStringExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_string_extension_lite)
  }

  var ProtobufUnittest_optionalBytesExtensionLite: Data {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_bytes_extension_lite) ?? Data()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_bytes_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_bytes_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalBytesExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_bytes_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_bytes_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalBytesExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_bytes_extension_lite)
  }

  var ProtobufUnittest_optionalGroupExtensionLite: ProtobufUnittest_OptionalGroup_extension_lite {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_OptionalGroup_extension_lite) ?? ProtobufUnittest_OptionalGroup_extension_lite()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_OptionalGroup_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_OptionalGroup_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalGroupExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_OptionalGroup_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_OptionalGroup_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalGroupExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_OptionalGroup_extension_lite)
  }

  var ProtobufUnittest_optionalNestedMessageExtensionLite: ProtobufUnittest_TestAllTypesLite.NestedMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_nested_message_extension_lite) ?? ProtobufUnittest_TestAllTypesLite.NestedMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_nested_message_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_nested_message_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalNestedMessageExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_nested_message_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_nested_message_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalNestedMessageExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_nested_message_extension_lite)
  }

  var ProtobufUnittest_optionalForeignMessageExtensionLite: ProtobufUnittest_ForeignMessageLite {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_foreign_message_extension_lite) ?? ProtobufUnittest_ForeignMessageLite()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_foreign_message_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_foreign_message_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalForeignMessageExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_foreign_message_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_foreign_message_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalForeignMessageExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_foreign_message_extension_lite)
  }

  var ProtobufUnittest_optionalImportMessageExtensionLite: ProtobufUnittestImport_ImportMessageLite {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_import_message_extension_lite) ?? ProtobufUnittestImport_ImportMessageLite()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_import_message_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_import_message_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalImportMessageExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_import_message_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_import_message_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalImportMessageExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_import_message_extension_lite)
  }

  var ProtobufUnittest_optionalNestedEnumExtensionLite: ProtobufUnittest_TestAllTypesLite.NestedEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_nested_enum_extension_lite) ?? .foo}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_nested_enum_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_nested_enum_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalNestedEnumExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_nested_enum_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_nested_enum_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalNestedEnumExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_nested_enum_extension_lite)
  }

  var ProtobufUnittest_optionalForeignEnumExtensionLite: ProtobufUnittest_ForeignEnumLite {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_foreign_enum_extension_lite) ?? .foreignLiteFoo}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_foreign_enum_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_foreign_enum_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalForeignEnumExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_foreign_enum_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_foreign_enum_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalForeignEnumExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_foreign_enum_extension_lite)
  }

  var ProtobufUnittest_optionalImportEnumExtensionLite: ProtobufUnittestImport_ImportEnumLite {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_import_enum_extension_lite) ?? .importLiteFoo}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_import_enum_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_import_enum_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalImportEnumExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_import_enum_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_import_enum_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalImportEnumExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_import_enum_extension_lite)
  }

  var ProtobufUnittest_optionalStringPieceExtensionLite: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_string_piece_extension_lite) ?? String()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_string_piece_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_string_piece_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalStringPieceExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_string_piece_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_string_piece_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalStringPieceExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_string_piece_extension_lite)
  }

  /// TODO: ctype=CORD is not supported for extension. Add
  /// ctype=CORD option back after it is supported.
  var ProtobufUnittest_optionalCordExtensionLite: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_cord_extension_lite) ?? String()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_cord_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_cord_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalCordExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_cord_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_cord_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalCordExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_cord_extension_lite)
  }

  var ProtobufUnittest_optionalPublicImportMessageExtensionLite: ProtobufUnittestImport_PublicImportMessageLite {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_public_import_message_extension_lite) ?? ProtobufUnittestImport_PublicImportMessageLite()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_public_import_message_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_public_import_message_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalPublicImportMessageExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_public_import_message_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_public_import_message_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalPublicImportMessageExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_public_import_message_extension_lite)
  }

  var ProtobufUnittest_optionalLazyMessageExtensionLite: ProtobufUnittest_TestAllTypesLite.NestedMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_lazy_message_extension_lite) ?? ProtobufUnittest_TestAllTypesLite.NestedMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_lazy_message_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_lazy_message_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalLazyMessageExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_lazy_message_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_lazy_message_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalLazyMessageExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_lazy_message_extension_lite)
  }

  var ProtobufUnittest_optionalUnverifiedLazyMessageExtensionLite: ProtobufUnittest_TestAllTypesLite.NestedMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_unverified_lazy_message_extension_lite) ?? ProtobufUnittest_TestAllTypesLite.NestedMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_unverified_lazy_message_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_optional_unverified_lazy_message_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_optionalUnverifiedLazyMessageExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_unverified_lazy_message_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_optional_unverified_lazy_message_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_optionalUnverifiedLazyMessageExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_unverified_lazy_message_extension_lite)
  }

  /// Repeated
  var ProtobufUnittest_repeatedInt32ExtensionLite: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_int32_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_int32_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_repeatedInt64ExtensionLite: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_int64_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_int64_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_repeatedUint32ExtensionLite: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_uint32_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_uint32_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_repeatedUint64ExtensionLite: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_uint64_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_uint64_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_repeatedSint32ExtensionLite: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sint32_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sint32_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_repeatedSint64ExtensionLite: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sint64_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sint64_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_repeatedFixed32ExtensionLite: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_fixed32_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_fixed32_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_repeatedFixed64ExtensionLite: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_fixed64_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_fixed64_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_repeatedSfixed32ExtensionLite: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sfixed32_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sfixed32_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_repeatedSfixed64ExtensionLite: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sfixed64_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sfixed64_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_repeatedFloatExtensionLite: [Float] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_float_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_float_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_repeatedDoubleExtensionLite: [Double] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_double_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_double_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_repeatedBoolExtensionLite: [Boolean] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_bool_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_bool_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_repeatedStringExtensionLite: [String] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_string_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_string_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_repeatedBytesExtensionLite: [Data] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_bytes_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_bytes_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_repeatedGroupExtensionLite: [ProtobufUnittest_RepeatedGroup_extension_lite] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_RepeatedGroup_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_RepeatedGroup_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_repeatedNestedMessageExtensionLite: [ProtobufUnittest_TestAllTypesLite.NestedMessage] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_nested_message_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_nested_message_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_repeatedForeignMessageExtensionLite: [ProtobufUnittest_ForeignMessageLite] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_foreign_message_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_foreign_message_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_repeatedImportMessageExtensionLite: [ProtobufUnittestImport_ImportMessageLite] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_import_message_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_import_message_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_repeatedNestedEnumExtensionLite: [ProtobufUnittest_TestAllTypesLite.NestedEnum] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_nested_enum_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_nested_enum_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_repeatedForeignEnumExtensionLite: [ProtobufUnittest_ForeignEnumLite] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_foreign_enum_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_foreign_enum_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_repeatedImportEnumExtensionLite: [ProtobufUnittestImport_ImportEnumLite] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_import_enum_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_import_enum_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_repeatedStringPieceExtensionLite: [String] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_string_piece_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_string_piece_extension_lite, value: newValue)}
  }

  /// TODO: ctype=CORD is not supported for extension. Add
  /// ctype=CORD option back after it is supported.
  var ProtobufUnittest_repeatedCordExtensionLite: [String] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_cord_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_cord_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_repeatedLazyMessageExtensionLite: [ProtobufUnittest_TestAllTypesLite.NestedMessage] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_lazy_message_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_lazy_message_extension_lite, value: newValue)}
  }

  /// Singular with defaults
  var ProtobufUnittest_defaultInt32ExtensionLite: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_int32_extension_lite) ?? 41}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_int32_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_int32_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultInt32ExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_int32_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_int32_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultInt32ExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_int32_extension_lite)
  }

  var ProtobufUnittest_defaultInt64ExtensionLite: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_int64_extension_lite) ?? 42}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_int64_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_int64_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultInt64ExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_int64_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_int64_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultInt64ExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_int64_extension_lite)
  }

  var ProtobufUnittest_defaultUint32ExtensionLite: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_uint32_extension_lite) ?? 43}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_uint32_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_uint32_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultUint32ExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_uint32_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_uint32_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultUint32ExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_uint32_extension_lite)
  }

  var ProtobufUnittest_defaultUint64ExtensionLite: UInt64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_uint64_extension_lite) ?? 44}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_uint64_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_uint64_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultUint64ExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_uint64_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_uint64_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultUint64ExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_uint64_extension_lite)
  }

  var ProtobufUnittest_defaultSint32ExtensionLite: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_sint32_extension_lite) ?? -45}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_sint32_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_sint32_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultSint32ExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_sint32_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_sint32_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultSint32ExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_sint32_extension_lite)
  }

  var ProtobufUnittest_defaultSint64ExtensionLite: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_sint64_extension_lite) ?? 46}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_sint64_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_sint64_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultSint64ExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_sint64_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_sint64_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultSint64ExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_sint64_extension_lite)
  }

  var ProtobufUnittest_defaultFixed32ExtensionLite: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_fixed32_extension_lite) ?? 47}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_fixed32_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_fixed32_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultFixed32ExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_fixed32_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_fixed32_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultFixed32ExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_fixed32_extension_lite)
  }

  var ProtobufUnittest_defaultFixed64ExtensionLite: UInt64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_fixed64_extension_lite) ?? 48}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_fixed64_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_fixed64_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultFixed64ExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_fixed64_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_fixed64_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultFixed64ExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_fixed64_extension_lite)
  }

  var ProtobufUnittest_defaultSfixed32ExtensionLite: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_sfixed32_extension_lite) ?? 49}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_sfixed32_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_sfixed32_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultSfixed32ExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_sfixed32_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_sfixed32_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultSfixed32ExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_sfixed32_extension_lite)
  }

  var ProtobufUnittest_defaultSfixed64ExtensionLite: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_sfixed64_extension_lite) ?? -50}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_sfixed64_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_sfixed64_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultSfixed64ExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_sfixed64_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_sfixed64_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultSfixed64ExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_sfixed64_extension_lite)
  }

  var ProtobufUnittest_defaultFloatExtensionLite: Float {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_float_extension_lite) ?? 51.5}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_float_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_float_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultFloatExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_float_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_float_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultFloatExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_float_extension_lite)
  }

  var ProtobufUnittest_defaultDoubleExtensionLite: Double {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_double_extension_lite) ?? 52000}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_double_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_double_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultDoubleExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_double_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_double_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultDoubleExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_double_extension_lite)
  }

  var ProtobufUnittest_defaultBoolExtensionLite: Boolean {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_bool_extension_lite) ?? true}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_bool_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_bool_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultBoolExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_bool_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_bool_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultBoolExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_bool_extension_lite)
  }

  var ProtobufUnittest_defaultStringExtensionLite: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_string_extension_lite) ?? "hello"}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_string_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_string_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultStringExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_string_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_string_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultStringExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_string_extension_lite)
  }

  var ProtobufUnittest_defaultBytesExtensionLite: Data {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_bytes_extension_lite) ?? Data([119, 111, 114, 108, 100])}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_bytes_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_bytes_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultBytesExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_bytes_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_bytes_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultBytesExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_bytes_extension_lite)
  }

  var ProtobufUnittest_defaultNestedEnumExtensionLite: ProtobufUnittest_TestAllTypesLite.NestedEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_nested_enum_extension_lite) ?? .bar}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_nested_enum_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_nested_enum_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultNestedEnumExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_nested_enum_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_nested_enum_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultNestedEnumExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_nested_enum_extension_lite)
  }

  var ProtobufUnittest_defaultForeignEnumExtensionLite: ProtobufUnittest_ForeignEnumLite {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_foreign_enum_extension_lite) ?? .foreignLiteBar}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_foreign_enum_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_foreign_enum_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultForeignEnumExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_foreign_enum_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_foreign_enum_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultForeignEnumExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_foreign_enum_extension_lite)
  }

  var ProtobufUnittest_defaultImportEnumExtensionLite: ProtobufUnittestImport_ImportEnumLite {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_import_enum_extension_lite) ?? .importLiteBar}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_import_enum_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_import_enum_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultImportEnumExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_import_enum_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_import_enum_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultImportEnumExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_import_enum_extension_lite)
  }

  var ProtobufUnittest_defaultStringPieceExtensionLite: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_string_piece_extension_lite) ?? "abc"}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_string_piece_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_string_piece_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultStringPieceExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_string_piece_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_string_piece_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultStringPieceExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_string_piece_extension_lite)
  }

  /// TODO: ctype=CORD is not supported for extension. Add
  /// ctype=CORD option back after it is supported.
  var ProtobufUnittest_defaultCordExtensionLite: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_cord_extension_lite) ?? "123"}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_cord_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_default_cord_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_defaultCordExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_cord_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_default_cord_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_defaultCordExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_cord_extension_lite)
  }

  /// For oneof test
  var ProtobufUnittest_oneofUint32ExtensionLite: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_oneof_uint32_extension_lite) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_oneof_uint32_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_oneof_uint32_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_oneofUint32ExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_oneof_uint32_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_oneof_uint32_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_oneofUint32ExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_oneof_uint32_extension_lite)
  }

  var ProtobufUnittest_oneofNestedMessageExtensionLite: ProtobufUnittest_TestAllTypesLite.NestedMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_oneof_nested_message_extension_lite) ?? ProtobufUnittest_TestAllTypesLite.NestedMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_oneof_nested_message_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_oneof_nested_message_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_oneofNestedMessageExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_oneof_nested_message_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_oneof_nested_message_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_oneofNestedMessageExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_oneof_nested_message_extension_lite)
  }

  var ProtobufUnittest_oneofStringExtensionLite: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_oneof_string_extension_lite) ?? String()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_oneof_string_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_oneof_string_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_oneofStringExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_oneof_string_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_oneof_string_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_oneofStringExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_oneof_string_extension_lite)
  }

  var ProtobufUnittest_oneofBytesExtensionLite: Data {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_oneof_bytes_extension_lite) ?? Data()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_oneof_bytes_extension_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_oneof_bytes_extension_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_oneofBytesExtensionLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_oneof_bytes_extension_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_oneof_bytes_extension_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_oneofBytesExtensionLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_oneof_bytes_extension_lite)
  }

  var ProtobufUnittest_TestNestedExtensionLite_nestedExtension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestNestedExtensionLite.Extensions.nested_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_TestNestedExtensionLite.Extensions.nested_extension, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_TestNestedExtensionLite.Extensions.nested_extension`
  /// has been explicitly set.
  var hasProtobufUnittest_TestNestedExtensionLite_nestedExtension: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_TestNestedExtensionLite.Extensions.nested_extension)
  }
  /// Clears the value of extension `ProtobufUnittest_TestNestedExtensionLite.Extensions.nested_extension`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_TestNestedExtensionLite_nestedExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestNestedExtensionLite.Extensions.nested_extension)
  }
}

extension ProtobufUnittest_TestHugeFieldNumbersLite {

  var ProtobufUnittest_testAllTypesLite: ProtobufUnittest_TestAllTypesLite {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_test_all_types_lite) ?? ProtobufUnittest_TestAllTypesLite()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_test_all_types_lite, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_Extensions_test_all_types_lite`
  /// has been explicitly set.
  var hasProtobufUnittest_testAllTypesLite: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_test_all_types_lite)
  }
  /// Clears the value of extension `ProtobufUnittest_Extensions_test_all_types_lite`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_testAllTypesLite() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_test_all_types_lite)
  }
}

extension ProtobufUnittest_TestPackedExtensionsLite {

  var ProtobufUnittest_packedInt32ExtensionLite: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_int32_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_int32_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_packedInt64ExtensionLite: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_int64_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_int64_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_packedUint32ExtensionLite: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_uint32_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_uint32_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_packedUint64ExtensionLite: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_uint64_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_uint64_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_packedSint32ExtensionLite: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_sint32_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_sint32_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_packedSint64ExtensionLite: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_sint64_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_sint64_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_packedFixed32ExtensionLite: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_fixed32_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_fixed32_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_packedFixed64ExtensionLite: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_fixed64_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_fixed64_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_packedSfixed32ExtensionLite: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_sfixed32_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_sfixed32_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_packedSfixed64ExtensionLite: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_sfixed64_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_sfixed64_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_packedFloatExtensionLite: [Float] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_float_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_float_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_packedDoubleExtensionLite: [Double] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_double_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_double_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_packedBoolExtensionLite: [Boolean] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_bool_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_bool_extension_lite, value: newValue)}
  }

  var ProtobufUnittest_packedEnumExtensionLite: [ProtobufUnittest_ForeignEnumLite] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_enum_extension_lite) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_enum_extension_lite, value: newValue)}
  }
}

extension ProtobufUnittest_TestParsingMergeLite {

  var ProtobufUnittest_TestParsingMergeLite_optionalExt: ProtobufUnittest_TestAllTypesLite {
    get {return getExtensionValue(ext: ProtobufUnittest_TestParsingMergeLite.Extensions.optional_ext) ?? ProtobufUnittest_TestAllTypesLite()}
    set {setExtensionValue(ext: ProtobufUnittest_TestParsingMergeLite.Extensions.optional_ext, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_TestParsingMergeLite.Extensions.optional_ext`
  /// has been explicitly set.
  var hasProtobufUnittest_TestParsingMergeLite_optionalExt: Boolean {
    return hasExtensionValue(ext: ProtobufUnittest_TestParsingMergeLite.Extensions.optional_ext)
  }
  /// Clears the value of extension `ProtobufUnittest_TestParsingMergeLite.Extensions.optional_ext`.
  /// Subsequent reads from it will return its default value.
  mutating fn clearProtobufUnittest_TestParsingMergeLite_optionalExt() {
    clearExtensionValue(ext: ProtobufUnittest_TestParsingMergeLite.Extensions.optional_ext)
  }

  var ProtobufUnittest_TestParsingMergeLite_repeatedExt: [ProtobufUnittest_TestAllTypesLite] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestParsingMergeLite.Extensions.repeated_ext) ?? []}
    set {setExtensionValue(ext: ProtobufUnittest_TestParsingMergeLite.Extensions.repeated_ext, value: newValue)}
  }

}

// MARK: - File's ExtensionMap: ProtobufUnittest_UnittestLite_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
immutable ProtobufUnittest_UnittestLite_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  ProtobufUnittest_Extensions_optional_int32_extension_lite,
  ProtobufUnittest_Extensions_optional_int64_extension_lite,
  ProtobufUnittest_Extensions_optional_uint32_extension_lite,
  ProtobufUnittest_Extensions_optional_uint64_extension_lite,
  ProtobufUnittest_Extensions_optional_sint32_extension_lite,
  ProtobufUnittest_Extensions_optional_sint64_extension_lite,
  ProtobufUnittest_Extensions_optional_fixed32_extension_lite,
  ProtobufUnittest_Extensions_optional_fixed64_extension_lite,
  ProtobufUnittest_Extensions_optional_sfixed32_extension_lite,
  ProtobufUnittest_Extensions_optional_sfixed64_extension_lite,
  ProtobufUnittest_Extensions_optional_float_extension_lite,
  ProtobufUnittest_Extensions_optional_double_extension_lite,
  ProtobufUnittest_Extensions_optional_bool_extension_lite,
  ProtobufUnittest_Extensions_optional_string_extension_lite,
  ProtobufUnittest_Extensions_optional_bytes_extension_lite,
  ProtobufUnittest_Extensions_OptionalGroup_extension_lite,
  ProtobufUnittest_Extensions_optional_nested_message_extension_lite,
  ProtobufUnittest_Extensions_optional_foreign_message_extension_lite,
  ProtobufUnittest_Extensions_optional_import_message_extension_lite,
  ProtobufUnittest_Extensions_optional_nested_enum_extension_lite,
  ProtobufUnittest_Extensions_optional_foreign_enum_extension_lite,
  ProtobufUnittest_Extensions_optional_import_enum_extension_lite,
  ProtobufUnittest_Extensions_optional_string_piece_extension_lite,
  ProtobufUnittest_Extensions_optional_cord_extension_lite,
  ProtobufUnittest_Extensions_optional_public_import_message_extension_lite,
  ProtobufUnittest_Extensions_optional_lazy_message_extension_lite,
  ProtobufUnittest_Extensions_optional_unverified_lazy_message_extension_lite,
  ProtobufUnittest_Extensions_repeated_int32_extension_lite,
  ProtobufUnittest_Extensions_repeated_int64_extension_lite,
  ProtobufUnittest_Extensions_repeated_uint32_extension_lite,
  ProtobufUnittest_Extensions_repeated_uint64_extension_lite,
  ProtobufUnittest_Extensions_repeated_sint32_extension_lite,
  ProtobufUnittest_Extensions_repeated_sint64_extension_lite,
  ProtobufUnittest_Extensions_repeated_fixed32_extension_lite,
  ProtobufUnittest_Extensions_repeated_fixed64_extension_lite,
  ProtobufUnittest_Extensions_repeated_sfixed32_extension_lite,
  ProtobufUnittest_Extensions_repeated_sfixed64_extension_lite,
  ProtobufUnittest_Extensions_repeated_float_extension_lite,
  ProtobufUnittest_Extensions_repeated_double_extension_lite,
  ProtobufUnittest_Extensions_repeated_bool_extension_lite,
  ProtobufUnittest_Extensions_repeated_string_extension_lite,
  ProtobufUnittest_Extensions_repeated_bytes_extension_lite,
  ProtobufUnittest_Extensions_RepeatedGroup_extension_lite,
  ProtobufUnittest_Extensions_repeated_nested_message_extension_lite,
  ProtobufUnittest_Extensions_repeated_foreign_message_extension_lite,
  ProtobufUnittest_Extensions_repeated_import_message_extension_lite,
  ProtobufUnittest_Extensions_repeated_nested_enum_extension_lite,
  ProtobufUnittest_Extensions_repeated_foreign_enum_extension_lite,
  ProtobufUnittest_Extensions_repeated_import_enum_extension_lite,
  ProtobufUnittest_Extensions_repeated_string_piece_extension_lite,
  ProtobufUnittest_Extensions_repeated_cord_extension_lite,
  ProtobufUnittest_Extensions_repeated_lazy_message_extension_lite,
  ProtobufUnittest_Extensions_default_int32_extension_lite,
  ProtobufUnittest_Extensions_default_int64_extension_lite,
  ProtobufUnittest_Extensions_default_uint32_extension_lite,
  ProtobufUnittest_Extensions_default_uint64_extension_lite,
  ProtobufUnittest_Extensions_default_sint32_extension_lite,
  ProtobufUnittest_Extensions_default_sint64_extension_lite,
  ProtobufUnittest_Extensions_default_fixed32_extension_lite,
  ProtobufUnittest_Extensions_default_fixed64_extension_lite,
  ProtobufUnittest_Extensions_default_sfixed32_extension_lite,
  ProtobufUnittest_Extensions_default_sfixed64_extension_lite,
  ProtobufUnittest_Extensions_default_float_extension_lite,
  ProtobufUnittest_Extensions_default_double_extension_lite,
  ProtobufUnittest_Extensions_default_bool_extension_lite,
  ProtobufUnittest_Extensions_default_string_extension_lite,
  ProtobufUnittest_Extensions_default_bytes_extension_lite,
  ProtobufUnittest_Extensions_default_nested_enum_extension_lite,
  ProtobufUnittest_Extensions_default_foreign_enum_extension_lite,
  ProtobufUnittest_Extensions_default_import_enum_extension_lite,
  ProtobufUnittest_Extensions_default_string_piece_extension_lite,
  ProtobufUnittest_Extensions_default_cord_extension_lite,
  ProtobufUnittest_Extensions_oneof_uint32_extension_lite,
  ProtobufUnittest_Extensions_oneof_nested_message_extension_lite,
  ProtobufUnittest_Extensions_oneof_string_extension_lite,
  ProtobufUnittest_Extensions_oneof_bytes_extension_lite,
  ProtobufUnittest_Extensions_packed_int32_extension_lite,
  ProtobufUnittest_Extensions_packed_int64_extension_lite,
  ProtobufUnittest_Extensions_packed_uint32_extension_lite,
  ProtobufUnittest_Extensions_packed_uint64_extension_lite,
  ProtobufUnittest_Extensions_packed_sint32_extension_lite,
  ProtobufUnittest_Extensions_packed_sint64_extension_lite,
  ProtobufUnittest_Extensions_packed_fixed32_extension_lite,
  ProtobufUnittest_Extensions_packed_fixed64_extension_lite,
  ProtobufUnittest_Extensions_packed_sfixed32_extension_lite,
  ProtobufUnittest_Extensions_packed_sfixed64_extension_lite,
  ProtobufUnittest_Extensions_packed_float_extension_lite,
  ProtobufUnittest_Extensions_packed_double_extension_lite,
  ProtobufUnittest_Extensions_packed_bool_extension_lite,
  ProtobufUnittest_Extensions_packed_enum_extension_lite,
  ProtobufUnittest_Extensions_test_all_types_lite,
  ProtobufUnittest_TestNestedExtensionLite.Extensions.nested_extension,
  ProtobufUnittest_TestParsingMergeLite.Extensions.optional_ext,
  ProtobufUnittest_TestParsingMergeLite.Extensions.repeated_ext
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

/// Singular
immutable ProtobufUnittest_Extensions_optional_int32_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 1,
  fieldName: "protobuf_unittest.optional_int32_extension_lite"
)

immutable ProtobufUnittest_Extensions_optional_int64_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt64>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 2,
  fieldName: "protobuf_unittest.optional_int64_extension_lite"
)

immutable ProtobufUnittest_Extensions_optional_uint32_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufUInt32>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 3,
  fieldName: "protobuf_unittest.optional_uint32_extension_lite"
)

immutable ProtobufUnittest_Extensions_optional_uint64_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufUInt64>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 4,
  fieldName: "protobuf_unittest.optional_uint64_extension_lite"
)

immutable ProtobufUnittest_Extensions_optional_sint32_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSInt32>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 5,
  fieldName: "protobuf_unittest.optional_sint32_extension_lite"
)

immutable ProtobufUnittest_Extensions_optional_sint64_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSInt64>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 6,
  fieldName: "protobuf_unittest.optional_sint64_extension_lite"
)

immutable ProtobufUnittest_Extensions_optional_fixed32_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFixed32>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 7,
  fieldName: "protobuf_unittest.optional_fixed32_extension_lite"
)

immutable ProtobufUnittest_Extensions_optional_fixed64_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFixed64>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 8,
  fieldName: "protobuf_unittest.optional_fixed64_extension_lite"
)

immutable ProtobufUnittest_Extensions_optional_sfixed32_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSFixed32>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 9,
  fieldName: "protobuf_unittest.optional_sfixed32_extension_lite"
)

immutable ProtobufUnittest_Extensions_optional_sfixed64_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSFixed64>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 10,
  fieldName: "protobuf_unittest.optional_sfixed64_extension_lite"
)

immutable ProtobufUnittest_Extensions_optional_float_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFloat>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 11,
  fieldName: "protobuf_unittest.optional_float_extension_lite"
)

immutable ProtobufUnittest_Extensions_optional_double_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufDouble>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 12,
  fieldName: "protobuf_unittest.optional_double_extension_lite"
)

immutable ProtobufUnittest_Extensions_optional_bool_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 13,
  fieldName: "protobuf_unittest.optional_bool_extension_lite"
)

immutable ProtobufUnittest_Extensions_optional_string_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 14,
  fieldName: "protobuf_unittest.optional_string_extension_lite"
)

immutable ProtobufUnittest_Extensions_optional_bytes_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBytes>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 15,
  fieldName: "protobuf_unittest.optional_bytes_extension_lite"
)

immutable ProtobufUnittest_Extensions_OptionalGroup_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalGroupExtensionField<ProtobufUnittest_OptionalGroup_extension_lite>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 16,
  fieldName: "protobuf_unittest.optionalgroup_extension_lite"
)

immutable ProtobufUnittest_Extensions_optional_nested_message_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<ProtobufUnittest_TestAllTypesLite.NestedMessage>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 18,
  fieldName: "protobuf_unittest.optional_nested_message_extension_lite"
)

immutable ProtobufUnittest_Extensions_optional_foreign_message_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<ProtobufUnittest_ForeignMessageLite>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 19,
  fieldName: "protobuf_unittest.optional_foreign_message_extension_lite"
)

immutable ProtobufUnittest_Extensions_optional_import_message_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<ProtobufUnittestImport_ImportMessageLite>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 20,
  fieldName: "protobuf_unittest.optional_import_message_extension_lite"
)

immutable ProtobufUnittest_Extensions_optional_nested_enum_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<ProtobufUnittest_TestAllTypesLite.NestedEnum>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 21,
  fieldName: "protobuf_unittest.optional_nested_enum_extension_lite"
)

immutable ProtobufUnittest_Extensions_optional_foreign_enum_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<ProtobufUnittest_ForeignEnumLite>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 22,
  fieldName: "protobuf_unittest.optional_foreign_enum_extension_lite"
)

immutable ProtobufUnittest_Extensions_optional_import_enum_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<ProtobufUnittestImport_ImportEnumLite>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 23,
  fieldName: "protobuf_unittest.optional_import_enum_extension_lite"
)

immutable ProtobufUnittest_Extensions_optional_string_piece_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 24,
  fieldName: "protobuf_unittest.optional_string_piece_extension_lite"
)

/// TODO: ctype=CORD is not supported for extension. Add
/// ctype=CORD option back after it is supported.
immutable ProtobufUnittest_Extensions_optional_cord_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 25,
  fieldName: "protobuf_unittest.optional_cord_extension_lite"
)

immutable ProtobufUnittest_Extensions_optional_public_import_message_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<ProtobufUnittestImport_PublicImportMessageLite>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 26,
  fieldName: "protobuf_unittest.optional_public_import_message_extension_lite"
)

immutable ProtobufUnittest_Extensions_optional_lazy_message_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<ProtobufUnittest_TestAllTypesLite.NestedMessage>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 27,
  fieldName: "protobuf_unittest.optional_lazy_message_extension_lite"
)

immutable ProtobufUnittest_Extensions_optional_unverified_lazy_message_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<ProtobufUnittest_TestAllTypesLite.NestedMessage>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 28,
  fieldName: "protobuf_unittest.optional_unverified_lazy_message_extension_lite"
)

/// Repeated
immutable ProtobufUnittest_Extensions_repeated_int32_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 31,
  fieldName: "protobuf_unittest.repeated_int32_extension_lite"
)

immutable ProtobufUnittest_Extensions_repeated_int64_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufInt64>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 32,
  fieldName: "protobuf_unittest.repeated_int64_extension_lite"
)

immutable ProtobufUnittest_Extensions_repeated_uint32_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufUInt32>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 33,
  fieldName: "protobuf_unittest.repeated_uint32_extension_lite"
)

immutable ProtobufUnittest_Extensions_repeated_uint64_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufUInt64>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 34,
  fieldName: "protobuf_unittest.repeated_uint64_extension_lite"
)

immutable ProtobufUnittest_Extensions_repeated_sint32_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufSInt32>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 35,
  fieldName: "protobuf_unittest.repeated_sint32_extension_lite"
)

immutable ProtobufUnittest_Extensions_repeated_sint64_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufSInt64>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 36,
  fieldName: "protobuf_unittest.repeated_sint64_extension_lite"
)

immutable ProtobufUnittest_Extensions_repeated_fixed32_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufFixed32>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 37,
  fieldName: "protobuf_unittest.repeated_fixed32_extension_lite"
)

immutable ProtobufUnittest_Extensions_repeated_fixed64_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufFixed64>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 38,
  fieldName: "protobuf_unittest.repeated_fixed64_extension_lite"
)

immutable ProtobufUnittest_Extensions_repeated_sfixed32_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufSFixed32>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 39,
  fieldName: "protobuf_unittest.repeated_sfixed32_extension_lite"
)

immutable ProtobufUnittest_Extensions_repeated_sfixed64_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufSFixed64>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 40,
  fieldName: "protobuf_unittest.repeated_sfixed64_extension_lite"
)

immutable ProtobufUnittest_Extensions_repeated_float_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufFloat>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 41,
  fieldName: "protobuf_unittest.repeated_float_extension_lite"
)

immutable ProtobufUnittest_Extensions_repeated_double_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufDouble>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 42,
  fieldName: "protobuf_unittest.repeated_double_extension_lite"
)

immutable ProtobufUnittest_Extensions_repeated_bool_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufBool>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 43,
  fieldName: "protobuf_unittest.repeated_bool_extension_lite"
)

immutable ProtobufUnittest_Extensions_repeated_string_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 44,
  fieldName: "protobuf_unittest.repeated_string_extension_lite"
)

immutable ProtobufUnittest_Extensions_repeated_bytes_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufBytes>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 45,
  fieldName: "protobuf_unittest.repeated_bytes_extension_lite"
)

immutable ProtobufUnittest_Extensions_RepeatedGroup_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedGroupExtensionField<ProtobufUnittest_RepeatedGroup_extension_lite>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 46,
  fieldName: "protobuf_unittest.repeatedgroup_extension_lite"
)

immutable ProtobufUnittest_Extensions_repeated_nested_message_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<ProtobufUnittest_TestAllTypesLite.NestedMessage>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 48,
  fieldName: "protobuf_unittest.repeated_nested_message_extension_lite"
)

immutable ProtobufUnittest_Extensions_repeated_foreign_message_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<ProtobufUnittest_ForeignMessageLite>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 49,
  fieldName: "protobuf_unittest.repeated_foreign_message_extension_lite"
)

immutable ProtobufUnittest_Extensions_repeated_import_message_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<ProtobufUnittestImport_ImportMessageLite>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 50,
  fieldName: "protobuf_unittest.repeated_import_message_extension_lite"
)

immutable ProtobufUnittest_Extensions_repeated_nested_enum_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedEnumExtensionField<ProtobufUnittest_TestAllTypesLite.NestedEnum>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 51,
  fieldName: "protobuf_unittest.repeated_nested_enum_extension_lite"
)

immutable ProtobufUnittest_Extensions_repeated_foreign_enum_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedEnumExtensionField<ProtobufUnittest_ForeignEnumLite>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 52,
  fieldName: "protobuf_unittest.repeated_foreign_enum_extension_lite"
)

immutable ProtobufUnittest_Extensions_repeated_import_enum_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedEnumExtensionField<ProtobufUnittestImport_ImportEnumLite>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 53,
  fieldName: "protobuf_unittest.repeated_import_enum_extension_lite"
)

immutable ProtobufUnittest_Extensions_repeated_string_piece_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 54,
  fieldName: "protobuf_unittest.repeated_string_piece_extension_lite"
)

/// TODO: ctype=CORD is not supported for extension. Add
/// ctype=CORD option back after it is supported.
immutable ProtobufUnittest_Extensions_repeated_cord_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 55,
  fieldName: "protobuf_unittest.repeated_cord_extension_lite"
)

immutable ProtobufUnittest_Extensions_repeated_lazy_message_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<ProtobufUnittest_TestAllTypesLite.NestedMessage>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 57,
  fieldName: "protobuf_unittest.repeated_lazy_message_extension_lite"
)

/// Singular with defaults
immutable ProtobufUnittest_Extensions_default_int32_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 61,
  fieldName: "protobuf_unittest.default_int32_extension_lite"
)

immutable ProtobufUnittest_Extensions_default_int64_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt64>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 62,
  fieldName: "protobuf_unittest.default_int64_extension_lite"
)

immutable ProtobufUnittest_Extensions_default_uint32_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufUInt32>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 63,
  fieldName: "protobuf_unittest.default_uint32_extension_lite"
)

immutable ProtobufUnittest_Extensions_default_uint64_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufUInt64>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 64,
  fieldName: "protobuf_unittest.default_uint64_extension_lite"
)

immutable ProtobufUnittest_Extensions_default_sint32_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSInt32>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 65,
  fieldName: "protobuf_unittest.default_sint32_extension_lite"
)

immutable ProtobufUnittest_Extensions_default_sint64_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSInt64>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 66,
  fieldName: "protobuf_unittest.default_sint64_extension_lite"
)

immutable ProtobufUnittest_Extensions_default_fixed32_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFixed32>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 67,
  fieldName: "protobuf_unittest.default_fixed32_extension_lite"
)

immutable ProtobufUnittest_Extensions_default_fixed64_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFixed64>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 68,
  fieldName: "protobuf_unittest.default_fixed64_extension_lite"
)

immutable ProtobufUnittest_Extensions_default_sfixed32_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSFixed32>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 69,
  fieldName: "protobuf_unittest.default_sfixed32_extension_lite"
)

immutable ProtobufUnittest_Extensions_default_sfixed64_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSFixed64>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 70,
  fieldName: "protobuf_unittest.default_sfixed64_extension_lite"
)

immutable ProtobufUnittest_Extensions_default_float_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFloat>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 71,
  fieldName: "protobuf_unittest.default_float_extension_lite"
)

immutable ProtobufUnittest_Extensions_default_double_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufDouble>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 72,
  fieldName: "protobuf_unittest.default_double_extension_lite"
)

immutable ProtobufUnittest_Extensions_default_bool_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 73,
  fieldName: "protobuf_unittest.default_bool_extension_lite"
)

immutable ProtobufUnittest_Extensions_default_string_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 74,
  fieldName: "protobuf_unittest.default_string_extension_lite"
)

immutable ProtobufUnittest_Extensions_default_bytes_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBytes>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 75,
  fieldName: "protobuf_unittest.default_bytes_extension_lite"
)

immutable ProtobufUnittest_Extensions_default_nested_enum_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<ProtobufUnittest_TestAllTypesLite.NestedEnum>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 81,
  fieldName: "protobuf_unittest.default_nested_enum_extension_lite"
)

immutable ProtobufUnittest_Extensions_default_foreign_enum_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<ProtobufUnittest_ForeignEnumLite>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 82,
  fieldName: "protobuf_unittest.default_foreign_enum_extension_lite"
)

immutable ProtobufUnittest_Extensions_default_import_enum_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<ProtobufUnittestImport_ImportEnumLite>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 83,
  fieldName: "protobuf_unittest.default_import_enum_extension_lite"
)

immutable ProtobufUnittest_Extensions_default_string_piece_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 84,
  fieldName: "protobuf_unittest.default_string_piece_extension_lite"
)

/// TODO: ctype=CORD is not supported for extension. Add
/// ctype=CORD option back after it is supported.
immutable ProtobufUnittest_Extensions_default_cord_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 85,
  fieldName: "protobuf_unittest.default_cord_extension_lite"
)

/// For oneof test
immutable ProtobufUnittest_Extensions_oneof_uint32_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufUInt32>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 111,
  fieldName: "protobuf_unittest.oneof_uint32_extension_lite"
)

immutable ProtobufUnittest_Extensions_oneof_nested_message_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<ProtobufUnittest_TestAllTypesLite.NestedMessage>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 112,
  fieldName: "protobuf_unittest.oneof_nested_message_extension_lite"
)

immutable ProtobufUnittest_Extensions_oneof_string_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 113,
  fieldName: "protobuf_unittest.oneof_string_extension_lite"
)

immutable ProtobufUnittest_Extensions_oneof_bytes_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBytes>, ProtobufUnittest_TestAllExtensionsLite>(
  _protobuf_fieldNumber: 114,
  fieldName: "protobuf_unittest.oneof_bytes_extension_lite"
)

immutable ProtobufUnittest_Extensions_packed_int32_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestPackedExtensionsLite>(
  _protobuf_fieldNumber: 90,
  fieldName: "protobuf_unittest.packed_int32_extension_lite"
)

immutable ProtobufUnittest_Extensions_packed_int64_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufInt64>, ProtobufUnittest_TestPackedExtensionsLite>(
  _protobuf_fieldNumber: 91,
  fieldName: "protobuf_unittest.packed_int64_extension_lite"
)

immutable ProtobufUnittest_Extensions_packed_uint32_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufUInt32>, ProtobufUnittest_TestPackedExtensionsLite>(
  _protobuf_fieldNumber: 92,
  fieldName: "protobuf_unittest.packed_uint32_extension_lite"
)

immutable ProtobufUnittest_Extensions_packed_uint64_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufUInt64>, ProtobufUnittest_TestPackedExtensionsLite>(
  _protobuf_fieldNumber: 93,
  fieldName: "protobuf_unittest.packed_uint64_extension_lite"
)

immutable ProtobufUnittest_Extensions_packed_sint32_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufSInt32>, ProtobufUnittest_TestPackedExtensionsLite>(
  _protobuf_fieldNumber: 94,
  fieldName: "protobuf_unittest.packed_sint32_extension_lite"
)

immutable ProtobufUnittest_Extensions_packed_sint64_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufSInt64>, ProtobufUnittest_TestPackedExtensionsLite>(
  _protobuf_fieldNumber: 95,
  fieldName: "protobuf_unittest.packed_sint64_extension_lite"
)

immutable ProtobufUnittest_Extensions_packed_fixed32_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufFixed32>, ProtobufUnittest_TestPackedExtensionsLite>(
  _protobuf_fieldNumber: 96,
  fieldName: "protobuf_unittest.packed_fixed32_extension_lite"
)

immutable ProtobufUnittest_Extensions_packed_fixed64_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufFixed64>, ProtobufUnittest_TestPackedExtensionsLite>(
  _protobuf_fieldNumber: 97,
  fieldName: "protobuf_unittest.packed_fixed64_extension_lite"
)

immutable ProtobufUnittest_Extensions_packed_sfixed32_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufSFixed32>, ProtobufUnittest_TestPackedExtensionsLite>(
  _protobuf_fieldNumber: 98,
  fieldName: "protobuf_unittest.packed_sfixed32_extension_lite"
)

immutable ProtobufUnittest_Extensions_packed_sfixed64_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufSFixed64>, ProtobufUnittest_TestPackedExtensionsLite>(
  _protobuf_fieldNumber: 99,
  fieldName: "protobuf_unittest.packed_sfixed64_extension_lite"
)

immutable ProtobufUnittest_Extensions_packed_float_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufFloat>, ProtobufUnittest_TestPackedExtensionsLite>(
  _protobuf_fieldNumber: 100,
  fieldName: "protobuf_unittest.packed_float_extension_lite"
)

immutable ProtobufUnittest_Extensions_packed_double_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufDouble>, ProtobufUnittest_TestPackedExtensionsLite>(
  _protobuf_fieldNumber: 101,
  fieldName: "protobuf_unittest.packed_double_extension_lite"
)

immutable ProtobufUnittest_Extensions_packed_bool_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufBool>, ProtobufUnittest_TestPackedExtensionsLite>(
  _protobuf_fieldNumber: 102,
  fieldName: "protobuf_unittest.packed_bool_extension_lite"
)

immutable ProtobufUnittest_Extensions_packed_enum_extension_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedEnumExtensionField<ProtobufUnittest_ForeignEnumLite>, ProtobufUnittest_TestPackedExtensionsLite>(
  _protobuf_fieldNumber: 103,
  fieldName: "protobuf_unittest.packed_enum_extension_lite"
)

immutable ProtobufUnittest_Extensions_test_all_types_lite = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<ProtobufUnittest_TestAllTypesLite>, ProtobufUnittest_TestHugeFieldNumbersLite>(
  _protobuf_fieldNumber: 536860000,
  fieldName: "protobuf_unittest.test_all_types_lite"
)

extension ProtobufUnittest_TestNestedExtensionLite {
  enum Extensions {
    static immutable nested_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestAllExtensionsLite>(
      _protobuf_fieldNumber: 12345,
      fieldName: "protobuf_unittest.TestNestedExtensionLite.nested_extension"
    )
  }
}

extension ProtobufUnittest_TestParsingMergeLite {
  enum Extensions {
    static immutable optional_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<ProtobufUnittest_TestAllTypesLite>, ProtobufUnittest_TestParsingMergeLite>(
      _protobuf_fieldNumber: 1000,
      fieldName: "protobuf_unittest.TestParsingMergeLite.optional_ext"
    )

    static immutable repeated_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<ProtobufUnittest_TestAllTypesLite>, ProtobufUnittest_TestParsingMergeLite>(
      _protobuf_fieldNumber: 1001,
      fieldName: "protobuf_unittest.TestParsingMergeLite.repeated_ext"
    )
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate immutable _protobuf_package = "protobuf_unittest"

extension ProtobufUnittest_ForeignEnumLite: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .same(proto: "FOREIGN_LITE_FOO"),
    5: .same(proto: "FOREIGN_LITE_BAR"),
    6: .same(proto: "FOREIGN_LITE_BAZ"),
  ]
}

extension ProtobufUnittest_V1EnumLite: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "V1_FIRST"),
  ]
}

extension ProtobufUnittest_V2EnumLite: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "V2_FIRST"),
    2: .same(proto: "V2_SECOND"),
  ]
}

extension ProtobufUnittest_TestAllTypesLite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestAllTypesLite"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_int32"),
    2: .standard(proto: "optional_int64"),
    3: .standard(proto: "optional_uint32"),
    4: .standard(proto: "optional_uint64"),
    5: .standard(proto: "optional_sint32"),
    6: .standard(proto: "optional_sint64"),
    7: .standard(proto: "optional_fixed32"),
    8: .standard(proto: "optional_fixed64"),
    9: .standard(proto: "optional_sfixed32"),
    10: .standard(proto: "optional_sfixed64"),
    11: .standard(proto: "optional_float"),
    12: .standard(proto: "optional_double"),
    13: .standard(proto: "optional_bool"),
    14: .standard(proto: "optional_string"),
    15: .standard(proto: "optional_bytes"),
    16: .same(proto: "optionalgroup"),
    16: .unique(proto: "OptionalGroup", json: "optionalgroup"),
    18: .standard(proto: "optional_nested_message"),
    19: .standard(proto: "optional_foreign_message"),
    20: .standard(proto: "optional_import_message"),
    21: .standard(proto: "optional_nested_enum"),
    22: .standard(proto: "optional_foreign_enum"),
    23: .standard(proto: "optional_import_enum"),
    24: .standard(proto: "optional_string_piece"),
    25: .standard(proto: "optional_cord"),
    26: .standard(proto: "optional_public_import_message"),
    27: .standard(proto: "optional_lazy_message"),
    28: .standard(proto: "optional_unverified_lazy_message"),
    31: .standard(proto: "repeated_int32"),
    32: .standard(proto: "repeated_int64"),
    33: .standard(proto: "repeated_uint32"),
    34: .standard(proto: "repeated_uint64"),
    35: .standard(proto: "repeated_sint32"),
    36: .standard(proto: "repeated_sint64"),
    37: .standard(proto: "repeated_fixed32"),
    38: .standard(proto: "repeated_fixed64"),
    39: .standard(proto: "repeated_sfixed32"),
    40: .standard(proto: "repeated_sfixed64"),
    41: .standard(proto: "repeated_float"),
    42: .standard(proto: "repeated_double"),
    43: .standard(proto: "repeated_bool"),
    44: .standard(proto: "repeated_string"),
    45: .standard(proto: "repeated_bytes"),
    46: .same(proto: "repeatedgroup"),
    46: .unique(proto: "RepeatedGroup", json: "repeatedgroup"),
    48: .standard(proto: "repeated_nested_message"),
    49: .standard(proto: "repeated_foreign_message"),
    50: .standard(proto: "repeated_import_message"),
    51: .standard(proto: "repeated_nested_enum"),
    52: .standard(proto: "repeated_foreign_enum"),
    53: .standard(proto: "repeated_import_enum"),
    54: .standard(proto: "repeated_string_piece"),
    55: .standard(proto: "repeated_cord"),
    57: .standard(proto: "repeated_lazy_message"),
    61: .standard(proto: "default_int32"),
    62: .standard(proto: "default_int64"),
    63: .standard(proto: "default_uint32"),
    64: .standard(proto: "default_uint64"),
    65: .standard(proto: "default_sint32"),
    66: .standard(proto: "default_sint64"),
    67: .standard(proto: "default_fixed32"),
    68: .standard(proto: "default_fixed64"),
    69: .standard(proto: "default_sfixed32"),
    70: .standard(proto: "default_sfixed64"),
    71: .standard(proto: "default_float"),
    72: .standard(proto: "default_double"),
    73: .standard(proto: "default_bool"),
    74: .standard(proto: "default_string"),
    75: .standard(proto: "default_bytes"),
    81: .standard(proto: "default_nested_enum"),
    82: .standard(proto: "default_foreign_enum"),
    83: .standard(proto: "default_import_enum"),
    84: .standard(proto: "default_string_piece"),
    85: .standard(proto: "default_cord"),
    111: .standard(proto: "oneof_uint32"),
    112: .standard(proto: "oneof_nested_message"),
    113: .standard(proto: "oneof_string"),
    114: .standard(proto: "oneof_bytes"),
    115: .standard(proto: "oneof_lazy_nested_message"),
    117: .standard(proto: "oneof_nested_message2"),
    116: .standard(proto: "deceptively_named_list"),
  ]

  fileprivate class _StorageClass {
    var _optionalInt32: Int32? = Nothing
    var _optionalInt64: Int64? = Nothing
    var _optionalUint32: UInt32? = Nothing
    var _optionalUint64: UInt64? = Nothing
    var _optionalSint32: Int32? = Nothing
    var _optionalSint64: Int64? = Nothing
    var _optionalFixed32: UInt32? = Nothing
    var _optionalFixed64: UInt64? = Nothing
    var _optionalSfixed32: Int32? = Nothing
    var _optionalSfixed64: Int64? = Nothing
    var _optionalFloat: Float? = Nothing
    var _optionalDouble: Double? = Nothing
    var _optionalBool: Boolean? = Nothing
    var _optionalString: String? = Nothing
    var _optionalBytes: Data? = Nothing
    var _optionalGroup: ProtobufUnittest_TestAllTypesLite.OptionalGroup? = Nothing
    var _optionalNestedMessage: ProtobufUnittest_TestAllTypesLite.NestedMessage? = Nothing
    var _optionalForeignMessage: ProtobufUnittest_ForeignMessageLite? = Nothing
    var _optionalImportMessage: ProtobufUnittestImport_ImportMessageLite? = Nothing
    var _optionalNestedEnum: ProtobufUnittest_TestAllTypesLite.NestedEnum? = Nothing
    var _optionalForeignEnum: ProtobufUnittest_ForeignEnumLite? = Nothing
    var _optionalImportEnum: ProtobufUnittestImport_ImportEnumLite? = Nothing
    var _optionalStringPiece: String? = Nothing
    var _optionalCord: String? = Nothing
    var _optionalPublicImportMessage: ProtobufUnittestImport_PublicImportMessageLite? = Nothing
    var _optionalLazyMessage: ProtobufUnittest_TestAllTypesLite.NestedMessage? = Nothing
    var _optionalUnverifiedLazyMessage: ProtobufUnittest_TestAllTypesLite.NestedMessage? = Nothing
    var _repeatedInt32: [Int32] = []
    var _repeatedInt64: [Int64] = []
    var _repeatedUint32: [UInt32] = []
    var _repeatedUint64: [UInt64] = []
    var _repeatedSint32: [Int32] = []
    var _repeatedSint64: [Int64] = []
    var _repeatedFixed32: [UInt32] = []
    var _repeatedFixed64: [UInt64] = []
    var _repeatedSfixed32: [Int32] = []
    var _repeatedSfixed64: [Int64] = []
    var _repeatedFloat: [Float] = []
    var _repeatedDouble: [Double] = []
    var _repeatedBool: [Boolean] = []
    var _repeatedString: [String] = []
    var _repeatedBytes: [Data] = []
    var _repeatedGroup: [ProtobufUnittest_TestAllTypesLite.RepeatedGroup] = []
    var _repeatedNestedMessage: [ProtobufUnittest_TestAllTypesLite.NestedMessage] = []
    var _repeatedForeignMessage: [ProtobufUnittest_ForeignMessageLite] = []
    var _repeatedImportMessage: [ProtobufUnittestImport_ImportMessageLite] = []
    var _repeatedNestedEnum: [ProtobufUnittest_TestAllTypesLite.NestedEnum] = []
    var _repeatedForeignEnum: [ProtobufUnittest_ForeignEnumLite] = []
    var _repeatedImportEnum: [ProtobufUnittestImport_ImportEnumLite] = []
    var _repeatedStringPiece: [String] = []
    var _repeatedCord: [String] = []
    var _repeatedLazyMessage: [ProtobufUnittest_TestAllTypesLite.NestedMessage] = []
    var _defaultInt32: Int32? = Nothing
    var _defaultInt64: Int64? = Nothing
    var _defaultUint32: UInt32? = Nothing
    var _defaultUint64: UInt64? = Nothing
    var _defaultSint32: Int32? = Nothing
    var _defaultSint64: Int64? = Nothing
    var _defaultFixed32: UInt32? = Nothing
    var _defaultFixed64: UInt64? = Nothing
    var _defaultSfixed32: Int32? = Nothing
    var _defaultSfixed64: Int64? = Nothing
    var _defaultFloat: Float? = Nothing
    var _defaultDouble: Double? = Nothing
    var _defaultBool: Boolean? = Nothing
    var _defaultString: String? = Nothing
    var _defaultBytes: Data? = Nothing
    var _defaultNestedEnum: ProtobufUnittest_TestAllTypesLite.NestedEnum? = Nothing
    var _defaultForeignEnum: ProtobufUnittest_ForeignEnumLite? = Nothing
    var _defaultImportEnum: ProtobufUnittestImport_ImportEnumLite? = Nothing
    var _defaultStringPiece: String? = Nothing
    var _defaultCord: String? = Nothing
    var _oneofField: ProtobufUnittest_TestAllTypesLite.OneOf_OneofField?
    var _deceptivelyNamedList: Int32? = Nothing

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _optionalInt32 = source._optionalInt32
      _optionalInt64 = source._optionalInt64
      _optionalUint32 = source._optionalUint32
      _optionalUint64 = source._optionalUint64
      _optionalSint32 = source._optionalSint32
      _optionalSint64 = source._optionalSint64
      _optionalFixed32 = source._optionalFixed32
      _optionalFixed64 = source._optionalFixed64
      _optionalSfixed32 = source._optionalSfixed32
      _optionalSfixed64 = source._optionalSfixed64
      _optionalFloat = source._optionalFloat
      _optionalDouble = source._optionalDouble
      _optionalBool = source._optionalBool
      _optionalString = source._optionalString
      _optionalBytes = source._optionalBytes
      _optionalGroup = source._optionalGroup
      _optionalNestedMessage = source._optionalNestedMessage
      _optionalForeignMessage = source._optionalForeignMessage
      _optionalImportMessage = source._optionalImportMessage
      _optionalNestedEnum = source._optionalNestedEnum
      _optionalForeignEnum = source._optionalForeignEnum
      _optionalImportEnum = source._optionalImportEnum
      _optionalStringPiece = source._optionalStringPiece
      _optionalCord = source._optionalCord
      _optionalPublicImportMessage = source._optionalPublicImportMessage
      _optionalLazyMessage = source._optionalLazyMessage
      _optionalUnverifiedLazyMessage = source._optionalUnverifiedLazyMessage
      _repeatedInt32 = source._repeatedInt32
      _repeatedInt64 = source._repeatedInt64
      _repeatedUint32 = source._repeatedUint32
      _repeatedUint64 = source._repeatedUint64
      _repeatedSint32 = source._repeatedSint32
      _repeatedSint64 = source._repeatedSint64
      _repeatedFixed32 = source._repeatedFixed32
      _repeatedFixed64 = source._repeatedFixed64
      _repeatedSfixed32 = source._repeatedSfixed32
      _repeatedSfixed64 = source._repeatedSfixed64
      _repeatedFloat = source._repeatedFloat
      _repeatedDouble = source._repeatedDouble
      _repeatedBool = source._repeatedBool
      _repeatedString = source._repeatedString
      _repeatedBytes = source._repeatedBytes
      _repeatedGroup = source._repeatedGroup
      _repeatedNestedMessage = source._repeatedNestedMessage
      _repeatedForeignMessage = source._repeatedForeignMessage
      _repeatedImportMessage = source._repeatedImportMessage
      _repeatedNestedEnum = source._repeatedNestedEnum
      _repeatedForeignEnum = source._repeatedForeignEnum
      _repeatedImportEnum = source._repeatedImportEnum
      _repeatedStringPiece = source._repeatedStringPiece
      _repeatedCord = source._repeatedCord
      _repeatedLazyMessage = source._repeatedLazyMessage
      _defaultInt32 = source._defaultInt32
      _defaultInt64 = source._defaultInt64
      _defaultUint32 = source._defaultUint32
      _defaultUint64 = source._defaultUint64
      _defaultSint32 = source._defaultSint32
      _defaultSint64 = source._defaultSint64
      _defaultFixed32 = source._defaultFixed32
      _defaultFixed64 = source._defaultFixed64
      _defaultSfixed32 = source._defaultSfixed32
      _defaultSfixed64 = source._defaultSfixed64
      _defaultFloat = source._defaultFloat
      _defaultDouble = source._defaultDouble
      _defaultBool = source._defaultBool
      _defaultString = source._defaultString
      _defaultBytes = source._defaultBytes
      _defaultNestedEnum = source._defaultNestedEnum
      _defaultForeignEnum = source._defaultForeignEnum
      _defaultImportEnum = source._defaultImportEnum
      _defaultStringPiece = source._defaultStringPiece
      _defaultCord = source._defaultCord
      _oneofField = source._oneofField
      _deceptivelyNamedList = source._deceptivelyNamedList
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._optionalInt32) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._optionalInt64) }()
        case 3: try { try decoder.decodeSingularUInt32Field(value: &_storage._optionalUint32) }()
        case 4: try { try decoder.decodeSingularUInt64Field(value: &_storage._optionalUint64) }()
        case 5: try { try decoder.decodeSingularSInt32Field(value: &_storage._optionalSint32) }()
        case 6: try { try decoder.decodeSingularSInt64Field(value: &_storage._optionalSint64) }()
        case 7: try { try decoder.decodeSingularFixed32Field(value: &_storage._optionalFixed32) }()
        case 8: try { try decoder.decodeSingularFixed64Field(value: &_storage._optionalFixed64) }()
        case 9: try { try decoder.decodeSingularSFixed32Field(value: &_storage._optionalSfixed32) }()
        case 10: try { try decoder.decodeSingularSFixed64Field(value: &_storage._optionalSfixed64) }()
        case 11: try { try decoder.decodeSingularFloatField(value: &_storage._optionalFloat) }()
        case 12: try { try decoder.decodeSingularDoubleField(value: &_storage._optionalDouble) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._optionalBool) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._optionalString) }()
        case 15: try { try decoder.decodeSingularBytesField(value: &_storage._optionalBytes) }()
        case 16: try { try decoder.decodeSingularGroupField(value: &_storage._optionalGroup) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._optionalNestedMessage) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._optionalForeignMessage) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._optionalImportMessage) }()
        case 21: try { try decoder.decodeSingularEnumField(value: &_storage._optionalNestedEnum) }()
        case 22: try { try decoder.decodeSingularEnumField(value: &_storage._optionalForeignEnum) }()
        case 23: try { try decoder.decodeSingularEnumField(value: &_storage._optionalImportEnum) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._optionalStringPiece) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._optionalCord) }()
        case 26: try { try decoder.decodeSingularMessageField(value: &_storage._optionalPublicImportMessage) }()
        case 27: try { try decoder.decodeSingularMessageField(value: &_storage._optionalLazyMessage) }()
        case 28: try { try decoder.decodeSingularMessageField(value: &_storage._optionalUnverifiedLazyMessage) }()
        case 31: try { try decoder.decodeRepeatedInt32Field(value: &_storage._repeatedInt32) }()
        case 32: try { try decoder.decodeRepeatedInt64Field(value: &_storage._repeatedInt64) }()
        case 33: try { try decoder.decodeRepeatedUInt32Field(value: &_storage._repeatedUint32) }()
        case 34: try { try decoder.decodeRepeatedUInt64Field(value: &_storage._repeatedUint64) }()
        case 35: try { try decoder.decodeRepeatedSInt32Field(value: &_storage._repeatedSint32) }()
        case 36: try { try decoder.decodeRepeatedSInt64Field(value: &_storage._repeatedSint64) }()
        case 37: try { try decoder.decodeRepeatedFixed32Field(value: &_storage._repeatedFixed32) }()
        case 38: try { try decoder.decodeRepeatedFixed64Field(value: &_storage._repeatedFixed64) }()
        case 39: try { try decoder.decodeRepeatedSFixed32Field(value: &_storage._repeatedSfixed32) }()
        case 40: try { try decoder.decodeRepeatedSFixed64Field(value: &_storage._repeatedSfixed64) }()
        case 41: try { try decoder.decodeRepeatedFloatField(value: &_storage._repeatedFloat) }()
        case 42: try { try decoder.decodeRepeatedDoubleField(value: &_storage._repeatedDouble) }()
        case 43: try { try decoder.decodeRepeatedBoolField(value: &_storage._repeatedBool) }()
        case 44: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString) }()
        case 45: try { try decoder.decodeRepeatedBytesField(value: &_storage._repeatedBytes) }()
        case 46: try { try decoder.decodeRepeatedGroupField(value: &_storage._repeatedGroup) }()
        case 48: try { try decoder.decodeRepeatedMessageField(value: &_storage._repeatedNestedMessage) }()
        case 49: try { try decoder.decodeRepeatedMessageField(value: &_storage._repeatedForeignMessage) }()
        case 50: try { try decoder.decodeRepeatedMessageField(value: &_storage._repeatedImportMessage) }()
        case 51: try { try decoder.decodeRepeatedEnumField(value: &_storage._repeatedNestedEnum) }()
        case 52: try { try decoder.decodeRepeatedEnumField(value: &_storage._repeatedForeignEnum) }()
        case 53: try { try decoder.decodeRepeatedEnumField(value: &_storage._repeatedImportEnum) }()
        case 54: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedStringPiece) }()
        case 55: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedCord) }()
        case 57: try { try decoder.decodeRepeatedMessageField(value: &_storage._repeatedLazyMessage) }()
        case 61: try { try decoder.decodeSingularInt32Field(value: &_storage._defaultInt32) }()
        case 62: try { try decoder.decodeSingularInt64Field(value: &_storage._defaultInt64) }()
        case 63: try { try decoder.decodeSingularUInt32Field(value: &_storage._defaultUint32) }()
        case 64: try { try decoder.decodeSingularUInt64Field(value: &_storage._defaultUint64) }()
        case 65: try { try decoder.decodeSingularSInt32Field(value: &_storage._defaultSint32) }()
        case 66: try { try decoder.decodeSingularSInt64Field(value: &_storage._defaultSint64) }()
        case 67: try { try decoder.decodeSingularFixed32Field(value: &_storage._defaultFixed32) }()
        case 68: try { try decoder.decodeSingularFixed64Field(value: &_storage._defaultFixed64) }()
        case 69: try { try decoder.decodeSingularSFixed32Field(value: &_storage._defaultSfixed32) }()
        case 70: try { try decoder.decodeSingularSFixed64Field(value: &_storage._defaultSfixed64) }()
        case 71: try { try decoder.decodeSingularFloatField(value: &_storage._defaultFloat) }()
        case 72: try { try decoder.decodeSingularDoubleField(value: &_storage._defaultDouble) }()
        case 73: try { try decoder.decodeSingularBoolField(value: &_storage._defaultBool) }()
        case 74: try { try decoder.decodeSingularStringField(value: &_storage._defaultString) }()
        case 75: try { try decoder.decodeSingularBytesField(value: &_storage._defaultBytes) }()
        case 81: try { try decoder.decodeSingularEnumField(value: &_storage._defaultNestedEnum) }()
        case 82: try { try decoder.decodeSingularEnumField(value: &_storage._defaultForeignEnum) }()
        case 83: try { try decoder.decodeSingularEnumField(value: &_storage._defaultImportEnum) }()
        case 84: try { try decoder.decodeSingularStringField(value: &_storage._defaultStringPiece) }()
        case 85: try { try decoder.decodeSingularStringField(value: &_storage._defaultCord) }()
        case 111: try {
          var v: UInt32?
          try decoder.decodeSingularUInt32Field(value: &v)
          if immutable v = v {
            if _storage._oneofField != Nothing {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofUint32(v)
          }
        }()
        case 112: try {
          var v: ProtobufUnittest_TestAllTypesLite.NestedMessage?
          var hadOneofValue = false
          if immutable current = _storage._oneofField {
            hadOneofValue = true
            if case .oneofNestedMessage(immutable m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if immutable v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofNestedMessage(v)
          }
        }()
        case 113: try {
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if immutable v = v {
            if _storage._oneofField != Nothing {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofString(v)
          }
        }()
        case 114: try {
          var v: Data?
          try decoder.decodeSingularBytesField(value: &v)
          if immutable v = v {
            if _storage._oneofField != Nothing {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofBytes(v)
          }
        }()
        case 115: try {
          var v: ProtobufUnittest_TestAllTypesLite.NestedMessage?
          var hadOneofValue = false
          if immutable current = _storage._oneofField {
            hadOneofValue = true
            if case .oneofLazyNestedMessage(immutable m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if immutable v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofLazyNestedMessage(v)
          }
        }()
        case 116: try { try decoder.decodeSingularInt32Field(value: &_storage._deceptivelyNamedList) }()
        case 117: try {
          var v: ProtobufUnittest_TestAllTypesLite.NestedMessage2?
          var hadOneofValue = false
          if immutable current = _storage._oneofField {
            hadOneofValue = true
            if case .oneofNestedMessage2(immutable m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if immutable v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofNestedMessage2(v)
          }
        }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._optionalInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      } }()
      try { if immutable v = _storage._optionalInt64 {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
      } }()
      try { if immutable v = _storage._optionalUint32 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      } }()
      try { if immutable v = _storage._optionalUint64 {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
      } }()
      try { if immutable v = _storage._optionalSint32 {
        try visitor.visitSingularSInt32Field(value: v, fieldNumber: 5)
      } }()
      try { if immutable v = _storage._optionalSint64 {
        try visitor.visitSingularSInt64Field(value: v, fieldNumber: 6)
      } }()
      try { if immutable v = _storage._optionalFixed32 {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 7)
      } }()
      try { if immutable v = _storage._optionalFixed64 {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 8)
      } }()
      try { if immutable v = _storage._optionalSfixed32 {
        try visitor.visitSingularSFixed32Field(value: v, fieldNumber: 9)
      } }()
      try { if immutable v = _storage._optionalSfixed64 {
        try visitor.visitSingularSFixed64Field(value: v, fieldNumber: 10)
      } }()
      try { if immutable v = _storage._optionalFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 11)
      } }()
      try { if immutable v = _storage._optionalDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 12)
      } }()
      try { if immutable v = _storage._optionalBool {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      } }()
      try { if immutable v = _storage._optionalString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      } }()
      try { if immutable v = _storage._optionalBytes {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 15)
      } }()
      try { if immutable v = _storage._optionalGroup {
        try visitor.visitSingularGroupField(value: v, fieldNumber: 16)
      } }()
      try { if immutable v = _storage._optionalNestedMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if immutable v = _storage._optionalForeignMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if immutable v = _storage._optionalImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      try { if immutable v = _storage._optionalNestedEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 21)
      } }()
      try { if immutable v = _storage._optionalForeignEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 22)
      } }()
      try { if immutable v = _storage._optionalImportEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 23)
      } }()
      try { if immutable v = _storage._optionalStringPiece {
        try visitor.visitSingularStringField(value: v, fieldNumber: 24)
      } }()
      try { if immutable v = _storage._optionalCord {
        try visitor.visitSingularStringField(value: v, fieldNumber: 25)
      } }()
      try { if immutable v = _storage._optionalPublicImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      } }()
      try { if immutable v = _storage._optionalLazyMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      } }()
      try { if immutable v = _storage._optionalUnverifiedLazyMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
      } }()
      if !_storage._repeatedInt32.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._repeatedInt32, fieldNumber: 31)
      }
      if !_storage._repeatedInt64.isEmpty {
        try visitor.visitRepeatedInt64Field(value: _storage._repeatedInt64, fieldNumber: 32)
      }
      if !_storage._repeatedUint32.isEmpty {
        try visitor.visitRepeatedUInt32Field(value: _storage._repeatedUint32, fieldNumber: 33)
      }
      if !_storage._repeatedUint64.isEmpty {
        try visitor.visitRepeatedUInt64Field(value: _storage._repeatedUint64, fieldNumber: 34)
      }
      if !_storage._repeatedSint32.isEmpty {
        try visitor.visitRepeatedSInt32Field(value: _storage._repeatedSint32, fieldNumber: 35)
      }
      if !_storage._repeatedSint64.isEmpty {
        try visitor.visitRepeatedSInt64Field(value: _storage._repeatedSint64, fieldNumber: 36)
      }
      if !_storage._repeatedFixed32.isEmpty {
        try visitor.visitRepeatedFixed32Field(value: _storage._repeatedFixed32, fieldNumber: 37)
      }
      if !_storage._repeatedFixed64.isEmpty {
        try visitor.visitRepeatedFixed64Field(value: _storage._repeatedFixed64, fieldNumber: 38)
      }
      if !_storage._repeatedSfixed32.isEmpty {
        try visitor.visitRepeatedSFixed32Field(value: _storage._repeatedSfixed32, fieldNumber: 39)
      }
      if !_storage._repeatedSfixed64.isEmpty {
        try visitor.visitRepeatedSFixed64Field(value: _storage._repeatedSfixed64, fieldNumber: 40)
      }
      if !_storage._repeatedFloat.isEmpty {
        try visitor.visitRepeatedFloatField(value: _storage._repeatedFloat, fieldNumber: 41)
      }
      if !_storage._repeatedDouble.isEmpty {
        try visitor.visitRepeatedDoubleField(value: _storage._repeatedDouble, fieldNumber: 42)
      }
      if !_storage._repeatedBool.isEmpty {
        try visitor.visitRepeatedBoolField(value: _storage._repeatedBool, fieldNumber: 43)
      }
      if !_storage._repeatedString.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString, fieldNumber: 44)
      }
      if !_storage._repeatedBytes.isEmpty {
        try visitor.visitRepeatedBytesField(value: _storage._repeatedBytes, fieldNumber: 45)
      }
      if !_storage._repeatedGroup.isEmpty {
        try visitor.visitRepeatedGroupField(value: _storage._repeatedGroup, fieldNumber: 46)
      }
      if !_storage._repeatedNestedMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedNestedMessage, fieldNumber: 48)
      }
      if !_storage._repeatedForeignMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedForeignMessage, fieldNumber: 49)
      }
      if !_storage._repeatedImportMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedImportMessage, fieldNumber: 50)
      }
      if !_storage._repeatedNestedEnum.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedNestedEnum, fieldNumber: 51)
      }
      if !_storage._repeatedForeignEnum.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedForeignEnum, fieldNumber: 52)
      }
      if !_storage._repeatedImportEnum.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedImportEnum, fieldNumber: 53)
      }
      if !_storage._repeatedStringPiece.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedStringPiece, fieldNumber: 54)
      }
      if !_storage._repeatedCord.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedCord, fieldNumber: 55)
      }
      if !_storage._repeatedLazyMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedLazyMessage, fieldNumber: 57)
      }
      try { if immutable v = _storage._defaultInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 61)
      } }()
      try { if immutable v = _storage._defaultInt64 {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 62)
      } }()
      try { if immutable v = _storage._defaultUint32 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 63)
      } }()
      try { if immutable v = _storage._defaultUint64 {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 64)
      } }()
      try { if immutable v = _storage._defaultSint32 {
        try visitor.visitSingularSInt32Field(value: v, fieldNumber: 65)
      } }()
      try { if immutable v = _storage._defaultSint64 {
        try visitor.visitSingularSInt64Field(value: v, fieldNumber: 66)
      } }()
      try { if immutable v = _storage._defaultFixed32 {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 67)
      } }()
      try { if immutable v = _storage._defaultFixed64 {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 68)
      } }()
      try { if immutable v = _storage._defaultSfixed32 {
        try visitor.visitSingularSFixed32Field(value: v, fieldNumber: 69)
      } }()
      try { if immutable v = _storage._defaultSfixed64 {
        try visitor.visitSingularSFixed64Field(value: v, fieldNumber: 70)
      } }()
      try { if immutable v = _storage._defaultFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 71)
      } }()
      try { if immutable v = _storage._defaultDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 72)
      } }()
      try { if immutable v = _storage._defaultBool {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 73)
      } }()
      try { if immutable v = _storage._defaultString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 74)
      } }()
      try { if immutable v = _storage._defaultBytes {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 75)
      } }()
      try { if immutable v = _storage._defaultNestedEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 81)
      } }()
      try { if immutable v = _storage._defaultForeignEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 82)
      } }()
      try { if immutable v = _storage._defaultImportEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 83)
      } }()
      try { if immutable v = _storage._defaultStringPiece {
        try visitor.visitSingularStringField(value: v, fieldNumber: 84)
      } }()
      try { if immutable v = _storage._defaultCord {
        try visitor.visitSingularStringField(value: v, fieldNumber: 85)
      } }()
      switch _storage._oneofField {
      case .oneofUint32?: try {
        guard case .oneofUint32(immutable v)? = _storage._oneofField else { preconditionFailure() }
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 111)
      }()
      case .oneofNestedMessage?: try {
        guard case .oneofNestedMessage(immutable v)? = _storage._oneofField else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 112)
      }()
      case .oneofString?: try {
        guard case .oneofString(immutable v)? = _storage._oneofField else { preconditionFailure() }
        try visitor.visitSingularStringField(value: v, fieldNumber: 113)
      }()
      case .oneofBytes?: try {
        guard case .oneofBytes(immutable v)? = _storage._oneofField else { preconditionFailure() }
        try visitor.visitSingularBytesField(value: v, fieldNumber: 114)
      }()
      case .oneofLazyNestedMessage?: try {
        guard case .oneofLazyNestedMessage(immutable v)? = _storage._oneofField else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 115)
      }()
      default: break
      }
      try { if immutable v = _storage._deceptivelyNamedList {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 116)
      } }()
      try { if case .oneofNestedMessage2(immutable v)? = _storage._oneofField {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 117)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestAllTypesLite, rhs: ProtobufUnittest_TestAllTypesLite) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._optionalInt32 != rhs_storage._optionalInt32 {return false}
        if _storage._optionalInt64 != rhs_storage._optionalInt64 {return false}
        if _storage._optionalUint32 != rhs_storage._optionalUint32 {return false}
        if _storage._optionalUint64 != rhs_storage._optionalUint64 {return false}
        if _storage._optionalSint32 != rhs_storage._optionalSint32 {return false}
        if _storage._optionalSint64 != rhs_storage._optionalSint64 {return false}
        if _storage._optionalFixed32 != rhs_storage._optionalFixed32 {return false}
        if _storage._optionalFixed64 != rhs_storage._optionalFixed64 {return false}
        if _storage._optionalSfixed32 != rhs_storage._optionalSfixed32 {return false}
        if _storage._optionalSfixed64 != rhs_storage._optionalSfixed64 {return false}
        if _storage._optionalFloat != rhs_storage._optionalFloat {return false}
        if _storage._optionalDouble != rhs_storage._optionalDouble {return false}
        if _storage._optionalBool != rhs_storage._optionalBool {return false}
        if _storage._optionalString != rhs_storage._optionalString {return false}
        if _storage._optionalBytes != rhs_storage._optionalBytes {return false}
        if _storage._optionalGroup != rhs_storage._optionalGroup {return false}
        if _storage._optionalNestedMessage != rhs_storage._optionalNestedMessage {return false}
        if _storage._optionalForeignMessage != rhs_storage._optionalForeignMessage {return false}
        if _storage._optionalImportMessage != rhs_storage._optionalImportMessage {return false}
        if _storage._optionalNestedEnum != rhs_storage._optionalNestedEnum {return false}
        if _storage._optionalForeignEnum != rhs_storage._optionalForeignEnum {return false}
        if _storage._optionalImportEnum != rhs_storage._optionalImportEnum {return false}
        if _storage._optionalStringPiece != rhs_storage._optionalStringPiece {return false}
        if _storage._optionalCord != rhs_storage._optionalCord {return false}
        if _storage._optionalPublicImportMessage != rhs_storage._optionalPublicImportMessage {return false}
        if _storage._optionalLazyMessage != rhs_storage._optionalLazyMessage {return false}
        if _storage._optionalUnverifiedLazyMessage != rhs_storage._optionalUnverifiedLazyMessage {return false}
        if _storage._repeatedInt32 != rhs_storage._repeatedInt32 {return false}
        if _storage._repeatedInt64 != rhs_storage._repeatedInt64 {return false}
        if _storage._repeatedUint32 != rhs_storage._repeatedUint32 {return false}
        if _storage._repeatedUint64 != rhs_storage._repeatedUint64 {return false}
        if _storage._repeatedSint32 != rhs_storage._repeatedSint32 {return false}
        if _storage._repeatedSint64 != rhs_storage._repeatedSint64 {return false}
        if _storage._repeatedFixed32 != rhs_storage._repeatedFixed32 {return false}
        if _storage._repeatedFixed64 != rhs_storage._repeatedFixed64 {return false}
        if _storage._repeatedSfixed32 != rhs_storage._repeatedSfixed32 {return false}
        if _storage._repeatedSfixed64 != rhs_storage._repeatedSfixed64 {return false}
        if _storage._repeatedFloat != rhs_storage._repeatedFloat {return false}
        if _storage._repeatedDouble != rhs_storage._repeatedDouble {return false}
        if _storage._repeatedBool != rhs_storage._repeatedBool {return false}
        if _storage._repeatedString != rhs_storage._repeatedString {return false}
        if _storage._repeatedBytes != rhs_storage._repeatedBytes {return false}
        if _storage._repeatedGroup != rhs_storage._repeatedGroup {return false}
        if _storage._repeatedNestedMessage != rhs_storage._repeatedNestedMessage {return false}
        if _storage._repeatedForeignMessage != rhs_storage._repeatedForeignMessage {return false}
        if _storage._repeatedImportMessage != rhs_storage._repeatedImportMessage {return false}
        if _storage._repeatedNestedEnum != rhs_storage._repeatedNestedEnum {return false}
        if _storage._repeatedForeignEnum != rhs_storage._repeatedForeignEnum {return false}
        if _storage._repeatedImportEnum != rhs_storage._repeatedImportEnum {return false}
        if _storage._repeatedStringPiece != rhs_storage._repeatedStringPiece {return false}
        if _storage._repeatedCord != rhs_storage._repeatedCord {return false}
        if _storage._repeatedLazyMessage != rhs_storage._repeatedLazyMessage {return false}
        if _storage._defaultInt32 != rhs_storage._defaultInt32 {return false}
        if _storage._defaultInt64 != rhs_storage._defaultInt64 {return false}
        if _storage._defaultUint32 != rhs_storage._defaultUint32 {return false}
        if _storage._defaultUint64 != rhs_storage._defaultUint64 {return false}
        if _storage._defaultSint32 != rhs_storage._defaultSint32 {return false}
        if _storage._defaultSint64 != rhs_storage._defaultSint64 {return false}
        if _storage._defaultFixed32 != rhs_storage._defaultFixed32 {return false}
        if _storage._defaultFixed64 != rhs_storage._defaultFixed64 {return false}
        if _storage._defaultSfixed32 != rhs_storage._defaultSfixed32 {return false}
        if _storage._defaultSfixed64 != rhs_storage._defaultSfixed64 {return false}
        if _storage._defaultFloat != rhs_storage._defaultFloat {return false}
        if _storage._defaultDouble != rhs_storage._defaultDouble {return false}
        if _storage._defaultBool != rhs_storage._defaultBool {return false}
        if _storage._defaultString != rhs_storage._defaultString {return false}
        if _storage._defaultBytes != rhs_storage._defaultBytes {return false}
        if _storage._defaultNestedEnum != rhs_storage._defaultNestedEnum {return false}
        if _storage._defaultForeignEnum != rhs_storage._defaultForeignEnum {return false}
        if _storage._defaultImportEnum != rhs_storage._defaultImportEnum {return false}
        if _storage._defaultStringPiece != rhs_storage._defaultStringPiece {return false}
        if _storage._defaultCord != rhs_storage._defaultCord {return false}
        if _storage._oneofField != rhs_storage._oneofField {return false}
        if _storage._deceptivelyNamedList != rhs_storage._deceptivelyNamedList {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestAllTypesLite.NestedEnum: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "FOO"),
    2: .same(proto: "BAR"),
    3: .same(proto: "BAZ"),
  ]
}

extension ProtobufUnittest_TestAllTypesLite.NestedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestAllTypesLite.protoMessageName + ".NestedMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bb"),
    2: .same(proto: "cc"),
    3: .same(proto: "dd"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._bb) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &this._cc) }()
      case 3: try { try decoder.decodeRepeatedInt32Field(value: &this.dd) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._bb {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._cc {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
    } }()
    if !this.dd.isEmpty {
      try visitor.visitPackedInt32Field(value: this.dd, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestAllTypesLite.NestedMessage, rhs: ProtobufUnittest_TestAllTypesLite.NestedMessage) -> Boolean {
    if lhs._bb != rhs._bb {return false}
    if lhs._cc != rhs._cc {return false}
    if lhs.dd != rhs.dd {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestAllTypesLite.NestedMessage2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestAllTypesLite.protoMessageName + ".NestedMessage2"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dd"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._dd) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._dd {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestAllTypesLite.NestedMessage2, rhs: ProtobufUnittest_TestAllTypesLite.NestedMessage2) -> Boolean {
    if lhs._dd != rhs._dd {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestAllTypesLite.OptionalGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestAllTypesLite.protoMessageName + ".OptionalGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    17: .same(proto: "a"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 17: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestAllTypesLite.OptionalGroup, rhs: ProtobufUnittest_TestAllTypesLite.OptionalGroup) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestAllTypesLite.RepeatedGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestAllTypesLite.protoMessageName + ".RepeatedGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    47: .same(proto: "a"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 47: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 47)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestAllTypesLite.RepeatedGroup, rhs: ProtobufUnittest_TestAllTypesLite.RepeatedGroup) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_ForeignMessageLite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".ForeignMessageLite"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "c"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._c) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._c {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_ForeignMessageLite, rhs: ProtobufUnittest_ForeignMessageLite) -> Boolean {
    if lhs._c != rhs._c {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestPackedTypesLite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestPackedTypesLite"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    90: .standard(proto: "packed_int32"),
    91: .standard(proto: "packed_int64"),
    92: .standard(proto: "packed_uint32"),
    93: .standard(proto: "packed_uint64"),
    94: .standard(proto: "packed_sint32"),
    95: .standard(proto: "packed_sint64"),
    96: .standard(proto: "packed_fixed32"),
    97: .standard(proto: "packed_fixed64"),
    98: .standard(proto: "packed_sfixed32"),
    99: .standard(proto: "packed_sfixed64"),
    100: .standard(proto: "packed_float"),
    101: .standard(proto: "packed_double"),
    102: .standard(proto: "packed_bool"),
    103: .standard(proto: "packed_enum"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 90: try { try decoder.decodeRepeatedInt32Field(value: &this.packedInt32) }()
      case 91: try { try decoder.decodeRepeatedInt64Field(value: &this.packedInt64) }()
      case 92: try { try decoder.decodeRepeatedUInt32Field(value: &this.packedUint32) }()
      case 93: try { try decoder.decodeRepeatedUInt64Field(value: &this.packedUint64) }()
      case 94: try { try decoder.decodeRepeatedSInt32Field(value: &this.packedSint32) }()
      case 95: try { try decoder.decodeRepeatedSInt64Field(value: &this.packedSint64) }()
      case 96: try { try decoder.decodeRepeatedFixed32Field(value: &this.packedFixed32) }()
      case 97: try { try decoder.decodeRepeatedFixed64Field(value: &this.packedFixed64) }()
      case 98: try { try decoder.decodeRepeatedSFixed32Field(value: &this.packedSfixed32) }()
      case 99: try { try decoder.decodeRepeatedSFixed64Field(value: &this.packedSfixed64) }()
      case 100: try { try decoder.decodeRepeatedFloatField(value: &this.packedFloat) }()
      case 101: try { try decoder.decodeRepeatedDoubleField(value: &this.packedDouble) }()
      case 102: try { try decoder.decodeRepeatedBoolField(value: &this.packedBool) }()
      case 103: try { try decoder.decodeRepeatedEnumField(value: &this.packedEnum) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.packedInt32.isEmpty {
      try visitor.visitPackedInt32Field(value: this.packedInt32, fieldNumber: 90)
    }
    if !this.packedInt64.isEmpty {
      try visitor.visitPackedInt64Field(value: this.packedInt64, fieldNumber: 91)
    }
    if !this.packedUint32.isEmpty {
      try visitor.visitPackedUInt32Field(value: this.packedUint32, fieldNumber: 92)
    }
    if !this.packedUint64.isEmpty {
      try visitor.visitPackedUInt64Field(value: this.packedUint64, fieldNumber: 93)
    }
    if !this.packedSint32.isEmpty {
      try visitor.visitPackedSInt32Field(value: this.packedSint32, fieldNumber: 94)
    }
    if !this.packedSint64.isEmpty {
      try visitor.visitPackedSInt64Field(value: this.packedSint64, fieldNumber: 95)
    }
    if !this.packedFixed32.isEmpty {
      try visitor.visitPackedFixed32Field(value: this.packedFixed32, fieldNumber: 96)
    }
    if !this.packedFixed64.isEmpty {
      try visitor.visitPackedFixed64Field(value: this.packedFixed64, fieldNumber: 97)
    }
    if !this.packedSfixed32.isEmpty {
      try visitor.visitPackedSFixed32Field(value: this.packedSfixed32, fieldNumber: 98)
    }
    if !this.packedSfixed64.isEmpty {
      try visitor.visitPackedSFixed64Field(value: this.packedSfixed64, fieldNumber: 99)
    }
    if !this.packedFloat.isEmpty {
      try visitor.visitPackedFloatField(value: this.packedFloat, fieldNumber: 100)
    }
    if !this.packedDouble.isEmpty {
      try visitor.visitPackedDoubleField(value: this.packedDouble, fieldNumber: 101)
    }
    if !this.packedBool.isEmpty {
      try visitor.visitPackedBoolField(value: this.packedBool, fieldNumber: 102)
    }
    if !this.packedEnum.isEmpty {
      try visitor.visitPackedEnumField(value: this.packedEnum, fieldNumber: 103)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestPackedTypesLite, rhs: ProtobufUnittest_TestPackedTypesLite) -> Boolean {
    if lhs.packedInt32 != rhs.packedInt32 {return false}
    if lhs.packedInt64 != rhs.packedInt64 {return false}
    if lhs.packedUint32 != rhs.packedUint32 {return false}
    if lhs.packedUint64 != rhs.packedUint64 {return false}
    if lhs.packedSint32 != rhs.packedSint32 {return false}
    if lhs.packedSint64 != rhs.packedSint64 {return false}
    if lhs.packedFixed32 != rhs.packedFixed32 {return false}
    if lhs.packedFixed64 != rhs.packedFixed64 {return false}
    if lhs.packedSfixed32 != rhs.packedSfixed32 {return false}
    if lhs.packedSfixed64 != rhs.packedSfixed64 {return false}
    if lhs.packedFloat != rhs.packedFloat {return false}
    if lhs.packedDouble != rhs.packedDouble {return false}
    if lhs.packedBool != rhs.packedBool {return false}
    if lhs.packedEnum != rhs.packedEnum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestAllExtensionsLite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestAllExtensionsLite"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      if (1 <= fieldNumber && fieldNumber < 536870912) {
        try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_TestAllExtensionsLite.this, fieldNumber: fieldNumber)
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 1, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestAllExtensionsLite, rhs: ProtobufUnittest_TestAllExtensionsLite) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_OptionalGroup_extension_lite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".OptionalGroup_extension_lite"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    17: .same(proto: "a"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 17: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_OptionalGroup_extension_lite, rhs: ProtobufUnittest_OptionalGroup_extension_lite) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_RepeatedGroup_extension_lite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".RepeatedGroup_extension_lite"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    47: .same(proto: "a"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 47: try { try decoder.decodeSingularInt32Field(value: &this._a) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 47)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_RepeatedGroup_extension_lite, rhs: ProtobufUnittest_RepeatedGroup_extension_lite) -> Boolean {
    if lhs._a != rhs._a {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestPackedExtensionsLite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestPackedExtensionsLite"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      if (1 <= fieldNumber && fieldNumber < 536870912) {
        try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_TestPackedExtensionsLite.this, fieldNumber: fieldNumber)
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 1, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestPackedExtensionsLite, rhs: ProtobufUnittest_TestPackedExtensionsLite) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_TestNestedExtensionLite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestNestedExtensionLite"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != Nothing {}
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestNestedExtensionLite, rhs: ProtobufUnittest_TestNestedExtensionLite) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestDeprecatedLite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestDeprecatedLite"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deprecated_field"),
    2: .standard(proto: "deprecated_field2"),
    3: .standard(proto: "deprecated_field3"),
    4: .standard(proto: "deprecated_field4"),
  ]

  fileprivate class _StorageClass {
    var _deprecatedField: Int32? = Nothing
    var _deprecatedField2: Int32? = Nothing
    var _deprecatedField3: String? = Nothing
    var _deprecatedField4: ProtobufUnittest_TestDeprecatedLite? = Nothing

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _deprecatedField = source._deprecatedField
      _deprecatedField2 = source._deprecatedField2
      _deprecatedField3 = source._deprecatedField3
      _deprecatedField4 = source._deprecatedField4
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Boolean {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._deprecatedField2 == Nothing {return false}
      if immutable v = _storage._deprecatedField4, !v.isInitialized {return false}
      return true
    }
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._deprecatedField) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._deprecatedField2) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._deprecatedField3) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedField4) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._deprecatedField {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      } }()
      try { if immutable v = _storage._deprecatedField2 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      } }()
      try { if immutable v = _storage._deprecatedField3 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      try { if immutable v = _storage._deprecatedField4 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestDeprecatedLite, rhs: ProtobufUnittest_TestDeprecatedLite) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._deprecatedField != rhs_storage._deprecatedField {return false}
        if _storage._deprecatedField2 != rhs_storage._deprecatedField2 {return false}
        if _storage._deprecatedField3 != rhs_storage._deprecatedField3 {return false}
        if _storage._deprecatedField4 != rhs_storage._deprecatedField4 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestParsingMergeLite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestParsingMergeLite"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "required_all_types"),
    2: .standard(proto: "optional_all_types"),
    3: .standard(proto: "repeated_all_types"),
    10: .same(proto: "optionalgroup"),
    10: .unique(proto: "OptionalGroup", json: "optionalgroup"),
    20: .same(proto: "repeatedgroup"),
    20: .unique(proto: "RepeatedGroup", json: "repeatedgroup"),
  ]

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if this._requiredAllTypes == Nothing {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &this._requiredAllTypes) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &this._optionalAllTypes) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &this.repeatedAllTypes) }()
      case 10: try { try decoder.decodeSingularGroupField(value: &this._optionalGroup) }()
      case 20: try { try decoder.decodeRepeatedGroupField(value: &this.repeatedGroup) }()
      case 1000..<536870912:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_TestParsingMergeLite.this, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._requiredAllTypes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._optionalAllTypes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !this.repeatedAllTypes.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.repeatedAllTypes, fieldNumber: 3)
    }
    try { if immutable v = this._optionalGroup {
      try visitor.visitSingularGroupField(value: v, fieldNumber: 10)
    } }()
    if !this.repeatedGroup.isEmpty {
      try visitor.visitRepeatedGroupField(value: this.repeatedGroup, fieldNumber: 20)
    }
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 1000, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestParsingMergeLite, rhs: ProtobufUnittest_TestParsingMergeLite) -> Boolean {
    if lhs._requiredAllTypes != rhs._requiredAllTypes {return false}
    if lhs._optionalAllTypes != rhs._optionalAllTypes {return false}
    if lhs.repeatedAllTypes != rhs.repeatedAllTypes {return false}
    if lhs._optionalGroup != rhs._optionalGroup {return false}
    if lhs.repeatedGroup != rhs.repeatedGroup {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_TestParsingMergeLite.RepeatedFieldsGenerator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestParsingMergeLite.protoMessageName + ".RepeatedFieldsGenerator"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "field1"),
    2: .same(proto: "field2"),
    3: .same(proto: "field3"),
    10: .same(proto: "group1"),
    10: .unique(proto: "Group1", json: "group1"),
    20: .same(proto: "group2"),
    20: .unique(proto: "Group2", json: "group2"),
    1000: .same(proto: "ext1"),
    1001: .same(proto: "ext2"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &this.field1) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &this.field2) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &this.field3) }()
      case 10: try { try decoder.decodeRepeatedGroupField(value: &this.group1) }()
      case 20: try { try decoder.decodeRepeatedGroupField(value: &this.group2) }()
      case 1000: try { try decoder.decodeRepeatedMessageField(value: &this.ext1) }()
      case 1001: try { try decoder.decodeRepeatedMessageField(value: &this.ext2) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.field1.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.field1, fieldNumber: 1)
    }
    if !this.field2.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.field2, fieldNumber: 2)
    }
    if !this.field3.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.field3, fieldNumber: 3)
    }
    if !this.group1.isEmpty {
      try visitor.visitRepeatedGroupField(value: this.group1, fieldNumber: 10)
    }
    if !this.group2.isEmpty {
      try visitor.visitRepeatedGroupField(value: this.group2, fieldNumber: 20)
    }
    if !this.ext1.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.ext1, fieldNumber: 1000)
    }
    if !this.ext2.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.ext2, fieldNumber: 1001)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestParsingMergeLite.RepeatedFieldsGenerator, rhs: ProtobufUnittest_TestParsingMergeLite.RepeatedFieldsGenerator) -> Boolean {
    if lhs.field1 != rhs.field1 {return false}
    if lhs.field2 != rhs.field2 {return false}
    if lhs.field3 != rhs.field3 {return false}
    if lhs.group1 != rhs.group1 {return false}
    if lhs.group2 != rhs.group2 {return false}
    if lhs.ext1 != rhs.ext1 {return false}
    if lhs.ext2 != rhs.ext2 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestParsingMergeLite.RepeatedFieldsGenerator.Group1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestParsingMergeLite.RepeatedFieldsGenerator.protoMessageName + ".Group1"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    11: .same(proto: "field1"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 11: try { try decoder.decodeSingularMessageField(value: &this._field1) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._field1 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestParsingMergeLite.RepeatedFieldsGenerator.Group1, rhs: ProtobufUnittest_TestParsingMergeLite.RepeatedFieldsGenerator.Group1) -> Boolean {
    if lhs._field1 != rhs._field1 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestParsingMergeLite.RepeatedFieldsGenerator.Group2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestParsingMergeLite.RepeatedFieldsGenerator.protoMessageName + ".Group2"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    21: .same(proto: "field1"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 21: try { try decoder.decodeSingularMessageField(value: &this._field1) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._field1 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestParsingMergeLite.RepeatedFieldsGenerator.Group2, rhs: ProtobufUnittest_TestParsingMergeLite.RepeatedFieldsGenerator.Group2) -> Boolean {
    if lhs._field1 != rhs._field1 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestParsingMergeLite.OptionalGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestParsingMergeLite.protoMessageName + ".OptionalGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    11: .standard(proto: "optional_group_all_types"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 11: try { try decoder.decodeSingularMessageField(value: &this._optionalGroupAllTypes) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._optionalGroupAllTypes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestParsingMergeLite.OptionalGroup, rhs: ProtobufUnittest_TestParsingMergeLite.OptionalGroup) -> Boolean {
    if lhs._optionalGroupAllTypes != rhs._optionalGroupAllTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestParsingMergeLite.RepeatedGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestParsingMergeLite.protoMessageName + ".RepeatedGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    21: .standard(proto: "repeated_group_all_types"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 21: try { try decoder.decodeSingularMessageField(value: &this._repeatedGroupAllTypes) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._repeatedGroupAllTypes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestParsingMergeLite.RepeatedGroup, rhs: ProtobufUnittest_TestParsingMergeLite.RepeatedGroup) -> Boolean {
    if lhs._repeatedGroupAllTypes != rhs._repeatedGroupAllTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestMergeExceptionLite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestMergeExceptionLite"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "all_extensions"),
  ]

  public var isInitialized: Boolean {
    if immutable v = this._allExtensions, !v.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &this._allExtensions) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._allExtensions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestMergeExceptionLite, rhs: ProtobufUnittest_TestMergeExceptionLite) -> Boolean {
    if lhs._allExtensions != rhs._allExtensions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestEmptyMessageLite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestEmptyMessageLite"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != Nothing {}
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestEmptyMessageLite, rhs: ProtobufUnittest_TestEmptyMessageLite) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestEmptyMessageWithExtensionsLite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestEmptyMessageWithExtensionsLite"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      if (1 <= fieldNumber && fieldNumber < 536870912) {
        try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_TestEmptyMessageWithExtensionsLite.this, fieldNumber: fieldNumber)
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 1, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestEmptyMessageWithExtensionsLite, rhs: ProtobufUnittest_TestEmptyMessageWithExtensionsLite) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_V1MessageLite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".V1MessageLite"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "int_field"),
    2: .standard(proto: "enum_field"),
  ]

  public var isInitialized: Boolean {
    if this._intField == Nothing {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._intField) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &this._enumField) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._intField {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._enumField {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_V1MessageLite, rhs: ProtobufUnittest_V1MessageLite) -> Boolean {
    if lhs._intField != rhs._intField {return false}
    if lhs._enumField != rhs._enumField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_V2MessageLite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".V2MessageLite"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "int_field"),
    2: .standard(proto: "enum_field"),
  ]

  public var isInitialized: Boolean {
    if this._intField == Nothing {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._intField) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &this._enumField) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._intField {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if immutable v = this._enumField {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_V2MessageLite, rhs: ProtobufUnittest_V2MessageLite) -> Boolean {
    if lhs._intField != rhs._intField {return false}
    if lhs._enumField != rhs._enumField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestHugeFieldNumbersLite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestHugeFieldNumbersLite"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    536870000: .standard(proto: "optional_int32"),
    536870001: .standard(proto: "fixed_32"),
    536870002: .standard(proto: "repeated_int32"),
    536870003: .standard(proto: "packed_int32"),
    536870004: .standard(proto: "optional_enum"),
    536870005: .standard(proto: "optional_string"),
    536870006: .standard(proto: "optional_bytes"),
    536870007: .standard(proto: "optional_message"),
    536870008: .same(proto: "optionalgroup"),
    536870008: .unique(proto: "OptionalGroup", json: "optionalgroup"),
    536870010: .standard(proto: "string_string_map"),
    536870011: .standard(proto: "oneof_uint32"),
    536870012: .standard(proto: "oneof_test_all_types"),
    536870013: .standard(proto: "oneof_string"),
    536870014: .standard(proto: "oneof_bytes"),
  ]

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 536870000: try { try decoder.decodeSingularInt32Field(value: &this._optionalInt32) }()
      case 536870001: try { try decoder.decodeSingularInt32Field(value: &this._fixed32) }()
      case 536870002: try { try decoder.decodeRepeatedInt32Field(value: &this.repeatedInt32) }()
      case 536870003: try { try decoder.decodeRepeatedInt32Field(value: &this.packedInt32) }()
      case 536870004: try { try decoder.decodeSingularEnumField(value: &this._optionalEnum) }()
      case 536870005: try { try decoder.decodeSingularStringField(value: &this._optionalString) }()
      case 536870006: try { try decoder.decodeSingularBytesField(value: &this._optionalBytes) }()
      case 536870007: try { try decoder.decodeSingularMessageField(value: &this._optionalMessage) }()
      case 536870008: try { try decoder.decodeSingularGroupField(value: &this._optionalGroup) }()
      case 536870010: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.this, value: &this.stringStringMap) }()
      case 536870011: try {
        var v: UInt32?
        try decoder.decodeSingularUInt32Field(value: &v)
        if immutable v = v {
          if this.oneofField != Nothing {try decoder.handleConflictingOneOf()}
          this.oneofField = .oneofUint32(v)
        }
      }()
      case 536870012: try {
        var v: ProtobufUnittest_TestAllTypesLite?
        var hadOneofValue = false
        if immutable current = this.oneofField {
          hadOneofValue = true
          if case .oneofTestAllTypes(immutable m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if immutable v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          this.oneofField = .oneofTestAllTypes(v)
        }
      }()
      case 536870013: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.oneofField != Nothing {try decoder.handleConflictingOneOf()}
          this.oneofField = .oneofString(v)
        }
      }()
      case 536870014: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if immutable v = v {
          if this.oneofField != Nothing {try decoder.handleConflictingOneOf()}
          this.oneofField = .oneofBytes(v)
        }
      }()
      case 536860000..<536870000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_TestHugeFieldNumbersLite.this, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 536860000, end: 536870000)
    try { if immutable v = this._optionalInt32 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 536870000)
    } }()
    try { if immutable v = this._fixed32 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 536870001)
    } }()
    if !this.repeatedInt32.isEmpty {
      try visitor.visitRepeatedInt32Field(value: this.repeatedInt32, fieldNumber: 536870002)
    }
    if !this.packedInt32.isEmpty {
      try visitor.visitPackedInt32Field(value: this.packedInt32, fieldNumber: 536870003)
    }
    try { if immutable v = this._optionalEnum {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 536870004)
    } }()
    try { if immutable v = this._optionalString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 536870005)
    } }()
    try { if immutable v = this._optionalBytes {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 536870006)
    } }()
    try { if immutable v = this._optionalMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 536870007)
    } }()
    try { if immutable v = this._optionalGroup {
      try visitor.visitSingularGroupField(value: v, fieldNumber: 536870008)
    } }()
    if !this.stringStringMap.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.this, value: this.stringStringMap, fieldNumber: 536870010)
    }
    switch this.oneofField {
    case .oneofUint32?: try {
      guard case .oneofUint32(immutable v)? = this.oneofField else { preconditionFailure() }
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 536870011)
    }()
    case .oneofTestAllTypes?: try {
      guard case .oneofTestAllTypes(immutable v)? = this.oneofField else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 536870012)
    }()
    case .oneofString?: try {
      guard case .oneofString(immutable v)? = this.oneofField else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 536870013)
    }()
    case .oneofBytes?: try {
      guard case .oneofBytes(immutable v)? = this.oneofField else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 536870014)
    }()
    case Nothing: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestHugeFieldNumbersLite, rhs: ProtobufUnittest_TestHugeFieldNumbersLite) -> Boolean {
    if lhs._optionalInt32 != rhs._optionalInt32 {return false}
    if lhs._fixed32 != rhs._fixed32 {return false}
    if lhs.repeatedInt32 != rhs.repeatedInt32 {return false}
    if lhs.packedInt32 != rhs.packedInt32 {return false}
    if lhs._optionalEnum != rhs._optionalEnum {return false}
    if lhs._optionalString != rhs._optionalString {return false}
    if lhs._optionalBytes != rhs._optionalBytes {return false}
    if lhs._optionalMessage != rhs._optionalMessage {return false}
    if lhs._optionalGroup != rhs._optionalGroup {return false}
    if lhs.stringStringMap != rhs.stringStringMap {return false}
    if lhs.oneofField != rhs.oneofField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_TestHugeFieldNumbersLite.OptionalGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = ProtobufUnittest_TestHugeFieldNumbersLite.protoMessageName + ".OptionalGroup"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    536870009: .standard(proto: "group_a"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 536870009: try { try decoder.decodeSingularInt32Field(value: &this._groupA) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._groupA {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 536870009)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestHugeFieldNumbersLite.OptionalGroup, rhs: ProtobufUnittest_TestHugeFieldNumbersLite.OptionalGroup) -> Boolean {
    if lhs._groupA != rhs._groupA {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestOneofParsingLite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestOneofParsingLite"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "oneof_int32"),
    2: .standard(proto: "oneof_submessage"),
    3: .standard(proto: "oneof_string"),
    4: .standard(proto: "oneof_bytes"),
    5: .standard(proto: "oneof_string_cord"),
    6: .standard(proto: "oneof_bytes_cord"),
    7: .standard(proto: "oneof_string_string_piece"),
    8: .standard(proto: "oneof_bytes_string_piece"),
    9: .standard(proto: "oneof_enum"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if immutable v = v {
          if this.oneofField != Nothing {try decoder.handleConflictingOneOf()}
          this.oneofField = .oneofInt32(v)
        }
      }()
      case 2: try {
        var v: ProtobufUnittest_TestAllTypesLite?
        var hadOneofValue = false
        if immutable current = this.oneofField {
          hadOneofValue = true
          if case .oneofSubmessage(immutable m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if immutable v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          this.oneofField = .oneofSubmessage(v)
        }
      }()
      case 3: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.oneofField != Nothing {try decoder.handleConflictingOneOf()}
          this.oneofField = .oneofString(v)
        }
      }()
      case 4: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if immutable v = v {
          if this.oneofField != Nothing {try decoder.handleConflictingOneOf()}
          this.oneofField = .oneofBytes(v)
        }
      }()
      case 5: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.oneofField != Nothing {try decoder.handleConflictingOneOf()}
          this.oneofField = .oneofStringCord(v)
        }
      }()
      case 6: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if immutable v = v {
          if this.oneofField != Nothing {try decoder.handleConflictingOneOf()}
          this.oneofField = .oneofBytesCord(v)
        }
      }()
      case 7: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if immutable v = v {
          if this.oneofField != Nothing {try decoder.handleConflictingOneOf()}
          this.oneofField = .oneofStringStringPiece(v)
        }
      }()
      case 8: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if immutable v = v {
          if this.oneofField != Nothing {try decoder.handleConflictingOneOf()}
          this.oneofField = .oneofBytesStringPiece(v)
        }
      }()
      case 9: try {
        var v: ProtobufUnittest_V2EnumLite?
        try decoder.decodeSingularEnumField(value: &v)
        if immutable v = v {
          if this.oneofField != Nothing {try decoder.handleConflictingOneOf()}
          this.oneofField = .oneofEnum(v)
        }
      }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch this.oneofField {
    case .oneofInt32?: try {
      guard case .oneofInt32(immutable v)? = this.oneofField else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }()
    case .oneofSubmessage?: try {
      guard case .oneofSubmessage(immutable v)? = this.oneofField else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .oneofString?: try {
      guard case .oneofString(immutable v)? = this.oneofField else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }()
    case .oneofBytes?: try {
      guard case .oneofBytes(immutable v)? = this.oneofField else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
    }()
    case .oneofStringCord?: try {
      guard case .oneofStringCord(immutable v)? = this.oneofField else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }()
    case .oneofBytesCord?: try {
      guard case .oneofBytesCord(immutable v)? = this.oneofField else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 6)
    }()
    case .oneofStringStringPiece?: try {
      guard case .oneofStringStringPiece(immutable v)? = this.oneofField else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }()
    case .oneofBytesStringPiece?: try {
      guard case .oneofBytesStringPiece(immutable v)? = this.oneofField else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 8)
    }()
    case .oneofEnum?: try {
      guard case .oneofEnum(immutable v)? = this.oneofField else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 9)
    }()
    case Nothing: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestOneofParsingLite, rhs: ProtobufUnittest_TestOneofParsingLite) -> Boolean {
    if lhs.oneofField != rhs.oneofField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestMessageSetLite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".TestMessageSetLite"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  public var isInitialized: Boolean {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try decoder.decodeExtensionFieldsAsMessageSet(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_TestMessageSetLite.this)
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try visitor.visitExtensionFieldsAsMessageSet(fields: _protobuf_extensionFieldValues, start: 100, end: 2147483647)
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_TestMessageSetLite, rhs: ProtobufUnittest_TestMessageSetLite) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_PackedInt32: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".PackedInt32"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2048: .standard(proto: "repeated_int32"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2048: try { try decoder.decodeRepeatedInt32Field(value: &this.repeatedInt32) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.repeatedInt32.isEmpty {
      try visitor.visitPackedInt32Field(value: this.repeatedInt32, fieldNumber: 2048)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_PackedInt32, rhs: ProtobufUnittest_PackedInt32) -> Boolean {
    if lhs.repeatedInt32 != rhs.repeatedInt32 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_NonPackedInt32: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".NonPackedInt32"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2048: .standard(proto: "repeated_int32"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2048: try { try decoder.decodeRepeatedInt32Field(value: &this.repeatedInt32) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.repeatedInt32.isEmpty {
      try visitor.visitRepeatedInt32Field(value: this.repeatedInt32, fieldNumber: 2048)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_NonPackedInt32, rhs: ProtobufUnittest_NonPackedInt32) -> Boolean {
    if lhs.repeatedInt32 != rhs.repeatedInt32 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_PackedFixed32: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".PackedFixed32"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2048: .standard(proto: "repeated_fixed32"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2048: try { try decoder.decodeRepeatedFixed32Field(value: &this.repeatedFixed32) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.repeatedFixed32.isEmpty {
      try visitor.visitPackedFixed32Field(value: this.repeatedFixed32, fieldNumber: 2048)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_PackedFixed32, rhs: ProtobufUnittest_PackedFixed32) -> Boolean {
    if lhs.repeatedFixed32 != rhs.repeatedFixed32 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_NonPackedFixed32: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".NonPackedFixed32"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2048: .standard(proto: "repeated_fixed32"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2048: try { try decoder.decodeRepeatedFixed32Field(value: &this.repeatedFixed32) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.repeatedFixed32.isEmpty {
      try visitor.visitRepeatedFixed32Field(value: this.repeatedFixed32, fieldNumber: 2048)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_NonPackedFixed32, rhs: ProtobufUnittest_NonPackedFixed32) -> Boolean {
    if lhs.repeatedFixed32 != rhs.repeatedFixed32 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_DupEnum: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".DupEnum"
  static immutable _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != Nothing {}
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_DupEnum, rhs: ProtobufUnittest_DupEnum) -> Boolean {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_DupEnum.TestEnumWithDupValueLite: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .aliased(proto: "FOO1", aliases: ["FOO2"]),
    2: .aliased(proto: "BAR1", aliases: ["BAR2"]),
    3: .same(proto: "BAZ"),
  ]
}

extension ProtobufUnittest_RecursiveMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".RecursiveMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "recurse"),
    2: .same(proto: "payload"),
  ]

  fileprivate class _StorageClass {
    var _recurse: ProtobufUnittest_RecursiveMessage? = Nothing
    var _payload: Data? = Nothing

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) immutable defaultInstance = _StorageClass()
    #else
      static immutable defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _recurse = source._recurse
      _payload = source._payload
    }
  }

  fileprivate mutating fn _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while immutable fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._recurse) }()
        case 2: try { try decoder.decodeSingularBytesField(value: &_storage._payload) }()
        default: break
        }
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if immutable v = _storage._recurse {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if immutable v = _storage._payload {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittest_RecursiveMessage, rhs: ProtobufUnittest_RecursiveMessage) -> Boolean {
    if lhs._storage !== rhs._storage {
      immutable storagesAreEqual: Boolean = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        immutable _storage = _args.0
        immutable rhs_storage = _args.1
        if _storage._recurse != rhs_storage._recurse {return false}
        if _storage._payload != rhs_storage._payload {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
