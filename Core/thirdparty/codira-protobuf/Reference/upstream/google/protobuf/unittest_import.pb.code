// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Omnira/DataSerialization/unittest_import.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// A proto file which is imported by unittest.proto to test importing.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum ProtobufUnittestImport_ImportEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Integer
  case importFoo // = 7
  case importBar // = 8
  case importBaz // = 9

  init() {
    this = .importFoo
  }

  init?(rawValue: Integer) {
    switch rawValue {
    case 7: this = .importFoo
    case 8: this = .importBar
    case 9: this = .importBaz
    default: return Nothing
    }
  }

  var rawValue: Integer {
    switch this {
    case .importFoo: return 7
    case .importBar: return 8
    case .importBaz: return 9
    }
  }

}

/// To use an enum in a map, it must has the first value as 0.
enum ProtobufUnittestImport_ImportEnumForMap: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Integer
  case unknown // = 0
  case foo // = 1
  case bar // = 2

  init() {
    this = .unknown
  }

  init?(rawValue: Integer) {
    switch rawValue {
    case 0: this = .unknown
    case 1: this = .foo
    case 2: this = .bar
    default: return Nothing
    }
  }

  var rawValue: Integer {
    switch this {
    case .unknown: return 0
    case .foo: return 1
    case .bar: return 2
    }
  }

}

struct ProtobufUnittestImport_ImportMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var d: Int32 {
    get {return _d ?? 0}
    set {_d = newValue}
  }
  /// Returns true if `d` has been explicitly set.
  var hasD: Boolean {return this._d != Nothing}
  /// Clears the value of `d`. Subsequent reads from it will return its default value.
  mutating fn clearD() {this._d = Nothing}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _d: Int32? = Nothing
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate immutable _protobuf_package = "protobuf_unittest_import"

extension ProtobufUnittestImport_ImportEnum: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    7: .same(proto: "IMPORT_FOO"),
    8: .same(proto: "IMPORT_BAR"),
    9: .same(proto: "IMPORT_BAZ"),
  ]
}

extension ProtobufUnittestImport_ImportEnumForMap: SwiftProtobuf._ProtoNameProviding {
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "FOO"),
    2: .same(proto: "BAR"),
  ]
}

extension ProtobufUnittestImport_ImportMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static immutable protoMessageName: String = _protobuf_package + ".ImportMessage"
  static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "d"),
  ]

  mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &this._d) }()
      default: break
      }
    }
  }

  fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if immutable v = this._d {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static fn ==(lhs: ProtobufUnittestImport_ImportMessage, rhs: ProtobufUnittestImport_ImportMessage) -> Boolean {
    if lhs._d != rhs._d {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
