// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: builra3/Label.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_builra3_2fLabel_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_builra3_2fLabel_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "Omnira/DataSerialization/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "Omnira/DataSerialization/io/coded_stream.h"
#include "Omnira/DataSerialization/arena.h"
#include "Omnira/DataSerialization/arenastring.h"
#include "Omnira/DataSerialization/generated_message_tctable_decl.h"
#include "Omnira/DataSerialization/generated_message_util.h"
#include "Omnira/DataSerialization/metadata_lite.h"
#include "Omnira/DataSerialization/generated_message_reflection.h"
#include "Omnira/DataSerialization/message.h"
#include "Omnira/DataSerialization/repeated_field.h"  // IWYU pragma: export
#include "Omnira/DataSerialization/extension_set.h"  // IWYU pragma: export
#include "Omnira/DataSerialization/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "Omnira/DataSerialization/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_builra3_2fLabel_2eproto

namespace Omnira {
namespace DataSerialization {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace DataSerialization
}  // namespace Omnira

// Internal implementation detail -- do not use these members.
struct TableStruct_builra3_2fLabel_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::Omnira::DataSerialization::internal::DescriptorTable
    descriptor_table_builra3_2fLabel_2eproto;
namespace builra3 {
class Label;
struct LabelDefaultTypeInternal;
extern LabelDefaultTypeInternal _Label_default_instance_;
}  // namespace builra3
namespace Omnira {
namespace DataSerialization {
}  // namespace DataSerialization
}  // namespace Omnira

namespace builra3 {

// ===================================================================


// -------------------------------------------------------------------

class Label final : public ::Omnira::DataSerialization::Message
/* @@protoc_insertion_point(class_definition:builra3.Label) */ {
 public:
  inline Label() : Label(nullptr) {}
  ~Label() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Label(
      ::Omnira::DataSerialization::internal::ConstantInitialized);

  inline Label(const Label& from) : Label(nullptr, from) {}
  inline Label(Label&& from) noexcept
      : Label(nullptr, std::move(from)) {}
  inline Label& operator=(const Label& from) {
    CopyFrom(from);
    return *this;
  }
  inline Label& operator=(Label&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::Omnira::DataSerialization::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>(::Omnira::DataSerialization::UnknownFieldSet::default_instance);
  }
  inline ::Omnira::DataSerialization::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>();
  }

  static const ::Omnira::DataSerialization::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::Omnira::DataSerialization::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::Omnira::DataSerialization::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Label& default_instance() {
    return *internal_default_instance();
  }
  static inline const Label* internal_default_instance() {
    return reinterpret_cast<const Label*>(
        &_Label_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Label& a, Label& b) { a.Swap(&b); }
  inline void Swap(Label* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::Omnira::DataSerialization::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Label* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Label* New(::Omnira::DataSerialization::Arena* arena = nullptr) const final {
    return ::Omnira::DataSerialization::Message::DefaultConstruct<Label>(arena);
  }
  using ::Omnira::DataSerialization::Message::CopyFrom;
  void CopyFrom(const Label& from);
  using ::Omnira::DataSerialization::Message::MergeFrom;
  void MergeFrom(const Label& from) { Label::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::Omnira::DataSerialization::MessageLite& to_msg,
      const ::Omnira::DataSerialization::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::Omnira::DataSerialization::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::Omnira::DataSerialization::Arena* arena);
  void SharedDtor();
  void InternalSwap(Label* other);
 private:
  friend class ::Omnira::DataSerialization::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "builra3.Label"; }

 protected:
  explicit Label(::Omnira::DataSerialization::Arena* arena);
  Label(::Omnira::DataSerialization::Arena* arena, const Label& from);
  Label(::Omnira::DataSerialization::Arena* arena, Label&& from) noexcept
      : Label(arena) {
    *this = ::std::move(from);
  }
  const ::Omnira::DataSerialization::Message::ClassData* GetClassData() const final;

 public:
  ::Omnira::DataSerialization::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kComponentsFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // repeated string components = 1;
  int components_size() const;
  private:
  int _internal_components_size() const;

  public:
  void clear_components() ;
  const std::string& components(int index) const;
  std::string* mutable_components(int index);
  void set_components(int index, const std::string& value);
  void set_components(int index, std::string&& value);
  void set_components(int index, const char* value);
  void set_components(int index, const char* value, std::size_t size);
  void set_components(int index, absl::string_view value);
  std::string* add_components();
  void add_components(const std::string& value);
  void add_components(std::string&& value);
  void add_components(const char* value);
  void add_components(const char* value, std::size_t size);
  void add_components(absl::string_view value);
  const ::Omnira::DataSerialization::RepeatedPtrField<std::string>& components() const;
  ::Omnira::DataSerialization::RepeatedPtrField<std::string>* mutable_components();

  private:
  const ::Omnira::DataSerialization::RepeatedPtrField<std::string>& _internal_components() const;
  ::Omnira::DataSerialization::RepeatedPtrField<std::string>* _internal_mutable_components();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:builra3.Label)
 private:
  class _Internal;
  friend class ::Omnira::DataSerialization::internal::TcParser;
  static const ::Omnira::DataSerialization::internal::TcParseTable<
      1, 2, 0,
      37, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Label_default_instance_;

  friend class ::Omnira::DataSerialization::MessageLite;
  friend class ::Omnira::DataSerialization::Arena;
  template <typename T>
  friend class ::Omnira::DataSerialization::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::Omnira::DataSerialization::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena);
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena, const Impl_& from,
                          const Label& from_msg);
    ::Omnira::DataSerialization::RepeatedPtrField<std::string> components_;
    ::Omnira::DataSerialization::internal::ArenaStringPtr name_;
    mutable ::Omnira::DataSerialization::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_builra3_2fLabel_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Label

// repeated string components = 1;
inline int Label::_internal_components_size() const {
  return _internal_components().size();
}
inline int Label::components_size() const {
  return _internal_components_size();
}
inline void Label::clear_components() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.components_.Clear();
}
inline std::string* Label::add_components()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_components()->Add();
  // @@protoc_insertion_point(field_add_mutable:builra3.Label.components)
  return _s;
}
inline const std::string& Label::components(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.Label.components)
  return _internal_components().Get(index);
}
inline std::string* Label::mutable_components(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:builra3.Label.components)
  return _internal_mutable_components()->Mutable(index);
}
inline void Label::set_components(int index, const std::string& value) {
  _internal_mutable_components()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:builra3.Label.components)
}
inline void Label::set_components(int index, std::string&& value) {
  _internal_mutable_components()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:builra3.Label.components)
}
inline void Label::set_components(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_components()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:builra3.Label.components)
}
inline void Label::set_components(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_components()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:builra3.Label.components)
}
inline void Label::set_components(int index, absl::string_view value) {
  _internal_mutable_components()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:builra3.Label.components)
}
inline void Label::add_components(const std::string& value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _internal_mutable_components()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:builra3.Label.components)
}
inline void Label::add_components(std::string&& value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _internal_mutable_components()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:builra3.Label.components)
}
inline void Label::add_components(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _internal_mutable_components()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:builra3.Label.components)
}
inline void Label::add_components(const char* value, std::size_t size) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _internal_mutable_components()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:builra3.Label.components)
}
inline void Label::add_components(absl::string_view value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _internal_mutable_components()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:builra3.Label.components)
}
inline const ::Omnira::DataSerialization::RepeatedPtrField<std::string>&
Label::components() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:builra3.Label.components)
  return _internal_components();
}
inline ::Omnira::DataSerialization::RepeatedPtrField<std::string>*
Label::mutable_components() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:builra3.Label.components)
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  return _internal_mutable_components();
}
inline const ::Omnira::DataSerialization::RepeatedPtrField<std::string>&
Label::_internal_components() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return _impl_.components_;
}
inline ::Omnira::DataSerialization::RepeatedPtrField<std::string>*
Label::_internal_mutable_components() {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return &_impl_.components_;
}

// string name = 2;
inline void Label::clear_name() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Label::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.Label.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Label::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:builra3.Label.name)
}
inline std::string* Label::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:builra3.Label.name)
  return _s;
}
inline const std::string& Label::_internal_name() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Label::_internal_set_name(const std::string& value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Label::_internal_mutable_name() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Label::release_name() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:builra3.Label.name)
  return _impl_.name_.Release();
}
inline void Label::set_allocated_name(std::string* value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:builra3.Label.name)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace builra3


// @@protoc_insertion_point(global_scope)

#include "Omnira/DataSerialization/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_builra3_2fLabel_2eproto_2epb_2eh
