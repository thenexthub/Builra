// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: builra3/Artifact.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_builra3_2fArtifact_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_builra3_2fArtifact_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "Omnira/DataSerialization/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "Omnira/DataSerialization/io/coded_stream.h"
#include "Omnira/DataSerialization/arena.h"
#include "Omnira/DataSerialization/arenastring.h"
#include "Omnira/DataSerialization/generated_message_tctable_decl.h"
#include "Omnira/DataSerialization/generated_message_util.h"
#include "Omnira/DataSerialization/metadata_lite.h"
#include "Omnira/DataSerialization/generated_message_reflection.h"
#include "Omnira/DataSerialization/message.h"
#include "Omnira/DataSerialization/repeated_field.h"  // IWYU pragma: export
#include "Omnira/DataSerialization/extension_set.h"  // IWYU pragma: export
#include "Omnira/DataSerialization/map.h"  // IWYU pragma: export
#include "Omnira/DataSerialization/map_entry.h"
#include "Omnira/DataSerialization/map_field_inl.h"
#include "Omnira/DataSerialization/generated_enum_reflection.h"
#include "Omnira/DataSerialization/unknown_field_set.h"
#include "builra3/CAS.pb.h"
#include "builra3/Label.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "Omnira/DataSerialization/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_builra3_2fArtifact_2eproto

namespace Omnira {
namespace DataSerialization {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace DataSerialization
}  // namespace Omnira

// Internal implementation detail -- do not use these members.
struct TableStruct_builra3_2fArtifact_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::Omnira::DataSerialization::internal::DescriptorTable
    descriptor_table_builra3_2fArtifact_2eproto;
namespace builra3 {
class Artifact;
struct ArtifactDefaultTypeInternal;
extern ArtifactDefaultTypeInternal _Artifact_default_instance_;
class DictObject;
struct DictObjectDefaultTypeInternal;
extern DictObjectDefaultTypeInternal _DictObject_default_instance_;
class DictObject_ContentsEntry_DoNotUse;
struct DictObject_ContentsEntry_DoNotUseDefaultTypeInternal;
extern DictObject_ContentsEntry_DoNotUseDefaultTypeInternal _DictObject_ContentsEntry_DoNotUse_default_instance_;
class ListObject;
struct ListObjectDefaultTypeInternal;
extern ListObjectDefaultTypeInternal _ListObject_default_instance_;
}  // namespace builra3
namespace Omnira {
namespace DataSerialization {
}  // namespace DataSerialization
}  // namespace Omnira

namespace builra3 {
enum ArtifactType : int {
  ARTIFACT_TYPE_FILE = 0,
  ARTIFACT_TYPE_DIRECTORY = 1,
  ARTIFACT_TYPE_BLOB = 2,
  ARTIFACT_TYPE_DICT = 3,
  ARTIFACT_TYPE_LIST = 4,
  ARTIFACT_TYPE_BUILD_GRAPH = 5,
  ArtifactType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ArtifactType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ArtifactType_IsValid(int value);
extern const uint32_t ArtifactType_internal_data_[];
constexpr ArtifactType ArtifactType_MIN = static_cast<ArtifactType>(0);
constexpr ArtifactType ArtifactType_MAX = static_cast<ArtifactType>(5);
constexpr int ArtifactType_ARRAYSIZE = 5 + 1;
const ::Omnira::DataSerialization::EnumDescriptor*
ArtifactType_descriptor();
template <typename T>
const std::string& ArtifactType_Name(T value) {
  static_assert(std::is_same<T, ArtifactType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ArtifactType_Name().");
  return ArtifactType_Name(static_cast<ArtifactType>(value));
}
template <>
inline const std::string& ArtifactType_Name(ArtifactType value) {
  return ::Omnira::DataSerialization::internal::NameOfDenseEnum<ArtifactType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool ArtifactType_Parse(absl::string_view name, ArtifactType* value) {
  return ::Omnira::DataSerialization::internal::ParseNamedEnum<ArtifactType>(
      ArtifactType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ListObject final : public ::Omnira::DataSerialization::Message
/* @@protoc_insertion_point(class_definition:builra3.ListObject) */ {
 public:
  inline ListObject() : ListObject(nullptr) {}
  ~ListObject() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ListObject(
      ::Omnira::DataSerialization::internal::ConstantInitialized);

  inline ListObject(const ListObject& from) : ListObject(nullptr, from) {}
  inline ListObject(ListObject&& from) noexcept
      : ListObject(nullptr, std::move(from)) {}
  inline ListObject& operator=(const ListObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListObject& operator=(ListObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::Omnira::DataSerialization::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>(::Omnira::DataSerialization::UnknownFieldSet::default_instance);
  }
  inline ::Omnira::DataSerialization::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>();
  }

  static const ::Omnira::DataSerialization::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::Omnira::DataSerialization::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::Omnira::DataSerialization::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListObject* internal_default_instance() {
    return reinterpret_cast<const ListObject*>(
        &_ListObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ListObject& a, ListObject& b) { a.Swap(&b); }
  inline void Swap(ListObject* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::Omnira::DataSerialization::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListObject* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListObject* New(::Omnira::DataSerialization::Arena* arena = nullptr) const final {
    return ::Omnira::DataSerialization::Message::DefaultConstruct<ListObject>(arena);
  }
  using ::Omnira::DataSerialization::Message::CopyFrom;
  void CopyFrom(const ListObject& from);
  using ::Omnira::DataSerialization::Message::MergeFrom;
  void MergeFrom(const ListObject& from) { ListObject::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::Omnira::DataSerialization::MessageLite& to_msg,
      const ::Omnira::DataSerialization::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::Omnira::DataSerialization::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::Omnira::DataSerialization::Arena* arena);
  void SharedDtor();
  void InternalSwap(ListObject* other);
 private:
  friend class ::Omnira::DataSerialization::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "builra3.ListObject"; }

 protected:
  explicit ListObject(::Omnira::DataSerialization::Arena* arena);
  ListObject(::Omnira::DataSerialization::Arena* arena, const ListObject& from);
  ListObject(::Omnira::DataSerialization::Arena* arena, ListObject&& from) noexcept
      : ListObject(arena) {
    *this = ::std::move(from);
  }
  const ::Omnira::DataSerialization::Message::ClassData* GetClassData() const final;

 public:
  ::Omnira::DataSerialization::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEntryFieldNumber = 3,
  };
  // repeated string entry = 3;
  int entry_size() const;
  private:
  int _internal_entry_size() const;

  public:
  void clear_entry() ;
  const std::string& entry(int index) const;
  std::string* mutable_entry(int index);
  void set_entry(int index, const std::string& value);
  void set_entry(int index, std::string&& value);
  void set_entry(int index, const char* value);
  void set_entry(int index, const char* value, std::size_t size);
  void set_entry(int index, absl::string_view value);
  std::string* add_entry();
  void add_entry(const std::string& value);
  void add_entry(std::string&& value);
  void add_entry(const char* value);
  void add_entry(const char* value, std::size_t size);
  void add_entry(absl::string_view value);
  const ::Omnira::DataSerialization::RepeatedPtrField<std::string>& entry() const;
  ::Omnira::DataSerialization::RepeatedPtrField<std::string>* mutable_entry();

  private:
  const ::Omnira::DataSerialization::RepeatedPtrField<std::string>& _internal_entry() const;
  ::Omnira::DataSerialization::RepeatedPtrField<std::string>* _internal_mutable_entry();

  public:
  // @@protoc_insertion_point(class_scope:builra3.ListObject)
 private:
  class _Internal;
  friend class ::Omnira::DataSerialization::internal::TcParser;
  static const ::Omnira::DataSerialization::internal::TcParseTable<
      0, 1, 0,
      33, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ListObject_default_instance_;

  friend class ::Omnira::DataSerialization::MessageLite;
  friend class ::Omnira::DataSerialization::Arena;
  template <typename T>
  friend class ::Omnira::DataSerialization::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::Omnira::DataSerialization::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena);
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena, const Impl_& from,
                          const ListObject& from_msg);
    ::Omnira::DataSerialization::RepeatedPtrField<std::string> entry_;
    mutable ::Omnira::DataSerialization::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_builra3_2fArtifact_2eproto;
};
// -------------------------------------------------------------------

class DictObject_ContentsEntry_DoNotUse final
    : public ::Omnira::DataSerialization::internal::MapEntry<
          DictObject_ContentsEntry_DoNotUse, std::string, std::string,
          ::Omnira::DataSerialization::internal::WireFormatLite::TYPE_STRING,
          ::Omnira::DataSerialization::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::Omnira::DataSerialization::internal::MapEntry<
      DictObject_ContentsEntry_DoNotUse, std::string, std::string,
      ::Omnira::DataSerialization::internal::WireFormatLite::TYPE_STRING,
      ::Omnira::DataSerialization::internal::WireFormatLite::TYPE_STRING>;
  DictObject_ContentsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DictObject_ContentsEntry_DoNotUse(
      ::Omnira::DataSerialization::internal::ConstantInitialized);
  explicit DictObject_ContentsEntry_DoNotUse(::Omnira::DataSerialization::Arena* arena);
  static const DictObject_ContentsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const DictObject_ContentsEntry_DoNotUse*>(
        &_DictObject_ContentsEntry_DoNotUse_default_instance_);
  }
const ::Omnira::DataSerialization::Message::ClassData* GetClassData() const final;
  friend struct ::TableStruct_builra3_2fArtifact_2eproto;
};
// -------------------------------------------------------------------

class DictObject final : public ::Omnira::DataSerialization::Message
/* @@protoc_insertion_point(class_definition:builra3.DictObject) */ {
 public:
  inline DictObject() : DictObject(nullptr) {}
  ~DictObject() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DictObject(
      ::Omnira::DataSerialization::internal::ConstantInitialized);

  inline DictObject(const DictObject& from) : DictObject(nullptr, from) {}
  inline DictObject(DictObject&& from) noexcept
      : DictObject(nullptr, std::move(from)) {}
  inline DictObject& operator=(const DictObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline DictObject& operator=(DictObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::Omnira::DataSerialization::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>(::Omnira::DataSerialization::UnknownFieldSet::default_instance);
  }
  inline ::Omnira::DataSerialization::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>();
  }

  static const ::Omnira::DataSerialization::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::Omnira::DataSerialization::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::Omnira::DataSerialization::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DictObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const DictObject* internal_default_instance() {
    return reinterpret_cast<const DictObject*>(
        &_DictObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(DictObject& a, DictObject& b) { a.Swap(&b); }
  inline void Swap(DictObject* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::Omnira::DataSerialization::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DictObject* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DictObject* New(::Omnira::DataSerialization::Arena* arena = nullptr) const final {
    return ::Omnira::DataSerialization::Message::DefaultConstruct<DictObject>(arena);
  }
  using ::Omnira::DataSerialization::Message::CopyFrom;
  void CopyFrom(const DictObject& from);
  using ::Omnira::DataSerialization::Message::MergeFrom;
  void MergeFrom(const DictObject& from) { DictObject::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::Omnira::DataSerialization::MessageLite& to_msg,
      const ::Omnira::DataSerialization::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::Omnira::DataSerialization::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::Omnira::DataSerialization::Arena* arena);
  void SharedDtor();
  void InternalSwap(DictObject* other);
 private:
  friend class ::Omnira::DataSerialization::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "builra3.DictObject"; }

 protected:
  explicit DictObject(::Omnira::DataSerialization::Arena* arena);
  DictObject(::Omnira::DataSerialization::Arena* arena, const DictObject& from);
  DictObject(::Omnira::DataSerialization::Arena* arena, DictObject&& from) noexcept
      : DictObject(arena) {
    *this = ::std::move(from);
  }
  const ::Omnira::DataSerialization::Message::ClassData* GetClassData() const final;

 public:
  ::Omnira::DataSerialization::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kContentsFieldNumber = 3,
  };
  // map<string, string> contents = 3;
  int contents_size() const;
  private:
  int _internal_contents_size() const;

  public:
  void clear_contents() ;
  const ::Omnira::DataSerialization::Map<std::string, std::string>& contents() const;
  ::Omnira::DataSerialization::Map<std::string, std::string>* mutable_contents();

  private:
  const ::Omnira::DataSerialization::Map<std::string, std::string>& _internal_contents() const;
  ::Omnira::DataSerialization::Map<std::string, std::string>* _internal_mutable_contents();

  public:
  // @@protoc_insertion_point(class_scope:builra3.DictObject)
 private:
  class _Internal;
  friend class ::Omnira::DataSerialization::internal::TcParser;
  static const ::Omnira::DataSerialization::internal::TcParseTable<
      0, 1, 1,
      36, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DictObject_default_instance_;

  friend class ::Omnira::DataSerialization::MessageLite;
  friend class ::Omnira::DataSerialization::Arena;
  template <typename T>
  friend class ::Omnira::DataSerialization::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::Omnira::DataSerialization::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena);
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena, const Impl_& from,
                          const DictObject& from_msg);
    ::Omnira::DataSerialization::internal::MapField<DictObject_ContentsEntry_DoNotUse, std::string, std::string,
                      ::Omnira::DataSerialization::internal::WireFormatLite::TYPE_STRING,
                      ::Omnira::DataSerialization::internal::WireFormatLite::TYPE_STRING>
        contents_;
    mutable ::Omnira::DataSerialization::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_builra3_2fArtifact_2eproto;
};
// -------------------------------------------------------------------

class Artifact final : public ::Omnira::DataSerialization::Message
/* @@protoc_insertion_point(class_definition:builra3.Artifact) */ {
 public:
  inline Artifact() : Artifact(nullptr) {}
  ~Artifact() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Artifact(
      ::Omnira::DataSerialization::internal::ConstantInitialized);

  inline Artifact(const Artifact& from) : Artifact(nullptr, from) {}
  inline Artifact(Artifact&& from) noexcept
      : Artifact(nullptr, std::move(from)) {}
  inline Artifact& operator=(const Artifact& from) {
    CopyFrom(from);
    return *this;
  }
  inline Artifact& operator=(Artifact&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::Omnira::DataSerialization::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>(::Omnira::DataSerialization::UnknownFieldSet::default_instance);
  }
  inline ::Omnira::DataSerialization::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>();
  }

  static const ::Omnira::DataSerialization::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::Omnira::DataSerialization::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::Omnira::DataSerialization::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Artifact& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kCasObject = 3,
    kBlob = 4,
    kDict = 5,
    kList = 6,
    VALUE_NOT_SET = 0,
  };
  static inline const Artifact* internal_default_instance() {
    return reinterpret_cast<const Artifact*>(
        &_Artifact_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Artifact& a, Artifact& b) { a.Swap(&b); }
  inline void Swap(Artifact* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::Omnira::DataSerialization::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Artifact* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Artifact* New(::Omnira::DataSerialization::Arena* arena = nullptr) const final {
    return ::Omnira::DataSerialization::Message::DefaultConstruct<Artifact>(arena);
  }
  using ::Omnira::DataSerialization::Message::CopyFrom;
  void CopyFrom(const Artifact& from);
  using ::Omnira::DataSerialization::Message::MergeFrom;
  void MergeFrom(const Artifact& from) { Artifact::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::Omnira::DataSerialization::MessageLite& to_msg,
      const ::Omnira::DataSerialization::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::Omnira::DataSerialization::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::Omnira::DataSerialization::Arena* arena);
  void SharedDtor();
  void InternalSwap(Artifact* other);
 private:
  friend class ::Omnira::DataSerialization::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "builra3.Artifact"; }

 protected:
  explicit Artifact(::Omnira::DataSerialization::Arena* arena);
  Artifact(::Omnira::DataSerialization::Arena* arena, const Artifact& from);
  Artifact(::Omnira::DataSerialization::Arena* arena, Artifact&& from) noexcept
      : Artifact(arena) {
    *this = ::std::move(from);
  }
  const ::Omnira::DataSerialization::Message::ClassData* GetClassData() const final;

 public:
  ::Omnira::DataSerialization::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLabelFieldNumber = 1,
    kTypeFieldNumber = 2,
    kCasObjectFieldNumber = 3,
    kBlobFieldNumber = 4,
    kDictFieldNumber = 5,
    kListFieldNumber = 6,
  };
  // .builra3.Label label = 1;
  bool has_label() const;
  void clear_label() ;
  const ::builra3::Label& label() const;
  PROTOBUF_NODISCARD ::builra3::Label* release_label();
  ::builra3::Label* mutable_label();
  void set_allocated_label(::builra3::Label* value);
  void unsafe_arena_set_allocated_label(::builra3::Label* value);
  ::builra3::Label* unsafe_arena_release_label();

  private:
  const ::builra3::Label& _internal_label() const;
  ::builra3::Label* _internal_mutable_label();

  public:
  // .builra3.ArtifactType type = 2;
  void clear_type() ;
  ::builra3::ArtifactType type() const;
  void set_type(::builra3::ArtifactType value);

  private:
  ::builra3::ArtifactType _internal_type() const;
  void _internal_set_type(::builra3::ArtifactType value);

  public:
  // .builra3.CASID cas_object = 3;
  bool has_cas_object() const;
  private:
  bool _internal_has_cas_object() const;

  public:
  void clear_cas_object() ;
  const ::builra3::CASID& cas_object() const;
  PROTOBUF_NODISCARD ::builra3::CASID* release_cas_object();
  ::builra3::CASID* mutable_cas_object();
  void set_allocated_cas_object(::builra3::CASID* value);
  void unsafe_arena_set_allocated_cas_object(::builra3::CASID* value);
  ::builra3::CASID* unsafe_arena_release_cas_object();

  private:
  const ::builra3::CASID& _internal_cas_object() const;
  ::builra3::CASID* _internal_mutable_cas_object();

  public:
  // bytes blob = 4;
  bool has_blob() const;
  void clear_blob() ;
  const std::string& blob() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_blob(Arg_&& arg, Args_... args);
  std::string* mutable_blob();
  PROTOBUF_NODISCARD std::string* release_blob();
  void set_allocated_blob(std::string* value);

  private:
  const std::string& _internal_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blob(
      const std::string& value);
  std::string* _internal_mutable_blob();

  public:
  // .builra3.DictObject dict = 5;
  bool has_dict() const;
  private:
  bool _internal_has_dict() const;

  public:
  void clear_dict() ;
  const ::builra3::DictObject& dict() const;
  PROTOBUF_NODISCARD ::builra3::DictObject* release_dict();
  ::builra3::DictObject* mutable_dict();
  void set_allocated_dict(::builra3::DictObject* value);
  void unsafe_arena_set_allocated_dict(::builra3::DictObject* value);
  ::builra3::DictObject* unsafe_arena_release_dict();

  private:
  const ::builra3::DictObject& _internal_dict() const;
  ::builra3::DictObject* _internal_mutable_dict();

  public:
  // .builra3.ListObject list = 6;
  bool has_list() const;
  private:
  bool _internal_has_list() const;

  public:
  void clear_list() ;
  const ::builra3::ListObject& list() const;
  PROTOBUF_NODISCARD ::builra3::ListObject* release_list();
  ::builra3::ListObject* mutable_list();
  void set_allocated_list(::builra3::ListObject* value);
  void unsafe_arena_set_allocated_list(::builra3::ListObject* value);
  ::builra3::ListObject* unsafe_arena_release_list();

  private:
  const ::builra3::ListObject& _internal_list() const;
  ::builra3::ListObject* _internal_mutable_list();

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:builra3.Artifact)
 private:
  class _Internal;
  void set_has_cas_object();
  void set_has_blob();
  void set_has_dict();
  void set_has_list();
  inline bool has_value() const;
  inline void clear_has_value();
  friend class ::Omnira::DataSerialization::internal::TcParser;
  static const ::Omnira::DataSerialization::internal::TcParseTable<
      1, 6, 4,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Artifact_default_instance_;

  friend class ::Omnira::DataSerialization::MessageLite;
  friend class ::Omnira::DataSerialization::Arena;
  template <typename T>
  friend class ::Omnira::DataSerialization::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::Omnira::DataSerialization::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena);
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena, const Impl_& from,
                          const Artifact& from_msg);
    ::Omnira::DataSerialization::internal::HasBits<1> _has_bits_;
    mutable ::Omnira::DataSerialization::internal::CachedSize _cached_size_;
    ::builra3::Label* label_;
    int type_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
      ::Omnira::DataSerialization::internal::ConstantInitialized _constinit_;
      ::builra3::CASID* cas_object_;
      ::Omnira::DataSerialization::internal::ArenaStringPtr blob_;
      ::builra3::DictObject* dict_;
      ::builra3::ListObject* list_;
    } value_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_builra3_2fArtifact_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DictObject

// map<string, string> contents = 3;
inline int DictObject::_internal_contents_size() const {
  return _internal_contents().size();
}
inline int DictObject::contents_size() const {
  return _internal_contents_size();
}
inline void DictObject::clear_contents() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.contents_.Clear();
}
inline const ::Omnira::DataSerialization::Map<std::string, std::string>& DictObject::_internal_contents() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return _impl_.contents_.GetMap();
}
inline const ::Omnira::DataSerialization::Map<std::string, std::string>& DictObject::contents() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:builra3.DictObject.contents)
  return _internal_contents();
}
inline ::Omnira::DataSerialization::Map<std::string, std::string>* DictObject::_internal_mutable_contents() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  return _impl_.contents_.MutableMap();
}
inline ::Omnira::DataSerialization::Map<std::string, std::string>* DictObject::mutable_contents() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:builra3.DictObject.contents)
  return _internal_mutable_contents();
}

// -------------------------------------------------------------------

// ListObject

// repeated string entry = 3;
inline int ListObject::_internal_entry_size() const {
  return _internal_entry().size();
}
inline int ListObject::entry_size() const {
  return _internal_entry_size();
}
inline void ListObject::clear_entry() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.entry_.Clear();
}
inline std::string* ListObject::add_entry()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_entry()->Add();
  // @@protoc_insertion_point(field_add_mutable:builra3.ListObject.entry)
  return _s;
}
inline const std::string& ListObject::entry(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.ListObject.entry)
  return _internal_entry().Get(index);
}
inline std::string* ListObject::mutable_entry(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:builra3.ListObject.entry)
  return _internal_mutable_entry()->Mutable(index);
}
inline void ListObject::set_entry(int index, const std::string& value) {
  _internal_mutable_entry()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:builra3.ListObject.entry)
}
inline void ListObject::set_entry(int index, std::string&& value) {
  _internal_mutable_entry()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:builra3.ListObject.entry)
}
inline void ListObject::set_entry(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_entry()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:builra3.ListObject.entry)
}
inline void ListObject::set_entry(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_entry()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:builra3.ListObject.entry)
}
inline void ListObject::set_entry(int index, absl::string_view value) {
  _internal_mutable_entry()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:builra3.ListObject.entry)
}
inline void ListObject::add_entry(const std::string& value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _internal_mutable_entry()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:builra3.ListObject.entry)
}
inline void ListObject::add_entry(std::string&& value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _internal_mutable_entry()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:builra3.ListObject.entry)
}
inline void ListObject::add_entry(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _internal_mutable_entry()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:builra3.ListObject.entry)
}
inline void ListObject::add_entry(const char* value, std::size_t size) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _internal_mutable_entry()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:builra3.ListObject.entry)
}
inline void ListObject::add_entry(absl::string_view value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _internal_mutable_entry()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:builra3.ListObject.entry)
}
inline const ::Omnira::DataSerialization::RepeatedPtrField<std::string>&
ListObject::entry() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:builra3.ListObject.entry)
  return _internal_entry();
}
inline ::Omnira::DataSerialization::RepeatedPtrField<std::string>*
ListObject::mutable_entry() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:builra3.ListObject.entry)
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  return _internal_mutable_entry();
}
inline const ::Omnira::DataSerialization::RepeatedPtrField<std::string>&
ListObject::_internal_entry() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return _impl_.entry_;
}
inline ::Omnira::DataSerialization::RepeatedPtrField<std::string>*
ListObject::_internal_mutable_entry() {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return &_impl_.entry_;
}

// -------------------------------------------------------------------

// Artifact

// .builra3.Label label = 1;
inline bool Artifact::has_label() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.label_ != nullptr);
  return value;
}
inline const ::builra3::Label& Artifact::_internal_label() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  const ::builra3::Label* p = _impl_.label_;
  return p != nullptr ? *p : reinterpret_cast<const ::builra3::Label&>(::builra3::_Label_default_instance_);
}
inline const ::builra3::Label& Artifact::label() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.Artifact.label)
  return _internal_label();
}
inline void Artifact::unsafe_arena_set_allocated_label(::builra3::Label* value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::Omnira::DataSerialization::MessageLite*>(_impl_.label_);
  }
  _impl_.label_ = reinterpret_cast<::builra3::Label*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:builra3.Artifact.label)
}
inline ::builra3::Label* Artifact::release_label() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::builra3::Label* released = _impl_.label_;
  _impl_.label_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::Omnira::DataSerialization::MessageLite*>(released);
  released = ::Omnira::DataSerialization::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::Omnira::DataSerialization::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::builra3::Label* Artifact::unsafe_arena_release_label() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:builra3.Artifact.label)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::builra3::Label* temp = _impl_.label_;
  _impl_.label_ = nullptr;
  return temp;
}
inline ::builra3::Label* Artifact::_internal_mutable_label() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (_impl_.label_ == nullptr) {
    auto* p = ::Omnira::DataSerialization::Message::DefaultConstruct<::builra3::Label>(GetArena());
    _impl_.label_ = reinterpret_cast<::builra3::Label*>(p);
  }
  return _impl_.label_;
}
inline ::builra3::Label* Artifact::mutable_label() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::builra3::Label* _msg = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:builra3.Artifact.label)
  return _msg;
}
inline void Artifact::set_allocated_label(::builra3::Label* value) {
  ::Omnira::DataSerialization::Arena* message_arena = GetArena();
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Omnira::DataSerialization::MessageLite*>(_impl_.label_);
  }

  if (value != nullptr) {
    ::Omnira::DataSerialization::Arena* submessage_arena = reinterpret_cast<::Omnira::DataSerialization::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::Omnira::DataSerialization::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.label_ = reinterpret_cast<::builra3::Label*>(value);
  // @@protoc_insertion_point(field_set_allocated:builra3.Artifact.label)
}

// .builra3.ArtifactType type = 2;
inline void Artifact::clear_type() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::builra3::ArtifactType Artifact::type() const {
  // @@protoc_insertion_point(field_get:builra3.Artifact.type)
  return _internal_type();
}
inline void Artifact::set_type(::builra3::ArtifactType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:builra3.Artifact.type)
}
inline ::builra3::ArtifactType Artifact::_internal_type() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return static_cast<::builra3::ArtifactType>(_impl_.type_);
}
inline void Artifact::_internal_set_type(::builra3::ArtifactType value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .builra3.CASID cas_object = 3;
inline bool Artifact::has_cas_object() const {
  return value_case() == kCasObject;
}
inline bool Artifact::_internal_has_cas_object() const {
  return value_case() == kCasObject;
}
inline void Artifact::set_has_cas_object() {
  _impl_._oneof_case_[0] = kCasObject;
}
inline ::builra3::CASID* Artifact::release_cas_object() {
  // @@protoc_insertion_point(field_release:builra3.Artifact.cas_object)
  if (value_case() == kCasObject) {
    clear_has_value();
    auto* temp = _impl_.value_.cas_object_;
    if (GetArena() != nullptr) {
      temp = ::Omnira::DataSerialization::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.cas_object_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::builra3::CASID& Artifact::_internal_cas_object() const {
  return value_case() == kCasObject ? *_impl_.value_.cas_object_ : reinterpret_cast<::builra3::CASID&>(::builra3::_CASID_default_instance_);
}
inline const ::builra3::CASID& Artifact::cas_object() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.Artifact.cas_object)
  return _internal_cas_object();
}
inline ::builra3::CASID* Artifact::unsafe_arena_release_cas_object() {
  // @@protoc_insertion_point(field_unsafe_arena_release:builra3.Artifact.cas_object)
  if (value_case() == kCasObject) {
    clear_has_value();
    auto* temp = _impl_.value_.cas_object_;
    _impl_.value_.cas_object_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Artifact::unsafe_arena_set_allocated_cas_object(::builra3::CASID* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_cas_object();
    _impl_.value_.cas_object_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:builra3.Artifact.cas_object)
}
inline ::builra3::CASID* Artifact::_internal_mutable_cas_object() {
  if (value_case() != kCasObject) {
    clear_value();
    set_has_cas_object();
    _impl_.value_.cas_object_ =
        ::Omnira::DataSerialization::Message::DefaultConstruct<::builra3::CASID>(GetArena());
  }
  return _impl_.value_.cas_object_;
}
inline ::builra3::CASID* Artifact::mutable_cas_object() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::builra3::CASID* _msg = _internal_mutable_cas_object();
  // @@protoc_insertion_point(field_mutable:builra3.Artifact.cas_object)
  return _msg;
}

// bytes blob = 4;
inline bool Artifact::has_blob() const {
  return value_case() == kBlob;
}
inline void Artifact::set_has_blob() {
  _impl_._oneof_case_[0] = kBlob;
}
inline void Artifact::clear_blob() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (value_case() == kBlob) {
    _impl_.value_.blob_.Destroy();
    clear_has_value();
  }
}
inline const std::string& Artifact::blob() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.Artifact.blob)
  return _internal_blob();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Artifact::set_blob(Arg_&& arg,
                                                     Args_... args) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (value_case() != kBlob) {
    clear_value();

    set_has_blob();
    _impl_.value_.blob_.InitDefault();
  }
  _impl_.value_.blob_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:builra3.Artifact.blob)
}
inline std::string* Artifact::mutable_blob() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_blob();
  // @@protoc_insertion_point(field_mutable:builra3.Artifact.blob)
  return _s;
}
inline const std::string& Artifact::_internal_blob() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  if (value_case() != kBlob) {
    return ::Omnira::DataSerialization::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.blob_.Get();
}
inline void Artifact::_internal_set_blob(const std::string& value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (value_case() != kBlob) {
    clear_value();

    set_has_blob();
    _impl_.value_.blob_.InitDefault();
  }
  _impl_.value_.blob_.Set(value, GetArena());
}
inline std::string* Artifact::_internal_mutable_blob() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (value_case() != kBlob) {
    clear_value();

    set_has_blob();
    _impl_.value_.blob_.InitDefault();
  }
  return _impl_.value_.blob_.Mutable( GetArena());
}
inline std::string* Artifact::release_blob() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:builra3.Artifact.blob)
  if (value_case() != kBlob) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.blob_.Release();
}
inline void Artifact::set_allocated_blob(std::string* value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_blob();
    _impl_.value_.blob_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:builra3.Artifact.blob)
}

// .builra3.DictObject dict = 5;
inline bool Artifact::has_dict() const {
  return value_case() == kDict;
}
inline bool Artifact::_internal_has_dict() const {
  return value_case() == kDict;
}
inline void Artifact::set_has_dict() {
  _impl_._oneof_case_[0] = kDict;
}
inline void Artifact::clear_dict() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (value_case() == kDict) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.dict_;
    } else if (::Omnira::DataSerialization::internal::DebugHardenClearOneofMessageOnArena()) {
      ::Omnira::DataSerialization::internal::MaybePoisonAfterClear(_impl_.value_.dict_);
    }
    clear_has_value();
  }
}
inline ::builra3::DictObject* Artifact::release_dict() {
  // @@protoc_insertion_point(field_release:builra3.Artifact.dict)
  if (value_case() == kDict) {
    clear_has_value();
    auto* temp = _impl_.value_.dict_;
    if (GetArena() != nullptr) {
      temp = ::Omnira::DataSerialization::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.dict_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::builra3::DictObject& Artifact::_internal_dict() const {
  return value_case() == kDict ? *_impl_.value_.dict_ : reinterpret_cast<::builra3::DictObject&>(::builra3::_DictObject_default_instance_);
}
inline const ::builra3::DictObject& Artifact::dict() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.Artifact.dict)
  return _internal_dict();
}
inline ::builra3::DictObject* Artifact::unsafe_arena_release_dict() {
  // @@protoc_insertion_point(field_unsafe_arena_release:builra3.Artifact.dict)
  if (value_case() == kDict) {
    clear_has_value();
    auto* temp = _impl_.value_.dict_;
    _impl_.value_.dict_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Artifact::unsafe_arena_set_allocated_dict(::builra3::DictObject* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_dict();
    _impl_.value_.dict_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:builra3.Artifact.dict)
}
inline ::builra3::DictObject* Artifact::_internal_mutable_dict() {
  if (value_case() != kDict) {
    clear_value();
    set_has_dict();
    _impl_.value_.dict_ =
        ::Omnira::DataSerialization::Message::DefaultConstruct<::builra3::DictObject>(GetArena());
  }
  return _impl_.value_.dict_;
}
inline ::builra3::DictObject* Artifact::mutable_dict() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::builra3::DictObject* _msg = _internal_mutable_dict();
  // @@protoc_insertion_point(field_mutable:builra3.Artifact.dict)
  return _msg;
}

// .builra3.ListObject list = 6;
inline bool Artifact::has_list() const {
  return value_case() == kList;
}
inline bool Artifact::_internal_has_list() const {
  return value_case() == kList;
}
inline void Artifact::set_has_list() {
  _impl_._oneof_case_[0] = kList;
}
inline void Artifact::clear_list() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (value_case() == kList) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.list_;
    } else if (::Omnira::DataSerialization::internal::DebugHardenClearOneofMessageOnArena()) {
      ::Omnira::DataSerialization::internal::MaybePoisonAfterClear(_impl_.value_.list_);
    }
    clear_has_value();
  }
}
inline ::builra3::ListObject* Artifact::release_list() {
  // @@protoc_insertion_point(field_release:builra3.Artifact.list)
  if (value_case() == kList) {
    clear_has_value();
    auto* temp = _impl_.value_.list_;
    if (GetArena() != nullptr) {
      temp = ::Omnira::DataSerialization::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::builra3::ListObject& Artifact::_internal_list() const {
  return value_case() == kList ? *_impl_.value_.list_ : reinterpret_cast<::builra3::ListObject&>(::builra3::_ListObject_default_instance_);
}
inline const ::builra3::ListObject& Artifact::list() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.Artifact.list)
  return _internal_list();
}
inline ::builra3::ListObject* Artifact::unsafe_arena_release_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:builra3.Artifact.list)
  if (value_case() == kList) {
    clear_has_value();
    auto* temp = _impl_.value_.list_;
    _impl_.value_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Artifact::unsafe_arena_set_allocated_list(::builra3::ListObject* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_list();
    _impl_.value_.list_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:builra3.Artifact.list)
}
inline ::builra3::ListObject* Artifact::_internal_mutable_list() {
  if (value_case() != kList) {
    clear_value();
    set_has_list();
    _impl_.value_.list_ =
        ::Omnira::DataSerialization::Message::DefaultConstruct<::builra3::ListObject>(GetArena());
  }
  return _impl_.value_.list_;
}
inline ::builra3::ListObject* Artifact::mutable_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::builra3::ListObject* _msg = _internal_mutable_list();
  // @@protoc_insertion_point(field_mutable:builra3.Artifact.list)
  return _msg;
}

inline bool Artifact::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Artifact::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline Artifact::ValueCase Artifact::value_case() const {
  return Artifact::ValueCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace builra3


namespace Omnira {
namespace DataSerialization {

template <>
struct is_proto_enum<::builra3::ArtifactType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::builra3::ArtifactType>() {
  return ::builra3::ArtifactType_descriptor();
}

}  // namespace DataSerialization
}  // namespace Omnira

// @@protoc_insertion_point(global_scope)

#include "Omnira/DataSerialization/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_builra3_2fArtifact_2eproto_2epb_2eh
