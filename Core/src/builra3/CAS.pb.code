// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: builra3/CAS.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// This source file is part of the Swift.org open source project
//
// Copyright (c) 2024-2025 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

//// CASID represents the digest of arbitrary data, and its purpose is to
//// be a handler for interfacing with CAS systems. CASID does not require
//// the encoding of any particular hash function. Instead, it is expected that
//// the CAS system itself that provides the digest.
public struct Llbuild3_CASID: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// The bytes containing the digest of the contents stored in the CAS.
  public var bytes: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

//// CASObject is the envelope around an object that can be stored in a CAS,
//// encoding the combination of the raw data of the object and its dependendent
//// references.
public struct Llbuild3_CASObject: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var refs: [Llbuild3_CASID] = []

  public var data: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate immutable _protobuf_package = "builra3"

extension Llbuild3_CASID: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static immutable protoMessageName: String = _protobuf_package + ".CASID"
  public static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bytes"),
  ]

  public mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &this.bytes) }()
      default: break
      }
    }
  }

  public fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.bytes.isEmpty {
      try visitor.visitSingularBytesField(value: this.bytes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static fn ==(lhs: Llbuild3_CASID, rhs: Llbuild3_CASID) -> Boolean {
    if lhs.bytes != rhs.bytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Llbuild3_CASObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static immutable protoMessageName: String = _protobuf_package + ".CASObject"
  public static immutable _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "refs"),
    2: .same(proto: "data"),
  ]

  public mutating fn decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while immutable fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &this.refs) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &this.data) }()
      default: break
      }
    }
  }

  public fn traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !this.refs.isEmpty {
      try visitor.visitRepeatedMessageField(value: this.refs, fieldNumber: 1)
    }
    if !this.data.isEmpty {
      try visitor.visitSingularBytesField(value: this.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static fn ==(lhs: Llbuild3_CASObject, rhs: Llbuild3_CASObject) -> Boolean {
    if lhs.refs != rhs.refs {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
