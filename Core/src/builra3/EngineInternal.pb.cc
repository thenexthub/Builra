// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: builra3/EngineInternal.proto
// Protobuf C++ Version: 5.27.2

#include "builra3/EngineInternal.pb.h"

#include <algorithm>
#include <type_traits>
#include "Omnira/DataSerialization/io/coded_stream.h"
#include "Omnira/DataSerialization/generated_message_tctable_impl.h"
#include "Omnira/DataSerialization/extension_set.h"
#include "Omnira/DataSerialization/wire_format_lite.h"
#include "Omnira/DataSerialization/descriptor.h"
#include "Omnira/DataSerialization/generated_message_reflection.h"
#include "Omnira/DataSerialization/reflection_ops.h"
#include "Omnira/DataSerialization/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "Omnira/DataSerialization/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::Omnira::DataSerialization;
namespace _pbi = ::Omnira::DataSerialization::internal;
namespace _fl = ::Omnira::DataSerialization::internal::field_layout;
namespace builra3 {

inline constexpr TaskRuleRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        label_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TaskRuleRequest::TaskRuleRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TaskRuleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskRuleRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskRuleRequestDefaultTypeInternal() {}
  union {
    TaskRuleRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskRuleRequestDefaultTypeInternal _TaskRuleRequest_default_instance_;

inline constexpr TaskArtifactRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        label_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TaskArtifactRequest::TaskArtifactRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TaskArtifactRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskArtifactRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskArtifactRequestDefaultTypeInternal() {}
  union {
    TaskArtifactRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskArtifactRequestDefaultTypeInternal _TaskArtifactRequest_default_instance_;

inline constexpr TaskRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_{::uint64_t{0u}},
        details_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR TaskRequest::TaskRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TaskRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskRequestDefaultTypeInternal() {}
  union {
    TaskRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskRequestDefaultTypeInternal _TaskRequest_default_instance_;

inline constexpr TaskTransitionValue::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        requests_{},
        state_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TaskTransitionValue::TaskTransitionValue(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TaskTransitionValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskTransitionValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskTransitionValueDefaultTypeInternal() {}
  union {
    TaskTransitionValue _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskTransitionValueDefaultTypeInternal _TaskTransitionValue_default_instance_;

inline constexpr TaskTransitionKey::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ctx_{nullptr},
        signature_{nullptr},
        inputs_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TaskTransitionKey::TaskTransitionKey(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TaskTransitionKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskTransitionKeyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskTransitionKeyDefaultTypeInternal() {}
  union {
    TaskTransitionKey _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskTransitionKeyDefaultTypeInternal _TaskTransitionKey_default_instance_;
}  // namespace builra3
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_builra3_2fEngineInternal_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_builra3_2fEngineInternal_2eproto = nullptr;
const ::uint32_t
    TableStruct_builra3_2fEngineInternal_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::builra3::TaskArtifactRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::builra3::TaskArtifactRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::builra3::TaskArtifactRequest, _impl_.label_),
        0,
        PROTOBUF_FIELD_OFFSET(::builra3::TaskRuleRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::builra3::TaskRuleRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::builra3::TaskRuleRequest, _impl_.label_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::builra3::TaskRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::builra3::TaskRequest, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::builra3::TaskRequest, _impl_.id_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::builra3::TaskRequest, _impl_.details_),
        PROTOBUF_FIELD_OFFSET(::builra3::TaskTransitionKey, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::builra3::TaskTransitionKey, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::builra3::TaskTransitionKey, _impl_.ctx_),
        PROTOBUF_FIELD_OFFSET(::builra3::TaskTransitionKey, _impl_.signature_),
        PROTOBUF_FIELD_OFFSET(::builra3::TaskTransitionKey, _impl_.inputs_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::builra3::TaskTransitionValue, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::builra3::TaskTransitionValue, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::builra3::TaskTransitionValue, _impl_.state_),
        PROTOBUF_FIELD_OFFSET(::builra3::TaskTransitionValue, _impl_.requests_),
        0,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 9, -1, sizeof(::builra3::TaskArtifactRequest)},
        {10, 19, -1, sizeof(::builra3::TaskRuleRequest)},
        {20, -1, -1, sizeof(::builra3::TaskRequest)},
        {33, 44, -1, sizeof(::builra3::TaskTransitionKey)},
        {47, 57, -1, sizeof(::builra3::TaskTransitionValue)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::builra3::_TaskArtifactRequest_default_instance_._instance,
    &::builra3::_TaskRuleRequest_default_instance_._instance,
    &::builra3::_TaskRequest_default_instance_._instance,
    &::builra3::_TaskTransitionKey_default_instance_._instance,
    &::builra3::_TaskTransitionValue_default_instance_._instance,
};
const char descriptor_table_protodef_builra3_2fEngineInternal_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\035builra3/EngineInternal.proto\022\010builra"
    "3\032\025builra3/Action.proto\032\025builra3/Engin"
    "e.proto\032\024builra3/Label.proto\"5\n\023TaskArt"
    "ifactRequest\022\036\n\005label\030\001 \001(\0132\017.builra3.L"
    "abel\"1\n\017TaskRuleRequest\022\036\n\005label\030\001 \001(\0132\017"
    ".builra3.Label\"\246\001\n\013TaskRequest\022\n\n\002id\030\001 "
    "\001(\004\0221\n\010artifact\030\002 \001(\0132\035.builra3.TaskArt"
    "ifactRequestH\000\022)\n\004rule\030\003 \001(\0132\031.builra3."
    "TaskRuleRequestH\000\022\"\n\006action\030\004 \001(\0132\020.llbu"
    "ild3.ActionH\000B\t\n\007details\"\205\001\n\021TaskTransit"
    "ionKey\022\"\n\003ctx\030\001 \001(\0132\025.builra3.TaskConte"
    "xt\022&\n\tsignature\030\002 \001(\0132\023.builra3.Signatu"
    "re\022$\n\006inputs\030\003 \001(\0132\024.builra3.TaskInputs"
    "\"f\n\023TaskTransitionValue\022&\n\005state\030\001 \001(\0132\027"
    ".builra3.TaskNextState\022\'\n\010requests\030\002 \003("
    "\0132\025.builra3.TaskRequestb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_builra3_2fEngineInternal_2eproto_deps[3] =
    {
        &::descriptor_table_builra3_2fAction_2eproto,
        &::descriptor_table_builra3_2fEngine_2eproto,
        &::descriptor_table_builra3_2fLabel_2eproto,
};
static ::absl::once_flag descriptor_table_builra3_2fEngineInternal_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_builra3_2fEngineInternal_2eproto = {
    false,
    false,
    632,
    descriptor_table_protodef_builra3_2fEngineInternal_2eproto,
    "builra3/EngineInternal.proto",
    &descriptor_table_builra3_2fEngineInternal_2eproto_once,
    descriptor_table_builra3_2fEngineInternal_2eproto_deps,
    3,
    5,
    schemas,
    file_default_instances,
    TableStruct_builra3_2fEngineInternal_2eproto::offsets,
    file_level_enum_descriptors_builra3_2fEngineInternal_2eproto,
    file_level_service_descriptors_builra3_2fEngineInternal_2eproto,
};
namespace builra3 {
// ===================================================================

class TaskArtifactRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TaskArtifactRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TaskArtifactRequest, _impl_._has_bits_);
};

void TaskArtifactRequest::clear_label() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (_impl_.label_ != nullptr) _impl_.label_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TaskArtifactRequest::TaskArtifactRequest(::Omnira::DataSerialization::Arena* arena)
    : ::Omnira::DataSerialization::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:builra3.TaskArtifactRequest)
}
inline PROTOBUF_NDEBUG_INLINE TaskArtifactRequest::Impl_::Impl_(
    ::Omnira::DataSerialization::internal::InternalVisibility visibility, ::Omnira::DataSerialization::Arena* arena,
    const Impl_& from, const ::builra3::TaskArtifactRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TaskArtifactRequest::TaskArtifactRequest(
    ::Omnira::DataSerialization::Arena* arena,
    const TaskArtifactRequest& from)
    : ::Omnira::DataSerialization::Message(arena) {
  TaskArtifactRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::Omnira::DataSerialization::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.label_ = (cached_has_bits & 0x00000001u) ? ::Omnira::DataSerialization::Message::CopyConstruct<::builra3::Label>(
                              arena, *from._impl_.label_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:builra3.TaskArtifactRequest)
}
inline PROTOBUF_NDEBUG_INLINE TaskArtifactRequest::Impl_::Impl_(
    ::Omnira::DataSerialization::internal::InternalVisibility visibility,
    ::Omnira::DataSerialization::Arena* arena)
      : _cached_size_{0} {}

inline void TaskArtifactRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.label_ = {};
}
TaskArtifactRequest::~TaskArtifactRequest() {
  // @@protoc_insertion_point(destructor:builra3.TaskArtifactRequest)
  _internal_metadata_.Delete<::Omnira::DataSerialization::UnknownFieldSet>();
  SharedDtor();
}
inline void TaskArtifactRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.label_;
  _impl_.~Impl_();
}

const ::Omnira::DataSerialization::MessageLite::ClassData*
TaskArtifactRequest::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::Omnira::DataSerialization::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(TaskArtifactRequest, _impl_._cached_size_),
              false,
          },
          &TaskArtifactRequest::MergeImpl,
          &TaskArtifactRequest::kDescriptorMethods,
          &descriptor_table_builra3_2fEngineInternal_2eproto,
          nullptr,  // tracker
      };
  ::Omnira::DataSerialization::internal::PrefetchToLocalCache(&_data_);
  ::Omnira::DataSerialization::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TaskArtifactRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TaskArtifactRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TaskArtifactRequest_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::builra3::TaskArtifactRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .builra3.Label label = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TaskArtifactRequest, _impl_.label_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .builra3.Label label = 1;
    {PROTOBUF_FIELD_OFFSET(TaskArtifactRequest, _impl_.label_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::builra3::Label>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TaskArtifactRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:builra3.TaskArtifactRequest)
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.label_ != nullptr);
    _impl_.label_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::Omnira::DataSerialization::UnknownFieldSet>();
}

::uint8_t* TaskArtifactRequest::_InternalSerialize(
    ::uint8_t* target,
    ::Omnira::DataSerialization::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:builra3.TaskArtifactRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .builra3.Label label = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::Omnira::DataSerialization::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.label_, _impl_.label_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>(::Omnira::DataSerialization::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:builra3.TaskArtifactRequest)
  return target;
}

::size_t TaskArtifactRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:builra3.TaskArtifactRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .builra3.Label label = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::Omnira::DataSerialization::internal::WireFormatLite::MessageSize(*_impl_.label_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void TaskArtifactRequest::MergeImpl(::Omnira::DataSerialization::MessageLite& to_msg, const ::Omnira::DataSerialization::MessageLite& from_msg) {
  auto* const _this = static_cast<TaskArtifactRequest*>(&to_msg);
  auto& from = static_cast<const TaskArtifactRequest&>(from_msg);
  ::Omnira::DataSerialization::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:builra3.TaskArtifactRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.label_ != nullptr);
    if (_this->_impl_.label_ == nullptr) {
      _this->_impl_.label_ =
          ::Omnira::DataSerialization::Message::CopyConstruct<::builra3::Label>(arena, *from._impl_.label_);
    } else {
      _this->_impl_.label_->MergeFrom(*from._impl_.label_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::Omnira::DataSerialization::UnknownFieldSet>(from._internal_metadata_);
}

void TaskArtifactRequest::CopyFrom(const TaskArtifactRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:builra3.TaskArtifactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TaskArtifactRequest::InternalSwap(TaskArtifactRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.label_, other->_impl_.label_);
}

::Omnira::DataSerialization::Metadata TaskArtifactRequest::GetMetadata() const {
  return ::Omnira::DataSerialization::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TaskRuleRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TaskRuleRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TaskRuleRequest, _impl_._has_bits_);
};

void TaskRuleRequest::clear_label() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (_impl_.label_ != nullptr) _impl_.label_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TaskRuleRequest::TaskRuleRequest(::Omnira::DataSerialization::Arena* arena)
    : ::Omnira::DataSerialization::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:builra3.TaskRuleRequest)
}
inline PROTOBUF_NDEBUG_INLINE TaskRuleRequest::Impl_::Impl_(
    ::Omnira::DataSerialization::internal::InternalVisibility visibility, ::Omnira::DataSerialization::Arena* arena,
    const Impl_& from, const ::builra3::TaskRuleRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TaskRuleRequest::TaskRuleRequest(
    ::Omnira::DataSerialization::Arena* arena,
    const TaskRuleRequest& from)
    : ::Omnira::DataSerialization::Message(arena) {
  TaskRuleRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::Omnira::DataSerialization::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.label_ = (cached_has_bits & 0x00000001u) ? ::Omnira::DataSerialization::Message::CopyConstruct<::builra3::Label>(
                              arena, *from._impl_.label_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:builra3.TaskRuleRequest)
}
inline PROTOBUF_NDEBUG_INLINE TaskRuleRequest::Impl_::Impl_(
    ::Omnira::DataSerialization::internal::InternalVisibility visibility,
    ::Omnira::DataSerialization::Arena* arena)
      : _cached_size_{0} {}

inline void TaskRuleRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.label_ = {};
}
TaskRuleRequest::~TaskRuleRequest() {
  // @@protoc_insertion_point(destructor:builra3.TaskRuleRequest)
  _internal_metadata_.Delete<::Omnira::DataSerialization::UnknownFieldSet>();
  SharedDtor();
}
inline void TaskRuleRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.label_;
  _impl_.~Impl_();
}

const ::Omnira::DataSerialization::MessageLite::ClassData*
TaskRuleRequest::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::Omnira::DataSerialization::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(TaskRuleRequest, _impl_._cached_size_),
              false,
          },
          &TaskRuleRequest::MergeImpl,
          &TaskRuleRequest::kDescriptorMethods,
          &descriptor_table_builra3_2fEngineInternal_2eproto,
          nullptr,  // tracker
      };
  ::Omnira::DataSerialization::internal::PrefetchToLocalCache(&_data_);
  ::Omnira::DataSerialization::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TaskRuleRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TaskRuleRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TaskRuleRequest_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::builra3::TaskRuleRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .builra3.Label label = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TaskRuleRequest, _impl_.label_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .builra3.Label label = 1;
    {PROTOBUF_FIELD_OFFSET(TaskRuleRequest, _impl_.label_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::builra3::Label>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TaskRuleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:builra3.TaskRuleRequest)
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.label_ != nullptr);
    _impl_.label_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::Omnira::DataSerialization::UnknownFieldSet>();
}

::uint8_t* TaskRuleRequest::_InternalSerialize(
    ::uint8_t* target,
    ::Omnira::DataSerialization::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:builra3.TaskRuleRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .builra3.Label label = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::Omnira::DataSerialization::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.label_, _impl_.label_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>(::Omnira::DataSerialization::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:builra3.TaskRuleRequest)
  return target;
}

::size_t TaskRuleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:builra3.TaskRuleRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .builra3.Label label = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::Omnira::DataSerialization::internal::WireFormatLite::MessageSize(*_impl_.label_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void TaskRuleRequest::MergeImpl(::Omnira::DataSerialization::MessageLite& to_msg, const ::Omnira::DataSerialization::MessageLite& from_msg) {
  auto* const _this = static_cast<TaskRuleRequest*>(&to_msg);
  auto& from = static_cast<const TaskRuleRequest&>(from_msg);
  ::Omnira::DataSerialization::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:builra3.TaskRuleRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.label_ != nullptr);
    if (_this->_impl_.label_ == nullptr) {
      _this->_impl_.label_ =
          ::Omnira::DataSerialization::Message::CopyConstruct<::builra3::Label>(arena, *from._impl_.label_);
    } else {
      _this->_impl_.label_->MergeFrom(*from._impl_.label_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::Omnira::DataSerialization::UnknownFieldSet>(from._internal_metadata_);
}

void TaskRuleRequest::CopyFrom(const TaskRuleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:builra3.TaskRuleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TaskRuleRequest::InternalSwap(TaskRuleRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.label_, other->_impl_.label_);
}

::Omnira::DataSerialization::Metadata TaskRuleRequest::GetMetadata() const {
  return ::Omnira::DataSerialization::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TaskRequest::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::builra3::TaskRequest, _impl_._oneof_case_);
};

void TaskRequest::set_allocated_artifact(::builra3::TaskArtifactRequest* artifact) {
  ::Omnira::DataSerialization::Arena* message_arena = GetArena();
  clear_details();
  if (artifact) {
    ::Omnira::DataSerialization::Arena* submessage_arena = artifact->GetArena();
    if (message_arena != submessage_arena) {
      artifact = ::Omnira::DataSerialization::internal::GetOwnedMessage(message_arena, artifact, submessage_arena);
    }
    set_has_artifact();
    _impl_.details_.artifact_ = artifact;
  }
  // @@protoc_insertion_point(field_set_allocated:builra3.TaskRequest.artifact)
}
void TaskRequest::set_allocated_rule(::builra3::TaskRuleRequest* rule) {
  ::Omnira::DataSerialization::Arena* message_arena = GetArena();
  clear_details();
  if (rule) {
    ::Omnira::DataSerialization::Arena* submessage_arena = rule->GetArena();
    if (message_arena != submessage_arena) {
      rule = ::Omnira::DataSerialization::internal::GetOwnedMessage(message_arena, rule, submessage_arena);
    }
    set_has_rule();
    _impl_.details_.rule_ = rule;
  }
  // @@protoc_insertion_point(field_set_allocated:builra3.TaskRequest.rule)
}
void TaskRequest::set_allocated_action(::builra3::Action* action) {
  ::Omnira::DataSerialization::Arena* message_arena = GetArena();
  clear_details();
  if (action) {
    ::Omnira::DataSerialization::Arena* submessage_arena = reinterpret_cast<::Omnira::DataSerialization::MessageLite*>(action)->GetArena();
    if (message_arena != submessage_arena) {
      action = ::Omnira::DataSerialization::internal::GetOwnedMessage(message_arena, action, submessage_arena);
    }
    set_has_action();
    _impl_.details_.action_ = action;
  }
  // @@protoc_insertion_point(field_set_allocated:builra3.TaskRequest.action)
}
void TaskRequest::clear_action() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (details_case() == kAction) {
    if (GetArena() == nullptr) {
      delete _impl_.details_.action_;
    } else if (::Omnira::DataSerialization::internal::DebugHardenClearOneofMessageOnArena()) {
      ::Omnira::DataSerialization::internal::MaybePoisonAfterClear(_impl_.details_.action_);
    }
    clear_has_details();
  }
}
TaskRequest::TaskRequest(::Omnira::DataSerialization::Arena* arena)
    : ::Omnira::DataSerialization::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:builra3.TaskRequest)
}
inline PROTOBUF_NDEBUG_INLINE TaskRequest::Impl_::Impl_(
    ::Omnira::DataSerialization::internal::InternalVisibility visibility, ::Omnira::DataSerialization::Arena* arena,
    const Impl_& from, const ::builra3::TaskRequest& from_msg)
      : details_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

TaskRequest::TaskRequest(
    ::Omnira::DataSerialization::Arena* arena,
    const TaskRequest& from)
    : ::Omnira::DataSerialization::Message(arena) {
  TaskRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::Omnira::DataSerialization::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.id_ = from._impl_.id_;
  switch (details_case()) {
    case DETAILS_NOT_SET:
      break;
      case kArtifact:
        _impl_.details_.artifact_ = ::Omnira::DataSerialization::Message::CopyConstruct<::builra3::TaskArtifactRequest>(arena, *from._impl_.details_.artifact_);
        break;
      case kRule:
        _impl_.details_.rule_ = ::Omnira::DataSerialization::Message::CopyConstruct<::builra3::TaskRuleRequest>(arena, *from._impl_.details_.rule_);
        break;
      case kAction:
        _impl_.details_.action_ = ::Omnira::DataSerialization::Message::CopyConstruct<::builra3::Action>(arena, *from._impl_.details_.action_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:builra3.TaskRequest)
}
inline PROTOBUF_NDEBUG_INLINE TaskRequest::Impl_::Impl_(
    ::Omnira::DataSerialization::internal::InternalVisibility visibility,
    ::Omnira::DataSerialization::Arena* arena)
      : details_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void TaskRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.id_ = {};
}
TaskRequest::~TaskRequest() {
  // @@protoc_insertion_point(destructor:builra3.TaskRequest)
  _internal_metadata_.Delete<::Omnira::DataSerialization::UnknownFieldSet>();
  SharedDtor();
}
inline void TaskRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_details()) {
    clear_details();
  }
  _impl_.~Impl_();
}

void TaskRequest::clear_details() {
// @@protoc_insertion_point(one_of_clear_start:builra3.TaskRequest)
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  switch (details_case()) {
    case kArtifact: {
      if (GetArena() == nullptr) {
        delete _impl_.details_.artifact_;
      } else if (::Omnira::DataSerialization::internal::DebugHardenClearOneofMessageOnArena()) {
        ::Omnira::DataSerialization::internal::MaybePoisonAfterClear(_impl_.details_.artifact_);
      }
      break;
    }
    case kRule: {
      if (GetArena() == nullptr) {
        delete _impl_.details_.rule_;
      } else if (::Omnira::DataSerialization::internal::DebugHardenClearOneofMessageOnArena()) {
        ::Omnira::DataSerialization::internal::MaybePoisonAfterClear(_impl_.details_.rule_);
      }
      break;
    }
    case kAction: {
      if (GetArena() == nullptr) {
        delete _impl_.details_.action_;
      } else if (::Omnira::DataSerialization::internal::DebugHardenClearOneofMessageOnArena()) {
        ::Omnira::DataSerialization::internal::MaybePoisonAfterClear(_impl_.details_.action_);
      }
      break;
    }
    case DETAILS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DETAILS_NOT_SET;
}


const ::Omnira::DataSerialization::MessageLite::ClassData*
TaskRequest::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::Omnira::DataSerialization::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(TaskRequest, _impl_._cached_size_),
              false,
          },
          &TaskRequest::MergeImpl,
          &TaskRequest::kDescriptorMethods,
          &descriptor_table_builra3_2fEngineInternal_2eproto,
          nullptr,  // tracker
      };
  ::Omnira::DataSerialization::internal::PrefetchToLocalCache(&_data_);
  ::Omnira::DataSerialization::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 4, 3, 0, 2> TaskRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TaskRequest_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::builra3::TaskRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint64 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TaskRequest, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TaskRequest, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 id = 1;
    {PROTOBUF_FIELD_OFFSET(TaskRequest, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // .builra3.TaskArtifactRequest artifact = 2;
    {PROTOBUF_FIELD_OFFSET(TaskRequest, _impl_.details_.artifact_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .builra3.TaskRuleRequest rule = 3;
    {PROTOBUF_FIELD_OFFSET(TaskRequest, _impl_.details_.rule_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .builra3.Action action = 4;
    {PROTOBUF_FIELD_OFFSET(TaskRequest, _impl_.details_.action_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::builra3::TaskArtifactRequest>()},
    {::_pbi::TcParser::GetTable<::builra3::TaskRuleRequest>()},
    {::_pbi::TcParser::GetTable<::builra3::Action>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:builra3.TaskRequest)
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = ::uint64_t{0u};
  clear_details();
  _internal_metadata_.Clear<::Omnira::DataSerialization::UnknownFieldSet>();
}

::uint8_t* TaskRequest::_InternalSerialize(
    ::uint8_t* target,
    ::Omnira::DataSerialization::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:builra3.TaskRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_id(), target);
  }

  switch (details_case()) {
    case kArtifact: {
      target = ::Omnira::DataSerialization::internal::WireFormatLite::InternalWriteMessage(
          2, *_impl_.details_.artifact_, _impl_.details_.artifact_->GetCachedSize(), target, stream);
      break;
    }
    case kRule: {
      target = ::Omnira::DataSerialization::internal::WireFormatLite::InternalWriteMessage(
          3, *_impl_.details_.rule_, _impl_.details_.rule_->GetCachedSize(), target, stream);
      break;
    }
    case kAction: {
      target = ::Omnira::DataSerialization::internal::WireFormatLite::InternalWriteMessage(
          4, *_impl_.details_.action_, _impl_.details_.action_->GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>(::Omnira::DataSerialization::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:builra3.TaskRequest)
  return target;
}

::size_t TaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:builra3.TaskRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_id());
  }

  switch (details_case()) {
    // .builra3.TaskArtifactRequest artifact = 2;
    case kArtifact: {
      total_size +=
          1 + ::Omnira::DataSerialization::internal::WireFormatLite::MessageSize(*_impl_.details_.artifact_);
      break;
    }
    // .builra3.TaskRuleRequest rule = 3;
    case kRule: {
      total_size +=
          1 + ::Omnira::DataSerialization::internal::WireFormatLite::MessageSize(*_impl_.details_.rule_);
      break;
    }
    // .builra3.Action action = 4;
    case kAction: {
      total_size +=
          1 + ::Omnira::DataSerialization::internal::WireFormatLite::MessageSize(*_impl_.details_.action_);
      break;
    }
    case DETAILS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void TaskRequest::MergeImpl(::Omnira::DataSerialization::MessageLite& to_msg, const ::Omnira::DataSerialization::MessageLite& from_msg) {
  auto* const _this = static_cast<TaskRequest*>(&to_msg);
  auto& from = static_cast<const TaskRequest&>(from_msg);
  ::Omnira::DataSerialization::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:builra3.TaskRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_details();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kArtifact: {
        if (oneof_needs_init) {
          _this->_impl_.details_.artifact_ =
              ::Omnira::DataSerialization::Message::CopyConstruct<::builra3::TaskArtifactRequest>(arena, *from._impl_.details_.artifact_);
        } else {
          _this->_impl_.details_.artifact_->MergeFrom(from._internal_artifact());
        }
        break;
      }
      case kRule: {
        if (oneof_needs_init) {
          _this->_impl_.details_.rule_ =
              ::Omnira::DataSerialization::Message::CopyConstruct<::builra3::TaskRuleRequest>(arena, *from._impl_.details_.rule_);
        } else {
          _this->_impl_.details_.rule_->MergeFrom(from._internal_rule());
        }
        break;
      }
      case kAction: {
        if (oneof_needs_init) {
          _this->_impl_.details_.action_ =
              ::Omnira::DataSerialization::Message::CopyConstruct<::builra3::Action>(arena, *from._impl_.details_.action_);
        } else {
          _this->_impl_.details_.action_->MergeFrom(from._internal_action());
        }
        break;
      }
      case DETAILS_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::Omnira::DataSerialization::UnknownFieldSet>(from._internal_metadata_);
}

void TaskRequest::CopyFrom(const TaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:builra3.TaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TaskRequest::InternalSwap(TaskRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.id_, other->_impl_.id_);
  swap(_impl_.details_, other->_impl_.details_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::Omnira::DataSerialization::Metadata TaskRequest::GetMetadata() const {
  return ::Omnira::DataSerialization::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TaskTransitionKey::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TaskTransitionKey>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TaskTransitionKey, _impl_._has_bits_);
};

void TaskTransitionKey::clear_ctx() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (_impl_.ctx_ != nullptr) _impl_.ctx_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TaskTransitionKey::clear_signature() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (_impl_.signature_ != nullptr) _impl_.signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TaskTransitionKey::clear_inputs() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (_impl_.inputs_ != nullptr) _impl_.inputs_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
TaskTransitionKey::TaskTransitionKey(::Omnira::DataSerialization::Arena* arena)
    : ::Omnira::DataSerialization::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:builra3.TaskTransitionKey)
}
inline PROTOBUF_NDEBUG_INLINE TaskTransitionKey::Impl_::Impl_(
    ::Omnira::DataSerialization::internal::InternalVisibility visibility, ::Omnira::DataSerialization::Arena* arena,
    const Impl_& from, const ::builra3::TaskTransitionKey& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TaskTransitionKey::TaskTransitionKey(
    ::Omnira::DataSerialization::Arena* arena,
    const TaskTransitionKey& from)
    : ::Omnira::DataSerialization::Message(arena) {
  TaskTransitionKey* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::Omnira::DataSerialization::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.ctx_ = (cached_has_bits & 0x00000001u) ? ::Omnira::DataSerialization::Message::CopyConstruct<::builra3::TaskContext>(
                              arena, *from._impl_.ctx_)
                        : nullptr;
  _impl_.signature_ = (cached_has_bits & 0x00000002u) ? ::Omnira::DataSerialization::Message::CopyConstruct<::builra3::Signature>(
                              arena, *from._impl_.signature_)
                        : nullptr;
  _impl_.inputs_ = (cached_has_bits & 0x00000004u) ? ::Omnira::DataSerialization::Message::CopyConstruct<::builra3::TaskInputs>(
                              arena, *from._impl_.inputs_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:builra3.TaskTransitionKey)
}
inline PROTOBUF_NDEBUG_INLINE TaskTransitionKey::Impl_::Impl_(
    ::Omnira::DataSerialization::internal::InternalVisibility visibility,
    ::Omnira::DataSerialization::Arena* arena)
      : _cached_size_{0} {}

inline void TaskTransitionKey::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ctx_),
           0,
           offsetof(Impl_, inputs_) -
               offsetof(Impl_, ctx_) +
               sizeof(Impl_::inputs_));
}
TaskTransitionKey::~TaskTransitionKey() {
  // @@protoc_insertion_point(destructor:builra3.TaskTransitionKey)
  _internal_metadata_.Delete<::Omnira::DataSerialization::UnknownFieldSet>();
  SharedDtor();
}
inline void TaskTransitionKey::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.ctx_;
  delete _impl_.signature_;
  delete _impl_.inputs_;
  _impl_.~Impl_();
}

const ::Omnira::DataSerialization::MessageLite::ClassData*
TaskTransitionKey::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::Omnira::DataSerialization::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(TaskTransitionKey, _impl_._cached_size_),
              false,
          },
          &TaskTransitionKey::MergeImpl,
          &TaskTransitionKey::kDescriptorMethods,
          &descriptor_table_builra3_2fEngineInternal_2eproto,
          nullptr,  // tracker
      };
  ::Omnira::DataSerialization::internal::PrefetchToLocalCache(&_data_);
  ::Omnira::DataSerialization::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> TaskTransitionKey::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TaskTransitionKey, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TaskTransitionKey_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::builra3::TaskTransitionKey>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .builra3.TaskContext ctx = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TaskTransitionKey, _impl_.ctx_)}},
    // .builra3.Signature signature = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(TaskTransitionKey, _impl_.signature_)}},
    // .builra3.TaskInputs inputs = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(TaskTransitionKey, _impl_.inputs_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .builra3.TaskContext ctx = 1;
    {PROTOBUF_FIELD_OFFSET(TaskTransitionKey, _impl_.ctx_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .builra3.Signature signature = 2;
    {PROTOBUF_FIELD_OFFSET(TaskTransitionKey, _impl_.signature_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .builra3.TaskInputs inputs = 3;
    {PROTOBUF_FIELD_OFFSET(TaskTransitionKey, _impl_.inputs_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::builra3::TaskContext>()},
    {::_pbi::TcParser::GetTable<::builra3::Signature>()},
    {::_pbi::TcParser::GetTable<::builra3::TaskInputs>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TaskTransitionKey::Clear() {
// @@protoc_insertion_point(message_clear_start:builra3.TaskTransitionKey)
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.ctx_ != nullptr);
      _impl_.ctx_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.signature_ != nullptr);
      _impl_.signature_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.inputs_ != nullptr);
      _impl_.inputs_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::Omnira::DataSerialization::UnknownFieldSet>();
}

::uint8_t* TaskTransitionKey::_InternalSerialize(
    ::uint8_t* target,
    ::Omnira::DataSerialization::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:builra3.TaskTransitionKey)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .builra3.TaskContext ctx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::Omnira::DataSerialization::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.ctx_, _impl_.ctx_->GetCachedSize(), target, stream);
  }

  // .builra3.Signature signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::Omnira::DataSerialization::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.signature_, _impl_.signature_->GetCachedSize(), target, stream);
  }

  // .builra3.TaskInputs inputs = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::Omnira::DataSerialization::internal::WireFormatLite::InternalWriteMessage(
        3, *_impl_.inputs_, _impl_.inputs_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>(::Omnira::DataSerialization::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:builra3.TaskTransitionKey)
  return target;
}

::size_t TaskTransitionKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:builra3.TaskTransitionKey)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .builra3.TaskContext ctx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::Omnira::DataSerialization::internal::WireFormatLite::MessageSize(*_impl_.ctx_);
    }

    // .builra3.Signature signature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::Omnira::DataSerialization::internal::WireFormatLite::MessageSize(*_impl_.signature_);
    }

    // .builra3.TaskInputs inputs = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::Omnira::DataSerialization::internal::WireFormatLite::MessageSize(*_impl_.inputs_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void TaskTransitionKey::MergeImpl(::Omnira::DataSerialization::MessageLite& to_msg, const ::Omnira::DataSerialization::MessageLite& from_msg) {
  auto* const _this = static_cast<TaskTransitionKey*>(&to_msg);
  auto& from = static_cast<const TaskTransitionKey&>(from_msg);
  ::Omnira::DataSerialization::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:builra3.TaskTransitionKey)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.ctx_ != nullptr);
      if (_this->_impl_.ctx_ == nullptr) {
        _this->_impl_.ctx_ =
            ::Omnira::DataSerialization::Message::CopyConstruct<::builra3::TaskContext>(arena, *from._impl_.ctx_);
      } else {
        _this->_impl_.ctx_->MergeFrom(*from._impl_.ctx_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.signature_ != nullptr);
      if (_this->_impl_.signature_ == nullptr) {
        _this->_impl_.signature_ =
            ::Omnira::DataSerialization::Message::CopyConstruct<::builra3::Signature>(arena, *from._impl_.signature_);
      } else {
        _this->_impl_.signature_->MergeFrom(*from._impl_.signature_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.inputs_ != nullptr);
      if (_this->_impl_.inputs_ == nullptr) {
        _this->_impl_.inputs_ =
            ::Omnira::DataSerialization::Message::CopyConstruct<::builra3::TaskInputs>(arena, *from._impl_.inputs_);
      } else {
        _this->_impl_.inputs_->MergeFrom(*from._impl_.inputs_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::Omnira::DataSerialization::UnknownFieldSet>(from._internal_metadata_);
}

void TaskTransitionKey::CopyFrom(const TaskTransitionKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:builra3.TaskTransitionKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TaskTransitionKey::InternalSwap(TaskTransitionKey* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::Omnira::DataSerialization::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskTransitionKey, _impl_.inputs_)
      + sizeof(TaskTransitionKey::_impl_.inputs_)
      - PROTOBUF_FIELD_OFFSET(TaskTransitionKey, _impl_.ctx_)>(
          reinterpret_cast<char*>(&_impl_.ctx_),
          reinterpret_cast<char*>(&other->_impl_.ctx_));
}

::Omnira::DataSerialization::Metadata TaskTransitionKey::GetMetadata() const {
  return ::Omnira::DataSerialization::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TaskTransitionValue::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TaskTransitionValue>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TaskTransitionValue, _impl_._has_bits_);
};

void TaskTransitionValue::clear_state() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (_impl_.state_ != nullptr) _impl_.state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TaskTransitionValue::TaskTransitionValue(::Omnira::DataSerialization::Arena* arena)
    : ::Omnira::DataSerialization::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:builra3.TaskTransitionValue)
}
inline PROTOBUF_NDEBUG_INLINE TaskTransitionValue::Impl_::Impl_(
    ::Omnira::DataSerialization::internal::InternalVisibility visibility, ::Omnira::DataSerialization::Arena* arena,
    const Impl_& from, const ::builra3::TaskTransitionValue& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        requests_{visibility, arena, from.requests_} {}

TaskTransitionValue::TaskTransitionValue(
    ::Omnira::DataSerialization::Arena* arena,
    const TaskTransitionValue& from)
    : ::Omnira::DataSerialization::Message(arena) {
  TaskTransitionValue* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::Omnira::DataSerialization::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.state_ = (cached_has_bits & 0x00000001u) ? ::Omnira::DataSerialization::Message::CopyConstruct<::builra3::TaskNextState>(
                              arena, *from._impl_.state_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:builra3.TaskTransitionValue)
}
inline PROTOBUF_NDEBUG_INLINE TaskTransitionValue::Impl_::Impl_(
    ::Omnira::DataSerialization::internal::InternalVisibility visibility,
    ::Omnira::DataSerialization::Arena* arena)
      : _cached_size_{0},
        requests_{visibility, arena} {}

inline void TaskTransitionValue::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.state_ = {};
}
TaskTransitionValue::~TaskTransitionValue() {
  // @@protoc_insertion_point(destructor:builra3.TaskTransitionValue)
  _internal_metadata_.Delete<::Omnira::DataSerialization::UnknownFieldSet>();
  SharedDtor();
}
inline void TaskTransitionValue::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.state_;
  _impl_.~Impl_();
}

const ::Omnira::DataSerialization::MessageLite::ClassData*
TaskTransitionValue::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::Omnira::DataSerialization::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(TaskTransitionValue, _impl_._cached_size_),
              false,
          },
          &TaskTransitionValue::MergeImpl,
          &TaskTransitionValue::kDescriptorMethods,
          &descriptor_table_builra3_2fEngineInternal_2eproto,
          nullptr,  // tracker
      };
  ::Omnira::DataSerialization::internal::PrefetchToLocalCache(&_data_);
  ::Omnira::DataSerialization::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> TaskTransitionValue::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TaskTransitionValue, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TaskTransitionValue_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::builra3::TaskTransitionValue>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .builra3.TaskRequest requests = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(TaskTransitionValue, _impl_.requests_)}},
    // .builra3.TaskNextState state = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TaskTransitionValue, _impl_.state_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .builra3.TaskNextState state = 1;
    {PROTOBUF_FIELD_OFFSET(TaskTransitionValue, _impl_.state_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .builra3.TaskRequest requests = 2;
    {PROTOBUF_FIELD_OFFSET(TaskTransitionValue, _impl_.requests_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::builra3::TaskNextState>()},
    {::_pbi::TcParser::GetTable<::builra3::TaskRequest>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TaskTransitionValue::Clear() {
// @@protoc_insertion_point(message_clear_start:builra3.TaskTransitionValue)
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.requests_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.state_ != nullptr);
    _impl_.state_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::Omnira::DataSerialization::UnknownFieldSet>();
}

::uint8_t* TaskTransitionValue::_InternalSerialize(
    ::uint8_t* target,
    ::Omnira::DataSerialization::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:builra3.TaskTransitionValue)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .builra3.TaskNextState state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::Omnira::DataSerialization::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.state_, _impl_.state_->GetCachedSize(), target, stream);
  }

  // repeated .builra3.TaskRequest requests = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_requests_size());
       i < n; i++) {
    const auto& repfield = this->_internal_requests().Get(i);
    target =
        ::Omnira::DataSerialization::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>(::Omnira::DataSerialization::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:builra3.TaskTransitionValue)
  return target;
}

::size_t TaskTransitionValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:builra3.TaskTransitionValue)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .builra3.TaskRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->_internal_requests()) {
    total_size += ::Omnira::DataSerialization::internal::WireFormatLite::MessageSize(msg);
  }
  // .builra3.TaskNextState state = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::Omnira::DataSerialization::internal::WireFormatLite::MessageSize(*_impl_.state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void TaskTransitionValue::MergeImpl(::Omnira::DataSerialization::MessageLite& to_msg, const ::Omnira::DataSerialization::MessageLite& from_msg) {
  auto* const _this = static_cast<TaskTransitionValue*>(&to_msg);
  auto& from = static_cast<const TaskTransitionValue&>(from_msg);
  ::Omnira::DataSerialization::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:builra3.TaskTransitionValue)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_requests()->MergeFrom(
      from._internal_requests());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.state_ != nullptr);
    if (_this->_impl_.state_ == nullptr) {
      _this->_impl_.state_ =
          ::Omnira::DataSerialization::Message::CopyConstruct<::builra3::TaskNextState>(arena, *from._impl_.state_);
    } else {
      _this->_impl_.state_->MergeFrom(*from._impl_.state_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::Omnira::DataSerialization::UnknownFieldSet>(from._internal_metadata_);
}

void TaskTransitionValue::CopyFrom(const TaskTransitionValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:builra3.TaskTransitionValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TaskTransitionValue::InternalSwap(TaskTransitionValue* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.requests_.InternalSwap(&other->_impl_.requests_);
  swap(_impl_.state_, other->_impl_.state_);
}

::Omnira::DataSerialization::Metadata TaskTransitionValue::GetMetadata() const {
  return ::Omnira::DataSerialization::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace builra3
namespace Omnira {
namespace DataSerialization {
}  // namespace DataSerialization
}  // namespace Omnira
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_builra3_2fEngineInternal_2eproto),
         ::std::false_type{});
#include "Omnira/DataSerialization/port_undef.inc"
