// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: builra3/Engine.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_builra3_2fEngine_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_builra3_2fEngine_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "Omnira/DataSerialization/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "Omnira/DataSerialization/io/coded_stream.h"
#include "Omnira/DataSerialization/arena.h"
#include "Omnira/DataSerialization/arenastring.h"
#include "Omnira/DataSerialization/generated_message_tctable_decl.h"
#include "Omnira/DataSerialization/generated_message_util.h"
#include "Omnira/DataSerialization/metadata_lite.h"
#include "Omnira/DataSerialization/generated_message_reflection.h"
#include "Omnira/DataSerialization/message.h"
#include "Omnira/DataSerialization/repeated_field.h"  // IWYU pragma: export
#include "Omnira/DataSerialization/extension_set.h"  // IWYU pragma: export
#include "Omnira/DataSerialization/unknown_field_set.h"
#include "Omnira/DataSerialization/any.pb.h"
#include "builra3/Action.pb.h"
#include "builra3/Artifact.pb.h"
#include "builra3/CAS.pb.h"
#include "builra3/Error.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "Omnira/DataSerialization/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_builra3_2fEngine_2eproto

namespace Omnira {
namespace DataSerialization {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace DataSerialization
}  // namespace Omnira

// Internal implementation detail -- do not use these members.
struct TableStruct_builra3_2fEngine_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::Omnira::DataSerialization::internal::DescriptorTable
    descriptor_table_builra3_2fEngine_2eproto;
namespace builra3 {
class Signature;
struct SignatureDefaultTypeInternal;
extern SignatureDefaultTypeInternal _Signature_default_instance_;
class TaskContext;
struct TaskContextDefaultTypeInternal;
extern TaskContextDefaultTypeInternal _TaskContext_default_instance_;
class TaskInput;
struct TaskInputDefaultTypeInternal;
extern TaskInputDefaultTypeInternal _TaskInput_default_instance_;
class TaskInputs;
struct TaskInputsDefaultTypeInternal;
extern TaskInputsDefaultTypeInternal _TaskInputs_default_instance_;
class TaskNextState;
struct TaskNextStateDefaultTypeInternal;
extern TaskNextStateDefaultTypeInternal _TaskNextState_default_instance_;
class TaskResult;
struct TaskResultDefaultTypeInternal;
extern TaskResultDefaultTypeInternal _TaskResult_default_instance_;
class TaskStateMachineContext;
struct TaskStateMachineContextDefaultTypeInternal;
extern TaskStateMachineContextDefaultTypeInternal _TaskStateMachineContext_default_instance_;
class TaskWait;
struct TaskWaitDefaultTypeInternal;
extern TaskWaitDefaultTypeInternal _TaskWait_default_instance_;
}  // namespace builra3
namespace Omnira {
namespace DataSerialization {
}  // namespace DataSerialization
}  // namespace Omnira

namespace builra3 {

// ===================================================================


// -------------------------------------------------------------------

class TaskStateMachineContext final : public ::Omnira::DataSerialization::Message
/* @@protoc_insertion_point(class_definition:builra3.TaskStateMachineContext) */ {
 public:
  inline TaskStateMachineContext() : TaskStateMachineContext(nullptr) {}
  ~TaskStateMachineContext() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TaskStateMachineContext(
      ::Omnira::DataSerialization::internal::ConstantInitialized);

  inline TaskStateMachineContext(const TaskStateMachineContext& from) : TaskStateMachineContext(nullptr, from) {}
  inline TaskStateMachineContext(TaskStateMachineContext&& from) noexcept
      : TaskStateMachineContext(nullptr, std::move(from)) {}
  inline TaskStateMachineContext& operator=(const TaskStateMachineContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskStateMachineContext& operator=(TaskStateMachineContext&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::Omnira::DataSerialization::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>(::Omnira::DataSerialization::UnknownFieldSet::default_instance);
  }
  inline ::Omnira::DataSerialization::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>();
  }

  static const ::Omnira::DataSerialization::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::Omnira::DataSerialization::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::Omnira::DataSerialization::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskStateMachineContext& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskStateMachineContext* internal_default_instance() {
    return reinterpret_cast<const TaskStateMachineContext*>(
        &_TaskStateMachineContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(TaskStateMachineContext& a, TaskStateMachineContext& b) { a.Swap(&b); }
  inline void Swap(TaskStateMachineContext* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::Omnira::DataSerialization::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskStateMachineContext* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskStateMachineContext* New(::Omnira::DataSerialization::Arena* arena = nullptr) const final {
    return ::Omnira::DataSerialization::Message::DefaultConstruct<TaskStateMachineContext>(arena);
  }
  using ::Omnira::DataSerialization::Message::CopyFrom;
  void CopyFrom(const TaskStateMachineContext& from);
  using ::Omnira::DataSerialization::Message::MergeFrom;
  void MergeFrom(const TaskStateMachineContext& from) { TaskStateMachineContext::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::Omnira::DataSerialization::MessageLite& to_msg,
      const ::Omnira::DataSerialization::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::Omnira::DataSerialization::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::Omnira::DataSerialization::Arena* arena);
  void SharedDtor();
  void InternalSwap(TaskStateMachineContext* other);
 private:
  friend class ::Omnira::DataSerialization::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "builra3.TaskStateMachineContext"; }

 protected:
  explicit TaskStateMachineContext(::Omnira::DataSerialization::Arena* arena);
  TaskStateMachineContext(::Omnira::DataSerialization::Arena* arena, const TaskStateMachineContext& from);
  TaskStateMachineContext(::Omnira::DataSerialization::Arena* arena, TaskStateMachineContext&& from) noexcept
      : TaskStateMachineContext(arena) {
    *this = ::std::move(from);
  }
  const ::Omnira::DataSerialization::Message::ClassData* GetClassData() const final;

 public:
  ::Omnira::DataSerialization::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 2,
    kNextFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // int64 next = 1;
  void clear_next() ;
  ::int64_t next() const;
  void set_next(::int64_t value);

  private:
  ::int64_t _internal_next() const;
  void _internal_set_next(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:builra3.TaskStateMachineContext)
 private:
  class _Internal;
  friend class ::Omnira::DataSerialization::internal::TcParser;
  static const ::Omnira::DataSerialization::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TaskStateMachineContext_default_instance_;

  friend class ::Omnira::DataSerialization::MessageLite;
  friend class ::Omnira::DataSerialization::Arena;
  template <typename T>
  friend class ::Omnira::DataSerialization::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::Omnira::DataSerialization::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena);
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena, const Impl_& from,
                          const TaskStateMachineContext& from_msg);
    ::Omnira::DataSerialization::internal::ArenaStringPtr data_;
    ::int64_t next_;
    mutable ::Omnira::DataSerialization::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_builra3_2fEngine_2eproto;
};
// -------------------------------------------------------------------

class Signature final : public ::Omnira::DataSerialization::Message
/* @@protoc_insertion_point(class_definition:builra3.Signature) */ {
 public:
  inline Signature() : Signature(nullptr) {}
  ~Signature() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Signature(
      ::Omnira::DataSerialization::internal::ConstantInitialized);

  inline Signature(const Signature& from) : Signature(nullptr, from) {}
  inline Signature(Signature&& from) noexcept
      : Signature(nullptr, std::move(from)) {}
  inline Signature& operator=(const Signature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signature& operator=(Signature&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::Omnira::DataSerialization::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>(::Omnira::DataSerialization::UnknownFieldSet::default_instance);
  }
  inline ::Omnira::DataSerialization::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>();
  }

  static const ::Omnira::DataSerialization::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::Omnira::DataSerialization::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::Omnira::DataSerialization::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Signature& default_instance() {
    return *internal_default_instance();
  }
  static inline const Signature* internal_default_instance() {
    return reinterpret_cast<const Signature*>(
        &_Signature_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Signature& a, Signature& b) { a.Swap(&b); }
  inline void Swap(Signature* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::Omnira::DataSerialization::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signature* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Signature* New(::Omnira::DataSerialization::Arena* arena = nullptr) const final {
    return ::Omnira::DataSerialization::Message::DefaultConstruct<Signature>(arena);
  }
  using ::Omnira::DataSerialization::Message::CopyFrom;
  void CopyFrom(const Signature& from);
  using ::Omnira::DataSerialization::Message::MergeFrom;
  void MergeFrom(const Signature& from) { Signature::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::Omnira::DataSerialization::MessageLite& to_msg,
      const ::Omnira::DataSerialization::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::Omnira::DataSerialization::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::Omnira::DataSerialization::Arena* arena);
  void SharedDtor();
  void InternalSwap(Signature* other);
 private:
  friend class ::Omnira::DataSerialization::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "builra3.Signature"; }

 protected:
  explicit Signature(::Omnira::DataSerialization::Arena* arena);
  Signature(::Omnira::DataSerialization::Arena* arena, const Signature& from);
  Signature(::Omnira::DataSerialization::Arena* arena, Signature&& from) noexcept
      : Signature(arena) {
    *this = ::std::move(from);
  }
  const ::Omnira::DataSerialization::Message::ClassData* GetClassData() const final;

 public:
  ::Omnira::DataSerialization::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBytesFieldNumber = 1,
  };
  // bytes bytes = 1;
  void clear_bytes() ;
  const std::string& bytes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_bytes();
  PROTOBUF_NODISCARD std::string* release_bytes();
  void set_allocated_bytes(std::string* value);

  private:
  const std::string& _internal_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes(
      const std::string& value);
  std::string* _internal_mutable_bytes();

  public:
  // @@protoc_insertion_point(class_scope:builra3.Signature)
 private:
  class _Internal;
  friend class ::Omnira::DataSerialization::internal::TcParser;
  static const ::Omnira::DataSerialization::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Signature_default_instance_;

  friend class ::Omnira::DataSerialization::MessageLite;
  friend class ::Omnira::DataSerialization::Arena;
  template <typename T>
  friend class ::Omnira::DataSerialization::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::Omnira::DataSerialization::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena);
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena, const Impl_& from,
                          const Signature& from_msg);
    ::Omnira::DataSerialization::internal::ArenaStringPtr bytes_;
    mutable ::Omnira::DataSerialization::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_builra3_2fEngine_2eproto;
};
// -------------------------------------------------------------------

class TaskContext final : public ::Omnira::DataSerialization::Message
/* @@protoc_insertion_point(class_definition:builra3.TaskContext) */ {
 public:
  inline TaskContext() : TaskContext(nullptr) {}
  ~TaskContext() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TaskContext(
      ::Omnira::DataSerialization::internal::ConstantInitialized);

  inline TaskContext(const TaskContext& from) : TaskContext(nullptr, from) {}
  inline TaskContext(TaskContext&& from) noexcept
      : TaskContext(nullptr, std::move(from)) {}
  inline TaskContext& operator=(const TaskContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskContext& operator=(TaskContext&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::Omnira::DataSerialization::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>(::Omnira::DataSerialization::UnknownFieldSet::default_instance);
  }
  inline ::Omnira::DataSerialization::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>();
  }

  static const ::Omnira::DataSerialization::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::Omnira::DataSerialization::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::Omnira::DataSerialization::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskContext& default_instance() {
    return *internal_default_instance();
  }
  enum TaskStateCase {
    kCasState = 1,
    kProtoState = 2,
    kIntState = 3,
    TASKSTATE_NOT_SET = 0,
  };
  static inline const TaskContext* internal_default_instance() {
    return reinterpret_cast<const TaskContext*>(
        &_TaskContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(TaskContext& a, TaskContext& b) { a.Swap(&b); }
  inline void Swap(TaskContext* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::Omnira::DataSerialization::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskContext* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskContext* New(::Omnira::DataSerialization::Arena* arena = nullptr) const final {
    return ::Omnira::DataSerialization::Message::DefaultConstruct<TaskContext>(arena);
  }
  using ::Omnira::DataSerialization::Message::CopyFrom;
  void CopyFrom(const TaskContext& from);
  using ::Omnira::DataSerialization::Message::MergeFrom;
  void MergeFrom(const TaskContext& from) { TaskContext::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::Omnira::DataSerialization::MessageLite& to_msg,
      const ::Omnira::DataSerialization::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::Omnira::DataSerialization::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::Omnira::DataSerialization::Arena* arena);
  void SharedDtor();
  void InternalSwap(TaskContext* other);
 private:
  friend class ::Omnira::DataSerialization::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "builra3.TaskContext"; }

 protected:
  explicit TaskContext(::Omnira::DataSerialization::Arena* arena);
  TaskContext(::Omnira::DataSerialization::Arena* arena, const TaskContext& from);
  TaskContext(::Omnira::DataSerialization::Arena* arena, TaskContext&& from) noexcept
      : TaskContext(arena) {
    *this = ::std::move(from);
  }
  const ::Omnira::DataSerialization::Message::ClassData* GetClassData() const final;

 public:
  ::Omnira::DataSerialization::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCasStateFieldNumber = 1,
    kProtoStateFieldNumber = 2,
    kIntStateFieldNumber = 3,
  };
  // .builra3.CASID cas_state = 1;
  bool has_cas_state() const;
  private:
  bool _internal_has_cas_state() const;

  public:
  void clear_cas_state() ;
  const ::builra3::CASID& cas_state() const;
  PROTOBUF_NODISCARD ::builra3::CASID* release_cas_state();
  ::builra3::CASID* mutable_cas_state();
  void set_allocated_cas_state(::builra3::CASID* value);
  void unsafe_arena_set_allocated_cas_state(::builra3::CASID* value);
  ::builra3::CASID* unsafe_arena_release_cas_state();

  private:
  const ::builra3::CASID& _internal_cas_state() const;
  ::builra3::CASID* _internal_mutable_cas_state();

  public:
  // .google.protobuf.Any proto_state = 2;
  bool has_proto_state() const;
  private:
  bool _internal_has_proto_state() const;

  public:
  void clear_proto_state() ;
  const ::Omnira::DataSerialization::Any& proto_state() const;
  PROTOBUF_NODISCARD ::Omnira::DataSerialization::Any* release_proto_state();
  ::Omnira::DataSerialization::Any* mutable_proto_state();
  void set_allocated_proto_state(::Omnira::DataSerialization::Any* value);
  void unsafe_arena_set_allocated_proto_state(::Omnira::DataSerialization::Any* value);
  ::Omnira::DataSerialization::Any* unsafe_arena_release_proto_state();

  private:
  const ::Omnira::DataSerialization::Any& _internal_proto_state() const;
  ::Omnira::DataSerialization::Any* _internal_mutable_proto_state();

  public:
  // int64 int_state = 3;
  bool has_int_state() const;
  void clear_int_state() ;
  ::int64_t int_state() const;
  void set_int_state(::int64_t value);

  private:
  ::int64_t _internal_int_state() const;
  void _internal_set_int_state(::int64_t value);

  public:
  void clear_TaskState();
  TaskStateCase TaskState_case() const;
  // @@protoc_insertion_point(class_scope:builra3.TaskContext)
 private:
  class _Internal;
  void set_has_cas_state();
  void set_has_proto_state();
  void set_has_int_state();
  inline bool has_TaskState() const;
  inline void clear_has_TaskState();
  friend class ::Omnira::DataSerialization::internal::TcParser;
  static const ::Omnira::DataSerialization::internal::TcParseTable<
      0, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TaskContext_default_instance_;

  friend class ::Omnira::DataSerialization::MessageLite;
  friend class ::Omnira::DataSerialization::Arena;
  template <typename T>
  friend class ::Omnira::DataSerialization::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::Omnira::DataSerialization::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena);
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena, const Impl_& from,
                          const TaskContext& from_msg);
    union TaskStateUnion {
      constexpr TaskStateUnion() : _constinit_{} {}
      ::Omnira::DataSerialization::internal::ConstantInitialized _constinit_;
      ::builra3::CASID* cas_state_;
      ::Omnira::DataSerialization::Any* proto_state_;
      ::int64_t int_state_;
    } TaskState_;
    mutable ::Omnira::DataSerialization::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_builra3_2fEngine_2eproto;
};
// -------------------------------------------------------------------

class TaskWait final : public ::Omnira::DataSerialization::Message
/* @@protoc_insertion_point(class_definition:builra3.TaskWait) */ {
 public:
  inline TaskWait() : TaskWait(nullptr) {}
  ~TaskWait() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TaskWait(
      ::Omnira::DataSerialization::internal::ConstantInitialized);

  inline TaskWait(const TaskWait& from) : TaskWait(nullptr, from) {}
  inline TaskWait(TaskWait&& from) noexcept
      : TaskWait(nullptr, std::move(from)) {}
  inline TaskWait& operator=(const TaskWait& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskWait& operator=(TaskWait&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::Omnira::DataSerialization::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>(::Omnira::DataSerialization::UnknownFieldSet::default_instance);
  }
  inline ::Omnira::DataSerialization::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>();
  }

  static const ::Omnira::DataSerialization::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::Omnira::DataSerialization::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::Omnira::DataSerialization::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskWait& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskWait* internal_default_instance() {
    return reinterpret_cast<const TaskWait*>(
        &_TaskWait_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(TaskWait& a, TaskWait& b) { a.Swap(&b); }
  inline void Swap(TaskWait* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::Omnira::DataSerialization::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskWait* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskWait* New(::Omnira::DataSerialization::Arena* arena = nullptr) const final {
    return ::Omnira::DataSerialization::Message::DefaultConstruct<TaskWait>(arena);
  }
  using ::Omnira::DataSerialization::Message::CopyFrom;
  void CopyFrom(const TaskWait& from);
  using ::Omnira::DataSerialization::Message::MergeFrom;
  void MergeFrom(const TaskWait& from) { TaskWait::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::Omnira::DataSerialization::MessageLite& to_msg,
      const ::Omnira::DataSerialization::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::Omnira::DataSerialization::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::Omnira::DataSerialization::Arena* arena);
  void SharedDtor();
  void InternalSwap(TaskWait* other);
 private:
  friend class ::Omnira::DataSerialization::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "builra3.TaskWait"; }

 protected:
  explicit TaskWait(::Omnira::DataSerialization::Arena* arena);
  TaskWait(::Omnira::DataSerialization::Arena* arena, const TaskWait& from);
  TaskWait(::Omnira::DataSerialization::Arena* arena, TaskWait&& from) noexcept
      : TaskWait(arena) {
    *this = ::std::move(from);
  }
  const ::Omnira::DataSerialization::Message::ClassData* GetClassData() const final;

 public:
  ::Omnira::DataSerialization::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdsFieldNumber = 1,
    kContextFieldNumber = 2,
  };
  // repeated uint64 ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;

  public:
  void clear_ids() ;
  ::uint64_t ids(int index) const;
  void set_ids(int index, ::uint64_t value);
  void add_ids(::uint64_t value);
  const ::Omnira::DataSerialization::RepeatedField<::uint64_t>& ids() const;
  ::Omnira::DataSerialization::RepeatedField<::uint64_t>* mutable_ids();

  private:
  const ::Omnira::DataSerialization::RepeatedField<::uint64_t>& _internal_ids() const;
  ::Omnira::DataSerialization::RepeatedField<::uint64_t>* _internal_mutable_ids();

  public:
  // .builra3.TaskContext context = 2;
  bool has_context() const;
  void clear_context() ;
  const ::builra3::TaskContext& context() const;
  PROTOBUF_NODISCARD ::builra3::TaskContext* release_context();
  ::builra3::TaskContext* mutable_context();
  void set_allocated_context(::builra3::TaskContext* value);
  void unsafe_arena_set_allocated_context(::builra3::TaskContext* value);
  ::builra3::TaskContext* unsafe_arena_release_context();

  private:
  const ::builra3::TaskContext& _internal_context() const;
  ::builra3::TaskContext* _internal_mutable_context();

  public:
  // @@protoc_insertion_point(class_scope:builra3.TaskWait)
 private:
  class _Internal;
  friend class ::Omnira::DataSerialization::internal::TcParser;
  static const ::Omnira::DataSerialization::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TaskWait_default_instance_;

  friend class ::Omnira::DataSerialization::MessageLite;
  friend class ::Omnira::DataSerialization::Arena;
  template <typename T>
  friend class ::Omnira::DataSerialization::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::Omnira::DataSerialization::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena);
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena, const Impl_& from,
                          const TaskWait& from_msg);
    ::Omnira::DataSerialization::internal::HasBits<1> _has_bits_;
    mutable ::Omnira::DataSerialization::internal::CachedSize _cached_size_;
    ::Omnira::DataSerialization::RepeatedField<::uint64_t> ids_;
    mutable ::Omnira::DataSerialization::internal::CachedSize _ids_cached_byte_size_;
    ::builra3::TaskContext* context_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_builra3_2fEngine_2eproto;
};
// -------------------------------------------------------------------

class TaskResult final : public ::Omnira::DataSerialization::Message
/* @@protoc_insertion_point(class_definition:builra3.TaskResult) */ {
 public:
  inline TaskResult() : TaskResult(nullptr) {}
  ~TaskResult() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TaskResult(
      ::Omnira::DataSerialization::internal::ConstantInitialized);

  inline TaskResult(const TaskResult& from) : TaskResult(nullptr, from) {}
  inline TaskResult(TaskResult&& from) noexcept
      : TaskResult(nullptr, std::move(from)) {}
  inline TaskResult& operator=(const TaskResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskResult& operator=(TaskResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::Omnira::DataSerialization::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>(::Omnira::DataSerialization::UnknownFieldSet::default_instance);
  }
  inline ::Omnira::DataSerialization::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>();
  }

  static const ::Omnira::DataSerialization::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::Omnira::DataSerialization::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::Omnira::DataSerialization::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskResult* internal_default_instance() {
    return reinterpret_cast<const TaskResult*>(
        &_TaskResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(TaskResult& a, TaskResult& b) { a.Swap(&b); }
  inline void Swap(TaskResult* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::Omnira::DataSerialization::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskResult* New(::Omnira::DataSerialization::Arena* arena = nullptr) const final {
    return ::Omnira::DataSerialization::Message::DefaultConstruct<TaskResult>(arena);
  }
  using ::Omnira::DataSerialization::Message::CopyFrom;
  void CopyFrom(const TaskResult& from);
  using ::Omnira::DataSerialization::Message::MergeFrom;
  void MergeFrom(const TaskResult& from) { TaskResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::Omnira::DataSerialization::MessageLite& to_msg,
      const ::Omnira::DataSerialization::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::Omnira::DataSerialization::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::Omnira::DataSerialization::Arena* arena);
  void SharedDtor();
  void InternalSwap(TaskResult* other);
 private:
  friend class ::Omnira::DataSerialization::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "builra3.TaskResult"; }

 protected:
  explicit TaskResult(::Omnira::DataSerialization::Arena* arena);
  TaskResult(::Omnira::DataSerialization::Arena* arena, const TaskResult& from);
  TaskResult(::Omnira::DataSerialization::Arena* arena, TaskResult&& from) noexcept
      : TaskResult(arena) {
    *this = ::std::move(from);
  }
  const ::Omnira::DataSerialization::Message::ClassData* GetClassData() const final;

 public:
  ::Omnira::DataSerialization::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kArtifactsFieldNumber = 2,
  };
  // repeated .builra3.Artifact artifacts = 2;
  int artifacts_size() const;
  private:
  int _internal_artifacts_size() const;

  public:
  void clear_artifacts() ;
  ::builra3::Artifact* mutable_artifacts(int index);
  ::Omnira::DataSerialization::RepeatedPtrField<::builra3::Artifact>* mutable_artifacts();

  private:
  const ::Omnira::DataSerialization::RepeatedPtrField<::builra3::Artifact>& _internal_artifacts() const;
  ::Omnira::DataSerialization::RepeatedPtrField<::builra3::Artifact>* _internal_mutable_artifacts();
  public:
  const ::builra3::Artifact& artifacts(int index) const;
  ::builra3::Artifact* add_artifacts();
  const ::Omnira::DataSerialization::RepeatedPtrField<::builra3::Artifact>& artifacts() const;
  // @@protoc_insertion_point(class_scope:builra3.TaskResult)
 private:
  class _Internal;
  friend class ::Omnira::DataSerialization::internal::TcParser;
  static const ::Omnira::DataSerialization::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TaskResult_default_instance_;

  friend class ::Omnira::DataSerialization::MessageLite;
  friend class ::Omnira::DataSerialization::Arena;
  template <typename T>
  friend class ::Omnira::DataSerialization::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::Omnira::DataSerialization::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena);
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena, const Impl_& from,
                          const TaskResult& from_msg);
    ::Omnira::DataSerialization::RepeatedPtrField< ::builra3::Artifact > artifacts_;
    mutable ::Omnira::DataSerialization::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_builra3_2fEngine_2eproto;
};
// -------------------------------------------------------------------

class TaskNextState final : public ::Omnira::DataSerialization::Message
/* @@protoc_insertion_point(class_definition:builra3.TaskNextState) */ {
 public:
  inline TaskNextState() : TaskNextState(nullptr) {}
  ~TaskNextState() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TaskNextState(
      ::Omnira::DataSerialization::internal::ConstantInitialized);

  inline TaskNextState(const TaskNextState& from) : TaskNextState(nullptr, from) {}
  inline TaskNextState(TaskNextState&& from) noexcept
      : TaskNextState(nullptr, std::move(from)) {}
  inline TaskNextState& operator=(const TaskNextState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskNextState& operator=(TaskNextState&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::Omnira::DataSerialization::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>(::Omnira::DataSerialization::UnknownFieldSet::default_instance);
  }
  inline ::Omnira::DataSerialization::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>();
  }

  static const ::Omnira::DataSerialization::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::Omnira::DataSerialization::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::Omnira::DataSerialization::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskNextState& default_instance() {
    return *internal_default_instance();
  }
  enum StateValueCase {
    kWait = 1,
    kResult = 2,
    kError = 3,
    STATEVALUE_NOT_SET = 0,
  };
  static inline const TaskNextState* internal_default_instance() {
    return reinterpret_cast<const TaskNextState*>(
        &_TaskNextState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(TaskNextState& a, TaskNextState& b) { a.Swap(&b); }
  inline void Swap(TaskNextState* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::Omnira::DataSerialization::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskNextState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskNextState* New(::Omnira::DataSerialization::Arena* arena = nullptr) const final {
    return ::Omnira::DataSerialization::Message::DefaultConstruct<TaskNextState>(arena);
  }
  using ::Omnira::DataSerialization::Message::CopyFrom;
  void CopyFrom(const TaskNextState& from);
  using ::Omnira::DataSerialization::Message::MergeFrom;
  void MergeFrom(const TaskNextState& from) { TaskNextState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::Omnira::DataSerialization::MessageLite& to_msg,
      const ::Omnira::DataSerialization::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::Omnira::DataSerialization::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::Omnira::DataSerialization::Arena* arena);
  void SharedDtor();
  void InternalSwap(TaskNextState* other);
 private:
  friend class ::Omnira::DataSerialization::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "builra3.TaskNextState"; }

 protected:
  explicit TaskNextState(::Omnira::DataSerialization::Arena* arena);
  TaskNextState(::Omnira::DataSerialization::Arena* arena, const TaskNextState& from);
  TaskNextState(::Omnira::DataSerialization::Arena* arena, TaskNextState&& from) noexcept
      : TaskNextState(arena) {
    *this = ::std::move(from);
  }
  const ::Omnira::DataSerialization::Message::ClassData* GetClassData() const final;

 public:
  ::Omnira::DataSerialization::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWaitFieldNumber = 1,
    kResultFieldNumber = 2,
    kErrorFieldNumber = 3,
  };
  // .builra3.TaskWait wait = 1;
  bool has_wait() const;
  private:
  bool _internal_has_wait() const;

  public:
  void clear_wait() ;
  const ::builra3::TaskWait& wait() const;
  PROTOBUF_NODISCARD ::builra3::TaskWait* release_wait();
  ::builra3::TaskWait* mutable_wait();
  void set_allocated_wait(::builra3::TaskWait* value);
  void unsafe_arena_set_allocated_wait(::builra3::TaskWait* value);
  ::builra3::TaskWait* unsafe_arena_release_wait();

  private:
  const ::builra3::TaskWait& _internal_wait() const;
  ::builra3::TaskWait* _internal_mutable_wait();

  public:
  // .builra3.TaskResult result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;

  public:
  void clear_result() ;
  const ::builra3::TaskResult& result() const;
  PROTOBUF_NODISCARD ::builra3::TaskResult* release_result();
  ::builra3::TaskResult* mutable_result();
  void set_allocated_result(::builra3::TaskResult* value);
  void unsafe_arena_set_allocated_result(::builra3::TaskResult* value);
  ::builra3::TaskResult* unsafe_arena_release_result();

  private:
  const ::builra3::TaskResult& _internal_result() const;
  ::builra3::TaskResult* _internal_mutable_result();

  public:
  // .builra3.Error error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;

  public:
  void clear_error() ;
  const ::builra3::Error& error() const;
  PROTOBUF_NODISCARD ::builra3::Error* release_error();
  ::builra3::Error* mutable_error();
  void set_allocated_error(::builra3::Error* value);
  void unsafe_arena_set_allocated_error(::builra3::Error* value);
  ::builra3::Error* unsafe_arena_release_error();

  private:
  const ::builra3::Error& _internal_error() const;
  ::builra3::Error* _internal_mutable_error();

  public:
  void clear_StateValue();
  StateValueCase StateValue_case() const;
  // @@protoc_insertion_point(class_scope:builra3.TaskNextState)
 private:
  class _Internal;
  void set_has_wait();
  void set_has_result();
  void set_has_error();
  inline bool has_StateValue() const;
  inline void clear_has_StateValue();
  friend class ::Omnira::DataSerialization::internal::TcParser;
  static const ::Omnira::DataSerialization::internal::TcParseTable<
      0, 3, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TaskNextState_default_instance_;

  friend class ::Omnira::DataSerialization::MessageLite;
  friend class ::Omnira::DataSerialization::Arena;
  template <typename T>
  friend class ::Omnira::DataSerialization::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::Omnira::DataSerialization::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena);
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena, const Impl_& from,
                          const TaskNextState& from_msg);
    union StateValueUnion {
      constexpr StateValueUnion() : _constinit_{} {}
      ::Omnira::DataSerialization::internal::ConstantInitialized _constinit_;
      ::builra3::TaskWait* wait_;
      ::builra3::TaskResult* result_;
      ::builra3::Error* error_;
    } StateValue_;
    mutable ::Omnira::DataSerialization::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_builra3_2fEngine_2eproto;
};
// -------------------------------------------------------------------

class TaskInput final : public ::Omnira::DataSerialization::Message
/* @@protoc_insertion_point(class_definition:builra3.TaskInput) */ {
 public:
  inline TaskInput() : TaskInput(nullptr) {}
  ~TaskInput() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TaskInput(
      ::Omnira::DataSerialization::internal::ConstantInitialized);

  inline TaskInput(const TaskInput& from) : TaskInput(nullptr, from) {}
  inline TaskInput(TaskInput&& from) noexcept
      : TaskInput(nullptr, std::move(from)) {}
  inline TaskInput& operator=(const TaskInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskInput& operator=(TaskInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::Omnira::DataSerialization::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>(::Omnira::DataSerialization::UnknownFieldSet::default_instance);
  }
  inline ::Omnira::DataSerialization::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>();
  }

  static const ::Omnira::DataSerialization::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::Omnira::DataSerialization::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::Omnira::DataSerialization::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskInput& default_instance() {
    return *internal_default_instance();
  }
  enum InputObjectCase {
    kError = 2,
    kArtifact = 3,
    kResult = 4,
    kAction = 5,
    INPUTOBJECT_NOT_SET = 0,
  };
  static inline const TaskInput* internal_default_instance() {
    return reinterpret_cast<const TaskInput*>(
        &_TaskInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(TaskInput& a, TaskInput& b) { a.Swap(&b); }
  inline void Swap(TaskInput* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::Omnira::DataSerialization::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskInput* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskInput* New(::Omnira::DataSerialization::Arena* arena = nullptr) const final {
    return ::Omnira::DataSerialization::Message::DefaultConstruct<TaskInput>(arena);
  }
  using ::Omnira::DataSerialization::Message::CopyFrom;
  void CopyFrom(const TaskInput& from);
  using ::Omnira::DataSerialization::Message::MergeFrom;
  void MergeFrom(const TaskInput& from) { TaskInput::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::Omnira::DataSerialization::MessageLite& to_msg,
      const ::Omnira::DataSerialization::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::Omnira::DataSerialization::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::Omnira::DataSerialization::Arena* arena);
  void SharedDtor();
  void InternalSwap(TaskInput* other);
 private:
  friend class ::Omnira::DataSerialization::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "builra3.TaskInput"; }

 protected:
  explicit TaskInput(::Omnira::DataSerialization::Arena* arena);
  TaskInput(::Omnira::DataSerialization::Arena* arena, const TaskInput& from);
  TaskInput(::Omnira::DataSerialization::Arena* arena, TaskInput&& from) noexcept
      : TaskInput(arena) {
    *this = ::std::move(from);
  }
  const ::Omnira::DataSerialization::Message::ClassData* GetClassData() const final;

 public:
  ::Omnira::DataSerialization::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kErrorFieldNumber = 2,
    kArtifactFieldNumber = 3,
    kResultFieldNumber = 4,
    kActionFieldNumber = 5,
  };
  // uint64 id = 1;
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // .builra3.Error error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;

  public:
  void clear_error() ;
  const ::builra3::Error& error() const;
  PROTOBUF_NODISCARD ::builra3::Error* release_error();
  ::builra3::Error* mutable_error();
  void set_allocated_error(::builra3::Error* value);
  void unsafe_arena_set_allocated_error(::builra3::Error* value);
  ::builra3::Error* unsafe_arena_release_error();

  private:
  const ::builra3::Error& _internal_error() const;
  ::builra3::Error* _internal_mutable_error();

  public:
  // .builra3.Artifact artifact = 3;
  bool has_artifact() const;
  private:
  bool _internal_has_artifact() const;

  public:
  void clear_artifact() ;
  const ::builra3::Artifact& artifact() const;
  PROTOBUF_NODISCARD ::builra3::Artifact* release_artifact();
  ::builra3::Artifact* mutable_artifact();
  void set_allocated_artifact(::builra3::Artifact* value);
  void unsafe_arena_set_allocated_artifact(::builra3::Artifact* value);
  ::builra3::Artifact* unsafe_arena_release_artifact();

  private:
  const ::builra3::Artifact& _internal_artifact() const;
  ::builra3::Artifact* _internal_mutable_artifact();

  public:
  // .builra3.TaskResult result = 4;
  bool has_result() const;
  private:
  bool _internal_has_result() const;

  public:
  void clear_result() ;
  const ::builra3::TaskResult& result() const;
  PROTOBUF_NODISCARD ::builra3::TaskResult* release_result();
  ::builra3::TaskResult* mutable_result();
  void set_allocated_result(::builra3::TaskResult* value);
  void unsafe_arena_set_allocated_result(::builra3::TaskResult* value);
  ::builra3::TaskResult* unsafe_arena_release_result();

  private:
  const ::builra3::TaskResult& _internal_result() const;
  ::builra3::TaskResult* _internal_mutable_result();

  public:
  // .builra3.ActionResult action = 5;
  bool has_action() const;
  private:
  bool _internal_has_action() const;

  public:
  void clear_action() ;
  const ::builra3::ActionResult& action() const;
  PROTOBUF_NODISCARD ::builra3::ActionResult* release_action();
  ::builra3::ActionResult* mutable_action();
  void set_allocated_action(::builra3::ActionResult* value);
  void unsafe_arena_set_allocated_action(::builra3::ActionResult* value);
  ::builra3::ActionResult* unsafe_arena_release_action();

  private:
  const ::builra3::ActionResult& _internal_action() const;
  ::builra3::ActionResult* _internal_mutable_action();

  public:
  void clear_InputObject();
  InputObjectCase InputObject_case() const;
  // @@protoc_insertion_point(class_scope:builra3.TaskInput)
 private:
  class _Internal;
  void set_has_error();
  void set_has_artifact();
  void set_has_result();
  void set_has_action();
  inline bool has_InputObject() const;
  inline void clear_has_InputObject();
  friend class ::Omnira::DataSerialization::internal::TcParser;
  static const ::Omnira::DataSerialization::internal::TcParseTable<
      0, 5, 4,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TaskInput_default_instance_;

  friend class ::Omnira::DataSerialization::MessageLite;
  friend class ::Omnira::DataSerialization::Arena;
  template <typename T>
  friend class ::Omnira::DataSerialization::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::Omnira::DataSerialization::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena);
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena, const Impl_& from,
                          const TaskInput& from_msg);
    ::uint64_t id_;
    union InputObjectUnion {
      constexpr InputObjectUnion() : _constinit_{} {}
      ::Omnira::DataSerialization::internal::ConstantInitialized _constinit_;
      ::builra3::Error* error_;
      ::builra3::Artifact* artifact_;
      ::builra3::TaskResult* result_;
      ::builra3::ActionResult* action_;
    } InputObject_;
    mutable ::Omnira::DataSerialization::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_builra3_2fEngine_2eproto;
};
// -------------------------------------------------------------------

class TaskInputs final : public ::Omnira::DataSerialization::Message
/* @@protoc_insertion_point(class_definition:builra3.TaskInputs) */ {
 public:
  inline TaskInputs() : TaskInputs(nullptr) {}
  ~TaskInputs() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TaskInputs(
      ::Omnira::DataSerialization::internal::ConstantInitialized);

  inline TaskInputs(const TaskInputs& from) : TaskInputs(nullptr, from) {}
  inline TaskInputs(TaskInputs&& from) noexcept
      : TaskInputs(nullptr, std::move(from)) {}
  inline TaskInputs& operator=(const TaskInputs& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskInputs& operator=(TaskInputs&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::Omnira::DataSerialization::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>(::Omnira::DataSerialization::UnknownFieldSet::default_instance);
  }
  inline ::Omnira::DataSerialization::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>();
  }

  static const ::Omnira::DataSerialization::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::Omnira::DataSerialization::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::Omnira::DataSerialization::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskInputs& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskInputs* internal_default_instance() {
    return reinterpret_cast<const TaskInputs*>(
        &_TaskInputs_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(TaskInputs& a, TaskInputs& b) { a.Swap(&b); }
  inline void Swap(TaskInputs* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::Omnira::DataSerialization::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskInputs* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskInputs* New(::Omnira::DataSerialization::Arena* arena = nullptr) const final {
    return ::Omnira::DataSerialization::Message::DefaultConstruct<TaskInputs>(arena);
  }
  using ::Omnira::DataSerialization::Message::CopyFrom;
  void CopyFrom(const TaskInputs& from);
  using ::Omnira::DataSerialization::Message::MergeFrom;
  void MergeFrom(const TaskInputs& from) { TaskInputs::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::Omnira::DataSerialization::MessageLite& to_msg,
      const ::Omnira::DataSerialization::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::Omnira::DataSerialization::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::Omnira::DataSerialization::Arena* arena);
  void SharedDtor();
  void InternalSwap(TaskInputs* other);
 private:
  friend class ::Omnira::DataSerialization::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "builra3.TaskInputs"; }

 protected:
  explicit TaskInputs(::Omnira::DataSerialization::Arena* arena);
  TaskInputs(::Omnira::DataSerialization::Arena* arena, const TaskInputs& from);
  TaskInputs(::Omnira::DataSerialization::Arena* arena, TaskInputs&& from) noexcept
      : TaskInputs(arena) {
    *this = ::std::move(from);
  }
  const ::Omnira::DataSerialization::Message::ClassData* GetClassData() const final;

 public:
  ::Omnira::DataSerialization::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInputsFieldNumber = 1,
  };
  // repeated .builra3.TaskInput inputs = 1;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;

  public:
  void clear_inputs() ;
  ::builra3::TaskInput* mutable_inputs(int index);
  ::Omnira::DataSerialization::RepeatedPtrField<::builra3::TaskInput>* mutable_inputs();

  private:
  const ::Omnira::DataSerialization::RepeatedPtrField<::builra3::TaskInput>& _internal_inputs() const;
  ::Omnira::DataSerialization::RepeatedPtrField<::builra3::TaskInput>* _internal_mutable_inputs();
  public:
  const ::builra3::TaskInput& inputs(int index) const;
  ::builra3::TaskInput* add_inputs();
  const ::Omnira::DataSerialization::RepeatedPtrField<::builra3::TaskInput>& inputs() const;
  // @@protoc_insertion_point(class_scope:builra3.TaskInputs)
 private:
  class _Internal;
  friend class ::Omnira::DataSerialization::internal::TcParser;
  static const ::Omnira::DataSerialization::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TaskInputs_default_instance_;

  friend class ::Omnira::DataSerialization::MessageLite;
  friend class ::Omnira::DataSerialization::Arena;
  template <typename T>
  friend class ::Omnira::DataSerialization::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::Omnira::DataSerialization::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena);
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena, const Impl_& from,
                          const TaskInputs& from_msg);
    ::Omnira::DataSerialization::RepeatedPtrField< ::builra3::TaskInput > inputs_;
    mutable ::Omnira::DataSerialization::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_builra3_2fEngine_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Signature

// bytes bytes = 1;
inline void Signature::clear_bytes() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.bytes_.ClearToEmpty();
}
inline const std::string& Signature::bytes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.Signature.bytes)
  return _internal_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Signature::set_bytes(Arg_&& arg,
                                                     Args_... args) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:builra3.Signature.bytes)
}
inline std::string* Signature::mutable_bytes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bytes();
  // @@protoc_insertion_point(field_mutable:builra3.Signature.bytes)
  return _s;
}
inline const std::string& Signature::_internal_bytes() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return _impl_.bytes_.Get();
}
inline void Signature::_internal_set_bytes(const std::string& value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.bytes_.Set(value, GetArena());
}
inline std::string* Signature::_internal_mutable_bytes() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  return _impl_.bytes_.Mutable( GetArena());
}
inline std::string* Signature::release_bytes() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:builra3.Signature.bytes)
  return _impl_.bytes_.Release();
}
inline void Signature::set_allocated_bytes(std::string* value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.bytes_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bytes_.IsDefault()) {
          _impl_.bytes_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:builra3.Signature.bytes)
}

// -------------------------------------------------------------------

// TaskResult

// repeated .builra3.Artifact artifacts = 2;
inline int TaskResult::_internal_artifacts_size() const {
  return _internal_artifacts().size();
}
inline int TaskResult::artifacts_size() const {
  return _internal_artifacts_size();
}
inline ::builra3::Artifact* TaskResult::mutable_artifacts(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:builra3.TaskResult.artifacts)
  return _internal_mutable_artifacts()->Mutable(index);
}
inline ::Omnira::DataSerialization::RepeatedPtrField<::builra3::Artifact>* TaskResult::mutable_artifacts()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:builra3.TaskResult.artifacts)
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  return _internal_mutable_artifacts();
}
inline const ::builra3::Artifact& TaskResult::artifacts(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.TaskResult.artifacts)
  return _internal_artifacts().Get(index);
}
inline ::builra3::Artifact* TaskResult::add_artifacts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  ::builra3::Artifact* _add = _internal_mutable_artifacts()->Add();
  // @@protoc_insertion_point(field_add:builra3.TaskResult.artifacts)
  return _add;
}
inline const ::Omnira::DataSerialization::RepeatedPtrField<::builra3::Artifact>& TaskResult::artifacts() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:builra3.TaskResult.artifacts)
  return _internal_artifacts();
}
inline const ::Omnira::DataSerialization::RepeatedPtrField<::builra3::Artifact>&
TaskResult::_internal_artifacts() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return _impl_.artifacts_;
}
inline ::Omnira::DataSerialization::RepeatedPtrField<::builra3::Artifact>*
TaskResult::_internal_mutable_artifacts() {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return &_impl_.artifacts_;
}

// -------------------------------------------------------------------

// TaskInput

// uint64 id = 1;
inline void TaskInput::clear_id() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.id_ = ::uint64_t{0u};
}
inline ::uint64_t TaskInput::id() const {
  // @@protoc_insertion_point(field_get:builra3.TaskInput.id)
  return _internal_id();
}
inline void TaskInput::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:builra3.TaskInput.id)
}
inline ::uint64_t TaskInput::_internal_id() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void TaskInput::_internal_set_id(::uint64_t value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// .builra3.Error error = 2;
inline bool TaskInput::has_error() const {
  return InputObject_case() == kError;
}
inline bool TaskInput::_internal_has_error() const {
  return InputObject_case() == kError;
}
inline void TaskInput::set_has_error() {
  _impl_._oneof_case_[0] = kError;
}
inline ::builra3::Error* TaskInput::release_error() {
  // @@protoc_insertion_point(field_release:builra3.TaskInput.error)
  if (InputObject_case() == kError) {
    clear_has_InputObject();
    auto* temp = _impl_.InputObject_.error_;
    if (GetArena() != nullptr) {
      temp = ::Omnira::DataSerialization::internal::DuplicateIfNonNull(temp);
    }
    _impl_.InputObject_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::builra3::Error& TaskInput::_internal_error() const {
  return InputObject_case() == kError ? *_impl_.InputObject_.error_ : reinterpret_cast<::builra3::Error&>(::builra3::_Error_default_instance_);
}
inline const ::builra3::Error& TaskInput::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.TaskInput.error)
  return _internal_error();
}
inline ::builra3::Error* TaskInput::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:builra3.TaskInput.error)
  if (InputObject_case() == kError) {
    clear_has_InputObject();
    auto* temp = _impl_.InputObject_.error_;
    _impl_.InputObject_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskInput::unsafe_arena_set_allocated_error(::builra3::Error* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_InputObject();
  if (value) {
    set_has_error();
    _impl_.InputObject_.error_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:builra3.TaskInput.error)
}
inline ::builra3::Error* TaskInput::_internal_mutable_error() {
  if (InputObject_case() != kError) {
    clear_InputObject();
    set_has_error();
    _impl_.InputObject_.error_ =
        ::Omnira::DataSerialization::Message::DefaultConstruct<::builra3::Error>(GetArena());
  }
  return _impl_.InputObject_.error_;
}
inline ::builra3::Error* TaskInput::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::builra3::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:builra3.TaskInput.error)
  return _msg;
}

// .builra3.Artifact artifact = 3;
inline bool TaskInput::has_artifact() const {
  return InputObject_case() == kArtifact;
}
inline bool TaskInput::_internal_has_artifact() const {
  return InputObject_case() == kArtifact;
}
inline void TaskInput::set_has_artifact() {
  _impl_._oneof_case_[0] = kArtifact;
}
inline ::builra3::Artifact* TaskInput::release_artifact() {
  // @@protoc_insertion_point(field_release:builra3.TaskInput.artifact)
  if (InputObject_case() == kArtifact) {
    clear_has_InputObject();
    auto* temp = _impl_.InputObject_.artifact_;
    if (GetArena() != nullptr) {
      temp = ::Omnira::DataSerialization::internal::DuplicateIfNonNull(temp);
    }
    _impl_.InputObject_.artifact_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::builra3::Artifact& TaskInput::_internal_artifact() const {
  return InputObject_case() == kArtifact ? *_impl_.InputObject_.artifact_ : reinterpret_cast<::builra3::Artifact&>(::builra3::_Artifact_default_instance_);
}
inline const ::builra3::Artifact& TaskInput::artifact() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.TaskInput.artifact)
  return _internal_artifact();
}
inline ::builra3::Artifact* TaskInput::unsafe_arena_release_artifact() {
  // @@protoc_insertion_point(field_unsafe_arena_release:builra3.TaskInput.artifact)
  if (InputObject_case() == kArtifact) {
    clear_has_InputObject();
    auto* temp = _impl_.InputObject_.artifact_;
    _impl_.InputObject_.artifact_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskInput::unsafe_arena_set_allocated_artifact(::builra3::Artifact* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_InputObject();
  if (value) {
    set_has_artifact();
    _impl_.InputObject_.artifact_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:builra3.TaskInput.artifact)
}
inline ::builra3::Artifact* TaskInput::_internal_mutable_artifact() {
  if (InputObject_case() != kArtifact) {
    clear_InputObject();
    set_has_artifact();
    _impl_.InputObject_.artifact_ =
        ::Omnira::DataSerialization::Message::DefaultConstruct<::builra3::Artifact>(GetArena());
  }
  return _impl_.InputObject_.artifact_;
}
inline ::builra3::Artifact* TaskInput::mutable_artifact() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::builra3::Artifact* _msg = _internal_mutable_artifact();
  // @@protoc_insertion_point(field_mutable:builra3.TaskInput.artifact)
  return _msg;
}

// .builra3.TaskResult result = 4;
inline bool TaskInput::has_result() const {
  return InputObject_case() == kResult;
}
inline bool TaskInput::_internal_has_result() const {
  return InputObject_case() == kResult;
}
inline void TaskInput::set_has_result() {
  _impl_._oneof_case_[0] = kResult;
}
inline void TaskInput::clear_result() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (InputObject_case() == kResult) {
    if (GetArena() == nullptr) {
      delete _impl_.InputObject_.result_;
    } else if (::Omnira::DataSerialization::internal::DebugHardenClearOneofMessageOnArena()) {
      ::Omnira::DataSerialization::internal::MaybePoisonAfterClear(_impl_.InputObject_.result_);
    }
    clear_has_InputObject();
  }
}
inline ::builra3::TaskResult* TaskInput::release_result() {
  // @@protoc_insertion_point(field_release:builra3.TaskInput.result)
  if (InputObject_case() == kResult) {
    clear_has_InputObject();
    auto* temp = _impl_.InputObject_.result_;
    if (GetArena() != nullptr) {
      temp = ::Omnira::DataSerialization::internal::DuplicateIfNonNull(temp);
    }
    _impl_.InputObject_.result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::builra3::TaskResult& TaskInput::_internal_result() const {
  return InputObject_case() == kResult ? *_impl_.InputObject_.result_ : reinterpret_cast<::builra3::TaskResult&>(::builra3::_TaskResult_default_instance_);
}
inline const ::builra3::TaskResult& TaskInput::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.TaskInput.result)
  return _internal_result();
}
inline ::builra3::TaskResult* TaskInput::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:builra3.TaskInput.result)
  if (InputObject_case() == kResult) {
    clear_has_InputObject();
    auto* temp = _impl_.InputObject_.result_;
    _impl_.InputObject_.result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskInput::unsafe_arena_set_allocated_result(::builra3::TaskResult* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_InputObject();
  if (value) {
    set_has_result();
    _impl_.InputObject_.result_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:builra3.TaskInput.result)
}
inline ::builra3::TaskResult* TaskInput::_internal_mutable_result() {
  if (InputObject_case() != kResult) {
    clear_InputObject();
    set_has_result();
    _impl_.InputObject_.result_ =
        ::Omnira::DataSerialization::Message::DefaultConstruct<::builra3::TaskResult>(GetArena());
  }
  return _impl_.InputObject_.result_;
}
inline ::builra3::TaskResult* TaskInput::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::builra3::TaskResult* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:builra3.TaskInput.result)
  return _msg;
}

// .builra3.ActionResult action = 5;
inline bool TaskInput::has_action() const {
  return InputObject_case() == kAction;
}
inline bool TaskInput::_internal_has_action() const {
  return InputObject_case() == kAction;
}
inline void TaskInput::set_has_action() {
  _impl_._oneof_case_[0] = kAction;
}
inline ::builra3::ActionResult* TaskInput::release_action() {
  // @@protoc_insertion_point(field_release:builra3.TaskInput.action)
  if (InputObject_case() == kAction) {
    clear_has_InputObject();
    auto* temp = _impl_.InputObject_.action_;
    if (GetArena() != nullptr) {
      temp = ::Omnira::DataSerialization::internal::DuplicateIfNonNull(temp);
    }
    _impl_.InputObject_.action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::builra3::ActionResult& TaskInput::_internal_action() const {
  return InputObject_case() == kAction ? *_impl_.InputObject_.action_ : reinterpret_cast<::builra3::ActionResult&>(::builra3::_ActionResult_default_instance_);
}
inline const ::builra3::ActionResult& TaskInput::action() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.TaskInput.action)
  return _internal_action();
}
inline ::builra3::ActionResult* TaskInput::unsafe_arena_release_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:builra3.TaskInput.action)
  if (InputObject_case() == kAction) {
    clear_has_InputObject();
    auto* temp = _impl_.InputObject_.action_;
    _impl_.InputObject_.action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskInput::unsafe_arena_set_allocated_action(::builra3::ActionResult* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_InputObject();
  if (value) {
    set_has_action();
    _impl_.InputObject_.action_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:builra3.TaskInput.action)
}
inline ::builra3::ActionResult* TaskInput::_internal_mutable_action() {
  if (InputObject_case() != kAction) {
    clear_InputObject();
    set_has_action();
    _impl_.InputObject_.action_ =
        ::Omnira::DataSerialization::Message::DefaultConstruct<::builra3::ActionResult>(GetArena());
  }
  return _impl_.InputObject_.action_;
}
inline ::builra3::ActionResult* TaskInput::mutable_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::builra3::ActionResult* _msg = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:builra3.TaskInput.action)
  return _msg;
}

inline bool TaskInput::has_InputObject() const {
  return InputObject_case() != INPUTOBJECT_NOT_SET;
}
inline void TaskInput::clear_has_InputObject() {
  _impl_._oneof_case_[0] = INPUTOBJECT_NOT_SET;
}
inline TaskInput::InputObjectCase TaskInput::InputObject_case() const {
  return TaskInput::InputObjectCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TaskInputs

// repeated .builra3.TaskInput inputs = 1;
inline int TaskInputs::_internal_inputs_size() const {
  return _internal_inputs().size();
}
inline int TaskInputs::inputs_size() const {
  return _internal_inputs_size();
}
inline void TaskInputs::clear_inputs() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.inputs_.Clear();
}
inline ::builra3::TaskInput* TaskInputs::mutable_inputs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:builra3.TaskInputs.inputs)
  return _internal_mutable_inputs()->Mutable(index);
}
inline ::Omnira::DataSerialization::RepeatedPtrField<::builra3::TaskInput>* TaskInputs::mutable_inputs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:builra3.TaskInputs.inputs)
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  return _internal_mutable_inputs();
}
inline const ::builra3::TaskInput& TaskInputs::inputs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.TaskInputs.inputs)
  return _internal_inputs().Get(index);
}
inline ::builra3::TaskInput* TaskInputs::add_inputs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  ::builra3::TaskInput* _add = _internal_mutable_inputs()->Add();
  // @@protoc_insertion_point(field_add:builra3.TaskInputs.inputs)
  return _add;
}
inline const ::Omnira::DataSerialization::RepeatedPtrField<::builra3::TaskInput>& TaskInputs::inputs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:builra3.TaskInputs.inputs)
  return _internal_inputs();
}
inline const ::Omnira::DataSerialization::RepeatedPtrField<::builra3::TaskInput>&
TaskInputs::_internal_inputs() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return _impl_.inputs_;
}
inline ::Omnira::DataSerialization::RepeatedPtrField<::builra3::TaskInput>*
TaskInputs::_internal_mutable_inputs() {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return &_impl_.inputs_;
}

// -------------------------------------------------------------------

// TaskContext

// .builra3.CASID cas_state = 1;
inline bool TaskContext::has_cas_state() const {
  return TaskState_case() == kCasState;
}
inline bool TaskContext::_internal_has_cas_state() const {
  return TaskState_case() == kCasState;
}
inline void TaskContext::set_has_cas_state() {
  _impl_._oneof_case_[0] = kCasState;
}
inline ::builra3::CASID* TaskContext::release_cas_state() {
  // @@protoc_insertion_point(field_release:builra3.TaskContext.cas_state)
  if (TaskState_case() == kCasState) {
    clear_has_TaskState();
    auto* temp = _impl_.TaskState_.cas_state_;
    if (GetArena() != nullptr) {
      temp = ::Omnira::DataSerialization::internal::DuplicateIfNonNull(temp);
    }
    _impl_.TaskState_.cas_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::builra3::CASID& TaskContext::_internal_cas_state() const {
  return TaskState_case() == kCasState ? *_impl_.TaskState_.cas_state_ : reinterpret_cast<::builra3::CASID&>(::builra3::_CASID_default_instance_);
}
inline const ::builra3::CASID& TaskContext::cas_state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.TaskContext.cas_state)
  return _internal_cas_state();
}
inline ::builra3::CASID* TaskContext::unsafe_arena_release_cas_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:builra3.TaskContext.cas_state)
  if (TaskState_case() == kCasState) {
    clear_has_TaskState();
    auto* temp = _impl_.TaskState_.cas_state_;
    _impl_.TaskState_.cas_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskContext::unsafe_arena_set_allocated_cas_state(::builra3::CASID* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_TaskState();
  if (value) {
    set_has_cas_state();
    _impl_.TaskState_.cas_state_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:builra3.TaskContext.cas_state)
}
inline ::builra3::CASID* TaskContext::_internal_mutable_cas_state() {
  if (TaskState_case() != kCasState) {
    clear_TaskState();
    set_has_cas_state();
    _impl_.TaskState_.cas_state_ =
        ::Omnira::DataSerialization::Message::DefaultConstruct<::builra3::CASID>(GetArena());
  }
  return _impl_.TaskState_.cas_state_;
}
inline ::builra3::CASID* TaskContext::mutable_cas_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::builra3::CASID* _msg = _internal_mutable_cas_state();
  // @@protoc_insertion_point(field_mutable:builra3.TaskContext.cas_state)
  return _msg;
}

// .google.protobuf.Any proto_state = 2;
inline bool TaskContext::has_proto_state() const {
  return TaskState_case() == kProtoState;
}
inline bool TaskContext::_internal_has_proto_state() const {
  return TaskState_case() == kProtoState;
}
inline void TaskContext::set_has_proto_state() {
  _impl_._oneof_case_[0] = kProtoState;
}
inline ::Omnira::DataSerialization::Any* TaskContext::release_proto_state() {
  // @@protoc_insertion_point(field_release:builra3.TaskContext.proto_state)
  if (TaskState_case() == kProtoState) {
    clear_has_TaskState();
    auto* temp = _impl_.TaskState_.proto_state_;
    if (GetArena() != nullptr) {
      temp = ::Omnira::DataSerialization::internal::DuplicateIfNonNull(temp);
    }
    _impl_.TaskState_.proto_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Omnira::DataSerialization::Any& TaskContext::_internal_proto_state() const {
  return TaskState_case() == kProtoState ? *_impl_.TaskState_.proto_state_ : reinterpret_cast<::Omnira::DataSerialization::Any&>(::Omnira::DataSerialization::_Any_default_instance_);
}
inline const ::Omnira::DataSerialization::Any& TaskContext::proto_state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.TaskContext.proto_state)
  return _internal_proto_state();
}
inline ::Omnira::DataSerialization::Any* TaskContext::unsafe_arena_release_proto_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:builra3.TaskContext.proto_state)
  if (TaskState_case() == kProtoState) {
    clear_has_TaskState();
    auto* temp = _impl_.TaskState_.proto_state_;
    _impl_.TaskState_.proto_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskContext::unsafe_arena_set_allocated_proto_state(::Omnira::DataSerialization::Any* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_TaskState();
  if (value) {
    set_has_proto_state();
    _impl_.TaskState_.proto_state_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:builra3.TaskContext.proto_state)
}
inline ::Omnira::DataSerialization::Any* TaskContext::_internal_mutable_proto_state() {
  if (TaskState_case() != kProtoState) {
    clear_TaskState();
    set_has_proto_state();
    _impl_.TaskState_.proto_state_ =
        ::Omnira::DataSerialization::Message::DefaultConstruct<::Omnira::DataSerialization::Any>(GetArena());
  }
  return _impl_.TaskState_.proto_state_;
}
inline ::Omnira::DataSerialization::Any* TaskContext::mutable_proto_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Omnira::DataSerialization::Any* _msg = _internal_mutable_proto_state();
  // @@protoc_insertion_point(field_mutable:builra3.TaskContext.proto_state)
  return _msg;
}

// int64 int_state = 3;
inline bool TaskContext::has_int_state() const {
  return TaskState_case() == kIntState;
}
inline void TaskContext::set_has_int_state() {
  _impl_._oneof_case_[0] = kIntState;
}
inline void TaskContext::clear_int_state() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (TaskState_case() == kIntState) {
    _impl_.TaskState_.int_state_ = ::int64_t{0};
    clear_has_TaskState();
  }
}
inline ::int64_t TaskContext::int_state() const {
  // @@protoc_insertion_point(field_get:builra3.TaskContext.int_state)
  return _internal_int_state();
}
inline void TaskContext::set_int_state(::int64_t value) {
  if (TaskState_case() != kIntState) {
    clear_TaskState();
    set_has_int_state();
  }
  _impl_.TaskState_.int_state_ = value;
  // @@protoc_insertion_point(field_set:builra3.TaskContext.int_state)
}
inline ::int64_t TaskContext::_internal_int_state() const {
  if (TaskState_case() == kIntState) {
    return _impl_.TaskState_.int_state_;
  }
  return ::int64_t{0};
}

inline bool TaskContext::has_TaskState() const {
  return TaskState_case() != TASKSTATE_NOT_SET;
}
inline void TaskContext::clear_has_TaskState() {
  _impl_._oneof_case_[0] = TASKSTATE_NOT_SET;
}
inline TaskContext::TaskStateCase TaskContext::TaskState_case() const {
  return TaskContext::TaskStateCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TaskWait

// repeated uint64 ids = 1;
inline int TaskWait::_internal_ids_size() const {
  return _internal_ids().size();
}
inline int TaskWait::ids_size() const {
  return _internal_ids_size();
}
inline void TaskWait::clear_ids() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.ids_.Clear();
}
inline ::uint64_t TaskWait::ids(int index) const {
  // @@protoc_insertion_point(field_get:builra3.TaskWait.ids)
  return _internal_ids().Get(index);
}
inline void TaskWait::set_ids(int index, ::uint64_t value) {
  _internal_mutable_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:builra3.TaskWait.ids)
}
inline void TaskWait::add_ids(::uint64_t value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _internal_mutable_ids()->Add(value);
  // @@protoc_insertion_point(field_add:builra3.TaskWait.ids)
}
inline const ::Omnira::DataSerialization::RepeatedField<::uint64_t>& TaskWait::ids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:builra3.TaskWait.ids)
  return _internal_ids();
}
inline ::Omnira::DataSerialization::RepeatedField<::uint64_t>* TaskWait::mutable_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:builra3.TaskWait.ids)
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  return _internal_mutable_ids();
}
inline const ::Omnira::DataSerialization::RepeatedField<::uint64_t>&
TaskWait::_internal_ids() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return _impl_.ids_;
}
inline ::Omnira::DataSerialization::RepeatedField<::uint64_t>* TaskWait::_internal_mutable_ids() {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return &_impl_.ids_;
}

// .builra3.TaskContext context = 2;
inline bool TaskWait::has_context() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.context_ != nullptr);
  return value;
}
inline void TaskWait::clear_context() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (_impl_.context_ != nullptr) _impl_.context_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::builra3::TaskContext& TaskWait::_internal_context() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  const ::builra3::TaskContext* p = _impl_.context_;
  return p != nullptr ? *p : reinterpret_cast<const ::builra3::TaskContext&>(::builra3::_TaskContext_default_instance_);
}
inline const ::builra3::TaskContext& TaskWait::context() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.TaskWait.context)
  return _internal_context();
}
inline void TaskWait::unsafe_arena_set_allocated_context(::builra3::TaskContext* value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::Omnira::DataSerialization::MessageLite*>(_impl_.context_);
  }
  _impl_.context_ = reinterpret_cast<::builra3::TaskContext*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:builra3.TaskWait.context)
}
inline ::builra3::TaskContext* TaskWait::release_context() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::builra3::TaskContext* released = _impl_.context_;
  _impl_.context_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::Omnira::DataSerialization::MessageLite*>(released);
  released = ::Omnira::DataSerialization::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::Omnira::DataSerialization::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::builra3::TaskContext* TaskWait::unsafe_arena_release_context() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:builra3.TaskWait.context)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::builra3::TaskContext* temp = _impl_.context_;
  _impl_.context_ = nullptr;
  return temp;
}
inline ::builra3::TaskContext* TaskWait::_internal_mutable_context() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (_impl_.context_ == nullptr) {
    auto* p = ::Omnira::DataSerialization::Message::DefaultConstruct<::builra3::TaskContext>(GetArena());
    _impl_.context_ = reinterpret_cast<::builra3::TaskContext*>(p);
  }
  return _impl_.context_;
}
inline ::builra3::TaskContext* TaskWait::mutable_context() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::builra3::TaskContext* _msg = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:builra3.TaskWait.context)
  return _msg;
}
inline void TaskWait::set_allocated_context(::builra3::TaskContext* value) {
  ::Omnira::DataSerialization::Arena* message_arena = GetArena();
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.context_);
  }

  if (value != nullptr) {
    ::Omnira::DataSerialization::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::Omnira::DataSerialization::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.context_ = reinterpret_cast<::builra3::TaskContext*>(value);
  // @@protoc_insertion_point(field_set_allocated:builra3.TaskWait.context)
}

// -------------------------------------------------------------------

// TaskNextState

// .builra3.TaskWait wait = 1;
inline bool TaskNextState::has_wait() const {
  return StateValue_case() == kWait;
}
inline bool TaskNextState::_internal_has_wait() const {
  return StateValue_case() == kWait;
}
inline void TaskNextState::set_has_wait() {
  _impl_._oneof_case_[0] = kWait;
}
inline void TaskNextState::clear_wait() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (StateValue_case() == kWait) {
    if (GetArena() == nullptr) {
      delete _impl_.StateValue_.wait_;
    } else if (::Omnira::DataSerialization::internal::DebugHardenClearOneofMessageOnArena()) {
      ::Omnira::DataSerialization::internal::MaybePoisonAfterClear(_impl_.StateValue_.wait_);
    }
    clear_has_StateValue();
  }
}
inline ::builra3::TaskWait* TaskNextState::release_wait() {
  // @@protoc_insertion_point(field_release:builra3.TaskNextState.wait)
  if (StateValue_case() == kWait) {
    clear_has_StateValue();
    auto* temp = _impl_.StateValue_.wait_;
    if (GetArena() != nullptr) {
      temp = ::Omnira::DataSerialization::internal::DuplicateIfNonNull(temp);
    }
    _impl_.StateValue_.wait_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::builra3::TaskWait& TaskNextState::_internal_wait() const {
  return StateValue_case() == kWait ? *_impl_.StateValue_.wait_ : reinterpret_cast<::builra3::TaskWait&>(::builra3::_TaskWait_default_instance_);
}
inline const ::builra3::TaskWait& TaskNextState::wait() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.TaskNextState.wait)
  return _internal_wait();
}
inline ::builra3::TaskWait* TaskNextState::unsafe_arena_release_wait() {
  // @@protoc_insertion_point(field_unsafe_arena_release:builra3.TaskNextState.wait)
  if (StateValue_case() == kWait) {
    clear_has_StateValue();
    auto* temp = _impl_.StateValue_.wait_;
    _impl_.StateValue_.wait_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskNextState::unsafe_arena_set_allocated_wait(::builra3::TaskWait* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_StateValue();
  if (value) {
    set_has_wait();
    _impl_.StateValue_.wait_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:builra3.TaskNextState.wait)
}
inline ::builra3::TaskWait* TaskNextState::_internal_mutable_wait() {
  if (StateValue_case() != kWait) {
    clear_StateValue();
    set_has_wait();
    _impl_.StateValue_.wait_ =
        ::Omnira::DataSerialization::Message::DefaultConstruct<::builra3::TaskWait>(GetArena());
  }
  return _impl_.StateValue_.wait_;
}
inline ::builra3::TaskWait* TaskNextState::mutable_wait() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::builra3::TaskWait* _msg = _internal_mutable_wait();
  // @@protoc_insertion_point(field_mutable:builra3.TaskNextState.wait)
  return _msg;
}

// .builra3.TaskResult result = 2;
inline bool TaskNextState::has_result() const {
  return StateValue_case() == kResult;
}
inline bool TaskNextState::_internal_has_result() const {
  return StateValue_case() == kResult;
}
inline void TaskNextState::set_has_result() {
  _impl_._oneof_case_[0] = kResult;
}
inline void TaskNextState::clear_result() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (StateValue_case() == kResult) {
    if (GetArena() == nullptr) {
      delete _impl_.StateValue_.result_;
    } else if (::Omnira::DataSerialization::internal::DebugHardenClearOneofMessageOnArena()) {
      ::Omnira::DataSerialization::internal::MaybePoisonAfterClear(_impl_.StateValue_.result_);
    }
    clear_has_StateValue();
  }
}
inline ::builra3::TaskResult* TaskNextState::release_result() {
  // @@protoc_insertion_point(field_release:builra3.TaskNextState.result)
  if (StateValue_case() == kResult) {
    clear_has_StateValue();
    auto* temp = _impl_.StateValue_.result_;
    if (GetArena() != nullptr) {
      temp = ::Omnira::DataSerialization::internal::DuplicateIfNonNull(temp);
    }
    _impl_.StateValue_.result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::builra3::TaskResult& TaskNextState::_internal_result() const {
  return StateValue_case() == kResult ? *_impl_.StateValue_.result_ : reinterpret_cast<::builra3::TaskResult&>(::builra3::_TaskResult_default_instance_);
}
inline const ::builra3::TaskResult& TaskNextState::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.TaskNextState.result)
  return _internal_result();
}
inline ::builra3::TaskResult* TaskNextState::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:builra3.TaskNextState.result)
  if (StateValue_case() == kResult) {
    clear_has_StateValue();
    auto* temp = _impl_.StateValue_.result_;
    _impl_.StateValue_.result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskNextState::unsafe_arena_set_allocated_result(::builra3::TaskResult* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_StateValue();
  if (value) {
    set_has_result();
    _impl_.StateValue_.result_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:builra3.TaskNextState.result)
}
inline ::builra3::TaskResult* TaskNextState::_internal_mutable_result() {
  if (StateValue_case() != kResult) {
    clear_StateValue();
    set_has_result();
    _impl_.StateValue_.result_ =
        ::Omnira::DataSerialization::Message::DefaultConstruct<::builra3::TaskResult>(GetArena());
  }
  return _impl_.StateValue_.result_;
}
inline ::builra3::TaskResult* TaskNextState::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::builra3::TaskResult* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:builra3.TaskNextState.result)
  return _msg;
}

// .builra3.Error error = 3;
inline bool TaskNextState::has_error() const {
  return StateValue_case() == kError;
}
inline bool TaskNextState::_internal_has_error() const {
  return StateValue_case() == kError;
}
inline void TaskNextState::set_has_error() {
  _impl_._oneof_case_[0] = kError;
}
inline ::builra3::Error* TaskNextState::release_error() {
  // @@protoc_insertion_point(field_release:builra3.TaskNextState.error)
  if (StateValue_case() == kError) {
    clear_has_StateValue();
    auto* temp = _impl_.StateValue_.error_;
    if (GetArena() != nullptr) {
      temp = ::Omnira::DataSerialization::internal::DuplicateIfNonNull(temp);
    }
    _impl_.StateValue_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::builra3::Error& TaskNextState::_internal_error() const {
  return StateValue_case() == kError ? *_impl_.StateValue_.error_ : reinterpret_cast<::builra3::Error&>(::builra3::_Error_default_instance_);
}
inline const ::builra3::Error& TaskNextState::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.TaskNextState.error)
  return _internal_error();
}
inline ::builra3::Error* TaskNextState::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:builra3.TaskNextState.error)
  if (StateValue_case() == kError) {
    clear_has_StateValue();
    auto* temp = _impl_.StateValue_.error_;
    _impl_.StateValue_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskNextState::unsafe_arena_set_allocated_error(::builra3::Error* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_StateValue();
  if (value) {
    set_has_error();
    _impl_.StateValue_.error_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:builra3.TaskNextState.error)
}
inline ::builra3::Error* TaskNextState::_internal_mutable_error() {
  if (StateValue_case() != kError) {
    clear_StateValue();
    set_has_error();
    _impl_.StateValue_.error_ =
        ::Omnira::DataSerialization::Message::DefaultConstruct<::builra3::Error>(GetArena());
  }
  return _impl_.StateValue_.error_;
}
inline ::builra3::Error* TaskNextState::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::builra3::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:builra3.TaskNextState.error)
  return _msg;
}

inline bool TaskNextState::has_StateValue() const {
  return StateValue_case() != STATEVALUE_NOT_SET;
}
inline void TaskNextState::clear_has_StateValue() {
  _impl_._oneof_case_[0] = STATEVALUE_NOT_SET;
}
inline TaskNextState::StateValueCase TaskNextState::StateValue_case() const {
  return TaskNextState::StateValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TaskStateMachineContext

// int64 next = 1;
inline void TaskStateMachineContext::clear_next() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.next_ = ::int64_t{0};
}
inline ::int64_t TaskStateMachineContext::next() const {
  // @@protoc_insertion_point(field_get:builra3.TaskStateMachineContext.next)
  return _internal_next();
}
inline void TaskStateMachineContext::set_next(::int64_t value) {
  _internal_set_next(value);
  // @@protoc_insertion_point(field_set:builra3.TaskStateMachineContext.next)
}
inline ::int64_t TaskStateMachineContext::_internal_next() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return _impl_.next_;
}
inline void TaskStateMachineContext::_internal_set_next(::int64_t value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.next_ = value;
}

// bytes data = 2;
inline void TaskStateMachineContext::clear_data() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& TaskStateMachineContext::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.TaskStateMachineContext.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskStateMachineContext::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:builra3.TaskStateMachineContext.data)
}
inline std::string* TaskStateMachineContext::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:builra3.TaskStateMachineContext.data)
  return _s;
}
inline const std::string& TaskStateMachineContext::_internal_data() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void TaskStateMachineContext::_internal_set_data(const std::string& value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* TaskStateMachineContext::_internal_mutable_data() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* TaskStateMachineContext::release_data() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:builra3.TaskStateMachineContext.data)
  return _impl_.data_.Release();
}
inline void TaskStateMachineContext::set_allocated_data(std::string* value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:builra3.TaskStateMachineContext.data)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace builra3


// @@protoc_insertion_point(global_scope)

#include "Omnira/DataSerialization/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_builra3_2fEngine_2eproto_2epb_2eh
