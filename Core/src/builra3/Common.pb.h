// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: builra3/Common.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_builra3_2fCommon_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_builra3_2fCommon_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "Omnira/DataSerialization/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "Omnira/DataSerialization/io/coded_stream.h"
#include "Omnira/DataSerialization/arena.h"
#include "Omnira/DataSerialization/arenastring.h"
#include "Omnira/DataSerialization/generated_message_tctable_decl.h"
#include "Omnira/DataSerialization/generated_message_util.h"
#include "Omnira/DataSerialization/metadata_lite.h"
#include "Omnira/DataSerialization/generated_message_reflection.h"
#include "Omnira/DataSerialization/message.h"
#include "Omnira/DataSerialization/repeated_field.h"  // IWYU pragma: export
#include "Omnira/DataSerialization/extension_set.h"  // IWYU pragma: export
#include "Omnira/DataSerialization/unknown_field_set.h"
#include "builra3/CAS.pb.h"
#include "builra3/Error.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "Omnira/DataSerialization/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_builra3_2fCommon_2eproto

namespace Omnira {
namespace DataSerialization {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace DataSerialization
}  // namespace Omnira

// Internal implementation detail -- do not use these members.
struct TableStruct_builra3_2fCommon_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::Omnira::DataSerialization::internal::DescriptorTable
    descriptor_table_builra3_2fCommon_2eproto;
namespace builra3 {
class Stat;
struct StatDefaultTypeInternal;
extern StatDefaultTypeInternal _Stat_default_instance_;
}  // namespace builra3
namespace Omnira {
namespace DataSerialization {
}  // namespace DataSerialization
}  // namespace Omnira

namespace builra3 {

// ===================================================================


// -------------------------------------------------------------------

class Stat final : public ::Omnira::DataSerialization::Message
/* @@protoc_insertion_point(class_definition:builra3.Stat) */ {
 public:
  inline Stat() : Stat(nullptr) {}
  ~Stat() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Stat(
      ::Omnira::DataSerialization::internal::ConstantInitialized);

  inline Stat(const Stat& from) : Stat(nullptr, from) {}
  inline Stat(Stat&& from) noexcept
      : Stat(nullptr, std::move(from)) {}
  inline Stat& operator=(const Stat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stat& operator=(Stat&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::Omnira::DataSerialization::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>(::Omnira::DataSerialization::UnknownFieldSet::default_instance);
  }
  inline ::Omnira::DataSerialization::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>();
  }

  static const ::Omnira::DataSerialization::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::Omnira::DataSerialization::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::Omnira::DataSerialization::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stat& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kIntValue = 2,
    kUintValue = 3,
    kStringValue = 4,
    kBoolValue = 5,
    kDoubleValue = 6,
    kCasObject = 7,
    kErrorValue = 8,
    VALUE_NOT_SET = 0,
  };
  static inline const Stat* internal_default_instance() {
    return reinterpret_cast<const Stat*>(
        &_Stat_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Stat& a, Stat& b) { a.Swap(&b); }
  inline void Swap(Stat* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::Omnira::DataSerialization::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stat* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stat* New(::Omnira::DataSerialization::Arena* arena = nullptr) const final {
    return ::Omnira::DataSerialization::Message::DefaultConstruct<Stat>(arena);
  }
  using ::Omnira::DataSerialization::Message::CopyFrom;
  void CopyFrom(const Stat& from);
  using ::Omnira::DataSerialization::Message::MergeFrom;
  void MergeFrom(const Stat& from) { Stat::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::Omnira::DataSerialization::MessageLite& to_msg,
      const ::Omnira::DataSerialization::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::Omnira::DataSerialization::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::Omnira::DataSerialization::Arena* arena);
  void SharedDtor();
  void InternalSwap(Stat* other);
 private:
  friend class ::Omnira::DataSerialization::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "builra3.Stat"; }

 protected:
  explicit Stat(::Omnira::DataSerialization::Arena* arena);
  Stat(::Omnira::DataSerialization::Arena* arena, const Stat& from);
  Stat(::Omnira::DataSerialization::Arena* arena, Stat&& from) noexcept
      : Stat(arena) {
    *this = ::std::move(from);
  }
  const ::Omnira::DataSerialization::Message::ClassData* GetClassData() const final;

 public:
  ::Omnira::DataSerialization::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kIntValueFieldNumber = 2,
    kUintValueFieldNumber = 3,
    kStringValueFieldNumber = 4,
    kBoolValueFieldNumber = 5,
    kDoubleValueFieldNumber = 6,
    kCasObjectFieldNumber = 7,
    kErrorValueFieldNumber = 8,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int64 int_value = 2;
  bool has_int_value() const;
  void clear_int_value() ;
  ::int64_t int_value() const;
  void set_int_value(::int64_t value);

  private:
  ::int64_t _internal_int_value() const;
  void _internal_set_int_value(::int64_t value);

  public:
  // uint64 uint_value = 3;
  bool has_uint_value() const;
  void clear_uint_value() ;
  ::uint64_t uint_value() const;
  void set_uint_value(::uint64_t value);

  private:
  ::uint64_t _internal_uint_value() const;
  void _internal_set_uint_value(::uint64_t value);

  public:
  // string string_value = 4;
  bool has_string_value() const;
  void clear_string_value() ;
  const std::string& string_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_value(Arg_&& arg, Args_... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* value);

  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(
      const std::string& value);
  std::string* _internal_mutable_string_value();

  public:
  // bool bool_value = 5;
  bool has_bool_value() const;
  void clear_bool_value() ;
  bool bool_value() const;
  void set_bool_value(bool value);

  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);

  public:
  // double double_value = 6;
  bool has_double_value() const;
  void clear_double_value() ;
  double double_value() const;
  void set_double_value(double value);

  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);

  public:
  // .builra3.CASID cas_object = 7;
  bool has_cas_object() const;
  private:
  bool _internal_has_cas_object() const;

  public:
  void clear_cas_object() ;
  const ::builra3::CASID& cas_object() const;
  PROTOBUF_NODISCARD ::builra3::CASID* release_cas_object();
  ::builra3::CASID* mutable_cas_object();
  void set_allocated_cas_object(::builra3::CASID* value);
  void unsafe_arena_set_allocated_cas_object(::builra3::CASID* value);
  ::builra3::CASID* unsafe_arena_release_cas_object();

  private:
  const ::builra3::CASID& _internal_cas_object() const;
  ::builra3::CASID* _internal_mutable_cas_object();

  public:
  // .builra3.Error error_value = 8;
  bool has_error_value() const;
  private:
  bool _internal_has_error_value() const;

  public:
  void clear_error_value() ;
  const ::builra3::Error& error_value() const;
  PROTOBUF_NODISCARD ::builra3::Error* release_error_value();
  ::builra3::Error* mutable_error_value();
  void set_allocated_error_value(::builra3::Error* value);
  void unsafe_arena_set_allocated_error_value(::builra3::Error* value);
  ::builra3::Error* unsafe_arena_release_error_value();

  private:
  const ::builra3::Error& _internal_error_value() const;
  ::builra3::Error* _internal_mutable_error_value();

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:builra3.Stat)
 private:
  class _Internal;
  void set_has_int_value();
  void set_has_uint_value();
  void set_has_string_value();
  void set_has_bool_value();
  void set_has_double_value();
  void set_has_cas_object();
  void set_has_error_value();
  inline bool has_value() const;
  inline void clear_has_value();
  friend class ::Omnira::DataSerialization::internal::TcParser;
  static const ::Omnira::DataSerialization::internal::TcParseTable<
      0, 8, 2,
      46, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Stat_default_instance_;

  friend class ::Omnira::DataSerialization::MessageLite;
  friend class ::Omnira::DataSerialization::Arena;
  template <typename T>
  friend class ::Omnira::DataSerialization::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::Omnira::DataSerialization::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena);
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena, const Impl_& from,
                          const Stat& from_msg);
    ::Omnira::DataSerialization::internal::ArenaStringPtr name_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
      ::Omnira::DataSerialization::internal::ConstantInitialized _constinit_;
      ::int64_t int_value_;
      ::uint64_t uint_value_;
      ::Omnira::DataSerialization::internal::ArenaStringPtr string_value_;
      bool bool_value_;
      double double_value_;
      ::builra3::CASID* cas_object_;
      ::builra3::Error* error_value_;
    } value_;
    mutable ::Omnira::DataSerialization::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_builra3_2fCommon_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Stat

// string name = 1;
inline void Stat::clear_name() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Stat::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.Stat.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Stat::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:builra3.Stat.name)
}
inline std::string* Stat::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:builra3.Stat.name)
  return _s;
}
inline const std::string& Stat::_internal_name() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Stat::_internal_set_name(const std::string& value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Stat::_internal_mutable_name() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Stat::release_name() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:builra3.Stat.name)
  return _impl_.name_.Release();
}
inline void Stat::set_allocated_name(std::string* value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:builra3.Stat.name)
}

// int64 int_value = 2;
inline bool Stat::has_int_value() const {
  return value_case() == kIntValue;
}
inline void Stat::set_has_int_value() {
  _impl_._oneof_case_[0] = kIntValue;
}
inline void Stat::clear_int_value() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (value_case() == kIntValue) {
    _impl_.value_.int_value_ = ::int64_t{0};
    clear_has_value();
  }
}
inline ::int64_t Stat::int_value() const {
  // @@protoc_insertion_point(field_get:builra3.Stat.int_value)
  return _internal_int_value();
}
inline void Stat::set_int_value(::int64_t value) {
  if (value_case() != kIntValue) {
    clear_value();
    set_has_int_value();
  }
  _impl_.value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:builra3.Stat.int_value)
}
inline ::int64_t Stat::_internal_int_value() const {
  if (value_case() == kIntValue) {
    return _impl_.value_.int_value_;
  }
  return ::int64_t{0};
}

// uint64 uint_value = 3;
inline bool Stat::has_uint_value() const {
  return value_case() == kUintValue;
}
inline void Stat::set_has_uint_value() {
  _impl_._oneof_case_[0] = kUintValue;
}
inline void Stat::clear_uint_value() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (value_case() == kUintValue) {
    _impl_.value_.uint_value_ = ::uint64_t{0u};
    clear_has_value();
  }
}
inline ::uint64_t Stat::uint_value() const {
  // @@protoc_insertion_point(field_get:builra3.Stat.uint_value)
  return _internal_uint_value();
}
inline void Stat::set_uint_value(::uint64_t value) {
  if (value_case() != kUintValue) {
    clear_value();
    set_has_uint_value();
  }
  _impl_.value_.uint_value_ = value;
  // @@protoc_insertion_point(field_set:builra3.Stat.uint_value)
}
inline ::uint64_t Stat::_internal_uint_value() const {
  if (value_case() == kUintValue) {
    return _impl_.value_.uint_value_;
  }
  return ::uint64_t{0u};
}

// string string_value = 4;
inline bool Stat::has_string_value() const {
  return value_case() == kStringValue;
}
inline void Stat::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void Stat::clear_string_value() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (value_case() == kStringValue) {
    _impl_.value_.string_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& Stat::string_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.Stat.string_value)
  return _internal_string_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Stat::set_string_value(Arg_&& arg,
                                                     Args_... args) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:builra3.Stat.string_value)
}
inline std::string* Stat::mutable_string_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:builra3.Stat.string_value)
  return _s;
}
inline const std::string& Stat::_internal_string_value() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  if (value_case() != kStringValue) {
    return ::Omnira::DataSerialization::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.string_value_.Get();
}
inline void Stat::_internal_set_string_value(const std::string& value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(value, GetArena());
}
inline std::string* Stat::_internal_mutable_string_value() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  return _impl_.value_.string_value_.Mutable( GetArena());
}
inline std::string* Stat::release_string_value() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:builra3.Stat.string_value)
  if (value_case() != kStringValue) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.string_value_.Release();
}
inline void Stat::set_allocated_string_value(std::string* value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_string_value();
    _impl_.value_.string_value_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:builra3.Stat.string_value)
}

// bool bool_value = 5;
inline bool Stat::has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void Stat::set_has_bool_value() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void Stat::clear_bool_value() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (value_case() == kBoolValue) {
    _impl_.value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool Stat::bool_value() const {
  // @@protoc_insertion_point(field_get:builra3.Stat.bool_value)
  return _internal_bool_value();
}
inline void Stat::set_bool_value(bool value) {
  if (value_case() != kBoolValue) {
    clear_value();
    set_has_bool_value();
  }
  _impl_.value_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:builra3.Stat.bool_value)
}
inline bool Stat::_internal_bool_value() const {
  if (value_case() == kBoolValue) {
    return _impl_.value_.bool_value_;
  }
  return false;
}

// double double_value = 6;
inline bool Stat::has_double_value() const {
  return value_case() == kDoubleValue;
}
inline void Stat::set_has_double_value() {
  _impl_._oneof_case_[0] = kDoubleValue;
}
inline void Stat::clear_double_value() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (value_case() == kDoubleValue) {
    _impl_.value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double Stat::double_value() const {
  // @@protoc_insertion_point(field_get:builra3.Stat.double_value)
  return _internal_double_value();
}
inline void Stat::set_double_value(double value) {
  if (value_case() != kDoubleValue) {
    clear_value();
    set_has_double_value();
  }
  _impl_.value_.double_value_ = value;
  // @@protoc_insertion_point(field_set:builra3.Stat.double_value)
}
inline double Stat::_internal_double_value() const {
  if (value_case() == kDoubleValue) {
    return _impl_.value_.double_value_;
  }
  return 0;
}

// .builra3.CASID cas_object = 7;
inline bool Stat::has_cas_object() const {
  return value_case() == kCasObject;
}
inline bool Stat::_internal_has_cas_object() const {
  return value_case() == kCasObject;
}
inline void Stat::set_has_cas_object() {
  _impl_._oneof_case_[0] = kCasObject;
}
inline ::builra3::CASID* Stat::release_cas_object() {
  // @@protoc_insertion_point(field_release:builra3.Stat.cas_object)
  if (value_case() == kCasObject) {
    clear_has_value();
    auto* temp = _impl_.value_.cas_object_;
    if (GetArena() != nullptr) {
      temp = ::Omnira::DataSerialization::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.cas_object_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::builra3::CASID& Stat::_internal_cas_object() const {
  return value_case() == kCasObject ? *_impl_.value_.cas_object_ : reinterpret_cast<::builra3::CASID&>(::builra3::_CASID_default_instance_);
}
inline const ::builra3::CASID& Stat::cas_object() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.Stat.cas_object)
  return _internal_cas_object();
}
inline ::builra3::CASID* Stat::unsafe_arena_release_cas_object() {
  // @@protoc_insertion_point(field_unsafe_arena_release:builra3.Stat.cas_object)
  if (value_case() == kCasObject) {
    clear_has_value();
    auto* temp = _impl_.value_.cas_object_;
    _impl_.value_.cas_object_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Stat::unsafe_arena_set_allocated_cas_object(::builra3::CASID* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_cas_object();
    _impl_.value_.cas_object_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:builra3.Stat.cas_object)
}
inline ::builra3::CASID* Stat::_internal_mutable_cas_object() {
  if (value_case() != kCasObject) {
    clear_value();
    set_has_cas_object();
    _impl_.value_.cas_object_ =
        ::Omnira::DataSerialization::Message::DefaultConstruct<::builra3::CASID>(GetArena());
  }
  return _impl_.value_.cas_object_;
}
inline ::builra3::CASID* Stat::mutable_cas_object() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::builra3::CASID* _msg = _internal_mutable_cas_object();
  // @@protoc_insertion_point(field_mutable:builra3.Stat.cas_object)
  return _msg;
}

// .builra3.Error error_value = 8;
inline bool Stat::has_error_value() const {
  return value_case() == kErrorValue;
}
inline bool Stat::_internal_has_error_value() const {
  return value_case() == kErrorValue;
}
inline void Stat::set_has_error_value() {
  _impl_._oneof_case_[0] = kErrorValue;
}
inline ::builra3::Error* Stat::release_error_value() {
  // @@protoc_insertion_point(field_release:builra3.Stat.error_value)
  if (value_case() == kErrorValue) {
    clear_has_value();
    auto* temp = _impl_.value_.error_value_;
    if (GetArena() != nullptr) {
      temp = ::Omnira::DataSerialization::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.error_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::builra3::Error& Stat::_internal_error_value() const {
  return value_case() == kErrorValue ? *_impl_.value_.error_value_ : reinterpret_cast<::builra3::Error&>(::builra3::_Error_default_instance_);
}
inline const ::builra3::Error& Stat::error_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.Stat.error_value)
  return _internal_error_value();
}
inline ::builra3::Error* Stat::unsafe_arena_release_error_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:builra3.Stat.error_value)
  if (value_case() == kErrorValue) {
    clear_has_value();
    auto* temp = _impl_.value_.error_value_;
    _impl_.value_.error_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Stat::unsafe_arena_set_allocated_error_value(::builra3::Error* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_error_value();
    _impl_.value_.error_value_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:builra3.Stat.error_value)
}
inline ::builra3::Error* Stat::_internal_mutable_error_value() {
  if (value_case() != kErrorValue) {
    clear_value();
    set_has_error_value();
    _impl_.value_.error_value_ =
        ::Omnira::DataSerialization::Message::DefaultConstruct<::builra3::Error>(GetArena());
  }
  return _impl_.value_.error_value_;
}
inline ::builra3::Error* Stat::mutable_error_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::builra3::Error* _msg = _internal_mutable_error_value();
  // @@protoc_insertion_point(field_mutable:builra3.Stat.error_value)
  return _msg;
}

inline bool Stat::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Stat::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline Stat::ValueCase Stat::value_case() const {
  return Stat::ValueCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace builra3


// @@protoc_insertion_point(global_scope)

#include "Omnira/DataSerialization/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_builra3_2fCommon_2eproto_2epb_2eh
