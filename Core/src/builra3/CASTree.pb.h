// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: builra3/CASTree.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_builra3_2fCASTree_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_builra3_2fCASTree_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "Omnira/DataSerialization/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "Omnira/DataSerialization/io/coded_stream.h"
#include "Omnira/DataSerialization/arena.h"
#include "Omnira/DataSerialization/arenastring.h"
#include "Omnira/DataSerialization/generated_message_tctable_decl.h"
#include "Omnira/DataSerialization/generated_message_util.h"
#include "Omnira/DataSerialization/metadata_lite.h"
#include "Omnira/DataSerialization/generated_message_reflection.h"
#include "Omnira/DataSerialization/message.h"
#include "Omnira/DataSerialization/repeated_field.h"  // IWYU pragma: export
#include "Omnira/DataSerialization/extension_set.h"  // IWYU pragma: export
#include "Omnira/DataSerialization/generated_enum_reflection.h"
#include "Omnira/DataSerialization/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "Omnira/DataSerialization/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_builra3_2fCASTree_2eproto

namespace Omnira {
namespace DataSerialization {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace DataSerialization
}  // namespace Omnira

// Internal implementation detail -- do not use these members.
struct TableStruct_builra3_2fCASTree_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::Omnira::DataSerialization::internal::DescriptorTable
    descriptor_table_builra3_2fCASTree_2eproto;
namespace builra3 {
class FileInformation;
struct FileInformationDefaultTypeInternal;
extern FileInformationDefaultTypeInternal _FileInformation_default_instance_;
class NamedDirectoryEntries;
struct NamedDirectoryEntriesDefaultTypeInternal;
extern NamedDirectoryEntriesDefaultTypeInternal _NamedDirectoryEntries_default_instance_;
class NamedDirectoryEntry;
struct NamedDirectoryEntryDefaultTypeInternal;
extern NamedDirectoryEntryDefaultTypeInternal _NamedDirectoryEntry_default_instance_;
class PosixFileDetails;
struct PosixFileDetailsDefaultTypeInternal;
extern PosixFileDetailsDefaultTypeInternal _PosixFileDetails_default_instance_;
}  // namespace builra3
namespace Omnira {
namespace DataSerialization {
}  // namespace DataSerialization
}  // namespace Omnira

namespace builra3 {
enum FileType : int {
  FILETYPE_PLAIN_FILE = 0,
  FILETYPE_EXECUTABLE = 1,
  FILETYPE_DIRECTORY = 2,
  FILETYPE_SYMLINK = 3,
  FileType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FileType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool FileType_IsValid(int value);
extern const uint32_t FileType_internal_data_[];
constexpr FileType FileType_MIN = static_cast<FileType>(0);
constexpr FileType FileType_MAX = static_cast<FileType>(3);
constexpr int FileType_ARRAYSIZE = 3 + 1;
const ::Omnira::DataSerialization::EnumDescriptor*
FileType_descriptor();
template <typename T>
const std::string& FileType_Name(T value) {
  static_assert(std::is_same<T, FileType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FileType_Name().");
  return FileType_Name(static_cast<FileType>(value));
}
template <>
inline const std::string& FileType_Name(FileType value) {
  return ::Omnira::DataSerialization::internal::NameOfDenseEnum<FileType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool FileType_Parse(absl::string_view name, FileType* value) {
  return ::Omnira::DataSerialization::internal::ParseNamedEnum<FileType>(
      FileType_descriptor(), name, value);
}
enum FileDataCompressionMethod : int {
  FILEDATACOMPRESSIONMETHOD_NONE = 0,
  FileDataCompressionMethod_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FileDataCompressionMethod_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool FileDataCompressionMethod_IsValid(int value);
extern const uint32_t FileDataCompressionMethod_internal_data_[];
constexpr FileDataCompressionMethod FileDataCompressionMethod_MIN = static_cast<FileDataCompressionMethod>(0);
constexpr FileDataCompressionMethod FileDataCompressionMethod_MAX = static_cast<FileDataCompressionMethod>(0);
constexpr int FileDataCompressionMethod_ARRAYSIZE = 0 + 1;
const ::Omnira::DataSerialization::EnumDescriptor*
FileDataCompressionMethod_descriptor();
template <typename T>
const std::string& FileDataCompressionMethod_Name(T value) {
  static_assert(std::is_same<T, FileDataCompressionMethod>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FileDataCompressionMethod_Name().");
  return FileDataCompressionMethod_Name(static_cast<FileDataCompressionMethod>(value));
}
template <>
inline const std::string& FileDataCompressionMethod_Name(FileDataCompressionMethod value) {
  return ::Omnira::DataSerialization::internal::NameOfDenseEnum<FileDataCompressionMethod_descriptor,
                                                 0, 0>(
      static_cast<int>(value));
}
inline bool FileDataCompressionMethod_Parse(absl::string_view name, FileDataCompressionMethod* value) {
  return ::Omnira::DataSerialization::internal::ParseNamedEnum<FileDataCompressionMethod>(
      FileDataCompressionMethod_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PosixFileDetails final : public ::Omnira::DataSerialization::Message
/* @@protoc_insertion_point(class_definition:builra3.PosixFileDetails) */ {
 public:
  inline PosixFileDetails() : PosixFileDetails(nullptr) {}
  ~PosixFileDetails() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PosixFileDetails(
      ::Omnira::DataSerialization::internal::ConstantInitialized);

  inline PosixFileDetails(const PosixFileDetails& from) : PosixFileDetails(nullptr, from) {}
  inline PosixFileDetails(PosixFileDetails&& from) noexcept
      : PosixFileDetails(nullptr, std::move(from)) {}
  inline PosixFileDetails& operator=(const PosixFileDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline PosixFileDetails& operator=(PosixFileDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::Omnira::DataSerialization::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>(::Omnira::DataSerialization::UnknownFieldSet::default_instance);
  }
  inline ::Omnira::DataSerialization::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>();
  }

  static const ::Omnira::DataSerialization::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::Omnira::DataSerialization::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::Omnira::DataSerialization::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PosixFileDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const PosixFileDetails* internal_default_instance() {
    return reinterpret_cast<const PosixFileDetails*>(
        &_PosixFileDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PosixFileDetails& a, PosixFileDetails& b) { a.Swap(&b); }
  inline void Swap(PosixFileDetails* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::Omnira::DataSerialization::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PosixFileDetails* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PosixFileDetails* New(::Omnira::DataSerialization::Arena* arena = nullptr) const final {
    return ::Omnira::DataSerialization::Message::DefaultConstruct<PosixFileDetails>(arena);
  }
  using ::Omnira::DataSerialization::Message::CopyFrom;
  void CopyFrom(const PosixFileDetails& from);
  using ::Omnira::DataSerialization::Message::MergeFrom;
  void MergeFrom(const PosixFileDetails& from) { PosixFileDetails::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::Omnira::DataSerialization::MessageLite& to_msg,
      const ::Omnira::DataSerialization::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::Omnira::DataSerialization::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::Omnira::DataSerialization::Arena* arena);
  void SharedDtor();
  void InternalSwap(PosixFileDetails* other);
 private:
  friend class ::Omnira::DataSerialization::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "builra3.PosixFileDetails"; }

 protected:
  explicit PosixFileDetails(::Omnira::DataSerialization::Arena* arena);
  PosixFileDetails(::Omnira::DataSerialization::Arena* arena, const PosixFileDetails& from);
  PosixFileDetails(::Omnira::DataSerialization::Arena* arena, PosixFileDetails&& from) noexcept
      : PosixFileDetails(arena) {
    *this = ::std::move(from);
  }
  const ::Omnira::DataSerialization::Message::ClassData* GetClassData() const final;

 public:
  ::Omnira::DataSerialization::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kModeFieldNumber = 1,
    kOwnerFieldNumber = 2,
    kGroupFieldNumber = 3,
  };
  // uint32 mode = 1;
  void clear_mode() ;
  ::uint32_t mode() const;
  void set_mode(::uint32_t value);

  private:
  ::uint32_t _internal_mode() const;
  void _internal_set_mode(::uint32_t value);

  public:
  // uint32 owner = 2;
  void clear_owner() ;
  ::uint32_t owner() const;
  void set_owner(::uint32_t value);

  private:
  ::uint32_t _internal_owner() const;
  void _internal_set_owner(::uint32_t value);

  public:
  // uint32 group = 3;
  void clear_group() ;
  ::uint32_t group() const;
  void set_group(::uint32_t value);

  private:
  ::uint32_t _internal_group() const;
  void _internal_set_group(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:builra3.PosixFileDetails)
 private:
  class _Internal;
  friend class ::Omnira::DataSerialization::internal::TcParser;
  static const ::Omnira::DataSerialization::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PosixFileDetails_default_instance_;

  friend class ::Omnira::DataSerialization::MessageLite;
  friend class ::Omnira::DataSerialization::Arena;
  template <typename T>
  friend class ::Omnira::DataSerialization::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::Omnira::DataSerialization::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena);
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena, const Impl_& from,
                          const PosixFileDetails& from_msg);
    ::uint32_t mode_;
    ::uint32_t owner_;
    ::uint32_t group_;
    mutable ::Omnira::DataSerialization::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_builra3_2fCASTree_2eproto;
};
// -------------------------------------------------------------------

class NamedDirectoryEntry final : public ::Omnira::DataSerialization::Message
/* @@protoc_insertion_point(class_definition:builra3.NamedDirectoryEntry) */ {
 public:
  inline NamedDirectoryEntry() : NamedDirectoryEntry(nullptr) {}
  ~NamedDirectoryEntry() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NamedDirectoryEntry(
      ::Omnira::DataSerialization::internal::ConstantInitialized);

  inline NamedDirectoryEntry(const NamedDirectoryEntry& from) : NamedDirectoryEntry(nullptr, from) {}
  inline NamedDirectoryEntry(NamedDirectoryEntry&& from) noexcept
      : NamedDirectoryEntry(nullptr, std::move(from)) {}
  inline NamedDirectoryEntry& operator=(const NamedDirectoryEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamedDirectoryEntry& operator=(NamedDirectoryEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::Omnira::DataSerialization::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>(::Omnira::DataSerialization::UnknownFieldSet::default_instance);
  }
  inline ::Omnira::DataSerialization::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>();
  }

  static const ::Omnira::DataSerialization::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::Omnira::DataSerialization::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::Omnira::DataSerialization::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NamedDirectoryEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const NamedDirectoryEntry* internal_default_instance() {
    return reinterpret_cast<const NamedDirectoryEntry*>(
        &_NamedDirectoryEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(NamedDirectoryEntry& a, NamedDirectoryEntry& b) { a.Swap(&b); }
  inline void Swap(NamedDirectoryEntry* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::Omnira::DataSerialization::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamedDirectoryEntry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NamedDirectoryEntry* New(::Omnira::DataSerialization::Arena* arena = nullptr) const final {
    return ::Omnira::DataSerialization::Message::DefaultConstruct<NamedDirectoryEntry>(arena);
  }
  using ::Omnira::DataSerialization::Message::CopyFrom;
  void CopyFrom(const NamedDirectoryEntry& from);
  using ::Omnira::DataSerialization::Message::MergeFrom;
  void MergeFrom(const NamedDirectoryEntry& from) { NamedDirectoryEntry::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::Omnira::DataSerialization::MessageLite& to_msg,
      const ::Omnira::DataSerialization::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::Omnira::DataSerialization::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::Omnira::DataSerialization::Arena* arena);
  void SharedDtor();
  void InternalSwap(NamedDirectoryEntry* other);
 private:
  friend class ::Omnira::DataSerialization::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "builra3.NamedDirectoryEntry"; }

 protected:
  explicit NamedDirectoryEntry(::Omnira::DataSerialization::Arena* arena);
  NamedDirectoryEntry(::Omnira::DataSerialization::Arena* arena, const NamedDirectoryEntry& from);
  NamedDirectoryEntry(::Omnira::DataSerialization::Arena* arena, NamedDirectoryEntry&& from) noexcept
      : NamedDirectoryEntry(arena) {
    *this = ::std::move(from);
  }
  const ::Omnira::DataSerialization::Message::ClassData* GetClassData() const final;

 public:
  ::Omnira::DataSerialization::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kPosixDetailsFieldNumber = 4,
    kSizeFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .builra3.PosixFileDetails posixDetails = 4;
  bool has_posixdetails() const;
  void clear_posixdetails() ;
  const ::builra3::PosixFileDetails& posixdetails() const;
  PROTOBUF_NODISCARD ::builra3::PosixFileDetails* release_posixdetails();
  ::builra3::PosixFileDetails* mutable_posixdetails();
  void set_allocated_posixdetails(::builra3::PosixFileDetails* value);
  void unsafe_arena_set_allocated_posixdetails(::builra3::PosixFileDetails* value);
  ::builra3::PosixFileDetails* unsafe_arena_release_posixdetails();

  private:
  const ::builra3::PosixFileDetails& _internal_posixdetails() const;
  ::builra3::PosixFileDetails* _internal_mutable_posixdetails();

  public:
  // uint64 size = 3;
  void clear_size() ;
  ::uint64_t size() const;
  void set_size(::uint64_t value);

  private:
  ::uint64_t _internal_size() const;
  void _internal_set_size(::uint64_t value);

  public:
  // .builra3.FileType type = 2;
  void clear_type() ;
  ::builra3::FileType type() const;
  void set_type(::builra3::FileType value);

  private:
  ::builra3::FileType _internal_type() const;
  void _internal_set_type(::builra3::FileType value);

  public:
  // @@protoc_insertion_point(class_scope:builra3.NamedDirectoryEntry)
 private:
  class _Internal;
  friend class ::Omnira::DataSerialization::internal::TcParser;
  static const ::Omnira::DataSerialization::internal::TcParseTable<
      2, 4, 1,
      41, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NamedDirectoryEntry_default_instance_;

  friend class ::Omnira::DataSerialization::MessageLite;
  friend class ::Omnira::DataSerialization::Arena;
  template <typename T>
  friend class ::Omnira::DataSerialization::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::Omnira::DataSerialization::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena);
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena, const Impl_& from,
                          const NamedDirectoryEntry& from_msg);
    ::Omnira::DataSerialization::internal::HasBits<1> _has_bits_;
    mutable ::Omnira::DataSerialization::internal::CachedSize _cached_size_;
    ::Omnira::DataSerialization::internal::ArenaStringPtr name_;
    ::builra3::PosixFileDetails* posixdetails_;
    ::uint64_t size_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_builra3_2fCASTree_2eproto;
};
// -------------------------------------------------------------------

class NamedDirectoryEntries final : public ::Omnira::DataSerialization::Message
/* @@protoc_insertion_point(class_definition:builra3.NamedDirectoryEntries) */ {
 public:
  inline NamedDirectoryEntries() : NamedDirectoryEntries(nullptr) {}
  ~NamedDirectoryEntries() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NamedDirectoryEntries(
      ::Omnira::DataSerialization::internal::ConstantInitialized);

  inline NamedDirectoryEntries(const NamedDirectoryEntries& from) : NamedDirectoryEntries(nullptr, from) {}
  inline NamedDirectoryEntries(NamedDirectoryEntries&& from) noexcept
      : NamedDirectoryEntries(nullptr, std::move(from)) {}
  inline NamedDirectoryEntries& operator=(const NamedDirectoryEntries& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamedDirectoryEntries& operator=(NamedDirectoryEntries&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::Omnira::DataSerialization::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>(::Omnira::DataSerialization::UnknownFieldSet::default_instance);
  }
  inline ::Omnira::DataSerialization::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>();
  }

  static const ::Omnira::DataSerialization::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::Omnira::DataSerialization::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::Omnira::DataSerialization::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NamedDirectoryEntries& default_instance() {
    return *internal_default_instance();
  }
  static inline const NamedDirectoryEntries* internal_default_instance() {
    return reinterpret_cast<const NamedDirectoryEntries*>(
        &_NamedDirectoryEntries_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(NamedDirectoryEntries& a, NamedDirectoryEntries& b) { a.Swap(&b); }
  inline void Swap(NamedDirectoryEntries* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::Omnira::DataSerialization::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamedDirectoryEntries* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NamedDirectoryEntries* New(::Omnira::DataSerialization::Arena* arena = nullptr) const final {
    return ::Omnira::DataSerialization::Message::DefaultConstruct<NamedDirectoryEntries>(arena);
  }
  using ::Omnira::DataSerialization::Message::CopyFrom;
  void CopyFrom(const NamedDirectoryEntries& from);
  using ::Omnira::DataSerialization::Message::MergeFrom;
  void MergeFrom(const NamedDirectoryEntries& from) { NamedDirectoryEntries::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::Omnira::DataSerialization::MessageLite& to_msg,
      const ::Omnira::DataSerialization::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::Omnira::DataSerialization::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::Omnira::DataSerialization::Arena* arena);
  void SharedDtor();
  void InternalSwap(NamedDirectoryEntries* other);
 private:
  friend class ::Omnira::DataSerialization::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "builra3.NamedDirectoryEntries"; }

 protected:
  explicit NamedDirectoryEntries(::Omnira::DataSerialization::Arena* arena);
  NamedDirectoryEntries(::Omnira::DataSerialization::Arena* arena, const NamedDirectoryEntries& from);
  NamedDirectoryEntries(::Omnira::DataSerialization::Arena* arena, NamedDirectoryEntries&& from) noexcept
      : NamedDirectoryEntries(arena) {
    *this = ::std::move(from);
  }
  const ::Omnira::DataSerialization::Message::ClassData* GetClassData() const final;

 public:
  ::Omnira::DataSerialization::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .builra3.NamedDirectoryEntry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;

  public:
  void clear_entries() ;
  ::builra3::NamedDirectoryEntry* mutable_entries(int index);
  ::Omnira::DataSerialization::RepeatedPtrField<::builra3::NamedDirectoryEntry>* mutable_entries();

  private:
  const ::Omnira::DataSerialization::RepeatedPtrField<::builra3::NamedDirectoryEntry>& _internal_entries() const;
  ::Omnira::DataSerialization::RepeatedPtrField<::builra3::NamedDirectoryEntry>* _internal_mutable_entries();
  public:
  const ::builra3::NamedDirectoryEntry& entries(int index) const;
  ::builra3::NamedDirectoryEntry* add_entries();
  const ::Omnira::DataSerialization::RepeatedPtrField<::builra3::NamedDirectoryEntry>& entries() const;
  // @@protoc_insertion_point(class_scope:builra3.NamedDirectoryEntries)
 private:
  class _Internal;
  friend class ::Omnira::DataSerialization::internal::TcParser;
  static const ::Omnira::DataSerialization::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NamedDirectoryEntries_default_instance_;

  friend class ::Omnira::DataSerialization::MessageLite;
  friend class ::Omnira::DataSerialization::Arena;
  template <typename T>
  friend class ::Omnira::DataSerialization::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::Omnira::DataSerialization::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena);
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena, const Impl_& from,
                          const NamedDirectoryEntries& from_msg);
    ::Omnira::DataSerialization::RepeatedPtrField< ::builra3::NamedDirectoryEntry > entries_;
    mutable ::Omnira::DataSerialization::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_builra3_2fCASTree_2eproto;
};
// -------------------------------------------------------------------

class FileInformation final : public ::Omnira::DataSerialization::Message
/* @@protoc_insertion_point(class_definition:builra3.FileInformation) */ {
 public:
  inline FileInformation() : FileInformation(nullptr) {}
  ~FileInformation() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileInformation(
      ::Omnira::DataSerialization::internal::ConstantInitialized);

  inline FileInformation(const FileInformation& from) : FileInformation(nullptr, from) {}
  inline FileInformation(FileInformation&& from) noexcept
      : FileInformation(nullptr, std::move(from)) {}
  inline FileInformation& operator=(const FileInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInformation& operator=(FileInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::Omnira::DataSerialization::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>(::Omnira::DataSerialization::UnknownFieldSet::default_instance);
  }
  inline ::Omnira::DataSerialization::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::Omnira::DataSerialization::UnknownFieldSet>();
  }

  static const ::Omnira::DataSerialization::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::Omnira::DataSerialization::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::Omnira::DataSerialization::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileInformation& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kFixedChunkSize = 11,
    kInlineChildren = 12,
    kReferencedChildrenTree = 13,
    PAYLOAD_NOT_SET = 0,
  };
  static inline const FileInformation* internal_default_instance() {
    return reinterpret_cast<const FileInformation*>(
        &_FileInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(FileInformation& a, FileInformation& b) { a.Swap(&b); }
  inline void Swap(FileInformation* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::Omnira::DataSerialization::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileInformation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileInformation* New(::Omnira::DataSerialization::Arena* arena = nullptr) const final {
    return ::Omnira::DataSerialization::Message::DefaultConstruct<FileInformation>(arena);
  }
  using ::Omnira::DataSerialization::Message::CopyFrom;
  void CopyFrom(const FileInformation& from);
  using ::Omnira::DataSerialization::Message::MergeFrom;
  void MergeFrom(const FileInformation& from) { FileInformation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::Omnira::DataSerialization::MessageLite& to_msg,
      const ::Omnira::DataSerialization::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::Omnira::DataSerialization::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::Omnira::DataSerialization::Arena* arena);
  void SharedDtor();
  void InternalSwap(FileInformation* other);
 private:
  friend class ::Omnira::DataSerialization::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "builra3.FileInformation"; }

 protected:
  explicit FileInformation(::Omnira::DataSerialization::Arena* arena);
  FileInformation(::Omnira::DataSerialization::Arena* arena, const FileInformation& from);
  FileInformation(::Omnira::DataSerialization::Arena* arena, FileInformation&& from) noexcept
      : FileInformation(arena) {
    *this = ::std::move(from);
  }
  const ::Omnira::DataSerialization::Message::ClassData* GetClassData() const final;

 public:
  ::Omnira::DataSerialization::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPosixDetailsFieldNumber = 5,
    kSizeFieldNumber = 2,
    kTypeFieldNumber = 1,
    kCompressionFieldNumber = 4,
    kFixedChunkSizeFieldNumber = 11,
    kInlineChildrenFieldNumber = 12,
    kReferencedChildrenTreeFieldNumber = 13,
  };
  // .builra3.PosixFileDetails posixDetails = 5;
  bool has_posixdetails() const;
  void clear_posixdetails() ;
  const ::builra3::PosixFileDetails& posixdetails() const;
  PROTOBUF_NODISCARD ::builra3::PosixFileDetails* release_posixdetails();
  ::builra3::PosixFileDetails* mutable_posixdetails();
  void set_allocated_posixdetails(::builra3::PosixFileDetails* value);
  void unsafe_arena_set_allocated_posixdetails(::builra3::PosixFileDetails* value);
  ::builra3::PosixFileDetails* unsafe_arena_release_posixdetails();

  private:
  const ::builra3::PosixFileDetails& _internal_posixdetails() const;
  ::builra3::PosixFileDetails* _internal_mutable_posixdetails();

  public:
  // uint64 size = 2;
  void clear_size() ;
  ::uint64_t size() const;
  void set_size(::uint64_t value);

  private:
  ::uint64_t _internal_size() const;
  void _internal_set_size(::uint64_t value);

  public:
  // .builra3.FileType type = 1;
  void clear_type() ;
  ::builra3::FileType type() const;
  void set_type(::builra3::FileType value);

  private:
  ::builra3::FileType _internal_type() const;
  void _internal_set_type(::builra3::FileType value);

  public:
  // .builra3.FileDataCompressionMethod compression = 4;
  void clear_compression() ;
  ::builra3::FileDataCompressionMethod compression() const;
  void set_compression(::builra3::FileDataCompressionMethod value);

  private:
  ::builra3::FileDataCompressionMethod _internal_compression() const;
  void _internal_set_compression(::builra3::FileDataCompressionMethod value);

  public:
  // uint64 fixedChunkSize = 11;
  bool has_fixedchunksize() const;
  void clear_fixedchunksize() ;
  ::uint64_t fixedchunksize() const;
  void set_fixedchunksize(::uint64_t value);

  private:
  ::uint64_t _internal_fixedchunksize() const;
  void _internal_set_fixedchunksize(::uint64_t value);

  public:
  // .builra3.NamedDirectoryEntries inlineChildren = 12;
  bool has_inlinechildren() const;
  private:
  bool _internal_has_inlinechildren() const;

  public:
  void clear_inlinechildren() ;
  const ::builra3::NamedDirectoryEntries& inlinechildren() const;
  PROTOBUF_NODISCARD ::builra3::NamedDirectoryEntries* release_inlinechildren();
  ::builra3::NamedDirectoryEntries* mutable_inlinechildren();
  void set_allocated_inlinechildren(::builra3::NamedDirectoryEntries* value);
  void unsafe_arena_set_allocated_inlinechildren(::builra3::NamedDirectoryEntries* value);
  ::builra3::NamedDirectoryEntries* unsafe_arena_release_inlinechildren();

  private:
  const ::builra3::NamedDirectoryEntries& _internal_inlinechildren() const;
  ::builra3::NamedDirectoryEntries* _internal_mutable_inlinechildren();

  public:
  // uint32 referencedChildrenTree = 13;
  bool has_referencedchildrentree() const;
  void clear_referencedchildrentree() ;
  ::uint32_t referencedchildrentree() const;
  void set_referencedchildrentree(::uint32_t value);

  private:
  ::uint32_t _internal_referencedchildrentree() const;
  void _internal_set_referencedchildrentree(::uint32_t value);

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:builra3.FileInformation)
 private:
  class _Internal;
  void set_has_fixedchunksize();
  void set_has_inlinechildren();
  void set_has_referencedchildrentree();
  inline bool has_payload() const;
  inline void clear_has_payload();
  friend class ::Omnira::DataSerialization::internal::TcParser;
  static const ::Omnira::DataSerialization::internal::TcParseTable<
      3, 7, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_FileInformation_default_instance_;

  friend class ::Omnira::DataSerialization::MessageLite;
  friend class ::Omnira::DataSerialization::Arena;
  template <typename T>
  friend class ::Omnira::DataSerialization::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::Omnira::DataSerialization::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena);
    inline explicit Impl_(::Omnira::DataSerialization::internal::InternalVisibility visibility,
                          ::Omnira::DataSerialization::Arena* arena, const Impl_& from,
                          const FileInformation& from_msg);
    ::Omnira::DataSerialization::internal::HasBits<1> _has_bits_;
    mutable ::Omnira::DataSerialization::internal::CachedSize _cached_size_;
    ::builra3::PosixFileDetails* posixdetails_;
    ::uint64_t size_;
    int type_;
    int compression_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
      ::Omnira::DataSerialization::internal::ConstantInitialized _constinit_;
      ::uint64_t fixedchunksize_;
      ::builra3::NamedDirectoryEntries* inlinechildren_;
      ::uint32_t referencedchildrentree_;
    } payload_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_builra3_2fCASTree_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PosixFileDetails

// uint32 mode = 1;
inline void PosixFileDetails::clear_mode() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.mode_ = 0u;
}
inline ::uint32_t PosixFileDetails::mode() const {
  // @@protoc_insertion_point(field_get:builra3.PosixFileDetails.mode)
  return _internal_mode();
}
inline void PosixFileDetails::set_mode(::uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:builra3.PosixFileDetails.mode)
}
inline ::uint32_t PosixFileDetails::_internal_mode() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return _impl_.mode_;
}
inline void PosixFileDetails::_internal_set_mode(::uint32_t value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.mode_ = value;
}

// uint32 owner = 2;
inline void PosixFileDetails::clear_owner() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.owner_ = 0u;
}
inline ::uint32_t PosixFileDetails::owner() const {
  // @@protoc_insertion_point(field_get:builra3.PosixFileDetails.owner)
  return _internal_owner();
}
inline void PosixFileDetails::set_owner(::uint32_t value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:builra3.PosixFileDetails.owner)
}
inline ::uint32_t PosixFileDetails::_internal_owner() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return _impl_.owner_;
}
inline void PosixFileDetails::_internal_set_owner(::uint32_t value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.owner_ = value;
}

// uint32 group = 3;
inline void PosixFileDetails::clear_group() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.group_ = 0u;
}
inline ::uint32_t PosixFileDetails::group() const {
  // @@protoc_insertion_point(field_get:builra3.PosixFileDetails.group)
  return _internal_group();
}
inline void PosixFileDetails::set_group(::uint32_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:builra3.PosixFileDetails.group)
}
inline ::uint32_t PosixFileDetails::_internal_group() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return _impl_.group_;
}
inline void PosixFileDetails::_internal_set_group(::uint32_t value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.group_ = value;
}

// -------------------------------------------------------------------

// NamedDirectoryEntry

// string name = 1;
inline void NamedDirectoryEntry::clear_name() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& NamedDirectoryEntry::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.NamedDirectoryEntry.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NamedDirectoryEntry::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:builra3.NamedDirectoryEntry.name)
}
inline std::string* NamedDirectoryEntry::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:builra3.NamedDirectoryEntry.name)
  return _s;
}
inline const std::string& NamedDirectoryEntry::_internal_name() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void NamedDirectoryEntry::_internal_set_name(const std::string& value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* NamedDirectoryEntry::_internal_mutable_name() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* NamedDirectoryEntry::release_name() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:builra3.NamedDirectoryEntry.name)
  return _impl_.name_.Release();
}
inline void NamedDirectoryEntry::set_allocated_name(std::string* value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:builra3.NamedDirectoryEntry.name)
}

// .builra3.FileType type = 2;
inline void NamedDirectoryEntry::clear_type() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::builra3::FileType NamedDirectoryEntry::type() const {
  // @@protoc_insertion_point(field_get:builra3.NamedDirectoryEntry.type)
  return _internal_type();
}
inline void NamedDirectoryEntry::set_type(::builra3::FileType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:builra3.NamedDirectoryEntry.type)
}
inline ::builra3::FileType NamedDirectoryEntry::_internal_type() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return static_cast<::builra3::FileType>(_impl_.type_);
}
inline void NamedDirectoryEntry::_internal_set_type(::builra3::FileType value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// uint64 size = 3;
inline void NamedDirectoryEntry::clear_size() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.size_ = ::uint64_t{0u};
}
inline ::uint64_t NamedDirectoryEntry::size() const {
  // @@protoc_insertion_point(field_get:builra3.NamedDirectoryEntry.size)
  return _internal_size();
}
inline void NamedDirectoryEntry::set_size(::uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:builra3.NamedDirectoryEntry.size)
}
inline ::uint64_t NamedDirectoryEntry::_internal_size() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return _impl_.size_;
}
inline void NamedDirectoryEntry::_internal_set_size(::uint64_t value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.size_ = value;
}

// .builra3.PosixFileDetails posixDetails = 4;
inline bool NamedDirectoryEntry::has_posixdetails() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.posixdetails_ != nullptr);
  return value;
}
inline void NamedDirectoryEntry::clear_posixdetails() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (_impl_.posixdetails_ != nullptr) _impl_.posixdetails_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::builra3::PosixFileDetails& NamedDirectoryEntry::_internal_posixdetails() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  const ::builra3::PosixFileDetails* p = _impl_.posixdetails_;
  return p != nullptr ? *p : reinterpret_cast<const ::builra3::PosixFileDetails&>(::builra3::_PosixFileDetails_default_instance_);
}
inline const ::builra3::PosixFileDetails& NamedDirectoryEntry::posixdetails() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.NamedDirectoryEntry.posixDetails)
  return _internal_posixdetails();
}
inline void NamedDirectoryEntry::unsafe_arena_set_allocated_posixdetails(::builra3::PosixFileDetails* value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::Omnira::DataSerialization::MessageLite*>(_impl_.posixdetails_);
  }
  _impl_.posixdetails_ = reinterpret_cast<::builra3::PosixFileDetails*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:builra3.NamedDirectoryEntry.posixDetails)
}
inline ::builra3::PosixFileDetails* NamedDirectoryEntry::release_posixdetails() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::builra3::PosixFileDetails* released = _impl_.posixdetails_;
  _impl_.posixdetails_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::Omnira::DataSerialization::MessageLite*>(released);
  released = ::Omnira::DataSerialization::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::Omnira::DataSerialization::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::builra3::PosixFileDetails* NamedDirectoryEntry::unsafe_arena_release_posixdetails() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:builra3.NamedDirectoryEntry.posixDetails)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::builra3::PosixFileDetails* temp = _impl_.posixdetails_;
  _impl_.posixdetails_ = nullptr;
  return temp;
}
inline ::builra3::PosixFileDetails* NamedDirectoryEntry::_internal_mutable_posixdetails() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (_impl_.posixdetails_ == nullptr) {
    auto* p = ::Omnira::DataSerialization::Message::DefaultConstruct<::builra3::PosixFileDetails>(GetArena());
    _impl_.posixdetails_ = reinterpret_cast<::builra3::PosixFileDetails*>(p);
  }
  return _impl_.posixdetails_;
}
inline ::builra3::PosixFileDetails* NamedDirectoryEntry::mutable_posixdetails() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::builra3::PosixFileDetails* _msg = _internal_mutable_posixdetails();
  // @@protoc_insertion_point(field_mutable:builra3.NamedDirectoryEntry.posixDetails)
  return _msg;
}
inline void NamedDirectoryEntry::set_allocated_posixdetails(::builra3::PosixFileDetails* value) {
  ::Omnira::DataSerialization::Arena* message_arena = GetArena();
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.posixdetails_);
  }

  if (value != nullptr) {
    ::Omnira::DataSerialization::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::Omnira::DataSerialization::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.posixdetails_ = reinterpret_cast<::builra3::PosixFileDetails*>(value);
  // @@protoc_insertion_point(field_set_allocated:builra3.NamedDirectoryEntry.posixDetails)
}

// -------------------------------------------------------------------

// NamedDirectoryEntries

// repeated .builra3.NamedDirectoryEntry entries = 1;
inline int NamedDirectoryEntries::_internal_entries_size() const {
  return _internal_entries().size();
}
inline int NamedDirectoryEntries::entries_size() const {
  return _internal_entries_size();
}
inline void NamedDirectoryEntries::clear_entries() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.entries_.Clear();
}
inline ::builra3::NamedDirectoryEntry* NamedDirectoryEntries::mutable_entries(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:builra3.NamedDirectoryEntries.entries)
  return _internal_mutable_entries()->Mutable(index);
}
inline ::Omnira::DataSerialization::RepeatedPtrField<::builra3::NamedDirectoryEntry>* NamedDirectoryEntries::mutable_entries()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:builra3.NamedDirectoryEntries.entries)
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  return _internal_mutable_entries();
}
inline const ::builra3::NamedDirectoryEntry& NamedDirectoryEntries::entries(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.NamedDirectoryEntries.entries)
  return _internal_entries().Get(index);
}
inline ::builra3::NamedDirectoryEntry* NamedDirectoryEntries::add_entries() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  ::builra3::NamedDirectoryEntry* _add = _internal_mutable_entries()->Add();
  // @@protoc_insertion_point(field_add:builra3.NamedDirectoryEntries.entries)
  return _add;
}
inline const ::Omnira::DataSerialization::RepeatedPtrField<::builra3::NamedDirectoryEntry>& NamedDirectoryEntries::entries() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:builra3.NamedDirectoryEntries.entries)
  return _internal_entries();
}
inline const ::Omnira::DataSerialization::RepeatedPtrField<::builra3::NamedDirectoryEntry>&
NamedDirectoryEntries::_internal_entries() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return _impl_.entries_;
}
inline ::Omnira::DataSerialization::RepeatedPtrField<::builra3::NamedDirectoryEntry>*
NamedDirectoryEntries::_internal_mutable_entries() {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return &_impl_.entries_;
}

// -------------------------------------------------------------------

// FileInformation

// .builra3.FileType type = 1;
inline void FileInformation::clear_type() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::builra3::FileType FileInformation::type() const {
  // @@protoc_insertion_point(field_get:builra3.FileInformation.type)
  return _internal_type();
}
inline void FileInformation::set_type(::builra3::FileType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:builra3.FileInformation.type)
}
inline ::builra3::FileType FileInformation::_internal_type() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return static_cast<::builra3::FileType>(_impl_.type_);
}
inline void FileInformation::_internal_set_type(::builra3::FileType value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// uint64 size = 2;
inline void FileInformation::clear_size() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.size_ = ::uint64_t{0u};
}
inline ::uint64_t FileInformation::size() const {
  // @@protoc_insertion_point(field_get:builra3.FileInformation.size)
  return _internal_size();
}
inline void FileInformation::set_size(::uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:builra3.FileInformation.size)
}
inline ::uint64_t FileInformation::_internal_size() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return _impl_.size_;
}
inline void FileInformation::_internal_set_size(::uint64_t value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.size_ = value;
}

// .builra3.FileDataCompressionMethod compression = 4;
inline void FileInformation::clear_compression() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.compression_ = 0;
}
inline ::builra3::FileDataCompressionMethod FileInformation::compression() const {
  // @@protoc_insertion_point(field_get:builra3.FileInformation.compression)
  return _internal_compression();
}
inline void FileInformation::set_compression(::builra3::FileDataCompressionMethod value) {
  _internal_set_compression(value);
  // @@protoc_insertion_point(field_set:builra3.FileInformation.compression)
}
inline ::builra3::FileDataCompressionMethod FileInformation::_internal_compression() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  return static_cast<::builra3::FileDataCompressionMethod>(_impl_.compression_);
}
inline void FileInformation::_internal_set_compression(::builra3::FileDataCompressionMethod value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  _impl_.compression_ = value;
}

// .builra3.PosixFileDetails posixDetails = 5;
inline bool FileInformation::has_posixdetails() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.posixdetails_ != nullptr);
  return value;
}
inline void FileInformation::clear_posixdetails() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (_impl_.posixdetails_ != nullptr) _impl_.posixdetails_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::builra3::PosixFileDetails& FileInformation::_internal_posixdetails() const {
  ::Omnira::DataSerialization::internal::TSanRead(&_impl_);
  const ::builra3::PosixFileDetails* p = _impl_.posixdetails_;
  return p != nullptr ? *p : reinterpret_cast<const ::builra3::PosixFileDetails&>(::builra3::_PosixFileDetails_default_instance_);
}
inline const ::builra3::PosixFileDetails& FileInformation::posixdetails() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.FileInformation.posixDetails)
  return _internal_posixdetails();
}
inline void FileInformation::unsafe_arena_set_allocated_posixdetails(::builra3::PosixFileDetails* value) {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::Omnira::DataSerialization::MessageLite*>(_impl_.posixdetails_);
  }
  _impl_.posixdetails_ = reinterpret_cast<::builra3::PosixFileDetails*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:builra3.FileInformation.posixDetails)
}
inline ::builra3::PosixFileDetails* FileInformation::release_posixdetails() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::builra3::PosixFileDetails* released = _impl_.posixdetails_;
  _impl_.posixdetails_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::Omnira::DataSerialization::MessageLite*>(released);
  released = ::Omnira::DataSerialization::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::Omnira::DataSerialization::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::builra3::PosixFileDetails* FileInformation::unsafe_arena_release_posixdetails() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:builra3.FileInformation.posixDetails)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::builra3::PosixFileDetails* temp = _impl_.posixdetails_;
  _impl_.posixdetails_ = nullptr;
  return temp;
}
inline ::builra3::PosixFileDetails* FileInformation::_internal_mutable_posixdetails() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (_impl_.posixdetails_ == nullptr) {
    auto* p = ::Omnira::DataSerialization::Message::DefaultConstruct<::builra3::PosixFileDetails>(GetArena());
    _impl_.posixdetails_ = reinterpret_cast<::builra3::PosixFileDetails*>(p);
  }
  return _impl_.posixdetails_;
}
inline ::builra3::PosixFileDetails* FileInformation::mutable_posixdetails() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::builra3::PosixFileDetails* _msg = _internal_mutable_posixdetails();
  // @@protoc_insertion_point(field_mutable:builra3.FileInformation.posixDetails)
  return _msg;
}
inline void FileInformation::set_allocated_posixdetails(::builra3::PosixFileDetails* value) {
  ::Omnira::DataSerialization::Arena* message_arena = GetArena();
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.posixdetails_);
  }

  if (value != nullptr) {
    ::Omnira::DataSerialization::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::Omnira::DataSerialization::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.posixdetails_ = reinterpret_cast<::builra3::PosixFileDetails*>(value);
  // @@protoc_insertion_point(field_set_allocated:builra3.FileInformation.posixDetails)
}

// uint64 fixedChunkSize = 11;
inline bool FileInformation::has_fixedchunksize() const {
  return payload_case() == kFixedChunkSize;
}
inline void FileInformation::set_has_fixedchunksize() {
  _impl_._oneof_case_[0] = kFixedChunkSize;
}
inline void FileInformation::clear_fixedchunksize() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (payload_case() == kFixedChunkSize) {
    _impl_.payload_.fixedchunksize_ = ::uint64_t{0u};
    clear_has_payload();
  }
}
inline ::uint64_t FileInformation::fixedchunksize() const {
  // @@protoc_insertion_point(field_get:builra3.FileInformation.fixedChunkSize)
  return _internal_fixedchunksize();
}
inline void FileInformation::set_fixedchunksize(::uint64_t value) {
  if (payload_case() != kFixedChunkSize) {
    clear_payload();
    set_has_fixedchunksize();
  }
  _impl_.payload_.fixedchunksize_ = value;
  // @@protoc_insertion_point(field_set:builra3.FileInformation.fixedChunkSize)
}
inline ::uint64_t FileInformation::_internal_fixedchunksize() const {
  if (payload_case() == kFixedChunkSize) {
    return _impl_.payload_.fixedchunksize_;
  }
  return ::uint64_t{0u};
}

// .builra3.NamedDirectoryEntries inlineChildren = 12;
inline bool FileInformation::has_inlinechildren() const {
  return payload_case() == kInlineChildren;
}
inline bool FileInformation::_internal_has_inlinechildren() const {
  return payload_case() == kInlineChildren;
}
inline void FileInformation::set_has_inlinechildren() {
  _impl_._oneof_case_[0] = kInlineChildren;
}
inline void FileInformation::clear_inlinechildren() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (payload_case() == kInlineChildren) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.inlinechildren_;
    } else if (::Omnira::DataSerialization::internal::DebugHardenClearOneofMessageOnArena()) {
      ::Omnira::DataSerialization::internal::MaybePoisonAfterClear(_impl_.payload_.inlinechildren_);
    }
    clear_has_payload();
  }
}
inline ::builra3::NamedDirectoryEntries* FileInformation::release_inlinechildren() {
  // @@protoc_insertion_point(field_release:builra3.FileInformation.inlineChildren)
  if (payload_case() == kInlineChildren) {
    clear_has_payload();
    auto* temp = _impl_.payload_.inlinechildren_;
    if (GetArena() != nullptr) {
      temp = ::Omnira::DataSerialization::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.inlinechildren_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::builra3::NamedDirectoryEntries& FileInformation::_internal_inlinechildren() const {
  return payload_case() == kInlineChildren ? *_impl_.payload_.inlinechildren_ : reinterpret_cast<::builra3::NamedDirectoryEntries&>(::builra3::_NamedDirectoryEntries_default_instance_);
}
inline const ::builra3::NamedDirectoryEntries& FileInformation::inlinechildren() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:builra3.FileInformation.inlineChildren)
  return _internal_inlinechildren();
}
inline ::builra3::NamedDirectoryEntries* FileInformation::unsafe_arena_release_inlinechildren() {
  // @@protoc_insertion_point(field_unsafe_arena_release:builra3.FileInformation.inlineChildren)
  if (payload_case() == kInlineChildren) {
    clear_has_payload();
    auto* temp = _impl_.payload_.inlinechildren_;
    _impl_.payload_.inlinechildren_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileInformation::unsafe_arena_set_allocated_inlinechildren(::builra3::NamedDirectoryEntries* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_inlinechildren();
    _impl_.payload_.inlinechildren_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:builra3.FileInformation.inlineChildren)
}
inline ::builra3::NamedDirectoryEntries* FileInformation::_internal_mutable_inlinechildren() {
  if (payload_case() != kInlineChildren) {
    clear_payload();
    set_has_inlinechildren();
    _impl_.payload_.inlinechildren_ =
        ::Omnira::DataSerialization::Message::DefaultConstruct<::builra3::NamedDirectoryEntries>(GetArena());
  }
  return _impl_.payload_.inlinechildren_;
}
inline ::builra3::NamedDirectoryEntries* FileInformation::mutable_inlinechildren() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::builra3::NamedDirectoryEntries* _msg = _internal_mutable_inlinechildren();
  // @@protoc_insertion_point(field_mutable:builra3.FileInformation.inlineChildren)
  return _msg;
}

// uint32 referencedChildrenTree = 13;
inline bool FileInformation::has_referencedchildrentree() const {
  return payload_case() == kReferencedChildrenTree;
}
inline void FileInformation::set_has_referencedchildrentree() {
  _impl_._oneof_case_[0] = kReferencedChildrenTree;
}
inline void FileInformation::clear_referencedchildrentree() {
  ::Omnira::DataSerialization::internal::TSanWrite(&_impl_);
  if (payload_case() == kReferencedChildrenTree) {
    _impl_.payload_.referencedchildrentree_ = 0u;
    clear_has_payload();
  }
}
inline ::uint32_t FileInformation::referencedchildrentree() const {
  // @@protoc_insertion_point(field_get:builra3.FileInformation.referencedChildrenTree)
  return _internal_referencedchildrentree();
}
inline void FileInformation::set_referencedchildrentree(::uint32_t value) {
  if (payload_case() != kReferencedChildrenTree) {
    clear_payload();
    set_has_referencedchildrentree();
  }
  _impl_.payload_.referencedchildrentree_ = value;
  // @@protoc_insertion_point(field_set:builra3.FileInformation.referencedChildrenTree)
}
inline ::uint32_t FileInformation::_internal_referencedchildrentree() const {
  if (payload_case() == kReferencedChildrenTree) {
    return _impl_.payload_.referencedchildrentree_;
  }
  return 0u;
}

inline bool FileInformation::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void FileInformation::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline FileInformation::PayloadCase FileInformation::payload_case() const {
  return FileInformation::PayloadCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace builra3


namespace Omnira {
namespace DataSerialization {

template <>
struct is_proto_enum<::builra3::FileType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::builra3::FileType>() {
  return ::builra3::FileType_descriptor();
}
template <>
struct is_proto_enum<::builra3::FileDataCompressionMethod> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::builra3::FileDataCompressionMethod>() {
  return ::builra3::FileDataCompressionMethod_descriptor();
}

}  // namespace DataSerialization
}  // namespace Omnira

// @@protoc_insertion_point(global_scope)

#include "Omnira/DataSerialization/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_builra3_2fCASTree_2eproto_2epb_2eh
