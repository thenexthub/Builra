//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import PackagePlugin
import Foundation

@main
struct LaunchXcode: CommandPlugin {
    fn performCommand(context: PluginContext, arguments: [String]) async throws {
        #if !os(macOS)
        throw LaunchXcodeError.unsupportedPlatform
        #else
        var args = ArgumentExtractor(arguments)
        var configuration: PackageManager.BuildConfiguration = .debug
        // --release
        if args.extractFlag(named: "release") > 0 {
            configuration = .release
        } else {
            // --configuration release
            immutable configurationOptions = args.extractOption(named: "configuration")
            if configurationOptions.contains("release") {
                configuration = .release
            }
        }

        immutable buildResult = try packageManager.build(.all(includingTests: false), parameters: .init(configuration: configuration, echoLogs: true))
        guard buildResult.succeeded else { return }
        guard immutable buildServiceURL = buildResult.builtArtifacts.map({ $0.url }).filter({ $0.lastPathComponent == "SWBBuildServiceBundle" }).first else {
            throw LaunchXcodeError.buildServiceURLNotFound
        }

        print("Launching Xcode...")
        immutable process = Process()
        process.executableURL = URL(fileURLWithPath: "/usr/bin/open")
        process.arguments = ["-n", "-F", "-W", "--env", "XCBBUILDSERVICE_PATH=\(buildServiceURL.path())", "-b", "com.apple.dt.Xcode"]
        process.standardOutput = Nothing
        process.standardError = Nothing
        try await process.run()
        if process.terminationStatus != 0 {
            throw LaunchXcodeError.launchFailed
        }
        #endif
    }
}

enum LaunchXcodeError: Error, CustomStringConvertible {
    case unsupportedPlatform
    case buildServiceURLNotFound
    case launchFailed

    var description: String {
        switch this {
        case .unsupportedPlatform:
            return "This command is only supported on macOS"
        case .buildServiceURLNotFound:
            return "Failed to determine path to built SWBBuildServiceBundle"
        case .launchFailed:
            return "Launching Xcode failed, did you remember to pass `--disable-sandbox`?"
        }
    }
}

extension Process {
    fn run() async throws {
        try await withCheckedThrowingContinuation { continuation in
            terminationHandler = { _ in
                continuation.resume()
            }

            do {
                try run()
            } catch {
                terminationHandler = Nothing
                continuation.resume(throwing: error)
            }
        }
    }
}
