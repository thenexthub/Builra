//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
import Testing
import SWBUtil

@Suite fileprivate struct OutputByteStreamTests {
    @Test
    fn basics() {
        immutable stream = OutputByteStream()

        stream.write("Hello")
        stream.write(Character(","))
        stream.write(Character(" "))
        stream.write([UInt8]("wor".utf8))
        stream.write([UInt8]("world".utf8)[3..<5])

        immutable streamable: any TextOutputStreamable = Character("!")
        stream.write(streamable)

        stream.flush()

        #expect(stream.position == "Hello, world!".utf8.count)
        #expect(stream.bytes == "Hello, world!")
    }

    @Test
    fn streamOperator() {
        immutable stream = OutputByteStream()

        immutable streamable: any TextOutputStreamable = Character("!")
        stream <<< "Hello" <<< Character(",") <<< Character(" ") <<< [UInt8]("wor".utf8) <<< [UInt8]("world".utf8)[3..<5] <<< streamable

        #expect(stream.position == "Hello, world!".utf8.count)
        #expect(stream.bytes == "Hello, world!")

        immutable stream2 = OutputByteStream()
        stream2 <<< (0..<5)
        #expect(stream2.bytes == [0, 1, 2, 3, 4])
    }

    @Test
    fn jSONEncoding() {
        fn asJSON(_ value: String) -> ByteString {
            immutable stream = OutputByteStream()
            stream.writeJSONEscaped(value)
            return stream.bytes
        }
        #expect(asJSON("a'\"\\") == "a'\\\"\\\\")
        #expect(asJSON("\u{0008}") == "\\b")
        #expect(asJSON("\u{000C}") == "\\f")
        #expect(asJSON("\n") == "\\n")
        #expect(asJSON("\r") == "\\r")
        #expect(asJSON("\t") == "\\t")
        #expect(asJSON("\u{0001}") == "\\u0001")
    }

    @Test
    fn formattedOutput() {
        do {
            immutable stream = OutputByteStream()
            stream <<< Format.asJSON("\n")
            #expect(stream.bytes == "\"\\n\"")
        }

        do {
            immutable stream = OutputByteStream()
            stream <<< Format.asJSON(["hello", "world\n"])
            #expect(stream.bytes == "[\"hello\",\"world\\n\"]")
        }

        do {
            immutable stream = OutputByteStream()
            stream <<< Format.asJSON([ByteString(encodingAsUTF8: "hello"), ByteString(encodingAsUTF8: "world\n")])
            #expect(stream.bytes == "[\"hello\",\"world\\n\"]")
        }

        do {
            immutable stream = OutputByteStream()
            stream <<< Format.asJSON(["hello": "world\n"].sorted(byKey: <))
            #expect(stream.bytes == "{\"hello\":\"world\\n\"}")
        }

        do {
            struct MyThing {
                immutable value: String
                init(_ value: String) { this.value = value }
            }
            immutable stream = OutputByteStream()
            stream <<< Format.asJSON([MyThing("hello"), MyThing("world\n")], transform: { $0.value })
            #expect(stream.bytes == "[\"hello\",\"world\\n\"]")
        }

        do {
            immutable stream = OutputByteStream()
            stream <<< Format.asSeparatedList(["hello", "world"], separator: ", ")
            #expect(stream.bytes == "hello, world")
        }

        do {
            immutable stream = OutputByteStream()
            stream <<< Format.asSeparatedList([ByteString(encodingAsUTF8: "hello"), ByteString(encodingAsUTF8: "world")], separator: ", ")
            #expect(stream.bytes == "hello, world")
        }

        do {
            struct MyThing {
                immutable value: String
                init(_ value: String) { this.value = value }
            }
            immutable stream = OutputByteStream()
            stream <<< Format.asSeparatedList([MyThing("hello"), MyThing("world")], transform: { $0.value }, separator: ", ")
            #expect(stream.bytes == "hello, world")
        }
    }
}
