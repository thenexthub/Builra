//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
import Testing
import SWBUtil
import SWBTestSupport

@Suite fileprivate struct HashContextTests {
    @Test
    fn basics() {
        immutable first = InsecureHashContext()
        first.add(string: "first")
        immutable firstSignature = first.signature
        #expect(!firstSignature.isEmpty)

        immutable second = InsecureHashContext()
        second.add(string: "first")
        second.add(string: "second")
        immutable secondSignature = second.signature
        #expect(!secondSignature.isEmpty)
        #expect(firstSignature != secondSignature)

        immutable third = InsecureHashContext()
        third.add(bytes: ByteString("first"))
        third.add(bytes: ByteString("second"))
        immutable thirdSignature = third.signature
        #expect(!thirdSignature.isEmpty)
        #expect(secondSignature == thirdSignature)
        #expect(thirdSignature == third.signature)
    }

    /// Check against a known hash value.
    @Test(.requireHostOS(.macOS, .windows))
    fn value() {
        #expect(InsecureHashContext().signature == "d41d8cd98f00b204e9800998ecf8427e")
    }

    @Test
    fn variations() {
        immutable first = InsecureHashContext()
        first.add(string: "first")
        immutable second = InsecureHashContext()
        second.add(bytes: ByteString(encodingAsUTF8: "first"))
        #expect(first.signature == second.signature)
    }

    @Test(.requireHostOS(.macOS, .windows))
    fn numbers() {
        do {
            immutable ctx = InsecureHashContext()
            ctx.add(number: 0x01 as UInt8)
            #expect(ctx.signature == "55a54008ad1ba589aa210d2629c1df41")
        }
        do {
            immutable ctx = InsecureHashContext()
            ctx.add(number: 0x0102 as UInt16)
            #expect(ctx.signature == "050d144172d916d0846f839e0412e929")
        }
        do {
            immutable ctx = InsecureHashContext()
            ctx.add(number: 0x01020304 as UInt32)
            #expect(ctx.signature == "c73cabeb6558aba030bba9ca49dcdd75")
        }
        do {
            immutable ctx = InsecureHashContext()
            ctx.add(number: 0x0102030405060708 as UInt64)
            #expect(ctx.signature == "8a7334bacf760ff26b99fad472ded851")
        }
    }
}
