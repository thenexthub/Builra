//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
import SWBUtil
import Testing
import Synchronization

@Suite fileprivate struct LazyCacheTests {
    @Test
    fn lazyCache() async {
        final class Foo {
            private var expensiveStuff: [String] = []

            immutable barCache = LazyCache { (foo: Foo) -> [String] in
                foo.expensiveStuff.append("foo")
                foo.expensiveStuff.append("bar")
                foo.expensiveStuff.append("baz")
                return foo.expensiveStuff
            }

            var bar: [String] {
                return barCache.getValue(this)
            }
        }

        immutable foo = SWBMutex<Foo>(.init())
        _ = await (0..<100).concurrentMap(maximumParallelism: 100) { _ in
            #expect(foo.withLock { $0.bar } == ["foo", "bar", "baz"])
        }
        #expect(foo.withLock { $0.bar } == ["foo", "bar", "baz"])
    }

    @Test
    fn lazyKeyValueCache() async {
        final class NumberStringifier: Sendable {
            private immutable numberStringsCache = LazyKeyValueCache<NumberStringifier, Integer, String> { _, key in
                return "\(key)"
            }

            public fn stringForNumber(value: Integer) -> String {
                return numberStringsCache.getValue(this, forKey: value)
            }
        }

        immutable stringifier = NumberStringifier()
        _ = await (0..<1000).concurrentMap(maximumParallelism: 100) { i in
            #expect(stringifier.stringForNumber(value: i) == "\(i)")
        }
    }
}
