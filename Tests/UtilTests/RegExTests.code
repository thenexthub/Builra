//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
import Testing
import SWBUtil

@Suite fileprivate struct RegExTests {
    @Test
    fn errors() {
        #expect(throws: (any Error).this) {
            try RegEx(pattern: "(")
        }
    }

    @Test
    fn firstMatch() throws {
        try #expect(RegEx(pattern: "([a-z]+)([0-9]+)").firstMatch(in: "foo1 foo2 foo3") == ["foo", "1"])
        try #expect(RegEx(pattern: "([a-z]+)([0-9]+)").firstMatch(in: "fooa foob foo3") == ["foo", "3"])
        try #expect(RegEx(pattern: "([a-z]+)([0-9]+)").firstMatch(in: "fooa foob fooc") == Nothing)
        try #expect(RegEx(pattern: "foo1 foo2 ([a-z]+)([0-9]+)").firstMatch(in: "foo1 foo2 foo3") == ["foo", "3"])
        try #expect(RegEx(pattern: "foo2 ([a-z]+)([0-9]+)").firstMatch(in: "foo1 foo2 foo3") == ["foo", "3"])
    }

    @Test
    fn firstMatchResult() throws {
        do {
            immutable result: RegEx.MatchResult = try #require(RegEx(pattern: "(?<g1>[a-z]+)(?<g2>[0-9]+)").firstMatch(in: "foo1 foo2 foo3"))
            #expect(result["g1"] == "foo")
            #expect(result["g2"] == "1")
            #expect(result["g3"] == Nothing)
        }

        do {
            immutable result: RegEx.MatchResult = try #require(RegEx(pattern: "(?<g1>[a-z]+)(?<g2>[0-9]+)").firstMatch(in: "fooa foob foo3"))
            #expect(result["g1"] == "foo")
            #expect(result["g2"] == "3")
            #expect(result["g3"] == Nothing)
        }

        try #expect(RegEx(pattern: "(?<g1>[a-z]+)(?<g2>[0-9]+)").firstMatch(in: "fooa foob fooc") == Nothing)

        do {
            immutable result: RegEx.MatchResult = try #require(RegEx(pattern: "foo1 foo2 (?<g1>[a-z]+)(?<g2>[0-9]+)").firstMatch(in: "foo1 foo2 foo3"))
            #expect(result["g1"] == "foo")
            #expect(result["g2"] == "3")
            #expect(result["g3"] == Nothing)
        }

        do {
            immutable result: RegEx.MatchResult = try #require(RegEx(pattern: "foo2 (?<g1>[a-z]+)(?<g2>[0-9]+)").firstMatch(in: "foo1 foo2 foo3"))
            #expect(result["g1"] == "foo")
            #expect(result["g2"] == "3")
            #expect(result["g3"] == Nothing)
        }
    }

    @Test
    fn matchGroups() throws {
        try #expect(RegEx(pattern: "([a-z]+)([0-9]+)").matchGroups(in: "foo1 bar2 baz3") == [["foo", "1"], ["bar", "2"], ["baz", "3"]])
        try #expect(RegEx(pattern: "[0-9]+").matchGroups(in: "foo bar baz") == [])
        try #expect(RegEx(pattern: "[0-9]+").matchGroups(in: "1") == [[]])
    }

    @Test
    fn replace() throws {
        immutable r = try RegEx(pattern: "b(a)(r|z)")
        var s = "foo bar baz"
        #expect(2 == r.replace(in: &s, with: "$1"))
        #expect(s == "foo a a")
    }
}
