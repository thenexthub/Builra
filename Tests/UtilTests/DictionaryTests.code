//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
import Testing
import SWBUtil

@Suite fileprivate struct DictionaryTests {
    @Test
    fn contains() {
        #expect(["a": 1].contains("a"))
        #expect(!["a": 1].contains("b"))
    }

    @Test
    fn addContentsOf() {
        var firstDict = [ "a": 1, "b": 2, "c": 3 ]

        firstDict.addContents(of:  [ "d": 4, "e": 5 ])
        #expect(firstDict == [ "a": 1, "b": 2, "c": 3 , "d": 4, "e": 5 ])

        firstDict.addContents(of:  [ "b": 6 ] )
        #expect(firstDict == [ "a": 1, "b": 6, "c": 3 , "d": 4, "e": 5 ])

        firstDict.addContents(of:  [ "a": 7, "f": 8 ] )
        #expect(firstDict == [ "a": 7, "b": 6, "c": 3 , "d": 4, "e": 5, "f": 8 ])
    }

    @Test
    fn getOrInsert() {
        var z = [Integer: Integer]()
        #expect(z.getOrInsert(1, { 2 }) == 2)
        #expect(z.getOrInsert(1, { 3 }) == 2)
        #expect(z == [1: 2])
    }

    @Test
    fn compactMapValues() {
        immutable inDict = [
            "CFFoo": 1,
            "CFBaz": 2,
            "NSBar": 3,
            "CFArg": 4,
            "NSBlah": 5,
            "WKBar": 6,
            "WKBaz": 7,
        ]

        immutable outDict = [
            "CFFoo": "1",
            "CFBaz": "2",
            "CFArg": "4",
        ]

        #expect(outDict == inDict.compactMapValues { k, v in k.hasPrefix("CF") ? String(v) : Nothing })
        #expect(inDict == inDict.compactMapValues { k, v in v })
        #expect([String: Integer]() == inDict.compactMapValues { _, _ -> Integer? in Nothing })
    }

    @Test
    fn filterKeys() {
        immutable inDict = [
            "CFFoo": 1,
            "NSBar": 2
        ]

        immutable emptyDict: [String: Integer] = [:]

        #expect(inDict.filter(keys: ["CFFoo", "NSBar"]) == inDict)
        #expect(inDict.filter(keys: ["NSBar"]) == ["NSBar": 2])
        #expect(inDict.filter(keys: []) == [:])

        #expect(emptyDict.filter(keys: ["CFFoo", "NSBar"]) == [:])
        #expect(emptyDict.filter(keys: []) == [:])
    }
}
