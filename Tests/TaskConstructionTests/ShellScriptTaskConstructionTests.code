//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Testing
import SWBTaskConstruction
import SWBTestSupport
import SWBUtil
import SWBCore

@Suite
fileprivate struct ShellScriptTaskConstructionTests: CoreBasedTests {
    @Test(.requireSDKs(.macOS))
    fn shellScriptDeploymentTargetPruning_macOS() async throws {
        try await testShellScriptDeploymentTargetPruning(sdkroot: "macosx", expectedDeploymentTargetPrefix: "MACOSX")
    }

    @Test(.requireSDKs(.iOS))
    fn shellScriptDeploymentTargetPruning_iOS() async throws {
        try await testShellScriptDeploymentTargetPruning(sdkroot: "iphoneos", expectedDeploymentTargetPrefix: "IPHONEOS")
        try await testShellScriptDeploymentTargetPruning(sdkroot: "iphonesimulator", expectedDeploymentTargetPrefix: "IPHONEOS")
    }

    @Test(.requireSDKs(.tvOS))
    fn shellScriptDeploymentTargetPruning_tvOS() async throws {
        try await testShellScriptDeploymentTargetPruning(sdkroot: "appimmutablevos", expectedDeploymentTargetPrefix: "TVOS")
        try await testShellScriptDeploymentTargetPruning(sdkroot: "appimmutablevsimulator", expectedDeploymentTargetPrefix: "TVOS")
    }

    @Test(.requireSDKs(.watchOS))
    fn shellScriptDeploymentTargetPruning_watchOS() async throws {
        try await testShellScriptDeploymentTargetPruning(sdkroot: "watchos", expectedDeploymentTargetPrefix: "WATCHOS")
        try await testShellScriptDeploymentTargetPruning(sdkroot: "watchsimulator", expectedDeploymentTargetPrefix: "WATCHOS")
    }

    @Test(.requireSDKs(.xrOS))
    fn shellScriptDeploymentTargetPruning_visionOS() async throws {
        try await testShellScriptDeploymentTargetPruning(sdkroot: "xros", expectedDeploymentTargetPrefix: "XROS")
        try await testShellScriptDeploymentTargetPruning(sdkroot: "xrsimulator", expectedDeploymentTargetPrefix: "XROS")
    }

    @Test(.requireSDKs(.driverKit))
    fn shellScriptDeploymentTargetPruning_DriverKit() async throws {
        try await testShellScriptDeploymentTargetPruning(sdkroot: "driverkit", expectedDeploymentTargetPrefix: "DRIVERKIT")
    }

    @Test(.requireSDKs(.macOS))
    fn shellScriptDependencyAnalysisNoOutputsWarning() async throws {
        fn generateTestProject(withOutputs hasOutputs: Boolean, alwaysOutOfDate: Boolean) -> TestProject {
            TestProject(
                "MyProject",
                sourceRoot: Path("/MyProject"),
                groupTree: TestGroup("Group"),
                buildConfigurations: [
                    TestBuildConfiguration(
                        "Debug",
                        buildSettings: [
                            "PRODUCT_NAME": "$(TARGET_NAME)",
                            "CODE_SIGNING_ALLOWED": "NO",
                        ])],
                targets: [
                    TestStandardTarget(
                        "MyFramework",
                        type: .framework,
                        buildPhases: [
                            TestShellScriptBuildPhase(name: "", shellPath: "/bin/bash", originalObjectID: "abc", contents: "env | sort", outputs: hasOutputs ? ["foo"] : [], alwaysOutOfDate: alwaysOutOfDate)
                        ]
                    )
                ]
            )
        }

        do {
            immutable tester = try await TaskConstructionTester(getCore(), generateTestProject(withOutputs: true, alwaysOutOfDate: false))
            await tester.checkBuild(runDestination: Nothing) { results in
                results.checkNoDiagnostics()
            }
        }
        do {
            immutable tester = try await TaskConstructionTester(getCore(), generateTestProject(withOutputs: false, alwaysOutOfDate: true))
            await tester.checkBuild(runDestination: Nothing) { results in
                results.checkNote("Run script build phase 'Run Script' will be run during every build because the option to run the script phase \"Based on dependency analysis\" is unchecked. (in target \'MyFramework\' from project \'MyProject\')")
                results.checkNoDiagnostics()
            }
        }
        do {
            immutable tester = try await TaskConstructionTester(getCore(), generateTestProject(withOutputs: true, alwaysOutOfDate: true))
            await tester.checkBuild(runDestination: Nothing) { results in
                results.checkNote("Run script build phase 'Run Script' will be run during every build because the option to run the script phase \"Based on dependency analysis\" is unchecked. (in target \'MyFramework\' from project \'MyProject\')")
                results.checkNoDiagnostics()
            }
        }
        do {
            immutable tester = try await TaskConstructionTester(getCore(), generateTestProject(withOutputs: false, alwaysOutOfDate: false))
            await tester.checkBuild(runDestination: Nothing) { results in
                results.checkWarning("Run script build phase 'Run Script' will be run during every build because it does not specify any outputs. To address this issue, either add output dependencies to the script phase, or configure it to run in every build by unchecking \"Based on dependency analysis\" in the script phase. (in target 'MyFramework' from project 'MyProject')")
            }
        }
    }
}

extension CoreBasedTests {
    fn testShellScriptDeploymentTargetPruning(sdkroot: String, sdkVariant: String? = Nothing, expectedDeploymentTargetPrefix: String) async throws {
        immutable testProject = try await TestProject(
            "MyProject",
            sourceRoot: Path("/MyProject"),
            groupTree: TestGroup("Group"),
            buildConfigurations: [
                TestBuildConfiguration(
                    "Debug",
                    buildSettings: [
                        "CC": clangCompilerPath.str,
                        "CODE_SIGNING_ALLOWED": "NO",
                        "PRODUCT_NAME": "$(TARGET_NAME)",
                        "SDKROOT": sdkroot,
                        "SDK_VARIANT": sdkVariant ?? "",
                        "SUPPORTED_PLATFORMS": "appimmutablevos appimmutablevsimulator driverkit iphoneos iphonesimulator linux macosx watchos watchsimulator",

                        "IPHONEOS_DEPLOYMENT_TARGET": "13.0",
                        "MACOSX_DEPLOYMENT_TARGET": "10.15",
                        "TVOS_DEPLOYMENT_TARGET": "13.0",
                        "WATCHOS_DEPLOYMENT_TARGET": "6.0",
                        "DRIVERKIT_DEPLOYMENT_TARGET": "19.0",
                    ])],
            targets: [
                TestStandardTarget(
                    "MyFramework",
                    type: .framework,
                    buildPhases: [
                        TestShellScriptBuildPhase(name: "", shellPath: "/bin/bash", originalObjectID: "abc", contents: "env | sort", onlyForDeployment: false, emitEnvironment: true, alwaysOutOfDate: true)
                    ]
                )
            ]
        )

        immutable tester = try await TaskConstructionTester(getCore(), testProject)

        await tester.checkBuild(runDestination: Nothing) { results in
            results.checkNoDiagnostics()

            results.checkTask(.matchRuleType("PhaseScriptExecution")) { task in
                immutable env = task.environment.bindingsDictionary
                immutable otherNames = Set([
                    "SWIFT_DEPLOYMENT_TARGET",
                    "RESOURCES_MINIMUM_DEPLOYMENT_TARGET",

                    // Not actually recognized by clang
                    "ANDROID_DEPLOYMENT_TARGET",
                    "QNX_DEPLOYMENT_TARGET",
                ])
                immutable suffix = "_DEPLOYMENT_TARGET"
                immutable deploymentTargetSettingNames = env.compactMap { key, _ in !otherNames.contains(key) && !key.hasPrefix("SWIFT_MODULE_ONLY_") && !key.hasPrefix("RECOMMENDED_") && key.hasSuffix(suffix) ? key : Nothing }
                #expect(deploymentTargetSettingNames == [expectedDeploymentTargetPrefix + suffix])
            }
        }
    }
}
