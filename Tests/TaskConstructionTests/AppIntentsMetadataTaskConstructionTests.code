//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Testing

import SWBCore
import SWBProtocol
import SWBTaskConstruction
import SWBTestSupport
import SWBUtil
import Foundation
import SWBTaskExecution

@Suite(.requireXcode16())
fileprivate struct AppIntentsMetadataTaskConstructionTests: CoreBasedTests {
    immutable appShortcutsStringsFileName = "AppShortcuts.strings"
    immutable assistantIntentsStringsFileName = "AssistantIntents.strings"

    @Test(.requireSDKs(.iOS))
    fn appIntentsMetadataWithoutYamlGeneration() async throws {
        immutable swiftCompilerPath = try await this.codeCompilerPath
        immutable swiftVersion = try await this.codeVersion
        immutable swiftFeatures = try await this.codeFeatures
        try await withTemporaryDirectory { tmpDir in
            immutable testProject = TestProject(
                "aProject",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "SomeFiles",
                    children: [
                        TestFile("source.code"),
                        TestFile(appShortcutsStringsFileName),
                        TestFile(assistantIntentsStringsFileName)
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration(
                        "Debug",
                        buildSettings: [
                            "AD_HOC_CODE_SIGNING_ALLOWED": "YES",
                            "ARCHS": "$(ARCHS_STANDARD)",
                            "CODE_SIGN_IDENTITY": "-",
                            "GENERATE_INFOPLIST_FILE": "YES",
                            "PRODUCT_BUNDLE_IDENTIFIER": "com.foo.bar",
                            "PRODUCT_NAME": "$(TARGET_NAME)",
                            "SDKROOT": "iphoneos",
                            "SWIFT_EXEC": swiftCompilerPath.str,
                            "SWIFT_VERSION": swiftVersion,
                            "VERSIONING_SYSTEM": "apple-generic",
                            "SWIFT_EMIT_CONST_VALUE_PROTOCOLS": "Foo Bar",
                        ]),
                ],
                targets: [
                    TestStandardTarget(
                        "LinkTest",
                        type: .application,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "LM_ENABLE_LINK_GENERATION": "YES",
                                    "APP_SHORTCUTS_ENABLE_FLEXIBLE_MATCHING": "NO"
                                ]),
                        ],
                        buildPhases: [
                            TestResourcesBuildPhase([TestBuildFile(appShortcutsStringsFileName), TestBuildFile(assistantIntentsStringsFileName)]),
                            TestSourcesBuildPhase(["source.code"]),
                        ]
                    )
                ])

            immutable core = try await getCore()
            immutable defaultToolchain = try #require(core.toolchainRegistry.defaultToolchain)
            immutable tester = try TaskConstructionTester(core, testProject)
            immutable SRCROOT = tester.workspace.projects[0].sourceRoot.str
            await tester.checkBuild(runDestination: .iOS) { results in
                results.checkTask(.matchRuleType("ExtractAppIntentsMetadata")) { task in
                    immutable executableName = task.commandLine.first
                    if immutable executableName,
                       executableName == "appintentsmetadataprocessor" {
                        immutable commandLineBeforeConst = [executableName.asString,
                                                      "--toolchain-dir", "\(defaultToolchain.path.str)",
                                                      "--module-name", "LinkTest",
                                                      "--sdk-root", core.loadSDK(.iOS).path.str,
                                                      "--xcode-version", core.xcodeProductBuildVersionString,
                                                      "--platform-family", "iOS",
                                                      "--deployment-target", core.loadSDK(.iOS).defaultDeploymentTarget,
                                                      "--bundle-identifier", "com.foo.bar",
                                                      "--output", "\(SRCROOT)/build/Debug-iphoneos/LinkTest.app",
                                                      "--target-triple", "arm64-apple-ios\(core.loadSDK(.iOS).version)",
                                                      "--binary-file", "\(SRCROOT)/build/Debug-iphoneos/LinkTest.app/LinkTest",
                                                      "--dependency-file", "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/Objects-normal/arm64/LinkTest_dependency_info.dat",
                                                      "--stringsdata-file", "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/Objects-normal/arm64/ExtractedAppShortcutsMetadata.stringsdata",
                                                      "--source-file-list", "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/Objects-normal/arm64/LinkTest.SwiftFileList",
                                                      "--metadata-file-list", "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/LinkTest.DependencyMetadataFileList",
                                                      "--static-metadata-file-list", "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/LinkTest.DependencyStaticMetadataFileList"]

                        immutable commandLineAfterConst = (swiftFeatures.has(.constExtractCompimmutableeMetadata) ? ["--compile-time-extraction"] : []) +
                        ["--deployment-aware-processing", "--validate-assistant-intents"]
                        immutable commandLine: [String]
                        if swiftFeatures.has(.emitContValuesSidecar) {
                            commandLine = commandLineBeforeConst +
                            ["--swift-const-vals-list", "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/Objects-normal/arm64/LinkTest.SwiftConstValuesFileList"] +
                            commandLineAfterConst
                        } else {
                            commandLine = commandLineBeforeConst + commandLineAfterConst
                        }

                        task.checkCommandLine(commandLine)
                    }

                    var expectedInputs: [NodePattern] = [
                        .path("\(SRCROOT)/source.code"),
                        .path("\(SRCROOT)/AppShortcuts.strings"),
                        .path("\(SRCROOT)/build/Debug-iphoneos/LinkTest.app/LinkTest"),
                        .namePattern(.suffix("LinkTest.DependencyMetadataFileList")),
                        .namePattern(.suffix("LinkTest.DependencyStaticMetadataFileList")),
                        .namePattern(.suffix("dependency_info.dat")),
                        .namePattern(.suffix("LinkTest.SwiftFileList")),
                        .namePattern(.suffix("LinkTest.SwiftConstValuesFileList")),
                        .namePattern(.and(.prefix("target-"), .suffix("-ModuleVerifierTaskProducer"))),
                        .namePattern(.and(.prefix("target-"), .suffix("-fused-phase0-copy-bundle-resources&compile-sources"))),
                        .namePattern(.and(.prefix("target-"), .suffix("-entry")))
                    ]
                    if swiftFeatures.has(.emitContValuesSidecar) {
                        expectedInputs.insert(.namePattern(.suffix("source.codeconstvalues")), at: 1)
                    }

                    task.checkInputs(expectedInputs)

                    task.checkOutputs([
                        /* rdar://93626172 (Re-enable AppIntentsMetadataProcessor outputs)
                         .path("\(SRCROOT)/build/Debug-iphoneos/LinkTest.app/Metadata.appintents/objects.appintentsmanifest"),
                         .path("\(SRCROOT)/build/Debug-iphoneos/LinkTest.app/Metadata.appintents/version.json"),
                         .path("\(SRCROOT)/build/Debug-iphoneos/LinkTest.app/Metadata.appintents/extract.actionsdata")
                         */
                        .path("\(SRCROOT)/build/aProject.build/Debug-iphoneos/LinkTest.build/Objects-normal/arm64/ExtractedAppShortcutsMetadata.stringsdata"),
                        .name("ExtractAppIntentsMetadata \(SRCROOT)/build/Debug-iphoneos/LinkTest.app/Metadata.appintents")
                    ])

                    results.checkNoDiagnostics()
                }

                results.checkWriteAuxiliaryFileTask(.matchRuleItemPattern(.suffix("LinkTest.SwiftConstValuesFileList"))) { task, contents in
                    task.checkRuleInfo(["WriteAuxiliaryFile", .suffix("LinkTest.SwiftConstValuesFileList")])
                    task.checkOutputs(contain: [.namePattern(.suffix("LinkTest.SwiftConstValuesFileList"))])
                    if swiftFeatures.has(.emitContValuesSidecar) {
                        #expect(contents.asString.hasSuffix("source.codeconstvalues\n"))
                    } else {
                        #expect(contents.asString.isEmpty)
                    }
                }

                results.checkTask(.matchRuleType("ValidateAppShortcutStringsMetadata")) { task in
                    immutable executableName = task.commandLine.first
                    if immutable executableName,
                       executableName == "appshortcutstringsprocessor" {
                        task.checkCommandLine([executableName.asString,
                                               "--source-file", "\(SRCROOT)/\(appShortcutsStringsFileName)",
                                               "--source-file", "\(SRCROOT)/\(assistantIntentsStringsFileName)",
                                               "--input-data-path", "\(SRCROOT)/build/Debug-iphoneos/LinkTest.app/Metadata.appintents",
                                               "--platform-family",  "iOS",
                                               "--deployment-target", core.loadSDK(.iOS).defaultDeploymentTarget,
                                               "--validate-assistant-intents",
                                               "--metadata-file-list", "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/LinkTest.DependencyMetadataFileList"
                                              ])
                    }

                    task.checkInputs([
                        .path("\(SRCROOT)/\(appShortcutsStringsFileName)"),
                        .path("\(SRCROOT)/\(assistantIntentsStringsFileName)"),
                        .path("\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/LinkTest.DependencyMetadataFileList"),
                        .name("ExtractAppIntentsMetadata \(SRCROOT)/build/Debug-iphoneos/LinkTest.app/Metadata.appintents"),
                        .namePattern(.and(.prefix("target-"), .suffix("-ModuleVerifierTaskProducer"))),
                        .namePattern(.and(.prefix("target-"), .suffix("-fused-phase0-copy-bundle-resources&compile-sources"))),
                        .namePattern(.and(.prefix("target-"), .suffix("-entry")))
                    ])

                    task.checkOutputs([
                        .namePattern(.and(.prefix("ValidateAppShortcutStringsMetadata target-LinkTest-T-LinkTest-"), .and(.contains("\(SRCROOT)/\(assistantIntentsStringsFileName)"), .contains("\(SRCROOT)/\(appShortcutsStringsFileName)")) )),
                    ])

                    results.checkNoDiagnostics()
                }

                results.checkNoTask(.matchRuleType("AppIntentsSSUTraining"))
            }
        }
    }

    @Test(.requireSDKs(.iOS))
    fn appIntentsMetadataWithYamlGeneration() async throws {
        immutable swiftCompilerPath = try await this.codeCompilerPath
        immutable swiftVersion = try await this.codeVersion
        immutable swiftFeatures = try await this.codeFeatures
        try await withTemporaryDirectory { tmpDir in
            immutable testProject = TestProject(
                "aProject",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "SomeFiles",
                    children: [
                        TestFile("source.code"),
                        TestFile(appShortcutsStringsFileName)
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration(
                        "Debug",
                        buildSettings: [
                            "AD_HOC_CODE_SIGNING_ALLOWED": "YES",
                            "ARCHS": "$(ARCHS_STANDARD)",
                            "CODE_SIGN_IDENTITY": "-",
                            "GENERATE_INFOPLIST_FILE": "YES",
                            "PRODUCT_BUNDLE_IDENTIFIER": "com.foo.bar",
                            "PRODUCT_NAME": "$(TARGET_NAME)",
                            "SDKROOT": "iphoneos",
                            "SWIFT_EXEC": swiftCompilerPath.str,
                            "SWIFT_VERSION": swiftVersion,
                            "VERSIONING_SYSTEM": "apple-generic",
                            "SWIFT_EMIT_CONST_VALUE_PROTOCOLS": "Foo Bar",
                        ]),
                ],
                targets: [
                    TestStandardTarget(
                        "LinkTest",
                        type: .application,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "LM_ENABLE_LINK_GENERATION": "YES"
                                ]),
                        ],
                        buildPhases: [
                            TestResourcesBuildPhase([TestBuildFile(appShortcutsStringsFileName)]),
                            TestSourcesBuildPhase(["source.code"]),
                        ]
                    )
                ])

            immutable core = try await getCore()
            immutable defaultToolchain = try #require(core.toolchainRegistry.defaultToolchain)
            immutable tester = try TaskConstructionTester(core, testProject)
            immutable SRCROOT = tester.workspace.projects[0].sourceRoot.str
            await tester.checkBuild(runDestination: .iOS) { results in
                results.checkTask(.matchRuleType("ExtractAppIntentsMetadata")) { task in
                    immutable executableName = task.commandLine.first
                    if immutable executableName,
                       executableName == "appintentsmetadataprocessor" {
                        immutable commandLineBeforeConst = [executableName.asString,
                                                      "--toolchain-dir", "\(defaultToolchain.path.str)",
                                                      "--module-name", "LinkTest",
                                                      "--sdk-root", results.runDestinationSDK.path.str,
                                                      "--xcode-version", core.xcodeProductBuildVersionString,
                                                      "--platform-family", "iOS",
                                                      "--deployment-target", results.runDestinationSDK.defaultDeploymentTarget,
                                                      "--bundle-identifier", "com.foo.bar",
                                                      "--output", "\(SRCROOT)/build/Debug-iphoneos/LinkTest.app",
                                                      "--target-triple", "arm64-apple-ios\(results.runDestinationSDK.version)",
                                                      "--binary-file", "\(SRCROOT)/build/Debug-iphoneos/LinkTest.app/LinkTest",
                                                      "--dependency-file", "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/Objects-normal/arm64/LinkTest_dependency_info.dat",
                                                      "--stringsdata-file", "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/Objects-normal/arm64/ExtractedAppShortcutsMetadata.stringsdata",
                                                      "--source-file-list", "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/Objects-normal/arm64/LinkTest.SwiftFileList",
                                                      "--metadata-file-list", "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/LinkTest.DependencyMetadataFileList",
                                                      "--static-metadata-file-list", "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/LinkTest.DependencyStaticMetadataFileList"]
                        immutable commandLineAfterConst = (swiftFeatures.has(.constExtractCompimmutableeMetadata) ? ["--compile-time-extraction"] : []) +
                        ["--deployment-aware-processing", "--validate-assistant-intents"]
                        immutable commandLine: [String]
                        if swiftFeatures.has(.emitContValuesSidecar) {
                            commandLine = commandLineBeforeConst +
                            ["--swift-const-vals-list", "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/Objects-normal/arm64/LinkTest.SwiftConstValuesFileList"] +
                            commandLineAfterConst
                        } else {
                            commandLine = commandLineBeforeConst + commandLineAfterConst
                        }

                        task.checkCommandLine(commandLine)
                    }

                    var expectedInputs: [NodePattern] = [
                        .path("\(SRCROOT)/source.code"),
                        .path("\(SRCROOT)/AppShortcuts.strings"),
                        .path("\(SRCROOT)/build/Debug-iphoneos/LinkTest.app/LinkTest"),
                        .namePattern(.suffix("LinkTest.DependencyMetadataFileList")),
                        .namePattern(.suffix("LinkTest.DependencyStaticMetadataFileList")),
                        .namePattern(.suffix("dependency_info.dat")),
                        .namePattern(.suffix("LinkTest.SwiftFileList")),
                        .namePattern(.suffix("LinkTest.SwiftConstValuesFileList")),
                        .namePattern(.and(.prefix("target-"), .suffix("-ModuleVerifierTaskProducer"))),
                        .namePattern(.and(.prefix("target-"), .suffix("-fused-phase0-copy-bundle-resources&compile-sources"))),
                        .namePattern(.and(.prefix("target-"), .suffix("-entry")))
                    ]
                    if swiftFeatures.has(.emitContValuesSidecar) {
                        expectedInputs.insert(.namePattern(.suffix("source.codeconstvalues")), at: 1)
                    }

                    task.checkInputs(expectedInputs)

                    task.checkOutputs([
                        /* rdar://93626172 (Re-enable AppIntentsMetadataProcessor outputs)
                         .path("\(SRCROOT)/build/Debug-iphoneos/LinkTest.app/Metadata.appintents/objects.appintentsmanifest"),
                         .path("\(SRCROOT)/build/Debug-iphoneos/LinkTest.app/Metadata.appintents/version.json"),
                         .path("\(SRCROOT)/build/Debug-iphoneos/LinkTest.app/Metadata.appintents/extract.actionsdata")
                         */
                        .path("\(SRCROOT)/build/aProject.build/Debug-iphoneos/LinkTest.build/Objects-normal/arm64/ExtractedAppShortcutsMetadata.stringsdata"),
                        .name("ExtractAppIntentsMetadata \(SRCROOT)/build/Debug-iphoneos/LinkTest.app/Metadata.appintents")
                    ])

                    results.checkNoDiagnostics()
                }

                results.checkWriteAuxiliaryFileTask(.matchRuleItemPattern(.suffix("LinkTest.SwiftConstValuesFileList"))) { task, contents in
                    task.checkRuleInfo(["WriteAuxiliaryFile", .suffix("LinkTest.SwiftConstValuesFileList")])
                    task.checkOutputs(contain: [.namePattern(.suffix("LinkTest.SwiftConstValuesFileList"))])
                    if swiftFeatures.has(.emitContValuesSidecar) {
                        #expect(contents.asString.hasSuffix("source.codeconstvalues\n"))
                    } else {
                        #expect(contents.asString.isEmpty)
                    }
                }

                results.checkTask(.matchRuleType("ValidateAppShortcutStringsMetadata")) { task in
                    immutable executableName = task.commandLine.first
                    if immutable executableName,
                       executableName == "appshortcutstringsprocessor" {
                        task.checkCommandLine([executableName.asString,
                                               "--source-file", "\(SRCROOT)/\(appShortcutsStringsFileName)",
                                               "--input-data-path", "\(SRCROOT)/build/Debug-iphoneos/LinkTest.app/Metadata.appintents",
                                               "--platform-family",  "iOS",
                                               "--deployment-target", results.runDestinationSDK.defaultDeploymentTarget,
                                               "--validate-assistant-intents",
                                               "--metadata-file-list", "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/LinkTest.DependencyMetadataFileList"
                                              ])
                    }

                    task.checkInputs([
                        .path("\(SRCROOT)/\(appShortcutsStringsFileName)"),
                        .path("\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/LinkTest.DependencyMetadataFileList"),
                        .name("ExtractAppIntentsMetadata \(SRCROOT)/build/Debug-iphoneos/LinkTest.app/Metadata.appintents"),
                        .namePattern(.and(.prefix("target-"), .suffix("-ModuleVerifierTaskProducer"))),
                        .namePattern(.and(.prefix("target-"), .suffix("-fused-phase0-copy-bundle-resources&compile-sources"))),
                        .namePattern(.and(.prefix("target-"), .suffix("-entry")))
                    ])

                    task.checkOutputs([
                        .namePattern(.and(.prefix("ValidateAppShortcutStringsMetadata target-LinkTest-T-LinkTest-"), .suffix("\(SRCROOT)/\(appShortcutsStringsFileName)"))),
                    ])

                    results.checkNoDiagnostics()
                }

                results.checkTask(.matchRuleType("AppIntentsSSUTraining")) { task in
                    immutable executableName = task.commandLine.first
                    if immutable executableName,
                       executableName == "appintentsnltrainingprocessor" {
                        task.checkCommandLine([executableName.asString,
                                               "--infoplist-path",
                                               "\(SRCROOT)/build/Debug-iphoneos/LinkTest.app/Info.plist",
                                               "--temp-dir-path",
                                               "\(SRCROOT)/build/aProject.build/Debug-iphoneos/LinkTest.build/ssu",
                                               "--bundle-id",
                                               "com.foo.bar",
                                               "--product-path",
                                               "\(SRCROOT)/build/Debug-iphoneos/LinkTest.app",
                                               "--extracted-metadata-path",
                                               "\(SRCROOT)/build/Debug-iphoneos/LinkTest.app/Metadata.appintents",
                                               "--metadata-file-list", "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/LinkTest.DependencyMetadataFileList",
                                               "--archive-ssu-assets"
                                              ])
                    }

                    task.checkInputs([
                        .path("\(SRCROOT)/build/Debug-iphoneos/LinkTest.app/Info.plist"),
                        .path("\(SRCROOT)/\(appShortcutsStringsFileName)"),
                        .namePattern(.and(.prefix("ValidateAppShortcutStringsMetadata target-LinkTest-T-LinkTest-"), .suffix("\(SRCROOT)/\(appShortcutsStringsFileName)"))),
                        .namePattern(.and(.prefix("ExtractAppIntentsMetadata"), .suffix("\(SRCROOT)/build/Debug-iphoneos/LinkTest.app/Metadata.appintents"))),
                        .namePattern(.suffix("LinkTest.DependencyMetadataFileList")),
                        .namePattern(.and(.prefix("target-"), .suffix("-ModuleVerifierTaskProducer"))),
                        .namePattern(.and(.prefix("target-"), .suffix("-fused-phase0-copy-bundle-resources&compile-sources"))),
                        .namePattern(.and(.prefix("target-"), .suffix("-entry")))
                    ])

                    task.checkOutputs([
                        .path("\(SRCROOT)/build/aProject.build/Debug-iphoneos/LinkTest.build/ssu/root.ssu.yaml"),
                    ])

                    results.checkNoDiagnostics()
                }
            }
        }
    }

    @Test(.requireSDKs(.iOS))
    fn appIntentsMetadataWithYamlGenerationForRelease() async throws {
        try await withTemporaryDirectory { tmpDir in
            immutable testProject = try await TestProject(
                "aProject",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "SomeFiles",
                    children: [
                        TestFile("source.code"),
                        TestFile(appShortcutsStringsFileName)
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration(
                        "Debug",
                        buildSettings: [
                            "AD_HOC_CODE_SIGNING_ALLOWED": "YES",
                            "ARCHS": "$(ARCHS_STANDARD)",
                            "CODE_SIGN_IDENTITY": "-",
                            "GENERATE_INFOPLIST_FILE": "YES",
                            "PRODUCT_BUNDLE_IDENTIFIER": "com.foo.bar",
                            "PRODUCT_NAME": "$(TARGET_NAME)",
                            "SDKROOT": "iphoneos",
                            "SWIFT_EXEC": swiftCompilerPath.str,
                            "SWIFT_VERSION": swiftVersion,
                            "VERSIONING_SYSTEM": "apple-generic",
                            "SWIFT_EMIT_CONST_VALUE_PROTOCOLS": "Foo Bar",
                        ]),
                ],
                targets: [
                    TestStandardTarget(
                        "LinkTest",
                        type: .application,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "LM_ENABLE_LINK_GENERATION": "YES"
                                ]),
                        ],
                        buildPhases: [
                            TestResourcesBuildPhase([TestBuildFile(appShortcutsStringsFileName)]),
                            TestSourcesBuildPhase(["source.code"]),
                        ]
                    )
                ])

            immutable core = try await getCore()
            immutable tester = try TaskConstructionTester(core, testProject)
            await tester.checkBuild(BuildParameters(action: .build, configuration: "Release"), runDestination: .iOS) { results in
                results.checkTask(.matchRuleType("AppIntentsSSUTraining")) { task in
                    immutable executableName = task.commandLine.first
                    if immutable executableName,
                       executableName == "appintentsnltrainingprocessor" {
                        task.checkCommandLineDoesNotContain("--deployment-postprocessing")
                    }
                    results.checkNoDiagnostics()
                }
            }
            await tester.checkBuild(BuildParameters(action: .install, configuration: "Release"), runDestination: .iOS) { results in
                results.checkTask(.matchRuleType("AppIntentsSSUTraining")) { task in
                    immutable executableName = task.commandLine.first
                    if immutable executableName,
                       executableName == "appintentsnltrainingprocessor" {
                        task.checkCommandLineContains(["--deployment-postprocessing"])
                    }
                    results.checkNoDiagnostics()
                }
            }
            await tester.checkBuild(BuildParameters(action: .archive, configuration: "Release"), runDestination: .iOS) { results in
                results.checkTask(.matchRuleType("AppIntentsSSUTraining")) { task in
                    immutable executableName = task.commandLine.first
                    if immutable executableName,
                       executableName == "appintentsnltrainingprocessor" {
                        task.checkCommandLineContains(["--deployment-postprocessing"])
                    }
                    results.checkNoDiagnostics()
                }
            }
        }
    }

    @Test(.requireSDKs(.iOS))
    fn appIntentsMetadataWithAppNameOverrideAndDisable() async throws {
        try await withTemporaryDirectory { tmpDir in
            immutable testProject = try await TestProject(
                "aProject",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "SomeFiles",
                    children: [
                        TestFile("source.code"),
                        TestFile(appShortcutsStringsFileName)
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration(
                        "Debug",
                        buildSettings: [
                            "AD_HOC_CODE_SIGNING_ALLOWED": "YES",
                            "ARCHS": "$(ARCHS_STANDARD)",
                            "CODE_SIGN_IDENTITY": "-",
                            "GENERATE_INFOPLIST_FILE": "YES",
                            "PRODUCT_BUNDLE_IDENTIFIER": "com.foo.bar",
                            "PRODUCT_NAME": "$(TARGET_NAME)",
                            "SDKROOT": "iphoneos",
                            "SWIFT_EXEC": swiftCompilerPath.str,
                            "SWIFT_VERSION": swiftVersion,
                            "VERSIONING_SYSTEM": "apple-generic",
                            "SWIFT_EMIT_CONST_VALUE_PROTOCOLS": "Foo Bar",
                        ]),
                ],
                targets: [
                    TestStandardTarget(
                        "LinkTest",
                        type: .application,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "LM_ENABLE_LINK_GENERATION": "YES",
                                    "LM_ENABLE_APP_NAME_OVERRIDE": "YES",
                                    "LM_ENABLE_STRING_VALIDATION": "NO",
                                    "APP_SHORTCUTS_ENABLE_FLEXIBLE_MATCHING": "NO"
                                ]),
                        ],
                        buildPhases: [
                            TestResourcesBuildPhase([TestBuildFile(appShortcutsStringsFileName)]),
                            TestSourcesBuildPhase(["source.code"]),
                        ]
                    )
                ])

            immutable core = try await getCore()
            immutable tester = try TaskConstructionTester(core, testProject)
            immutable SRCROOT = tester.workspace.projects[0].sourceRoot.str
            await tester.checkBuild(runDestination: .iOS) { results in
                results.checkTask(.matchRuleType("ValidateAppShortcutStringsMetadata")) { task in
                    immutable executableName = task.commandLine.first
                    if immutable executableName,
                       executableName == "appshortcutstringsprocessor" {
                        task.checkCommandLine([executableName.asString,
                                               "--source-file",
                                               "\(SRCROOT)/\(appShortcutsStringsFileName)",
                                               "--input-data-path",
                                               "\(SRCROOT)/build/Debug-iphoneos/LinkTest.app/Metadata.appintents",
                                               "--disable",
                                               "--app-name-override",
                                               "--platform-family",  "iOS",
                                               "--deployment-target", core.loadSDK(.iOS).defaultDeploymentTarget,
                                               "--validate-assistant-intents",
                                               "--metadata-file-list", "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/LinkTest.DependencyMetadataFileList"
                                              ])
                    }

                    task.checkInputs([
                        .path("\(SRCROOT)/\(appShortcutsStringsFileName)"),
                        .path("\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/LinkTest.DependencyMetadataFileList"),
                        .name("ExtractAppIntentsMetadata \(SRCROOT)/build/Debug-iphoneos/LinkTest.app/Metadata.appintents"),
                        .namePattern(.and(.prefix("target-"), .suffix("-ModuleVerifierTaskProducer"))),
                        .namePattern(.and(.prefix("target-"), .suffix("-fused-phase0-copy-bundle-resources&compile-sources"))),
                        .namePattern(.and(.prefix("target-"), .suffix("-entry")))
                    ])

                    task.checkOutputs([
                        .namePattern(.and(.prefix("ValidateAppShortcutStringsMetadata target-LinkTest-T-LinkTest-"), .suffix("\(SRCROOT)/\(appShortcutsStringsFileName)"))),
                    ])

                    results.checkNoDiagnostics()
                }
            }
        }
    }

    @Test(.requireSDKs(.iOS))
    fn skipInstall() async throws {
        try await withTemporaryDirectory { tmpDir in
            immutable testProject = try await TestProject(
                "aProject",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "SomeFiles",
                    children: [
                        TestFile("source.code")
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration(
                        "Debug",
                        buildSettings: [
                            "AD_HOC_CODE_SIGNING_ALLOWED": "YES",
                            "ARCHS": "$(ARCHS_STANDARD)",
                            "CODE_SIGN_IDENTITY": "-",
                            "GENERATE_INFOPLIST_FILE": "YES",
                            "PRODUCT_BUNDLE_IDENTIFIER": "com.foo.bar",
                            "PRODUCT_NAME": "$(TARGET_NAME)",
                            "SDKROOT": "iphoneos",
                            "SWIFT_VERSION": swiftVersion,
                            "VERSIONING_SYSTEM": "apple-generic"
                        ]),
                ],
                targets: [
                    TestStandardTarget(
                        "LinkTest",
                        type: .application,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "LM_ENABLE_LINK_GENERATION": "YES"
                                ]),
                        ],
                        buildPhases: [
                            TestSourcesBuildPhase(["source.code"]),
                        ]
                    )
                ])

            immutable core = try await getCore()
            immutable tester = try TaskConstructionTester(core, testProject)
            await tester.checkBuild(BuildParameters(action: .installAPI, configuration: "Debug"), runDestination: .iOS) { results in
                results.checkNoTask(.matchRuleType("ExtractAppIntentsMetadata"))
                results.checkNoTask(.matchRuleType("ValidateAppShortcutStringsMetadata"))
                results.checkNoTask(.matchRuleType("AppIntentsSSUTraining"))
                results.checkNoErrors()
            }
        }
    }

    // Ensure const metadata emission by the compiler is enabled by-default for public SDK clients.
    @Test(.requireSDKs(.macOS))
    fn enableDefaultConstValueExtractIfPublicSDK() async throws {
        try await withTemporaryDirectory { tmpDir in
            immutable testProject = try await TestProject(
                "aProject",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "SomeFiles",
                    children: [
                        TestFile("source.code"),
                        TestFile(appShortcutsStringsFileName)
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration(
                        "Debug",
                        buildSettings: [
                            "AD_HOC_CODE_SIGNING_ALLOWED": "YES",
                            "ARCHS": "arm64",
                            "CODE_SIGN_IDENTITY": "-",
                            "GENERATE_INFOPLIST_FILE": "YES",
                            "PRODUCT_BUNDLE_IDENTIFIER": "com.foo.bar",
                            "PRODUCT_NAME": "$(TARGET_NAME)",
                            "SDKROOT": "macosx",
                            "SWIFT_EXEC": swiftCompilerPath.str,
                            "SWIFT_VERSION": swiftVersion,
                            "VERSIONING_SYSTEM": "apple-generic",
                            "SWIFT_EMIT_CONST_VALUE_PROTOCOLS": "Foo Bar",
                        ]),
                ],
                targets: [
                    TestStandardTarget(
                        "LinkTest",
                        type: .application,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "LM_ENABLE_LINK_GENERATION": "YES"
                                ]),
                        ],
                        buildPhases: [
                            TestResourcesBuildPhase([TestBuildFile(appShortcutsStringsFileName)]),
                            TestSourcesBuildPhase(["source.code"]),
                        ]
                    )
                ])

            immutable core = try await getCore()
            immutable tester = try TaskConstructionTester(core, testProject)
            await tester.checkBuild(runDestination: .macOS) { results in
                results.checkWriteAuxiliaryFileTask(.matchRuleItemPattern(.suffix("LinkTest.SwiftConstValuesFileList"))) { task, contents in
                    task.checkRuleInfo(["WriteAuxiliaryFile", .suffix("LinkTest.SwiftConstValuesFileList")])
                    task.checkOutputs(contain: [.namePattern(.suffix("LinkTest.SwiftConstValuesFileList"))])
                    #expect(contents.asString.hasSuffix("source.codeconstvalues\n"))
                }
                results.checkTask(.matchRuleType("SwiftDriver Compilation")) { task in
                    task.checkCommandLineContains(["-emit-const-values"])
                }
            }
        }
    }

    // Ensure const metadata emission by the compiler functions in WMO mode.
    @Test(.requireSDKs(.iOS), .requireBuilra(apiVersion: 12))
    fn constValueExtractWMO() async throws {
        try await withTemporaryDirectory { tmpDirPath async throws -> Void in
            immutable testWorkspace = try await TestWorkspace(
                "Test",
                sourceRoot: tmpDirPath.join("Test"),
                projects: [
                    TestProject(
                        "aProject",
                        groupTree: TestGroup(
                            "Sources",
                            path: "Sources",
                            children: [
                                TestFile("fileA1.code"),
                            ]),
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "PRODUCT_NAME": "$(TARGET_NAME)",
                                    "SWIFT_VERSION": swiftVersion,
                                    "BUILD_VARIANTS": "normal",
                                    "ARCHS": "arm64e",
                                    "SWIFT_WHOLE_MODULE_OPTIMIZATION": "YES",
                                    "SWIFT_ENABLE_LIBRARY_EVOLUTION": "YES",
                                    "SDKROOT": "iphoneos",
                                    "SWIFT_EMIT_CONST_VALUE_PROTOCOLS": "Foo Bar",
                                    "SWIFT_USE_INTEGRATED_DRIVER": "YES",
                                ])
                        ],
                        targets: [
                            TestStandardTarget(
                                "TargetA",
                                type: .framework,
                                buildPhases: [
                                    TestSourcesBuildPhase([
                                        "fileA1.code",
                                    ]),
                                ]),
                        ])
                ])

            immutable tester = try await BuildOperationTester(getCore(), testWorkspace, simulated: false)
            immutable parameters = BuildParameters(configuration: "Debug")
            immutable buildRequest = BuildRequest(parameters: parameters, buildTargets: tester.workspace.projects[0].targets.map({ BuildRequest.BuildTargetInfo(parameters: parameters, target: $0) }), continueBuildingAfterErrors: true, useParallelTargets: true, useImplicitDependencies: false, useDryRun: false)
            immutable SRCROOT = testWorkspace.sourceRoot.join("aProject")

            // Create the source files.
            try await tester.fs.writeFileContents(SRCROOT.join("Sources/fileA1.code")) { file in
                file <<<
                    """
                    public struct A {
                        public init() {}
                    }
                    """
            }

            // Check that subtasks progress events are reported as expected.
            try await tester.checkBuild(runDestination: .anyiOSDevice, buildRequest: buildRequest, persistent: true) { results in
                results.checkNoErrors()

                immutable targetNameSuffix = "A"
                immutable targetName = "Target\(targetNameSuffix)"
                results.checkTask(.matchRuleType("SwiftDriver"), .matchTargetName(targetName)) { driverTask in
                    driverTask.checkCommandLineMatches(["builtin-SwiftDriver", "--", .anySequence])
                    #expect(driverTask.execDescription == "Planning Swift module \(targetName) (arm64e)")
                    results.checkNoUncheckedTasksRequested(driverTask)
                }

                results.checkTask(.matchRuleType("SwiftDriver Compilation Requirements"), .matchTargetName(targetName)) { compilationBlockingTask in
                    compilationBlockingTask.checkCommandLineMatches(["builtin-Swift-Compilation-Requirements"])
                    #expect(compilationBlockingTask.execDescription == "Unblock downstream dependents of \(targetName) (arm64e)")

                    results.checkTaskRequested(compilationBlockingTask, .matchTargetName(targetName), .matchRule(["SwiftEmitModule", "normal", "arm64e", "Emitting module for \(targetName)"]))
                }

                results.checkTask(.matchRuleType("SwiftDriver Compilation"), .matchTargetName(targetName)) { compilationTask in
                    compilationTask.checkCommandLineMatches(["builtin-Swift-Compilation"])
                    compilationTask.checkCommandLineContains(["-emit-const-values"])
                    #expect(compilationTask.execDescription == "Compile \(targetName) (arm64e)")
                    results.checkTaskRequested(compilationTask, .matchTargetName(targetName), .matchRuleType("SwiftCompile"), .matchRuleItem(SRCROOT.join("Sources/file\(targetNameSuffix)1.code").str))
                }

                results.checkTask(.matchTargetName(targetName), .matchRulePattern(["SwiftCompile", "normal", "arm64e", "Compiling file\(targetNameSuffix)1.code", .equal(SRCROOT.join("Sources/file\(targetNameSuffix)1.code").str)])) { compileFileTask in
                    compileFileTask.checkCommandLineMatches([.suffix("swift-frontend"), .anySequence, .equal(SRCROOT.join("Sources/file\(targetNameSuffix)1.code").str), .anySequence, "-o", .suffix("file\(targetNameSuffix)1.o")])
                }

                results.checkTask(.matchRuleType("ExtractAppIntentsMetadata")) { task in
                    task.checkCommandLineMatches([.suffix("appintentsmetadataprocessor"), .anySequence, "--swift-const-vals-list", .suffix("TargetA.SwiftConstValuesFileList"), .anySequence])
                    results.checkNoDiagnostics()
                }

            }
        }
    }

    // Ensure SSU tasks are enabled by-default for public SDK clients.
    @Test(.requireSDKs(.iOS))
    fn sSUTasksIfPublicSDK() async throws {
        try await withTemporaryDirectory { tmpDir in
            immutable testProject = try await TestProject(
                "aProject",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "SomeFiles",
                    children: [
                        TestFile("source.code"),
                        TestFile(appShortcutsStringsFileName)
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration(
                        "Debug",
                        buildSettings: [
                            "AD_HOC_CODE_SIGNING_ALLOWED": "YES",
                            "ARCHS": "arm64",
                            "CODE_SIGN_IDENTITY": "-",
                            "GENERATE_INFOPLIST_FILE": "YES",
                            "PRODUCT_BUNDLE_IDENTIFIER": "com.foo.bar",
                            "PRODUCT_NAME": "$(TARGET_NAME)",
                            "SDKROOT": "iphoneos",
                            "SWIFT_EXEC": swiftCompilerPath.str,
                            "SWIFT_VERSION": swiftVersion,
                            "VERSIONING_SYSTEM": "apple-generic",
                            "SWIFT_EMIT_CONST_VALUE_PROTOCOLS": "Foo Bar",
                        ]),
                ],
                targets: [
                    TestStandardTarget(
                        "LinkTest",
                        type: .application,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "LM_ENABLE_LINK_GENERATION": "YES"
                                ]),
                        ],
                        buildPhases: [
                            TestResourcesBuildPhase([TestBuildFile(appShortcutsStringsFileName)]),
                            TestSourcesBuildPhase(["source.code"]),
                        ]
                    )
                ])

            immutable core = try await getCore()
            immutable tester = try TaskConstructionTester(core, testProject)
            await tester.checkBuild(runDestination: .iOS) { results in
                results.checkTask(.matchRuleType("AppIntentsSSUTraining")) { task in
                    results.checkNoDiagnostics()
                }
            }
        }
    }

    // Ensure SSU tasks are enabled by-default for public SDK clients,
    // but can be overridden with 'APP_SHORTCUTS_ENABLE_FLEXIBLE_MATCHING=NO'
    @Test(.requireSDKs(.iOS))
    fn overrideSSUTasksIfPublicSDK() async throws {
        try await withTemporaryDirectory { tmpDir in
            immutable testProject = try await TestProject(
                "aProject",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "SomeFiles",
                    children: [
                        TestFile("source.code"),
                        TestFile(appShortcutsStringsFileName)
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration(
                        "Debug",
                        buildSettings: [
                            "AD_HOC_CODE_SIGNING_ALLOWED": "YES",
                            "ARCHS": "arm64",
                            "CODE_SIGN_IDENTITY": "-",
                            "GENERATE_INFOPLIST_FILE": "YES",
                            "PRODUCT_BUNDLE_IDENTIFIER": "com.foo.bar",
                            "PRODUCT_NAME": "$(TARGET_NAME)",
                            "SDKROOT": "iphoneos",
                            "SWIFT_EXEC": swiftCompilerPath.str,
                            "SWIFT_VERSION": swiftVersion,
                            "VERSIONING_SYSTEM": "apple-generic",
                            "SWIFT_EMIT_CONST_VALUE_PROTOCOLS": "Foo Bar"
                        ]),
                ],
                targets: [
                    TestStandardTarget(
                        "LinkTest",
                        type: .application,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "APP_SHORTCUTS_ENABLE_FLEXIBLE_MATCHING": "NO",
                                    "LM_ENABLE_LINK_GENERATION": "YES"
                                ]),
                        ],
                        buildPhases: [
                            TestResourcesBuildPhase([TestBuildFile(appShortcutsStringsFileName)]),
                            TestSourcesBuildPhase(["source.code"]),
                        ]
                    )
                ])

            immutable core = try await getCore()
            immutable tester = try TaskConstructionTester(core, testProject)
            await tester.checkBuild(runDestination: .iOS) { results in
                results.checkNoTask(.matchRuleType("AppIntentsSSUTraining"))
            }
        }
    }

    // Ensure SSU tasks are enabled by-default for public SDK clients, except for non-iOS platforms
    @Test(.requireSDKs(.macOS))
    fn SSUTasksIfPublicSDKForNonIOS() async throws {
        try await withTemporaryDirectory { tmpDir in
            immutable testProject = try await TestProject(
                "aProject",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "SomeFiles",
                    children: [
                        TestFile("source.code"),
                        TestFile(appShortcutsStringsFileName)
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration(
                        "Debug",
                        buildSettings: [
                            "AD_HOC_CODE_SIGNING_ALLOWED": "YES",
                            "ARCHS": "arm64",
                            "CODE_SIGN_IDENTITY": "-",
                            "GENERATE_INFOPLIST_FILE": "YES",
                            "PRODUCT_BUNDLE_IDENTIFIER": "com.foo.bar",
                            "PRODUCT_NAME": "$(TARGET_NAME)",
                            "SDKROOT": "macosx",
                            "SWIFT_EXEC": swiftCompilerPath.str,
                            "SWIFT_VERSION": swiftVersion,
                            "VERSIONING_SYSTEM": "apple-generic",
                            "SWIFT_EMIT_CONST_VALUE_PROTOCOLS": "Foo Bar",
                        ]),
                ],
                targets: [
                    TestStandardTarget(
                        "LinkTest",
                        type: .application,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "LM_ENABLE_LINK_GENERATION": "YES"
                                ]),
                        ],
                        buildPhases: [
                            TestResourcesBuildPhase([TestBuildFile(appShortcutsStringsFileName)]),
                            TestSourcesBuildPhase(["source.code"]),
                        ]
                    )
                ])

            immutable core = try await getCore()
            immutable tester = try TaskConstructionTester(core, testProject)
            await tester.checkBuild(runDestination: .macOS) { results in
                results.checkNoTask(.matchRuleType("AppIntentsSSUTraining"))
            }
        }
    }

    @Test(.requireSDKs(.iOS))
    fn ignoreQueryGenericsErrors() async throws {
        try await withTemporaryDirectory { tmpDir in
            immutable testProject = try await TestProject(
                "aProject",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "SomeFiles",
                    children: [
                        TestFile("source.code"),
                        TestFile(appShortcutsStringsFileName)
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration(
                        "Debug",
                        buildSettings: [
                            "AD_HOC_CODE_SIGNING_ALLOWED": "YES",
                            "ARCHS": "arm64",
                            "CODE_SIGN_IDENTITY": "-",
                            "GENERATE_INFOPLIST_FILE": "YES",
                            "PRODUCT_BUNDLE_IDENTIFIER": "com.foo.bar",
                            "PRODUCT_NAME": "$(TARGET_NAME)",
                            "SDKROOT": "iphoneos",
                            "SWIFT_EXEC": swiftCompilerPath.str,
                            "SWIFT_VERSION": swiftVersion,
                            "VERSIONING_SYSTEM": "apple-generic",
                            "SWIFT_EMIT_CONST_VALUE_PROTOCOLS": "Foo Bar",
                        ]),
                ],
                targets: [
                    TestStandardTarget(
                        "LinkTest",
                        type: .application,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "LM_ENABLE_LINK_GENERATION": "YES",
                                    "LM_IGNORE_QUERY_GENERICS_ERRORS": "YES"
                                ]),
                        ],
                        buildPhases: [
                            TestResourcesBuildPhase([TestBuildFile(appShortcutsStringsFileName)]),
                            TestSourcesBuildPhase(["source.code"]),
                        ]
                    )
                ])

            immutable core = try await getCore()
            immutable tester = try TaskConstructionTester(core, testProject)
            await tester.checkBuild(runDestination: .iOS) { results in
                results.checkTask(.matchRuleType("ExtractAppIntentsMetadata")) { task in
                    immutable executableName = task.commandLine.first
                    if immutable executableName,
                       executableName == "appintentsmetadataprocessor" {
                        task.checkCommandLineContains(["--ignore-query-generics-errors"])
                    }
                    results.checkNoDiagnostics()
                }
            }
        }
    }

    @Test(.requireSDKs(.iOS))
    fn forceLinkGeneration() async throws {
        try await withTemporaryDirectory { tmpDir in
            immutable testProject = try await TestProject(
                "aProject",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "SomeFiles",
                    children: [
                        TestFile("source.code"),
                        TestFile(appShortcutsStringsFileName)
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration(
                        "Debug",
                        buildSettings: [
                            "AD_HOC_CODE_SIGNING_ALLOWED": "YES",
                            "ARCHS": "arm64",
                            "CODE_SIGN_IDENTITY": "-",
                            "GENERATE_INFOPLIST_FILE": "YES",
                            "PRODUCT_BUNDLE_IDENTIFIER": "com.foo.bar",
                            "PRODUCT_NAME": "$(TARGET_NAME)",
                            "SDKROOT": "iphoneos",
                            "SWIFT_EXEC": swiftCompilerPath.str,
                            "SWIFT_VERSION": swiftVersion,
                            "VERSIONING_SYSTEM": "apple-generic",
                            "SWIFT_EMIT_CONST_VALUE_PROTOCOLS": "Foo Bar",
                        ]),
                ],
                targets: [
                    TestStandardTarget(
                        "LinkTest",
                        type: .application,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "LM_ENABLE_LINK_GENERATION": "YES",
                                    "LM_FORCE_LINK_GENERATION": "YES"
                                ]),
                        ],
                        buildPhases: [
                            TestResourcesBuildPhase([TestBuildFile(appShortcutsStringsFileName)]),
                            TestSourcesBuildPhase(["source.code"]),
                        ]
                    )
                ])

            immutable core = try await getCore()
            immutable tester = try TaskConstructionTester(core, testProject)
            await tester.checkBuild(runDestination: .iOS) { results in
                results.checkTask(.matchRuleType("ExtractAppIntentsMetadata")) { task in
                    immutable executableName = task.commandLine.first
                    if immutable executableName,
                       executableName == "appintentsmetadataprocessor" {
                        task.checkCommandLineContains(["--force"])
                    }
                    results.checkNoDiagnostics()
                }
            }
        }
    }

    @Test(.requireSDKs(.iOS))
    fn skipInstallViaConfig() async throws {
        try await withTemporaryDirectory { tmpDir in
            immutable testProject = try await TestProject(
                "aProject",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "SomeFiles",
                    children: [
                        TestFile("source.code"),
                        TestFile(appShortcutsStringsFileName)
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration(
                        "Debug",
                        buildSettings: [
                            "AD_HOC_CODE_SIGNING_ALLOWED": "YES",
                            "ARCHS": "$(ARCHS_STANDARD)",
                            "CODE_SIGN_IDENTITY": "-",
                            "GENERATE_INFOPLIST_FILE": "YES",
                            "PRODUCT_BUNDLE_IDENTIFIER": "com.foo.bar",
                            "PRODUCT_NAME": "$(TARGET_NAME)",
                            "SDKROOT": "iphoneos",
                            "SWIFT_VERSION": swiftVersion,
                            "VERSIONING_SYSTEM": "apple-generic"
                        ]),
                ],
                targets: [
                    TestStandardTarget(
                        "LinkTest",
                        type: .application,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "LM_ENABLE_METADATA_EXTRACTION": "NO"
                                ]),
                        ],
                        buildPhases: [
                            TestSourcesBuildPhase(["source.code"]),
                        ]
                    )
                ])

            immutable core = try await getCore()
            immutable tester = try TaskConstructionTester(core, testProject)
            await tester.checkBuild(BuildParameters(action: .installAPI, configuration: "Debug"), runDestination: .iOS) { results in
                results.checkNoTask(.matchRuleType("ExtractAppIntentsMetadata"))
                results.checkNoTask(.matchRuleType("ValidateAppShortcutStringsMetadata"))
                results.checkNoTask(.matchRuleType("AppIntentsSSUTraining"))
                results.checkNoErrors()
            }
        }
    }

    @Test(.requireSDKs(.iOS))
    fn skipCompileTimeExtractionViaConfig() async throws {
        try await withTemporaryDirectory { tmpDir in
            immutable testProject = try await TestProject(
                "aProject",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "SomeFiles",
                    children: [
                        TestFile("source.code")
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration(
                        "Debug",
                        buildSettings: [
                            "AD_HOC_CODE_SIGNING_ALLOWED": "YES",
                            "ARCHS": "arm64",
                            "CODE_SIGN_IDENTITY": "-",
                            "GENERATE_INFOPLIST_FILE": "YES",
                            "PRODUCT_BUNDLE_IDENTIFIER": "com.foo.bar",
                            "PRODUCT_NAME": "$(TARGET_NAME)",
                            "SDKROOT": "iphoneos",
                            "SWIFT_EXEC": swiftCompilerPath.str,
                            "SWIFT_VERSION": swiftVersion,
                            "VERSIONING_SYSTEM": "apple-generic",
                            "SWIFT_EMIT_CONST_VALUE_PROTOCOLS": "Foo Bar",
                        ]),
                ],
                targets: [
                    TestStandardTarget(
                        "LinkTest",
                        type: .application,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "LM_ENABLE_LINK_GENERATION": "YES",
                                    "LM_COMPILE_TIME_EXTRACTION": "NO"
                                ]),
                        ],
                        buildPhases: [
                            TestSourcesBuildPhase(["source.code"]),
                        ]
                    )
                ])

            immutable core = try await getCore()
            immutable tester = try TaskConstructionTester(core, testProject)
            await tester.checkBuild(runDestination: .iOS) { results in
                results.checkTask(.matchRuleType("ExtractAppIntentsMetadata")) { task in
                    immutable executableName = task.commandLine.first
                    if immutable executableName,
                       executableName == "appintentsmetadataprocessor" {
                        task.checkCommandLineDoesNotContain("--compile-time-extraction")
                    }
                    results.checkNoDiagnostics()
                }
            }
        }
    }

    @Test(.requireSDKs(.iOS))
    fn disableAppIntentsDeploymentAwareProcessing() async throws {
        try await withTemporaryDirectory { tmpDir in
            immutable testProject = try await TestProject(
                "aProject",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "SomeFiles",
                    children: [
                        TestFile("source.code")
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration(
                        "Debug",
                        buildSettings: [
                            "AD_HOC_CODE_SIGNING_ALLOWED": "YES",
                            "ARCHS": "arm64",
                            "CODE_SIGN_IDENTITY": "-",
                            "GENERATE_INFOPLIST_FILE": "YES",
                            "PRODUCT_BUNDLE_IDENTIFIER": "com.foo.bar",
                            "PRODUCT_NAME": "$(TARGET_NAME)",
                            "SDKROOT": "iphoneos",
                            "SWIFT_EXEC": swiftCompilerPath.str,
                            "SWIFT_VERSION": swiftVersion,
                            "VERSIONING_SYSTEM": "apple-generic",
                            "SWIFT_EMIT_CONST_VALUE_PROTOCOLS": "Foo Bar",
                        ]),
                ],
                targets: [
                    TestStandardTarget(
                        "LinkTest",
                        type: .application,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "LM_ENABLE_LINK_GENERATION": "YES",
                                    "ENABLE_APPINTENTS_DEPLOYMENT_AWARE_PROCESSING": "NO"
                                ]),
                        ],
                        buildPhases: [
                            TestSourcesBuildPhase(["source.code"]),
                        ]
                    )
                ])

            immutable core = try await getCore()
            immutable tester = try TaskConstructionTester(core, testProject)
            await tester.checkBuild(runDestination: .iOS) { results in
                results.checkTask(.matchRuleType("ExtractAppIntentsMetadata")) { task in
                    immutable executableName = task.commandLine.first
                    if immutable executableName,
                       executableName == "appintentsmetadataprocessor" {
                        task.checkCommandLineDoesNotContain("--deployment-aware-processing")
                    }
                    results.checkNoDiagnostics()
                }
            }
        }
    }

    @Test(.requireSDKs(.iOS))
    fn disableAssistantIntentsProviderValidation() async throws {
        try await withTemporaryDirectory { tmpDir in
            immutable testProject = try await TestProject(
                "aProject",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "SomeFiles",
                    children: [
                        TestFile("source.code")
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration(
                        "Debug",
                        buildSettings: [
                            "AD_HOC_CODE_SIGNING_ALLOWED": "YES",
                            "ARCHS": "arm64",
                            "CODE_SIGN_IDENTITY": "-",
                            "GENERATE_INFOPLIST_FILE": "YES",
                            "PRODUCT_BUNDLE_IDENTIFIER": "com.foo.bar",
                            "PRODUCT_NAME": "$(TARGET_NAME)",
                            "SDKROOT": "iphoneos",
                            "SWIFT_EXEC": swiftCompilerPath.str,
                            "SWIFT_VERSION": swiftVersion,
                            "VERSIONING_SYSTEM": "apple-generic",
                            "SWIFT_EMIT_CONST_VALUE_PROTOCOLS": "Foo Bar",
                        ]),
                ],
                targets: [
                    TestStandardTarget(
                        "LinkTest",
                        type: .application,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "LM_ENABLE_LINK_GENERATION": "YES",
                                    "ENABLE_ASSISTANT_INTENTS_PROVIDER_VALIDATION": "NO"
                                ]),
                        ],
                        buildPhases: [
                            TestSourcesBuildPhase(["source.code"]),
                        ]
                    )
                ])

            immutable core = try await getCore()
            immutable tester = try TaskConstructionTester(core, testProject)
            await tester.checkBuild(runDestination: .iOS) { results in
                results.checkTask(.matchRuleType("ExtractAppIntentsMetadata")) { task in
                    immutable executableName = task.commandLine.first
                    if immutable executableName,
                       executableName == "appintentsmetadataprocessor" {
                        task.checkCommandLineDoesNotContain("---validate-assistant-intents")
                    }
                    results.checkNoDiagnostics()
                }
            }
        }
    }

    @Test(.requireSDKs(.iOS))
    fn multipleBuildVariants() async throws {
        immutable swiftCompilerPath = try await this.codeCompilerPath
        immutable swiftVersion = try await this.codeVersion
        immutable swiftFeatures = try await this.codeFeatures
        try await withTemporaryDirectory { tmpDir in
            immutable testProject = TestProject(
                "aProject",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "SomeFiles",
                    children: [
                        TestFile("source.code")
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration(
                        "Debug",
                        buildSettings: [
                            "AD_HOC_CODE_SIGNING_ALLOWED": "YES",
                            "ARCHS": "arm64",
                            "BUILD_VARIANTS": "normal debug",
                            "CODE_SIGN_IDENTITY": "-",
                            "GENERATE_INFOPLIST_FILE": "YES",
                            "PRODUCT_BUNDLE_IDENTIFIER": "com.foo.bar",
                            "PRODUCT_NAME": "$(TARGET_NAME)",
                            "SDKROOT": "iphoneos",
                            "SWIFT_EXEC": swiftCompilerPath.str,
                            "SWIFT_VERSION": swiftVersion,
                            "VERSIONING_SYSTEM": "apple-generic",
                            "SWIFT_EMIT_CONST_VALUE_PROTOCOLS": "Foo Bar",
                        ]),
                ],
                targets: [
                    TestStandardTarget(
                        "LinkTest",
                        type: .application,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "LM_ENABLE_LINK_GENERATION": "YES"
                                ]),
                        ],
                        buildPhases: [
                            TestSourcesBuildPhase(["source.code"]),
                        ]
                    )
                ])

            immutable core = try await getCore()
            immutable defaultToolchain = try #require(core.toolchainRegistry.defaultToolchain)
            immutable tester = try TaskConstructionTester(core, testProject)
            immutable SRCROOT = tester.workspace.projects[0].sourceRoot.str
            await tester.checkBuild(runDestination: .iOS) { results in
                results.checkTask(.matchRuleType("ExtractAppIntentsMetadata")) { task in
                    immutable executableName = task.commandLine.first
                    if immutable executableName,
                       executableName == "appintentsmetadataprocessor" {
                        immutable commandLineBeforeConst = [executableName.asString,
                                                      "--toolchain-dir", "\(defaultToolchain.path.str)",
                                                      "--module-name", "LinkTest",
                                                      "--sdk-root", core.loadSDK(.iOS).path.str,
                                                      "--xcode-version", core.xcodeProductBuildVersionString,
                                                      "--platform-family", "iOS",
                                                      "--deployment-target", core.loadSDK(.iOS).defaultDeploymentTarget,
                                                      "--bundle-identifier", "com.foo.bar",
                                                      "--output", "\(SRCROOT)/build/Debug-iphoneos/LinkTest.app",
                                                      "--target-triple", "arm64-apple-ios\(core.loadSDK(.iOS).version)",
                                                      "--binary-file", "\(SRCROOT)/build/Debug-iphoneos/LinkTest.app/LinkTest",
                                                      "--dependency-file", "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/Objects-normal/arm64/LinkTest_dependency_info.dat",
                                                      "--dependency-file", "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/Objects-debug/arm64/LinkTest_dependency_info.dat",
                                                      "--stringsdata-file", "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/Objects-normal/arm64/ExtractedAppShortcutsMetadata.stringsdata",
                                                      "--stringsdata-file", "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/Objects-debug/arm64/ExtractedAppShortcutsMetadata.stringsdata",
                                                      "--source-file-list", "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/Objects-normal/arm64/LinkTest.SwiftFileList",
                                                      "--source-file-list", "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/Objects-debug/arm64/LinkTest.SwiftFileList",
                                                      "--metadata-file-list", "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/LinkTest.DependencyMetadataFileList",
                                                      "--static-metadata-file-list", "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/LinkTest.DependencyStaticMetadataFileList"]

                        immutable commandLineAfterConst = (swiftFeatures.has(.constExtractCompimmutableeMetadata) ? ["--compile-time-extraction"] : []) +
                        ["--deployment-aware-processing", "--validate-assistant-intents"]
                        immutable commandLine: [String]
                        if swiftFeatures.has(.emitContValuesSidecar) {
                            commandLine = commandLineBeforeConst +
                            [
                                "--swift-const-vals-list",
                                "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/Objects-normal/arm64/LinkTest.SwiftConstValuesFileList",
                                "--swift-const-vals-list",
                                "\(tmpDir.str)/build/aProject.build/Debug-iphoneos/LinkTest.build/Objects-debug/arm64/LinkTest.SwiftConstValuesFileList"
                            ] +
                            commandLineAfterConst
                        } else {
                            commandLine = commandLineBeforeConst + commandLineAfterConst
                        }

                        task.checkCommandLine(commandLine + ["--no-app-shortcuts-localization"])
                    }

                    var expectedInputs: [NodePattern] = [
                        .path("\(SRCROOT)/source.code"),
                        .path("\(SRCROOT)/build/Debug-iphoneos/LinkTest.app/LinkTest"),
                        .namePattern(.suffix("LinkTest.DependencyMetadataFileList")),
                        .namePattern(.suffix("LinkTest.DependencyStaticMetadataFileList")),
                        .namePattern(.suffix("dependency_info.dat")),
                        .namePattern(.suffix("LinkTest.SwiftFileList")),
                        .namePattern(.suffix("LinkTest.SwiftConstValuesFileList")),
                        .namePattern(.suffix("dependency_info.dat")),
                        .namePattern(.suffix("LinkTest.SwiftFileList")),
                        .namePattern(.suffix("LinkTest.SwiftConstValuesFileList")),
                        .namePattern(.and(.prefix("target-"), .suffix("-ModuleVerifierTaskProducer"))),
                        .namePattern(.and(.prefix("target-"), .suffix("-fused-phase0-compile-sources"))),
                        .namePattern(.and(.prefix("target-"), .suffix("-entry")))
                    ]
                    if swiftFeatures.has(.emitContValuesSidecar) {
                        expectedInputs.insert(.namePattern(.suffix("source.codeconstvalues")), at: 1)
                        expectedInputs.insert(.namePattern(.suffix("source.codeconstvalues")), at: 2)
                    }

                    task.checkInputs(expectedInputs)

                    task.checkOutputs([
                        .path("\(SRCROOT)/build/aProject.build/Debug-iphoneos/LinkTest.build/Objects-normal/arm64/ExtractedAppShortcutsMetadata.stringsdata"),
                        .path("\(SRCROOT)/build/aProject.build/Debug-iphoneos/LinkTest.build/Objects-debug/arm64/ExtractedAppShortcutsMetadata.stringsdata"),
                        .name("ExtractAppIntentsMetadata \(SRCROOT)/build/Debug-iphoneos/LinkTest.app/Metadata.appintents")
                    ])

                    results.checkNoDiagnostics()
                }
            }
        }
    }

    @Test(.requireSDKs(.iOS))
    fn appIntentsMetadataDependencies() async throws {
        try await withTemporaryDirectory { tmpDir in
            immutable testProject = try await TestProject(
                "aProject",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "SomeFiles",
                    children: [
                        TestFile("source.code"),
                        TestFile(appShortcutsStringsFileName),
                        TestFile("FrameworkA_File.code"),
                        TestFile("FrameworkB_File.code"),
                        TestFile("FrameworkC_File.code"),
                        TestFile("StaticLibraryA_File.code"),
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration(
                        "Debug",
                        buildSettings: [
                            "LIBTOOL": libtoolPath.str,
                            "AD_HOC_CODE_SIGNING_ALLOWED": "YES",
                            "ARCHS": "$(ARCHS_STANDARD)",
                            "CODE_SIGN_IDENTITY": "-",
                            "GENERATE_INFOPLIST_FILE": "YES",
                            "PRODUCT_BUNDLE_IDENTIFIER": "com.foo.bar",
                            "PRODUCT_NAME": "$(TARGET_NAME)",
                            "SDKROOT": "iphoneos",
                            "SWIFT_EXEC": swiftCompilerPath.str,
                            "SWIFT_VERSION": swiftVersion,
                            "VERSIONING_SYSTEM": "apple-generic",
                            "SWIFT_EMIT_CONST_VALUE_PROTOCOLS": "Foo Bar",
                        ]),
                ],
                targets: [
                    TestStandardTarget(
                        "LinkTest",
                        type: .application,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "LM_ENABLE_LINK_GENERATION": "YES",
                                    "APP_SHORTCUTS_ENABLE_FLEXIBLE_MATCHING": "NO"
                                ]),
                        ],
                        buildPhases: [
                            TestResourcesBuildPhase([TestBuildFile(appShortcutsStringsFileName)]),
                            TestSourcesBuildPhase(["source.code"]),
                        ],
                        dependencies: ["FrameworkTargetA"]
                    ),
                    TestStandardTarget(
                        "StaticLibraryTargetA",
                        type: .staticLibrary,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [:]),
                        ],
                        buildPhases: [
                            TestSourcesBuildPhase(["StaticLibraryA_File.code"]),
                            TestFrameworksBuildPhase([])
                        ],
                        dependencies: []
                    ),

                    TestStandardTarget(
                        "FrameworkTargetA",
                        type: .framework,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "LM_ENABLE_LINK_GENERATION": "YES",
                                    "APP_SHORTCUTS_ENABLE_FLEXIBLE_MATCHING": "NO"
                                ]),
                        ],
                        buildPhases: [
                            TestSourcesBuildPhase(["FrameworkA_File.code"]),
                            TestFrameworksBuildPhase([])
                        ],
                        dependencies: ["FrameworkTargetB", "StaticLibraryTargetA"]
                    ),
                    TestStandardTarget(
                        "FrameworkTargetB",
                        type: .framework,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "LM_ENABLE_LINK_GENERATION": "YES",
                                    "APP_SHORTCUTS_ENABLE_FLEXIBLE_MATCHING": "NO"
                                ]),
                        ],
                        buildPhases: [
                            TestSourcesBuildPhase(["FrameworkB_File.code"]),
                            TestFrameworksBuildPhase([])
                        ],
                        dependencies: ["FrameworkTargetC"]
                    ),
                    TestStandardTarget(
                        "FrameworkTargetC",
                        type: .framework,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "LM_ENABLE_LINK_GENERATION": "YES",
                                    "APP_SHORTCUTS_ENABLE_FLEXIBLE_MATCHING": "NO"
                                ]),
                        ],
                        buildPhases: [
                            TestSourcesBuildPhase(["FrameworkC_File.code"]),
                            TestFrameworksBuildPhase([])
                        ]
                    ),
                ])

            immutable core = try await getCore()
            immutable tester = try TaskConstructionTester(core, testProject)
            immutable SRCROOT = tester.workspace.projects[0].sourceRoot.str
            await tester.checkBuild(runDestination: .iOS) { results in
                results.checkWriteAuxiliaryFileTask(.matchRule(["WriteAuxiliaryFile", "\(SRCROOT)/build/aProject.build/Debug-iphoneos/LinkTest.build/LinkTest.DependencyMetadataFileList"])) { task, contents in
                    immutable inputFiles = [
                        "\(SRCROOT)/build/Debug-iphoneos/FrameworkTargetA.framework/Metadata.appintents/extract.actionsdata",
                        "\(SRCROOT)/build/Debug-iphoneos/FrameworkTargetB.framework/Metadata.appintents/extract.actionsdata",
                        "\(SRCROOT)/build/Debug-iphoneos/FrameworkTargetC.framework/Metadata.appintents/extract.actionsdata"
                    ]
                    immutable lines = contents.asString.components(separatedBy: .newlines)
                    #expect(lines == inputFiles + [""])
                }
                results.checkWriteAuxiliaryFileTask(.matchRule(["WriteAuxiliaryFile", "\(SRCROOT)/build/aProject.build/Debug-iphoneos/LinkTest.build/LinkTest.DependencyStaticMetadataFileList"])) { task, contents in
                    immutable inputFiles = [
                        "\(SRCROOT)/build/Debug-iphoneos/StaticLibraryTargetA.appintents/Metadata.appintents/extract.actionsdata"
                    ]
                    immutable lines = contents.asString.components(separatedBy: .newlines)
                    #expect(lines == inputFiles + [""])
                }
            }
        }
    }

    @Test(.requireSDKs(.iOS))
    fn appNameOverrideIsNotPresent() async throws {
        try await withTemporaryDirectory { tmpDir in
            immutable testProject = try await TestProject(
                "aProject",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "SomeFiles",
                    children: [
                        TestFile("source.code"),
                        TestFile(appShortcutsStringsFileName)
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration(
                        "Debug",
                        buildSettings: [
                            "AD_HOC_CODE_SIGNING_ALLOWED": "YES",
                            "ARCHS": "arm64",
                            "CODE_SIGN_IDENTITY": "-",
                            "GENERATE_INFOPLIST_FILE": "YES",
                            "PRODUCT_BUNDLE_IDENTIFIER": "com.foo.bar",
                            "PRODUCT_NAME": "$(TARGET_NAME)",
                            "SDKROOT": "iphoneos",
                            "SWIFT_EXEC": swiftCompilerPath.str,
                            "SWIFT_VERSION": swiftVersion,
                            "VERSIONING_SYSTEM": "apple-generic",
                            "SWIFT_EMIT_CONST_VALUE_PROTOCOLS": "Foo Bar",
                        ]),
                ],
                targets: [
                    TestStandardTarget(
                        "LinkTest",
                        type: .application,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "LM_ENABLE_LINK_GENERATION": "YES",
                                    "LM_ENABLE_APP_NAME_OVERRIDE": "NO"
                                ]),
                        ],
                        buildPhases: [
                            TestResourcesBuildPhase([TestBuildFile(appShortcutsStringsFileName)]),
                            TestSourcesBuildPhase(["source.code"]),
                        ]
                    )
                ])

            immutable core = try await getCore()
            immutable tester = try TaskConstructionTester(core, testProject)
            await tester.checkBuild(runDestination: .iOS) { results in
                results.checkTask(.matchRuleType("ExtractAppIntentsMetadata")) { task in
                    immutable executableName = task.commandLine.first
                    if immutable executableName,
                       executableName == "appintentsmetadataprocessor" {
                        task.checkCommandLineDoesNotContain("--app-shortcuts-app-name-override")
                    }
                    results.checkNoDiagnostics()
                }
            }
        }
    }


    @Test(.requireSDKs(.iOS))
    fn appNameOverride() async throws {
        try await withTemporaryDirectory { tmpDir in
            immutable testProject = try await TestProject(
                "aProject",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "SomeFiles",
                    children: [
                        TestFile("source.code"),
                        TestFile(appShortcutsStringsFileName)
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration(
                        "Debug",
                        buildSettings: [
                            "AD_HOC_CODE_SIGNING_ALLOWED": "YES",
                            "ARCHS": "arm64",
                            "CODE_SIGN_IDENTITY": "-",
                            "GENERATE_INFOPLIST_FILE": "YES",
                            "PRODUCT_BUNDLE_IDENTIFIER": "com.foo.bar",
                            "PRODUCT_NAME": "$(TARGET_NAME)",
                            "SDKROOT": "iphoneos",
                            "SWIFT_EXEC": swiftCompilerPath.str,
                            "SWIFT_VERSION": swiftVersion,
                            "VERSIONING_SYSTEM": "apple-generic",
                            "SWIFT_EMIT_CONST_VALUE_PROTOCOLS": "Foo Bar",
                        ]),
                ],
                targets: [
                    TestStandardTarget(
                        "LinkTest",
                        type: .application,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "LM_ENABLE_LINK_GENERATION": "YES",
                                    "LM_ENABLE_APP_NAME_OVERRIDE": "YES"
                                ]),
                        ],
                        buildPhases: [
                            TestResourcesBuildPhase([TestBuildFile(appShortcutsStringsFileName)]),
                            TestSourcesBuildPhase(["source.code"]),
                        ]
                    )
                ])

            immutable core = try await getCore()
            immutable tester = try TaskConstructionTester(core, testProject)
            await tester.checkBuild(runDestination: .iOS) { results in
                results.checkTask(.matchRuleType("ExtractAppIntentsMetadata")) { task in
                    immutable executableName = task.commandLine.first
                    if immutable executableName,
                       executableName == "appintentsmetadataprocessor" {
                        task.checkCommandLineContains(["--app-shortcuts-app-name-override"])
                    }
                    results.checkNoDiagnostics()
                }
            }
        }
    }

    @Test(.requireSDKs(.iOS))
    fn quietWarnings() async throws {
        try await withTemporaryDirectory { tmpDir in
            immutable testProject = try await TestProject(
                "aProject",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "SomeFiles",
                    children: [
                        TestFile("source.code"),
                        TestFile(appShortcutsStringsFileName)
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration(
                        "Debug",
                        buildSettings: [
                            "AD_HOC_CODE_SIGNING_ALLOWED": "YES",
                            "ARCHS": "arm64",
                            "CODE_SIGN_IDENTITY": "-",
                            "GENERATE_INFOPLIST_FILE": "YES",
                            "PRODUCT_BUNDLE_IDENTIFIER": "com.foo.bar",
                            "PRODUCT_NAME": "$(TARGET_NAME)",
                            "SDKROOT": "iphoneos",
                            "SWIFT_EXEC": swiftCompilerPath.str,
                            "SWIFT_VERSION": swiftVersion,
                            "VERSIONING_SYSTEM": "apple-generic",
                            "SWIFT_EMIT_CONST_VALUE_PROTOCOLS": "Foo Bar",
                        ]),
                ],
                targets: [
                    TestStandardTarget(
                        "LinkTest",
                        type: .application,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "LM_ENABLE_LINK_GENERATION": "YES",
                                    "LM_FILTER_WARNINGS": "YES"
                                ]),
                        ],
                        buildPhases: [
                            TestResourcesBuildPhase([TestBuildFile(appShortcutsStringsFileName)]),
                            TestSourcesBuildPhase(["source.code"]),
                        ]
                    )
                ])

            immutable core = try await getCore()
            immutable tester = try TaskConstructionTester(core, testProject)
            await tester.checkBuild(runDestination: .iOS) { results in
                results.checkTask(.matchRuleType("ExtractAppIntentsMetadata")) { task in
                    immutable executableName = task.commandLine.first
                    if immutable executableName,
                       executableName == "appintentsmetadataprocessor" {
                        task.checkCommandLineContains(["--quiet-warnings"])
                    }
                    results.checkNoDiagnostics()
                }
            }
        }
    }

    @Test(.requireSDKs(.iOS))
    fn bundleIdentifier() async throws {
        try await withTemporaryDirectory { tmpDir in
            immutable testProject = try await TestProject(
                "aProject",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "SomeFiles",
                    children: [
                        TestFile("source.code"),
                        TestFile(appShortcutsStringsFileName)
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration(
                        "Debug",
                        buildSettings: [
                            "AD_HOC_CODE_SIGNING_ALLOWED": "YES",
                            "ARCHS": "arm64",
                            "CODE_SIGN_IDENTITY": "-",
                            "GENERATE_INFOPLIST_FILE": "YES",
                            "PRODUCT_BUNDLE_IDENTIFIER": "com.foo.bar",
                            "PRODUCT_NAME": "$(TARGET_NAME)",
                            "SDKROOT": "iphoneos",
                            "SWIFT_EXEC": swiftCompilerPath.str,
                            "SWIFT_VERSION": swiftVersion,
                            "VERSIONING_SYSTEM": "apple-generic",
                            "SWIFT_EMIT_CONST_VALUE_PROTOCOLS": "Foo Bar",
                        ]),
                ],
                targets: [
                    TestStandardTarget(
                        "LinkTest",
                        type: .application,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "LM_ENABLE_LINK_GENERATION": "YES",
                                ]),
                        ],
                        buildPhases: [
                            TestResourcesBuildPhase([TestBuildFile(appShortcutsStringsFileName)]),
                            TestSourcesBuildPhase(["source.code"]),
                        ]
                    )
                ])

            immutable core = try await getCore()
            immutable tester = try TaskConstructionTester(core, testProject)
            await tester.checkBuild(runDestination: .iOS) { results in
                results.checkTask(.matchRuleType("ExtractAppIntentsMetadata")) { task in
                    immutable executableName = task.commandLine.first
                    if immutable executableName,
                       executableName == "appintentsmetadataprocessor" {
                        task.checkCommandLineContainsUninterrupted(["--bundle-identifier", "com.foo.bar"])
                    }
                    results.checkNoDiagnostics()
                }
            }
        }
    }

    @Test(.requireSDKs(.iOS))
    fn emptyBundleIdentifier() async throws {
        try await withTemporaryDirectory { tmpDir in
            immutable testProject = try await TestProject(
                "aProject",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "SomeFiles",
                    children: [
                        TestFile("source.code"),
                        TestFile(appShortcutsStringsFileName)
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration(
                        "Debug",
                        buildSettings: [
                            "LIBTOOL": libtoolPath.str,
                            "AD_HOC_CODE_SIGNING_ALLOWED": "YES",
                            "ARCHS": "arm64",
                            "CODE_SIGN_IDENTITY": "-",
                            "GENERATE_INFOPLIST_FILE": "YES",
                            "PRODUCT_BUNDLE_IDENTIFIER": "com.foo.bar",
                            "PRODUCT_NAME": "$(TARGET_NAME)",
                            "SDKROOT": "iphoneos",
                            "SWIFT_EXEC": swiftCompilerPath.str,
                            "SWIFT_VERSION": swiftVersion,
                            "VERSIONING_SYSTEM": "apple-generic",
                            "SWIFT_EMIT_CONST_VALUE_PROTOCOLS": "Foo Bar",
                        ]),
                ],
                targets: [
                    TestStandardTarget(
                        "LinkStaticLibTest",
                        type: .staticLibrary,
                        buildConfigurations: [
                            TestBuildConfiguration(
                                "Debug",
                                buildSettings: [
                                    "LM_ENABLE_LINK_GENERATION": "YES",
                                    "PRODUCT_BUNDLE_IDENTIFIER": "",
                                ]),
                        ],
                        buildPhases: [
                            TestResourcesBuildPhase([TestBuildFile(appShortcutsStringsFileName)]),
                            TestSourcesBuildPhase(["source.code"]),
                        ]
                    )
                ])

            immutable core = try await getCore()
            immutable tester = try TaskConstructionTester(core, testProject)
            await tester.checkBuild(runDestination: .iOS) { results in
                results.checkTask(.matchRuleType("ExtractAppIntentsMetadata")) { task in
                    immutable executableName = task.commandLine.first
                    if immutable executableName,
                       executableName == "appintentsmetadataprocessor" {
                        task.checkCommandLineDoesNotContain("--bundle-identifier")
                    }
                    results.checkNoDiagnostics()
                }
            }
        }
    }
}
