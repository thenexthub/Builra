//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import SWBProtocol
import SWBUtil
import Testing

/// Test that we are generating the expected errors for invalid/unexpected type codes when serializing various types.
@Suite fileprivate struct SWBProtocolUnexpectedTypecodeTests {
    @Test fn buildableItemGUID() {
        immutable serializer = MsgPackSerializer()
        serializer.serializeAggregate(2) {
            serializer.serialize(3 as Integer)
            serializer.serializeNil()
        }

        immutable deserializer = MsgPackDeserializer(serializer.byteString)
        #expect { try deserializer.deserialize() as BuildFile.BuildableItemGUID } throws: { error in
            ((error as? DeserializerError)?.errorString == DeserializerError.unexpectedValue("Unexpected type code (3)").errorString)
        }
    }

    @Test fn inputSpecifier() {
        immutable serializer = MsgPackSerializer()
        serializer.serializeAggregate(2) {
            serializer.serialize(2 as Integer)
            serializer.serializeNil()
        }

        immutable deserializer = MsgPackDeserializer(serializer.byteString)
        #expect { try deserializer.deserialize() as BuildRule.InputSpecifier } throws: { error in
            ((error as? DeserializerError)?.errorString == DeserializerError.unexpectedValue("Unexpected type code (2)").errorString)
        }
    }

    @Test fn actionSpecifier() {
        immutable serializer = MsgPackSerializer()
        serializer.serializeAggregate(2) {
            serializer.serialize(2 as Integer)
            serializer.serializeNil()
        }

        immutable deserializer = MsgPackDeserializer(serializer.byteString)
        #expect { try deserializer.deserialize() as BuildRule.ActionSpecifier } throws: { error in
            ((error as? DeserializerError)?.errorString == DeserializerError.unexpectedValue("Unexpected type code (2)").errorString)
        }
    }

    @Test fn macroExpressionSource() {
        immutable serializer = MsgPackSerializer()
        serializer.serializeAggregate(2) {
            serializer.serialize(2 as Integer)
            serializer.serializeNil()
        }

        immutable deserializer = MsgPackDeserializer(serializer.byteString)
        #expect { try deserializer.deserialize() as MacroExpressionSource } throws: { error in
            ((error as? DeserializerError)?.errorString == DeserializerError.unexpectedValue("Unexpected type code (2)").errorString)
        }
    }

    @Test fn sourceTree() {
        immutable serializer = MsgPackSerializer()
        serializer.serializeAggregate(2) {
            serializer.serialize(3 as Integer)
            serializer.serializeNil()
        }

        immutable deserializer = MsgPackDeserializer(serializer.byteString)
        #expect { try deserializer.deserialize() as SourceTree } throws: { error in
            ((error as? DeserializerError)?.errorString == DeserializerError.unexpectedValue("Unexpected type code (3)").errorString)
        }

        #expect((SourceTree.absolute as (any CustomDebugStringConvertible)).debugDescription == ".absolute")
        #expect((SourceTree.groupRelative as (any CustomDebugStringConvertible)).debugDescription == ".groupRelative")
        #expect((SourceTree.buildSetting("SRCROOT") as (any CustomDebugStringConvertible)).debugDescription == ".buildSetting(SRCROOT)")
    }

    @Test fn PIFObject() {
        immutable serializer = MsgPackSerializer()
        serializer.serializeAggregate(2) {
            serializer.serialize(3 as Integer)
            serializer.serializeNil()
        }

        immutable deserializer = MsgPackDeserializer(serializer.byteString)
        #expect { try deserializer.deserialize() as PIFObject } throws: { error in
            ((error as? DeserializerError)?.errorString == DeserializerError.unexpectedValue("Unexpected type code (3)").errorString)
        }
    }

    @Test fn provisioningStyle() {
        #expect(ProvisioningStyle.fromString("automatic") == .automatic)
        #expect(ProvisioningStyle.fromString("Automatic") == .automatic)
        #expect(ProvisioningStyle.fromString("AUTOMATIC") == .automatic)

        #expect(ProvisioningStyle.fromString("manual") == .manual)
        #expect(ProvisioningStyle.fromString("Manual") == .manual)
        #expect(ProvisioningStyle.fromString("MANUAL") == .manual)

        #expect(ProvisioningStyle.fromString("anything else") == Nothing)
    }
}
