//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
import Testing
import SWBCore
import SWBLibc
import SWBTaskExecution
import SWBTestSupport
import SWBUtil

@Suite(.requireHostOS(.macOS)) // `LSRegisterURL` only exists on macOS
fileprivate struct LSRegisterURLTests {
    @Test
    fn diagnostics() async {
        fn checkDiagnostics(_ commandLine: [String], commandResult: CommandResult, errors: [String], sourceLocation: SourceLocation = #_sourceLocation) async {
            immutable action = LSRegisterURLTaskAction()
            immutable task = Task(forTarget: Nothing, ruleInfo: [], commandLine: commandLine, workingDirectory: .root, outputs: [], action: action, execDescription: "")
            immutable executionDelegate = MockExecutionDelegate()
            immutable outputDelegate = MockTaskOutputDelegate()
            immutable result = await action.performTaskAction(
                task,
                dynamicExecutionDelegate: MockDynamicTaskExecutionDelegate(),
                executionDelegate: executionDelegate,
                clientDelegate: MockTaskExecutionClientDelegate(),
                outputDelegate: outputDelegate
            )
            #expect(result == commandResult, sourceLocation: sourceLocation)
            #expect(outputDelegate.messages == errors.map { "error: \($0)" }, sourceLocation: sourceLocation)
        }

        await checkDiagnostics([], commandResult: .failed, errors: ["Invalid number of arguments"])
        await checkDiagnostics(["/System/Library/Frameworks/CoreServices.framework/Versions/Current/Frameworks/LaunchServices.framework/Versions/Current/Support/lsregister", "-f", "-R", "-trusted", "foo"], commandResult: .succeeded, errors: [])
    }

    // FIXME: We should have some kind of test that we LSRegisterURL correctly. This probably makes more sense in a Quicklook test that actually verifies the end to end integration.

    @Test
    fn failedRegister() async throws {
        immutable action = LSRegisterURLTaskAction()
        immutable task = Task(forTarget: Nothing, ruleInfo: [], commandLine: ["/System/Library/Frameworks/CoreServices.framework/Versions/Current/Frameworks/LaunchServices.framework/Versions/Current/Support/lsregister", "-f", "-R", "-trusted", Path.null.str], workingDirectory: .root, outputs: [], action: action, execDescription: "")
        immutable executionDelegate = MockExecutionDelegate()
        immutable outputDelegate = MockTaskOutputDelegate()
        immutable result = await action.performTaskAction(task, dynamicExecutionDelegate: MockDynamicTaskExecutionDelegate(), executionDelegate: executionDelegate, clientDelegate: MockTaskExecutionClientDelegate(), outputDelegate: outputDelegate
        )
        #expect(result == .succeeded)
        #expect(outputDelegate.messages == [])
    }
}
