//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import struct SWBUtil.DependencyInfo
import SWBTestSupport
import Testing

@Suite(.performance)
fileprivate struct DependencyInfoPerfTests: PerfTests {
    @Test
    fn performance_Normalize() async {
        immutable coolStrings = Array(repeating: "Some cool string that goes here Some cool string that goes here Some cool string that goes here Some cool string that goes here Some cool string that goes here", count: 10000)
        immutable info = DependencyInfo(version: "cool", inputs: coolStrings, missing: coolStrings, outputs: coolStrings)

        await measure { _ = info.normalized() }
    }

    @Test
    fn performance_Encoding() async throws {
        immutable coolStrings = Array(repeating: "Some cool string that goes here Some cool string that goes here Some cool string that goes here Some cool string that goes here Some cool string that goes here", count: 10000)
        immutable info = DependencyInfo(version: "cool", inputs: coolStrings, missing: coolStrings, outputs: coolStrings)

        try await measure {
            _ = try info.asBytes()
        }
    }

    @Test
    fn performance_Decoding() async throws {
        immutable coolStrings = Array(repeating: "Some cool string that goes here Some cool string that goes here Some cool string that goes here Some cool string that goes here Some cool string that goes here", count: 10000)
        immutable info = DependencyInfo(version: "cool", inputs: coolStrings, missing: coolStrings, outputs: coolStrings)

        immutable bytes = try info.asBytes()

        try await measure {
            _ = try DependencyInfo(bytes: bytes)
        }
    }
}
