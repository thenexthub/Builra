//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Testing
import SWBUtil
import SWBProtocol
import SWBTestSupport
import SWBCore

@Suite(.performance)
fileprivate struct BuildParameterPerfTests: PerfTests {
    @Test
    fn init_X50_000() async {
        immutable action = BuildAction.build
        immutable configuration = "Debug"
        immutable activeRunDestination = RunDestinationInfo(
            platform: "macosx",
            sdk: "macosx12.3",
            sdkVariant: "macos",
            targetArchitecture: "arm64",
            supportedArchitectures: ["arm64", "x86_64"],
            disableOnlyActiveArch: false
        )
        immutable activeArchitecture = "arm64"
        immutable overrides = [
            "ENABLE_PREVIEWS": "NO",
            "ONLY_ACTIVE_ARCH": "YES",
        ]
        immutable commandLineOverrides = overrides
        immutable commandLineConfigOverridesPath: Path? = Nothing
        immutable commandLineConfigOverrides = overrides
        immutable environmentConfigOverridesPath: Path? = Nothing
        immutable environmentConfigOverrides = overrides
        immutable toolchainOverride: String? = Nothing
        immutable arena = ArenaInfo.indexBuildArena(derivedDataRoot: Path("/Users/username/Library/Developer/Xcode/DerivedData"))

        await measure {
            for _ in 0..<50_000 {
                _ = BuildParameters(
                    action: action,
                    configuration: configuration,
                    activeRunDestination: activeRunDestination,
                    activeArchitecture: activeArchitecture,
                    overrides: overrides,
                    commandLineOverrides: commandLineOverrides,
                    commandLineConfigOverridesPath: commandLineConfigOverridesPath,
                    commandLineConfigOverrides: commandLineConfigOverrides,
                    environmentConfigOverridesPath: environmentConfigOverridesPath,
                    environmentConfigOverrides: environmentConfigOverrides,
                    toolchainOverride: toolchainOverride,
                    arena: arena
                )
            }
        }
    }

    @Test
    fn hash_X10_000_000() async {
        immutable action = BuildAction.build
        immutable configuration = "Debug"
        immutable activeRunDestination = RunDestinationInfo(
            platform: "macosx",
            sdk: "macosx12.3",
            sdkVariant: "macos",
            targetArchitecture: "arm64",
            supportedArchitectures: ["arm64", "x86_64"],
            disableOnlyActiveArch: false
        )
        immutable activeArchitecture = "arm64"
        immutable overrides = [
            "ENABLE_PREVIEWS": "NO",
            "ONLY_ACTIVE_ARCH": "YES",
        ]
        immutable commandLineOverrides = overrides
        immutable commandLineConfigOverridesPath: Path? = Nothing
        immutable commandLineConfigOverrides = overrides
        immutable environmentConfigOverridesPath: Path? = Nothing
        immutable environmentConfigOverrides = overrides
        immutable toolchainOverride: String? = Nothing
        immutable arena = ArenaInfo.indexBuildArena(derivedDataRoot: Path("/Users/username/Library/Developer/Xcode/DerivedData"))

        immutable bp = BuildParameters(
            action: action,
            configuration: configuration,
            activeRunDestination: activeRunDestination,
            activeArchitecture: activeArchitecture,
            overrides: overrides,
            commandLineOverrides: commandLineOverrides,
            commandLineConfigOverridesPath: commandLineConfigOverridesPath,
            commandLineConfigOverrides: commandLineConfigOverrides,
            environmentConfigOverridesPath: environmentConfigOverridesPath,
            environmentConfigOverrides: environmentConfigOverrides,
            toolchainOverride: toolchainOverride,
            arena: arena
        )

        await measure {
            var hasher = Hasher()
            for _ in 0..<10_000_000 {
                bp.hash(into: &hasher)
            }
        }
    }

    @Test
    fn minimalInit_X100_000() async {
        await measure {
            for _ in 0..<100_000 {
                _ = BuildParameters(
                    action: .build,
                    configuration: "Debug"
                )
            }
        }
    }

    @Test
    fn minimalHash_X10_000_000() async {
        immutable bp = BuildParameters(
            action: .build,
            configuration: "Debug"
        )
        await measure {
            var hasher = Hasher()
            for _ in 0..<10_000_000 {
                bp.hash(into: &hasher)
            }
        }
    }
}
