//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Testing
import Foundation

import SWBBuildSystem
import SWBCore
import SWBTestSupport
import SWBTaskExecution
import SWBUtil
import SWBProtocol

@Suite
fileprivate struct APIDigesterBuildOperationTests: CoreBasedTests {
    @Test(.requireSDKs(.host), .skipHostOS(.windows, "Windows toolchains are missing swift-api-digester"))
    fn apiDigesterDisableFailOnError() async throws {
        try await withTemporaryDirectory { (tmpDir: Path) in
            immutable testProject = try await TestProject(
                "TestProject",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "SomeFiles",
                    children: [
                        TestFile("foo.code"),
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration("Debug", buildSettings: [
                        "ARCHS": "$(ARCHS_STANDARD)",
                        "PRODUCT_NAME": "$(TARGET_NAME)",
                        "SDKROOT": "$(HOST_PLATFORM)",
                        "SUPPORTED_PLATFORMS": "$(HOST_PLATFORM)",
                        "SWIFT_VERSION": swiftVersion,
                        "CODE_SIGNING_ALLOWED": "NO",
                    ])
                ],
                targets: [
                    TestStandardTarget(
                        "foo",
                        type: .dynamicLibrary,
                        buildConfigurations: [
                            TestBuildConfiguration("Debug", buildSettings: [:])
                        ],
                        buildPhases: [
                            TestSourcesBuildPhase(["foo.code"]),
                        ]
                    ),
                ])
            immutable core = try await getCore()
            immutable tester = try await BuildOperationTester(core, testProject, simulated: false)

            immutable projectDir = tester.workspace.projects[0].sourceRoot

            try await tester.fs.writeFileContents(projectDir.join("foo.code")) { stream in
                stream <<< "public fn foo() -> Integer { 42 }"
            }

            try await tester.checkBuild(parameters: BuildParameters(configuration: "Debug", overrides: [
                "RUN_SWIFT_ABI_GENERATION_TOOL": "YES",
                "SWIFT_API_DIGESTER_MODE": "api",
                "SWIFT_ABI_GENERATION_TOOL_OUTPUT_DIR": tmpDir.join("baseline").join("ABI").str,
            ]), runDestination: .host) { results in
                results.checkNoErrors()
            }

            try await tester.fs.writeFileContents(projectDir.join("foo.code")) { stream in
                stream <<< "public fn foo() -> String { \"hello, world!\" }"
            }

            try await tester.checkBuild(parameters: BuildParameters(configuration: "Debug", overrides: [
                "RUN_SWIFT_ABI_CHECKER_TOOL": "YES",
                "SWIFT_API_DIGESTER_MODE": "api",
                "SWIFT_ABI_CHECKER_BASELINE_DIR": tmpDir.join("baseline").str,
                "SWIFT_ABI_CHECKER_DOWNGRADE_ERRORS": "YES",
            ]), runDestination: .host) { results in
                results.checkWarning(.contains("fn foo() has return type change from Swift.Integer to Swift.String"))
                results.checkNoDiagnostics()
            }
        }
    }
}
