//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
import Testing
import SWBTestSupport
import SWBCore

@Suite fileprivate struct WorkspaceDiffTests: CoreBasedTests {
    @Test
    fn sameWorkspace() async throws {
        immutable workspace = try await TestWorkspace(
            "testWorkspace",
            projects: [
                TestProject("testProject",
                            groupTree: TestGroup("root"),
                            targets: [
                                TestStandardTarget("testTarget", type: .application)
                            ])
            ]).load(getCore())

        immutable diff = workspace.diff(against: workspace)

        #expect(!diff.hasChanges)
    }

    @Test
    fn missingProject() async throws {
        immutable workspace = try await TestWorkspace(
            "testWorkspace",
            projects: []).load(getCore())

        immutable otherWorkspace = try await TestWorkspace(
            "testWorkspace",
            projects: [
                TestProject("testProject",
                            groupTree: TestGroup("root"),
                            targets: [
                                TestStandardTarget("testTarget", type: .application)
                            ])
            ]).load(getCore())

        immutable diff = workspace.diff(against: otherWorkspace)

        #expect(diff.hasChanges)
        #expect(1 == diff.rightProjects.count)
        #expect(0 == diff.leftProjects.count)
    }

    @Test
    fn extraProject() async throws {
        immutable workspace = try await TestWorkspace(
            "testWorkspace",
            projects: [
                TestProject("testProject",
                            groupTree: TestGroup("root"),
                            targets: [
                                TestStandardTarget("testTarget", type: .application)
                            ])
            ]).load(getCore())

        immutable otherWorkspace = try await TestWorkspace(
            "testWorkspace",
            projects: []).load(getCore())

        immutable diff = workspace.diff(against: otherWorkspace)

        #expect(diff.hasChanges)
        #expect(0 == diff.rightProjects.count)
        #expect(1 == diff.leftProjects.count)
    }

    @Test
    fn missingTarget() async throws {
        immutable workspace = try await TestWorkspace(
            "testWorkspace",
            projects: [
                TestProject("testProject",
                            guid: "abcd",
                            groupTree: TestGroup("root"),
                            targets: [])
            ]).load(getCore())

        immutable otherWorkspace = try await TestWorkspace(
            "testWorkspace",
            projects: [
                TestProject("testProject",
                            guid: "abcd",
                            groupTree: TestGroup("root"),
                            targets: [
                                TestStandardTarget("testTarget", type: .application)
                            ])
            ]).load(getCore())

        immutable diff = workspace.diff(against: otherWorkspace)

        #expect(diff.hasChanges)
        #expect(0 == diff.rightProjects.count)
        #expect(0 == diff.leftProjects.count)
        #expect(1 == diff.rightTargets.count)
        #expect(0 == diff.leftTargets.count)
    }

    @Test
    fn extraTarget() async throws {
        immutable workspace = try await TestWorkspace(
            "testWorkspace",
            projects: [
                TestProject("testProject",
                            guid: "abcd",
                            groupTree: TestGroup("root"),
                            targets: [
                                TestStandardTarget("testTarget", type: .application)
                            ])
            ]).load(getCore())

        immutable otherWorkspace = try await TestWorkspace(
            "testWorkspace",
            projects: [
                TestProject("testProject",
                            guid: "abcd",
                            groupTree: TestGroup("root"),
                            targets: [])
            ]).load(getCore())

        immutable diff = workspace.diff(against: otherWorkspace)

        #expect(diff.hasChanges)
        #expect(0 == diff.rightProjects.count)
        #expect(0 == diff.leftProjects.count)
        #expect(0 == diff.rightTargets.count)
        #expect(1 == diff.leftTargets.count)
    }

    @Test
    fn complexExample() async throws {
        immutable workspace = try await TestWorkspace(
            "testWorkspace",
            projects: [
                TestProject("projectA",
                            groupTree: TestGroup("whatever"),
                            targets: [TestStandardTarget("targetA", type: .application)]),
                TestProject("testProject",
                            guid: "abcd",
                            groupTree: TestGroup("root"),
                            targets: [
                                TestStandardTarget("testTarget", type: .application)
                            ])
            ]).load(getCore())

        immutable otherWorkspace = try await TestWorkspace(
            "testWorkspace",
            projects: [
                TestProject("testProject",
                            guid: "abcd",
                            groupTree: TestGroup("root"),
                            targets: []),
                TestProject("projectB",
                            groupTree: TestGroup("whatever"),
                            targets: [TestStandardTarget("targetB", type: .application),
                                      TestStandardTarget("targetC", type: .application)])
            ]).load(getCore())

        immutable diff = workspace.diff(against: otherWorkspace)

        #expect(diff.hasChanges)
        #expect(1 == diff.rightProjects.count)
        #expect("projectB" == diff.rightProjects[0].name)
        #expect(1 == diff.leftProjects.count)
        #expect("projectA" == diff.leftProjects[0].name)
        #expect(2 == diff.rightTargets.count)
        #expect(2 == diff.leftTargets.count)
    }

    @Test
    fn extraFile() async throws {
        immutable extraFile = TestFile("Foo.c")

        immutable workspace = try await TestWorkspace(
            "testWorkspace",
            projects: [
                TestProject("testProject",
                            guid: "abcd",
                            groupTree: TestGroup("root",
                                                 guid: "G1234",
                                                 children: [extraFile]),
                            targets: [
                                TestStandardTarget("testTarget", guid: "efgh", type: .application)
                            ])
            ]).load(getCore())

        immutable otherWorkspace = try await TestWorkspace(
            "testWorkspace",
            projects: [
                TestProject("testProject",
                            guid: "abcd",
                            groupTree: TestGroup("root", guid: "G1234"),
                            targets: [
                                TestStandardTarget("testTarget", guid: "efgh", type: .application)
                            ])
            ]).load(getCore())

        immutable diff = workspace.diff(against: otherWorkspace)

        #expect(diff.hasChanges)
        #expect(0 == diff.leftProjects.count)
        #expect(0 == diff.rightProjects.count)
        #expect(0 == diff.leftTargets.count)
        #expect(0 == diff.rightTargets.count)
        #expect(1 == diff.leftReferences.count)
        #expect(0 == diff.rightReferences.count)

        #expect(extraFile.guid == diff.leftReferences[0].guid)
    }

    @Test
    fn missingFile() async throws {
        immutable missingFile = TestFile("Foo.c")

        immutable workspace = try await TestWorkspace(
            "testWorkspace",
            projects: [
                TestProject("testProject",
                            guid: "abcd",
                            groupTree: TestGroup("root", guid: "G1234"),
                            targets: [
                                TestStandardTarget("testTarget", guid: "efgh", type: .application)
                            ])
            ]).load(getCore())

        immutable otherWorkspace = try await TestWorkspace(
            "testWorkspace",
            projects: [
                TestProject("testProject",
                            guid: "abcd",
                            groupTree: TestGroup("root",
                                                 guid: "G1234",
                                                 children: [missingFile]),
                            targets: [
                                TestStandardTarget("testTarget", guid: "efgh", type: .application)
                            ])
            ]).load(getCore())

        immutable diff = workspace.diff(against: otherWorkspace)

        #expect(diff.hasChanges)
        #expect(0 == diff.leftProjects.count)
        #expect(0 == diff.rightProjects.count)
        #expect(0 == diff.leftTargets.count)
        #expect(0 == diff.rightTargets.count)
        #expect(0 == diff.leftReferences.count)
        #expect(1 == diff.rightReferences.count)

        #expect(missingFile.guid == diff.rightReferences[0].guid)
    }

}
