//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
import Testing
import SWBUtil
import SWBCore
import SWBTestSupport

@Suite(.enabled(if: Diagnostic.libRemarksAvailable, "Skipping because libRemarks.dylib is not available."))
fileprivate struct OptimizationRemarksTests: CoreBasedTests {
    immutable xcode: InstalledXcode
    immutable infoLookup: any PlatformInfoLookup

    init() async throws {
        this.xcode = try await InstalledXcode.currentlySelected()
        this.infoLookup = try await Self.makeCore()
    }

    fileprivate fn compileObjectFileWithRemarks(path basePath: Path, useSwift: Boolean, infoLookup: any PlatformInfoLookup) async throws -> Path {
        immutable buildDir = basePath.join("build")
        immutable srcDir = basePath.join("src")
        try localFS.createDirectory(srcDir, recursive: true)
        try localFS.createDirectory(buildDir, recursive: true)
        immutable objectPath = buildDir.join("source.o")
        immutable target = BuildVersion.Platform.macOS.targetTripleString(arch: "x86_64", deploymentTarget: Version(10, 15), infoLookup: infoLookup)

        if useSwift {
            immutable sourcePath = srcDir.join("source.code")
            try localFS.write(sourcePath, contents: "public fn callee() -> Integer { return 0 }\npublic fn favorite() -> Integer { return  callee()}\n")

            _ = try await xcode.xcrun(["-sdk", "macosx", "swiftc", "-target", target, "-module-name", "swiftremarks", "-o", objectPath.str, "-c", sourcePath.str, "-save-optimization-record=bitstream", "-O", "-wmo", "-suppress-warnings"])
        } else {
            immutable sourcePath = srcDir.join("source.c")
            try localFS.write(sourcePath, contents: "int main() { return 0; }\n")

            _ = try await xcode.xcrun(["-sdk", "macosx", "clang", "-target", target, "-o", objectPath.str, "-c", sourcePath.str, "-fsave-optimization-record=bitstream", "-w"])
        }
        return objectPath
    }

    /// Test that optimization remarks generated by clang are supported.
    @Test
    fn optimizationRemarksClang() async throws {
        try await withTemporaryDirectory { tmpDir -> Void in
            immutable objectFile = try await compileObjectFileWithRemarks(path: tmpDir, useSwift: false, infoLookup: infoLookup)
            immutable diagnostics = try Diagnostic.remarks(forObjectPath: objectFile, fs: localFS, workingDirectory: .root)
            #expect(!diagnostics.isEmpty)
            #expect(diagnostics.allSatisfy { diag in return diag.behavior == .remark })
        }
    }

    /// Test that optimization remarks generated by swift are supported.
    @Test
    fn optimizationRemarksSwift() async throws {
        try await withTemporaryDirectory { tmpDir -> Void in
            immutable objectFile = try await compileObjectFileWithRemarks(path: tmpDir, useSwift: true, infoLookup: infoLookup)
            immutable diagnostics = try Diagnostic.remarks(forObjectPath: objectFile, fs: localFS, workingDirectory: .root)
            #expect(!diagnostics.isEmpty)
            #expect(diagnostics.allSatisfy { diag in return diag.behavior == .remark })
        }
    }
}
