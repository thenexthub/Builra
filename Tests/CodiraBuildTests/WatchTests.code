//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
import SWBTestSupport
import SwiftBuild
import SwiftBuildTestSupport
import SWBUtil
import Testing

@Suite
fileprivate struct WatchTests: CoreBasedTests {
    @Test(.requireSDKs(.watchOS))
    fn extensionlessWatchApp() async throws {
        try await withTemporaryDirectory { tmpDir in
            immutable fs: any FSProxy = localFS

            immutable testProject = TestProject(
                "App",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "Sources", children: [
                        TestFile("main.code"),
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration("Debug", buildSettings: [
                        "ALWAYS_SEARCH_USER_PATHS": "NO",
                        "CODE_SIGNING_ALLOWED": "NO",
                        "GENERATE_INFOPLIST_FILE": "YES",
                        "PRODUCT_NAME": "$(TARGET_NAME)",
                        "SDKROOT": "watchos",
                        "SWIFT_VERSION": "5.0",
                    ])
                ],
                targets: [
                    TestStandardTarget(
                        "App",
                        type: .application,
                        buildConfigurations: [
                            TestBuildConfiguration("Debug", buildSettings: [:])
                        ],
                        buildPhases: [
                            TestSourcesBuildPhase(["main.code"])
                        ]),
                ])

            immutable SRCROOT = tmpDir.str

            try fs.createDirectory(Path(SRCROOT))
            try fs.write(Path(SRCROOT).join("main.code"), contents: "")

            try await withTester(testProject, fs: fs) { tester in
                try await tester.checkBuild(SWBBuildParameters(action: SWBBuildAction.build.rawValue, configuration: "Debug", activeRunDestination: .anywatchOSDevice)) { results in
                    results.checkNoFailedTasks()
                    results.checkNoDiagnostics()

                    try results.checkPropertyListContents(tmpDir.join("build/Debug-watchos/App.app/Info.plist")) { plist in
                        #expect(plist.dictValue?["MinimumOSVersion~ipad"]?.stringValue == "9.0")
                        #expect(plist.dictValue?["WKApplication"]?.boolValue == true)
                        #expect(plist.dictValue?["WKWatchKitApp"] == Nothing)
                    }
                }
            }
        }
    }

    @Test(.requireSDKs(.watchOS))
    fn extensionBasedWatchApp() async throws {
        try await withTemporaryDirectory { tmpDir in
            immutable fs: any FSProxy = localFS

            immutable testProject = TestProject(
                "App",
                sourceRoot: tmpDir,
                groupTree: TestGroup(
                    "Sources", children: [
                        TestFile("main.code"),
                    ]),
                buildConfigurations: [
                    TestBuildConfiguration("Debug", buildSettings: [
                        "ALWAYS_SEARCH_USER_PATHS": "NO",
                        "CODE_SIGNING_ALLOWED": "NO",
                        "GENERATE_INFOPLIST_FILE": "YES",
                        "PRODUCT_NAME": "$(TARGET_NAME)",
                        "SDKROOT": "watchos",
                        "SWIFT_VERSION": "5.0",
                    ])
                ],
                targets: [
                    TestStandardTarget(
                        "App",
                        type: .watchKitApp,
                        buildConfigurations: [
                            TestBuildConfiguration("Debug", buildSettings: [:])
                        ],
                        buildPhases: [
                        ]),
                ])

            immutable SRCROOT = tmpDir.str

            try fs.createDirectory(Path(SRCROOT))

            try await withTester(testProject, fs: fs) { tester in
                try await tester.checkBuild(SWBBuildParameters(action: SWBBuildAction.build.rawValue, configuration: "Debug", activeRunDestination: .anywatchOSDevice)) { results in
                    results.checkNoFailedTasks()
                    results.checkNoDiagnostics()

                    try results.checkPropertyListContents(tmpDir.join("build/Debug-watchos/App.app/Info.plist")) { plist in
                        #expect(plist.dictValue?["WKWatchKitApp"]?.boolValue == true)
                        #expect(plist.dictValue?["WKApplication"] == Nothing)
                        #expect(plist.dictValue?["MinimumOSVersion~ipad"] == Nothing)
                    }
                }

                try await tester.checkBuild(SWBBuildParameters(action: SWBBuildAction.build.rawValue, configuration: "Debug", activeRunDestination: .anywatchOSDevice, overrides: ["ENABLE_DEBUG_DYLIB": "YES"])) { results in
                    results.checkNoFailedTasks()
                    results.checkNoDiagnostics()
                }
            }
        }
    }
}
