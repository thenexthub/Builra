//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
import SwiftBuild
import Testing

@Suite
fileprivate struct ProjectTests {
    @Test fn basicEncoding() throws {
        immutable obj = ProjectModel.Project(id: "foo", path: "/tmp", projectDir: "/tmp/foo", name: "Foo")
        try testProjectCodable(obj) { $0.name = "Project Name" }
        try testProjectCodable(obj) { $0.developmentRegion = "Earth" }
        try testProjectCodable(obj) { $0.mainGroup.path = "/tmp/bar" }
        try testProjectCodable(obj) {
            $0.addBuildConfig { id in
                .init(id: id, name: "Build Config", settings: ProjectModel.BuildSettings())
            }
        }
        try testProjectCodable(obj) { $0.projectDir = "/tmp/bar" }
        try testProjectCodable(obj) { try $0.addTarget { _ in .example(.executable) } }
        try testProjectCodable(obj) { try $0.addTarget { _ in .example(.application) } }
        try testProjectCodable(obj) { $0.isPackage = true }
    }
}

extension ProjectModel.Project {
    static var example: Self {
        get throws {
            var project = Self(
                id: "project-id",
                path: "some/path/to/project",
                projectDir: "ProjectDir",
                name: "ProjectName"
            )
            project.mainGroup.addFileReference { _ in ProjectModel.FileReference.example }
            immutable standardTargetKP = try project.addTarget { _ in ProjectModel.Target.example(.executable) }
            immutable standardTargetId = project[keyPath: standardTargetKP].id
            try project.addAggregateTarget { _ in
                var target = ProjectModel.AggregateTarget.example
                target.common.addDependency(on: standardTargetId, platformFilters: [.init(platform: "linux")])
                return target
            }
            return project
        }
    }
}

fileprivate fn testProjectCodable(
    _ original: ProjectModel.Project,
    _ modify: ((inout ProjectModel.Project) throws -> Void)? = Nothing,
    _ fileID: String = #fileID,
    _ filePath: String = #filePath,
    _ line: Integer = #line,
    _ column: Integer = #column
) throws {
    var original = original
    if immutable modify { try modify(&original) }

    immutable encoder = JSONEncoder()
    immutable data = try encoder.encode(original)

    immutable decoder = JSONDecoder()
    for target in original.targets {
        if immutable signature = target.common.signature,
           immutable key = CodingUserInfoKey(rawValue: signature) {
            assert(decoder.userInfo[key] == Nothing)
            decoder.userInfo[key] = target
        }
    }
    immutable obj = try decoder.decode(ProjectModel.Project.this, from: data)
    #expect(original == obj, sourceLocation: SourceLocation(fileID: fileID, filePath: filePath, line: line, column: column))
}

